#!python
"""
WAFLABS CLI Tool
"""

from __future__ import print_function

import os
import sys
import time
import json
import argparse
import requests

from datetime import datetime
from yaspin import yaspin
from waflabs import waflabsapi

def main():
    """
    Main function for WAFLABS CLI Tool
    """
    ### Parse CLI arguments
    parser = argparse.ArgumentParser(
        description="WAFLABS CLI")

    parser.add_argument("--test",
                        help="test my WAF!",
                        default=False,
                        action="store_true")

    parser.add_argument("--test-definition",
                        help="path to JSON file with test definition",
                        type=str)

    parser.add_argument("--test-url",
                        help="target url for running tests",
                        type=str)

    parser.add_argument("--test-block-code",
                        help="expected block code (HTTP status code)",
                        type=int)

    parser.add_argument("--test-waf",
                        help="the WAF being tested",
                        type=str)

    parser.add_argument("--test-scope",
                        help="the scope of the test (fingerprint webcve attack bypass)",
                        default=[],
                        nargs="+")

    parser.add_argument("--poll",
                        help="poll for test results",
                        default=False,
                        action="store_true")

    results_arg = parser.add_argument("--results",
                        help="retreive test results for a given run-id",
                        default=False,
                        action="store_true")
    
    results_arg = parser.add_argument("--results-history",
                        help="retreive your test history",
                        default=False,
                        action="store_true")

    results_arg = parser.add_argument("--results-history-all",
                        help="retreive your all (company) test history",
                        default=False,
                        action="store_true")

    parser.add_argument("--run-id",
                        help="the run_id of a test",
                        type=str)
    
    parser.add_argument("--domain",
                        help="create a domain ownership record",
                        type=str)

    parser.add_argument("--domain-list",
                        help="returns list of domain ownership records",
                        default=False,
                        action="store_true")

    parser.add_argument("--domain-validate",
                        help="validate ownership of a domain",
                        type=str)

    parser.add_argument("--domain-validation-type",
                        help="validation strategy",
                        choices=['http', 'dns'])

    report_arg = parser.add_argument("--report",
                        help="returns list of domain ownership records",
                        default=False,
                        action="store_true")

    args = parser.parse_args()

    ### Get API keys
    try:
        access_id = os.environ["WAFLABS_ACCESS_ID"]
        access_key = os.environ["WAFLABS_ACCESS_KEY"]

    except KeyError as error:
        print("Environment variable not set {}".format(str(error)))
        sys.exit()

    ### Execute
    try:
        waflabs = waflabsapi.WAFLabsApi(access_id=access_id, access_key=access_key)

        if args.test:
            if args.test_definition is not None:
                if os.path.exists(args.test_definition):
                    with open(args.test_definition) as definition:
                        payload = json.loads(definition.read())
                else:
                    print("File not found {}".format(args.test_definition), file=sys.stderr)
                    sys.exit(1)
            else:
                if args.test_url is None:
                    raise argparse.ArgumentError(args.test_url , "You must provide a test URL.")

                if args.test_block_code is None:
                    raise argparse.ArgumentError(args.test_block_code , "You must provide a test block code.")

                if args.test_waf is None:
                    raise argparse.ArgumentError(args.test_waf , "You must provide the type of WAF being tested.")

                payload = {
                    "url": args.test_url,
                    "block_code": args.test_block_code,
                    "waf": args.test_waf,
                }

                if len(args.test_scope):
                    payload["scope"] = args.test_scope

            response = waflabs.testmywaf(payload)

            if "message" in response:
                print(response)
                sys.exit()

            if args.poll:
                results = poll_results(waflabs, response["run_id"])
                print(json.dumps(results))
            else:
                print(json.dumps(response))
        
        if args.results:
            if args.run_id is None:
                raise argparse.ArgumentError(results_arg, "You must provide a valid run-id.")

            results = waflabs.results(args.run_id)
            print(json.dumps(results))

        if args.results_history:
            results = waflabs.history()
            print(json.dumps(results))
        
        if args.results_history_all:
            results = waflabs.company_history()
            print(json.dumps(results))

        if args.domain is not None:
            results = waflabs.domain({"domain": args.domain})
            print(json.dumps(results))

        if args.domain_list:
            results = waflabs.domain_list()
            print(json.dumps(results))
        
        if args.domain_validate:
            if args.domain_validation_type is None:
                raise argparse.ArgumentError(results_arg, "You must provide a valid domain validation type.")

            payload = {"domain": args.domain_validate, "type": args.domain_validation_type}
            results = waflabs.domain_validate(payload)
            print(json.dumps(results))
    
        if args.report:
            if args.run_id is None:
                raise argparse.ArgumentError(report_arg, "You must provide a valid run-id.")

            results = waflabs.results(args.run_id)
            report(results)

    except argparse.ArgumentError as error:
        print("{}\n".format(error))
        parser.print_help()
    except ValueError as error:
        print(error, file=sys.stderr)
        sys.exit(1)

@yaspin(text="Polling...")
def poll_results(waflabs, run_id):
    results = waflabs.results(run_id)

    while results["status"] != "Complete":
        time.sleep(10)
        results = waflabs.results(run_id)

    return results

def report(results, destination=None, report_type="scorecard"):
    if results['status'] != "Complete":
        raise Exception("Testing incomplete, cannot generate report.")

    template = requests.get("https://waflabs.com/report.html")
    colors =  {
        "A": "#DDFFDD",
        "B": "#EEFFFF",
        "C": "#FFFFEE",
        "D": "#FFEEEE",
        "F": "#FFCCCC"
    }

    # Header
    report = template.text.replace("TIMESTAMP", datetime.fromtimestamp(results['timestamp']).strftime("%m/%d/%Y"))
    report = report.replace("URL", results['url'])
    report = report.replace("BLOCK_CODE", str(results['block_code']))
    report = report.replace("WAF_NAME", results['waf'])
    report = report.replace("SCOPE", ",".join(results['scope']))

    report = report.replace("OVERALL_GRADE", results['results']['scores']['overall']['grade'])
    report = report.replace("OVERALL_COLOR", colors[results['results']['scores']['overall']['grade']])
    report = report.replace("OVERALL_SCORE", "{0:.0%}".format(results['results']['scores']['overall']['score']))

    # Scorecard
    report = report.replace("FINGERPRINT_GRADE", results['results']['scores']['fingerprint']['grade'])
    report = report.replace("FINGERPRINT_COLOR", colors[results['results']['scores']['fingerprint']['grade']])
    report = report.replace("FINGERPRINT_SCORE", "{0:.0%}".format(results['results']['scores']['fingerprint']['score']))
    report = report.replace("WEBCVE_GRADE", results['results']['scores']['webcve']['grade'])
    report = report.replace("WEBCVE_COLOR", colors[results['results']['scores']['webcve']['grade']])
    report = report.replace("WEBCVE_SCORE", "{0:.0%}".format(results['results']['scores']['webcve']['score']))
    report = report.replace("ATTACK_GRADE", results['results']['scores']['attack']['grade'])
    report = report.replace("ATTACK_COLOR", colors[results['results']['scores']['attack']['grade']])
    report = report.replace("ATTACK_SCORE", "{0:.0%}".format(results['results']['scores']['attack']['score']))
    report = report.replace("BYPASS_GRADE", results['results']['scores']['bypass']['grade'])
    report = report.replace("BYPASS_COLOR", colors[results['results']['scores']['bypass']['grade']])
    report = report.replace("BYPASS_SCORE", "{0:.0%}".format(results['results']['scores']['bypass']['score']))

    # Fingerprint
    output = ""
    fingerprint = results['results']['details']['fingerprint']
    output = "The WAF was detected as {}.".format(fingerprint['DetectedAs'])
    if len(fingerprint['AlsoDetectedAs']):
        output += " It could also be {}.".format(",".join(fingerprint['AlsoDetectedAs']))
    report = report.replace("FINGERPRINT_RESULTS", output)

    # WebCVE
    output = ""
    webcves = results['results']['details']['webcve']

    output = '<div class="table-responsive"><table class="table table-striped table-hover"><thead><tr><th>Web CVE</th><th>CVSS</th><th>CWE</th><th>Summary</th></tr></thead><tbody>'
    for webcve in webcves:
        response = requests.get("https://cve.circl.lu/api/cve/{}".format(webcve['cve']))
        cveinfo = json.loads(response.text)
        output += "<tr>"
        output += '<td style="white-space:nowrap"><a href="https://nvd.nist.gov/vuln/detail/{}" target="_blank">{}</a></td>'.format(webcve['cve'], webcve['cve'])
        output += '<td style="white-space:nowrap">{}</td>'.format(cveinfo['cvss'])
        output += '<td style="white-space:nowrap">{}</td>'.format(cveinfo['cwe'])
        output += "<td><small>{}</small></td>".format(cveinfo['summary'])
        output += "</tr>"
    output += '</tbody></table></div>'

    report = report.replace("WEBCVE_RESULTS", output)

    # Attacks
    output = ""
    # Attack > Payloads
    payloads = results['results']['details']['attacks']['payloads']
    output += "Attack &gt; Payloads &gt; XSS"
    output += '<div class="table-responsive"><table class="table table-striped table-hover"><thead><tr><th>Status Code</th><th>Payload</th></tr></thead><tbody>'
    for payload in payloads:
        for attack in payload['xss']:
            output += "<tr>"
            output += '<td style="white-space:nowrap">{}</td>'.format(attack['status_code'])
            output += '<td><small>{}</small></td>'.format(attack['payload'])
            output += "</tr>"
    output += '</tbody></table></div>'

    output += "Attack &gt; Payloads &gt; SQLi"
    output += '<div class="table-responsive"><table class="table table-striped table-hover"><thead><tr><th>Status Code</th><th>Payload</th></tr></thead><tbody>'
    for payload in payloads:
        for attack in payload['sqli']:
            output += "<tr>"
            output += '<td style="white-space:nowrap">{}</td>'.format(attack['status_code'])
            output += '<td><small>{}</small></td>'.format(attack['payload'])
            output += "</tr>"
    output += '</tbody></table></div>'

    output += "Attack &gt; Payloads &gt; Command Injection"
    output += '<div class="table-responsive"><table class="table table-striped table-hover"><thead><tr><th>Status Code</th><th>Payload</th></tr></thead><tbody>'
    for payload in payloads:
        for attack in payload['commandinject']:
            output += "<tr>"
            output += '<td style="white-space:nowrap">{}</td>'.format(attack['status_code'])
            output += '<td><small>{}</small></td>'.format(attack['payload'])
            output += "</tr>"
    output += '</tbody></table></div>'

    output += "Attack &gt; Payloads &gt; Code Injection"
    output += '<div class="table-responsive"><table class="table table-striped table-hover"><thead><tr><th>Status Code</th><th>Payload</th></tr></thead><tbody>'
    for payload in payloads:
        for attack in payload['codeinject']:
            output += "<tr>"
            output += '<td style="white-space:nowrap">{}</td>'.format(attack['status_code'])
            output += '<td><small>{}</small></td>'.format(attack['payload'])
            output += "</tr>"
    output += '</tbody></table></div>'

    output += "Attack &gt; Payloads &gt; Traversal"
    output += '<div class="table-responsive"><table class="table table-striped table-hover"><thead><tr><th>Status Code</th><th>Payload</th></tr></thead><tbody>'
    for payload in payloads:
        for attack in payload['traversal']:
            output += "<tr>"
            output += '<td style="white-space:nowrap">{}</td>'.format(attack['status_code'])
            output += '<td><small>{}</small></td>'.format(attack['payload'])
            output += "</tr>"
    output += '</tbody></table></div>'

    output += "Attack &gt; Payloads &gt; Response Splitting"
    output += '<div class="table-responsive"><table class="table table-striped table-hover"><thead><tr><th>Status Code</th><th>Payload</th></tr></thead><tbody>'
    for payload in payloads:
        for attack in payload['responsesplit']:
            output += "<tr>"
            output += '<td style="white-space:nowrap">{}</td>'.format(attack['status_code'])
            output += '<td><small>{}</small></td>'.format(attack['payload'])
            output += "</tr>"
    output += '</tbody></table></div>'

    # Attack > Methods
    methods = results['results']['details']['attacks']['methods']

    output += "Attack &gt; Methods"
    output += '<div class="table-responsive"><table class="table table-striped table-hover"><thead><tr><th>Status Code</th><th>Method</th><th>Attack</th></tr></thead><tbody>'
    for method in methods:
        output += "<tr>"
        output += '<td style="white-space:nowrap">{}</td>'.format(method['status_code'])
        output += '<td>{}</td>'.format(method['method'])
        output += '<td>{}</td>'.format(method['attack'])
        output += "</tr>"
    output += '</tbody></table></div>'

    # Attack > Locations
    locations = results['results']['details']['attacks']['locations']

    output += "Attack &gt; Locations"
    output += '<div class="table-responsive"><table class="table table-striped table-hover"><thead><tr><th>Status Code</th><th>Location</th><th>Attack</th></tr></thead><tbody>'
    for method in locations:
        output += "<tr>"
        output += '<td style="white-space:nowrap">{}</td>'.format(method['status_code'])
        output += '<td>{}</td>'.format(method['location'])
        output += '<td>{}</td>'.format(method['attack'])
        output += "</tr>"
    output += '</tbody></table></div>'

    report = report.replace("ATTACK_RESULTS", output)

    # Bypass
    output = ""
    # Bypass > XSS
    bypasses = results['results']['details']['bypass']
    output += "Bypass &gt; XSS"
    output += '<div class="table-responsive"><table class="table table-striped table-hover"><thead><tr><th>Status Code</th><th>Payload</th></tr></thead><tbody>'
    for bypass in bypasses['xss']:
        output += "<tr>"
        output += '<td style="white-space:nowrap">{}</td>'.format(bypass['status_code'])
        output += '<td><input type="text" value="{}"></td>'.format(bypass['payload'])
        output += "</tr>"
    output += '</tbody></table></div>'

    # Bypass > SQLi
    bypasses = results['results']['details']['bypass']
    output += "Bypass &gt; SQLi"
    output += '<div class="table-responsive"><table class="table table-striped table-hover"><thead><tr><th>Status Code</th><th>Payload</th></tr></thead><tbody>'
    for bypass in bypasses['sqli']:
        output += "<tr>"
        output += '<td style="white-space:nowrap">{}</td>'.format(bypass['status_code'])
        output += '<td><code>{}</code></td>'.format(bypass['payload'])
        output += "</tr>"
    output += '</tbody></table></div>'

    # Bypass > Content-Length
    bypasses = results['results']['details']['bypass']
    output += "Bypass &gt; Content-Length"
    output += '<div class="table-responsive"><table class="table table-striped table-hover"><thead><tr><th>Status Code</th><th>Payload</th></tr></thead><tbody>'
    for bypass in bypasses['content-length']:
        output += "<tr>"
        output += '<td style="white-space:nowrap">{}</td>'.format(bypass['status_code'])
        output += '<td>{}</td>'.format(bypass['payload'])
        output += "</tr>"
    output += '</tbody></table></div>'

    report = report.replace("BYPASS_RESULTS", output)

    # Write
    print(report)


if __name__ == '__main__':
    main()
