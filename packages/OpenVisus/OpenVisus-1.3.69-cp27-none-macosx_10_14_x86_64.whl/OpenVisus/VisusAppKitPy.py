# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



import os,sys

__this_dir__=os.path.abspath(os.path.dirname(os.path.abspath(__file__)))

if not __this_dir__ in sys.path:
  sys.path.append(__this_dir__)

__bin_dir__=os.path.abspath(__this_dir__+ "/bin")
if not __bin_dir__ in sys.path:
  sys.path.append(__bin_dir__)



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _VisusAppKitPy
else:
    import _VisusAppKitPy

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _VisusAppKitPy.delete_SwigPyIterator

    def value(self):
        return _VisusAppKitPy.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _VisusAppKitPy.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _VisusAppKitPy.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _VisusAppKitPy.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _VisusAppKitPy.SwigPyIterator_equal(self, x)

    def copy(self):
        return _VisusAppKitPy.SwigPyIterator_copy(self)

    def next(self):
        return _VisusAppKitPy.SwigPyIterator_next(self)

    def __next__(self):
        return _VisusAppKitPy.SwigPyIterator___next__(self)

    def previous(self):
        return _VisusAppKitPy.SwigPyIterator_previous(self)

    def advance(self, n):
        return _VisusAppKitPy.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _VisusAppKitPy.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _VisusAppKitPy.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _VisusAppKitPy.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _VisusAppKitPy.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _VisusAppKitPy.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _VisusAppKitPy.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _VisusAppKitPy:
_VisusAppKitPy.SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _VisusAppKitPy.SHARED_PTR_DISOWN
import VisusKernelPy
import VisusDataflowPy
import VisusDbPy
import VisusNodesPy
import VisusIdxPy
import VisusGuiPy
import VisusGuiNodesPy
class AppKitModule(VisusKernelPy.VisusModule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bAttached = property(_VisusAppKitPy.AppKitModule_bAttached_get, _VisusAppKitPy.AppKitModule_bAttached_set)

    @staticmethod
    def attach():
        return _VisusAppKitPy.AppKitModule_attach()

    @staticmethod
    def detach():
        return _VisusAppKitPy.AppKitModule_detach()

    def __init__(self):
        _VisusAppKitPy.AppKitModule_swiginit(self, _VisusAppKitPy.new_AppKitModule())
    __swig_destroy__ = _VisusAppKitPy.delete_AppKitModule

# Register AppKitModule in _VisusAppKitPy:
_VisusAppKitPy.AppKitModule_swigregister(AppKitModule)
cvar = _VisusAppKitPy.cvar

def AppKitModule_attach():
    return _VisusAppKitPy.AppKitModule_attach()

def AppKitModule_detach():
    return _VisusAppKitPy.AppKitModule_detach()

class ViewerPlugin(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    viewer = property(_VisusAppKitPy.ViewerPlugin_viewer_get, _VisusAppKitPy.ViewerPlugin_viewer_set)
    __swig_destroy__ = _VisusAppKitPy.delete_ViewerPlugin

    def getPluginName(self):
        return _VisusAppKitPy.ViewerPlugin_getPluginName(self)

# Register ViewerPlugin in _VisusAppKitPy:
_VisusAppKitPy.ViewerPlugin_swigregister(ViewerPlugin)

class Viewer(VisusDataflowPy.DataflowListener):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _VisusAppKitPy.Viewer_swiginit(self, _VisusAppKitPy.new_Viewer(*args))
    __swig_destroy__ = _VisusAppKitPy.delete_Viewer

    def getTypeName(self):
        return _VisusAppKitPy.Viewer_getTypeName(self)

    def c_ptr(self):
        return _VisusAppKitPy.Viewer_c_ptr(self)

    def setMinimal(self):
        return _VisusAppKitPy.Viewer_setMinimal(self)

    def setFieldName(self, value):
        return _VisusAppKitPy.Viewer_setFieldName(self, value)

    def setScriptingCode(self, value):
        return _VisusAppKitPy.Viewer_setScriptingCode(self, value)

    def configureFromCommandLine(self, args):
        return _VisusAppKitPy.Viewer_configureFromCommandLine(self, args)

    def showLicences(self):
        return _VisusAppKitPy.Viewer_showLicences(self)

    def getDataflow(self):
        return _VisusAppKitPy.Viewer_getDataflow(self)

    def getNodes(self):
        return _VisusAppKitPy.Viewer_getNodes(self)

    def findNodeByUUID(self, uuid):
        return _VisusAppKitPy.Viewer_findNodeByUUID(self, uuid)

    def findNodeByName(self, name):
        return _VisusAppKitPy.Viewer_findNodeByName(self, name)

    def dropProcessing(self):
        return _VisusAppKitPy.Viewer_dropProcessing(self)

    def getRoot(self):
        return _VisusAppKitPy.Viewer_getRoot(self)

    def getSelection(self):
        return _VisusAppKitPy.Viewer_getSelection(self)

    def setSelection(self, node):
        return _VisusAppKitPy.Viewer_setSelection(self, node)

    def dropSelection(self):
        return _VisusAppKitPy.Viewer_dropSelection(self)

    def getAutoRefresh(self):
        return _VisusAppKitPy.Viewer_getAutoRefresh(self)

    def setAutoRefresh(self, value):
        return _VisusAppKitPy.Viewer_setAutoRefresh(self, value)

    def beginFreeTransform(self, *args):
        return _VisusAppKitPy.Viewer_beginFreeTransform(self, *args)

    def endFreeTransform(self):
        return _VisusAppKitPy.Viewer_endFreeTransform(self)

    def computeNodeToNode(self, dst, src):
        return _VisusAppKitPy.Viewer_computeNodeToNode(self, dst, src)

    def computeQueryBounds(self, query_node):
        return _VisusAppKitPy.Viewer_computeQueryBounds(self, query_node)

    def computeNodeToScreen(self, frustum, node):
        return _VisusAppKitPy.Viewer_computeNodeToScreen(self, frustum, node)

    def New(self):
        return _VisusAppKitPy.Viewer_New(self)

    def setName(self, node, value):
        return _VisusAppKitPy.Viewer_setName(self, node, value)

    def setHidden(self, node, value):
        return _VisusAppKitPy.Viewer_setHidden(self, node, value)

    def addNode(self, *args):
        return _VisusAppKitPy.Viewer_addNode(self, *args)

    def removeNode(self, node):
        return _VisusAppKitPy.Viewer_removeNode(self, node)

    def moveNode(self, dst, src, index=-1):
        return _VisusAppKitPy.Viewer_moveNode(self, dst, src, index)

    def connectPorts(self, *args):
        return _VisusAppKitPy.Viewer_connectPorts(self, *args)

    def disconnectPorts(self, _from, oport_name, iport_name, to):
        return _VisusAppKitPy.Viewer_disconnectPorts(self, _from, oport_name, iport_name, to)

    def autoConnectPorts(self):
        return _VisusAppKitPy.Viewer_autoConnectPorts(self)

    def fastRendering(self):
        return _VisusAppKitPy.Viewer_fastRendering(self)

    def setFastRendering(self, value):
        return _VisusAppKitPy.Viewer_setFastRendering(self, value)

    def reloadVisusConfig(self, bChooseAFile=False):
        return _VisusAppKitPy.Viewer_reloadVisusConfig(self, bChooseAFile)

    def setPreferences(self, value):
        return _VisusAppKitPy.Viewer_setPreferences(self, value)

    def openFile(self, url, parent=None, bShowUrlDialogIfNeeded=False):
        return _VisusAppKitPy.Viewer_openFile(self, url, parent, bShowUrlDialogIfNeeded)

    def saveFile(self, filename, bSaveHistory=False, bShowDialogs=True):
        return _VisusAppKitPy.Viewer_saveFile(self, filename, bSaveHistory, bShowDialogs)

    def openScene(self, url, parent=None, bShowUrlDialogIfNeeded=False):
        return _VisusAppKitPy.Viewer_openScene(self, url, parent, bShowUrlDialogIfNeeded)

    def saveScene(self, filename, bShowDialogs=True):
        return _VisusAppKitPy.Viewer_saveScene(self, filename, bShowDialogs)

    def takeSnapshot(self, *args):
        return _VisusAppKitPy.Viewer_takeSnapshot(self, *args)

    def editNode(self, node=None):
        return _VisusAppKitPy.Viewer_editNode(self, node)

    def setDataflow(self, dataflow):
        return _VisusAppKitPy.Viewer_setDataflow(self, dataflow)

    def getGLCamera(self):
        return _VisusAppKitPy.Viewer_getGLCamera(self)

    def refreshData(self, node=None):
        return _VisusAppKitPy.Viewer_refreshData(self, node)

    def addGLCameraNode(self, *args):
        return _VisusAppKitPy.Viewer_addGLCameraNode(self, *args)

    def guessGLCameraPosition(self, ref_=-1):
        return _VisusAppKitPy.Viewer_guessGLCameraPosition(self, ref_)

    def mirrorGLCamera(self, ref=0):
        return _VisusAppKitPy.Viewer_mirrorGLCamera(self, ref)

    def addGroupNode(self, *args):
        return _VisusAppKitPy.Viewer_addGroupNode(self, *args)

    def addModelViewNode(self, parent, bInsert=False):
        return _VisusAppKitPy.Viewer_addModelViewNode(self, parent, bInsert)

    def addDatasetNode(self, dataset, parent=None):
        return _VisusAppKitPy.Viewer_addDatasetNode(self, dataset, parent)

    def addQueryNode(self, *args):
        return _VisusAppKitPy.Viewer_addQueryNode(self, *args)

    def addKdQueryNode(self, *args):
        return _VisusAppKitPy.Viewer_addKdQueryNode(self, *args)

    def addIsoContourNode(self, parent=None, data_provider=None, isovalue=0.0):
        return _VisusAppKitPy.Viewer_addIsoContourNode(self, parent, data_provider, isovalue)

    def addRenderArrayNode(self, *args):
        return _VisusAppKitPy.Viewer_addRenderArrayNode(self, *args)

    def addKdRenderArrayNode(self, parent, data_provider=None):
        return _VisusAppKitPy.Viewer_addKdRenderArrayNode(self, parent, data_provider)

    def addScriptingNode(self, parent, data_provider=None):
        return _VisusAppKitPy.Viewer_addScriptingNode(self, parent, data_provider)

    def addCpuTransferFunctionNode(self, parent, data_provider=None):
        return _VisusAppKitPy.Viewer_addCpuTransferFunctionNode(self, parent, data_provider)

    def addPaletteNode(self, *args):
        return _VisusAppKitPy.Viewer_addPaletteNode(self, *args)

    def addStatisticsNode(self, parent, data_provider=None):
        return _VisusAppKitPy.Viewer_addStatisticsNode(self, parent, data_provider)

    def getWorldDimension(self):
        return _VisusAppKitPy.Viewer_getWorldDimension(self)

    def getWorldBounds(self):
        return _VisusAppKitPy.Viewer_getWorldBounds(self)

    def getNodeBounds(self, node, bRecursive=False):
        return _VisusAppKitPy.Viewer_getNodeBounds(self, node, bRecursive)

    def getGLCanvas(self):
        return _VisusAppKitPy.Viewer_getGLCanvas(self)

    def getTreeView(self):
        return _VisusAppKitPy.Viewer_getTreeView(self)

    def getFrameView(self):
        return _VisusAppKitPy.Viewer_getFrameView(self)

    def getLog(self):
        return _VisusAppKitPy.Viewer_getLog(self)

    def showNodeContextMenu(self, node):
        return _VisusAppKitPy.Viewer_showNodeContextMenu(self, node)

    def postRedisplay(self):
        return _VisusAppKitPy.Viewer_postRedisplay(self)

    def addDockWidget(self, *args):
        return _VisusAppKitPy.Viewer_addDockWidget(self, *args)

    def showPopupWidget(self, widget):
        return _VisusAppKitPy.Viewer_showPopupWidget(self, widget)

    def writeToObjectStream(self, ostream):
        return _VisusAppKitPy.Viewer_writeToObjectStream(self, ostream)

    def readFromObjectStream(self, ostream):
        return _VisusAppKitPy.Viewer_readFromObjectStream(self, ostream)

    def addNetRcv(self, port):
        return _VisusAppKitPy.Viewer_addNetRcv(self, port)

    def addNetSnd(self, *args):
        return _VisusAppKitPy.Viewer_addNetSnd(self, *args)

    def getPlugins(self):
        return _VisusAppKitPy.Viewer_getPlugins(self)

    def postFlushMessages(self):
        return _VisusAppKitPy.Viewer_postFlushMessages(self)

# Register Viewer in _VisusAppKitPy:
_VisusAppKitPy.Viewer_swigregister(Viewer)



