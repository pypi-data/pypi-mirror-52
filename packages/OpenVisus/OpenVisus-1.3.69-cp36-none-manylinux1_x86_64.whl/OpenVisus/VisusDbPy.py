# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



import os,sys

__this_dir__=os.path.abspath(os.path.dirname(os.path.abspath(__file__)))

if not __this_dir__ in sys.path:
  sys.path.append(__this_dir__)

__bin_dir__=os.path.abspath(__this_dir__+ "/bin")
if not __bin_dir__ in sys.path:
  sys.path.append(__bin_dir__)



from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_VisusDbPy')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_VisusDbPy')
    _VisusDbPy = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_VisusDbPy', [dirname(__file__)])
        except ImportError:
            import _VisusDbPy
            return _VisusDbPy
        try:
            _mod = imp.load_module('_VisusDbPy', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _VisusDbPy = swig_import_helper()
    del swig_import_helper
else:
    import _VisusDbPy
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _VisusDbPy.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _VisusDbPy.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _VisusDbPy.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _VisusDbPy.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _VisusDbPy.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _VisusDbPy.SwigPyIterator_equal(self, x)

    def copy(self):
        return _VisusDbPy.SwigPyIterator_copy(self)

    def next(self):
        return _VisusDbPy.SwigPyIterator_next(self)

    def __next__(self):
        return _VisusDbPy.SwigPyIterator___next__(self)

    def previous(self):
        return _VisusDbPy.SwigPyIterator_previous(self)

    def advance(self, n):
        return _VisusDbPy.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _VisusDbPy.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _VisusDbPy.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _VisusDbPy.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _VisusDbPy.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _VisusDbPy.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _VisusDbPy.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _VisusDbPy.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _VisusDbPy.SHARED_PTR_DISOWN
import VisusKernelPy
class DbModule(VisusKernelPy.VisusModule):
    __swig_setmethods__ = {}
    for _s in [VisusKernelPy.VisusModule]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DbModule, name, value)
    __swig_getmethods__ = {}
    for _s in [VisusKernelPy.VisusModule]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DbModule, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bAttached"] = _VisusDbPy.DbModule_bAttached_set
    __swig_getmethods__["bAttached"] = _VisusDbPy.DbModule_bAttached_get
    if _newclass:
        bAttached = _swig_property(_VisusDbPy.DbModule_bAttached_get, _VisusDbPy.DbModule_bAttached_set)
    if _newclass:
        attach = staticmethod(_VisusDbPy.DbModule_attach)
    else:
        attach = _VisusDbPy.DbModule_attach
    if _newclass:
        detach = staticmethod(_VisusDbPy.DbModule_detach)
    else:
        detach = _VisusDbPy.DbModule_detach

    def __init__(self):
        this = _VisusDbPy.new_DbModule()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusDbPy.delete_DbModule
    __del__ = lambda self: None
DbModule_swigregister = _VisusDbPy.DbModule_swigregister
DbModule_swigregister(DbModule)
cvar = _VisusDbPy.cvar

def DbModule_attach():
    return _VisusDbPy.DbModule_attach()
DbModule_attach = _VisusDbPy.DbModule_attach

def DbModule_detach():
    return _VisusDbPy.DbModule_detach()
DbModule_detach = _VisusDbPy.DbModule_detach

class Access(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Access, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Access, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _VisusDbPy.Access_name_set
    __swig_getmethods__["name"] = _VisusDbPy.Access_name_get
    if _newclass:
        name = _swig_property(_VisusDbPy.Access_name_get, _VisusDbPy.Access_name_set)
    __swig_setmethods__["can_read"] = _VisusDbPy.Access_can_read_set
    __swig_getmethods__["can_read"] = _VisusDbPy.Access_can_read_get
    if _newclass:
        can_read = _swig_property(_VisusDbPy.Access_can_read_get, _VisusDbPy.Access_can_read_set)
    __swig_setmethods__["can_write"] = _VisusDbPy.Access_can_write_set
    __swig_getmethods__["can_write"] = _VisusDbPy.Access_can_write_get
    if _newclass:
        can_write = _swig_property(_VisusDbPy.Access_can_write_get, _VisusDbPy.Access_can_write_set)
    __swig_setmethods__["bitsperblock"] = _VisusDbPy.Access_bitsperblock_set
    __swig_getmethods__["bitsperblock"] = _VisusDbPy.Access_bitsperblock_get
    if _newclass:
        bitsperblock = _swig_property(_VisusDbPy.Access_bitsperblock_get, _VisusDbPy.Access_bitsperblock_set)
    __swig_setmethods__["statistics"] = _VisusDbPy.Access_statistics_set
    __swig_getmethods__["statistics"] = _VisusDbPy.Access_statistics_get
    if _newclass:
        statistics = _swig_property(_VisusDbPy.Access_statistics_get, _VisusDbPy.Access_statistics_set)
    __swig_setmethods__["bVerbose"] = _VisusDbPy.Access_bVerbose_set
    __swig_getmethods__["bVerbose"] = _VisusDbPy.Access_bVerbose_get
    if _newclass:
        bVerbose = _swig_property(_VisusDbPy.Access_bVerbose_get, _VisusDbPy.Access_bVerbose_set)
    __swig_setmethods__["bDisableWriteLocks"] = _VisusDbPy.Access_bDisableWriteLocks_set
    __swig_getmethods__["bDisableWriteLocks"] = _VisusDbPy.Access_bDisableWriteLocks_get
    if _newclass:
        bDisableWriteLocks = _swig_property(_VisusDbPy.Access_bDisableWriteLocks_get, _VisusDbPy.Access_bDisableWriteLocks_set)
    __swig_destroy__ = _VisusDbPy.delete_Access
    __del__ = lambda self: None

    def getSamplesPerBlock(self):
        return _VisusDbPy.Access_getSamplesPerBlock(self)

    def getFilename(self, *args):
        return _VisusDbPy.Access_getFilename(self, *args)
    if _newclass:
        guessBlockFilenameTemplate = staticmethod(_VisusDbPy.Access_guessBlockFilenameTemplate)
    else:
        guessBlockFilenameTemplate = _VisusDbPy.Access_guessBlockFilenameTemplate

    def guessBlockFilename(self, *args):
        return _VisusDbPy.Access_guessBlockFilename(self, *args)

    def getStartAddress(self, block_id):
        return _VisusDbPy.Access_getStartAddress(self, block_id)

    def getEndAddress(self, block_id):
        return _VisusDbPy.Access_getEndAddress(self, block_id)

    def getMode(self):
        return _VisusDbPy.Access_getMode(self)

    def isReading(self):
        return _VisusDbPy.Access_isReading(self)

    def isWriting(self):
        return _VisusDbPy.Access_isWriting(self)

    def beginIO(self, mode):
        return _VisusDbPy.Access_beginIO(self, mode)

    def readBlock(self, query):
        return _VisusDbPy.Access_readBlock(self, query)

    def writeBlock(self, query):
        return _VisusDbPy.Access_writeBlock(self, query)

    def endIO(self):
        return _VisusDbPy.Access_endIO(self)

    def beginRead(self):
        return _VisusDbPy.Access_beginRead(self)

    def endRead(self):
        return _VisusDbPy.Access_endRead(self)

    def beginWrite(self):
        return _VisusDbPy.Access_beginWrite(self)

    def endWrite(self):
        return _VisusDbPy.Access_endWrite(self)

    def beginReadWrite(self):
        return _VisusDbPy.Access_beginReadWrite(self)

    def endReadWrite(self):
        return _VisusDbPy.Access_endReadWrite(self)

    def acquireWriteLock(self, query):
        return _VisusDbPy.Access_acquireWriteLock(self, query)

    def releaseWriteLock(self, query):
        return _VisusDbPy.Access_releaseWriteLock(self, query)

    def resetStatistics(self):
        return _VisusDbPy.Access_resetStatistics(self)

    def printStatistics(self):
        return _VisusDbPy.Access_printStatistics(self)

    def writeToObjectStream(self, ostream):
        return _VisusDbPy.Access_writeToObjectStream(self, ostream)

    def readFromObjectStream(self, istream):
        return _VisusDbPy.Access_readFromObjectStream(self, istream)

    def readOk(self, query):
        return _VisusDbPy.Access_readOk(self, query)

    def readFailed(self, query):
        return _VisusDbPy.Access_readFailed(self, query)

    def writeOk(self, query):
        return _VisusDbPy.Access_writeOk(self, query)

    def writeFailed(self, query):
        return _VisusDbPy.Access_writeFailed(self, query)
Access_swigregister = _VisusDbPy.Access_swigregister
Access_swigregister(Access)

def Access_guessBlockFilenameTemplate():
    return _VisusDbPy.Access_guessBlockFilenameTemplate()
Access_guessBlockFilenameTemplate = _VisusDbPy.Access_guessBlockFilenameTemplate

DoNotMergeSamples = _VisusDbPy.DoNotMergeSamples
InsertSamples = _VisusDbPy.InsertSamples
InterpolateSamples = _VisusDbPy.InterpolateSamples
class LogicSamples(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogicSamples, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LogicSamples, name)
    __repr__ = _swig_repr
    __swig_setmethods__["logic_box"] = _VisusDbPy.LogicSamples_logic_box_set
    __swig_getmethods__["logic_box"] = _VisusDbPy.LogicSamples_logic_box_get
    if _newclass:
        logic_box = _swig_property(_VisusDbPy.LogicSamples_logic_box_get, _VisusDbPy.LogicSamples_logic_box_set)
    __swig_setmethods__["nsamples"] = _VisusDbPy.LogicSamples_nsamples_set
    __swig_getmethods__["nsamples"] = _VisusDbPy.LogicSamples_nsamples_get
    if _newclass:
        nsamples = _swig_property(_VisusDbPy.LogicSamples_nsamples_get, _VisusDbPy.LogicSamples_nsamples_set)
    __swig_setmethods__["delta"] = _VisusDbPy.LogicSamples_delta_set
    __swig_getmethods__["delta"] = _VisusDbPy.LogicSamples_delta_get
    if _newclass:
        delta = _swig_property(_VisusDbPy.LogicSamples_delta_get, _VisusDbPy.LogicSamples_delta_set)
    __swig_setmethods__["shift"] = _VisusDbPy.LogicSamples_shift_set
    __swig_getmethods__["shift"] = _VisusDbPy.LogicSamples_shift_get
    if _newclass:
        shift = _swig_property(_VisusDbPy.LogicSamples_shift_get, _VisusDbPy.LogicSamples_shift_set)

    def __init__(self, *args):
        this = _VisusDbPy.new_LogicSamples(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        invalid = staticmethod(_VisusDbPy.LogicSamples_invalid)
    else:
        invalid = _VisusDbPy.LogicSamples_invalid

    def valid(self):
        return _VisusDbPy.LogicSamples_valid(self)

    def __eq__(self, other):
        return _VisusDbPy.LogicSamples___eq__(self, other)

    def __ne__(self, other):
        return _VisusDbPy.LogicSamples___ne__(self, other)

    def pixelToLogic(self, value):
        return _VisusDbPy.LogicSamples_pixelToLogic(self, value)

    def logicToPixel(self, value):
        return _VisusDbPy.LogicSamples_logicToPixel(self, value)

    def alignBox(self, value):
        return _VisusDbPy.LogicSamples_alignBox(self, value)
    if _newclass:
        merge = staticmethod(_VisusDbPy.LogicSamples_merge)
    else:
        merge = _VisusDbPy.LogicSamples_merge
    __swig_destroy__ = _VisusDbPy.delete_LogicSamples
    __del__ = lambda self: None
LogicSamples_swigregister = _VisusDbPy.LogicSamples_swigregister
LogicSamples_swigregister(LogicSamples)

def LogicSamples_invalid():
    return _VisusDbPy.LogicSamples_invalid()
LogicSamples_invalid = _VisusDbPy.LogicSamples_invalid

def LogicSamples_merge(Wsamples, Wbuffer, Rsamples, Rbuffer, merge_mode, aborted):
    return _VisusDbPy.LogicSamples_merge(Wsamples, Wbuffer, Rsamples, Rbuffer, merge_mode, aborted)
LogicSamples_merge = _VisusDbPy.LogicSamples_merge

QueryCreated = _VisusDbPy.QueryCreated
QueryRunning = _VisusDbPy.QueryRunning
QueryFailed = _VisusDbPy.QueryFailed
QueryOk = _VisusDbPy.QueryOk
class Query(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Query, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Query, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_setmethods__["dataset"] = _VisusDbPy.Query_dataset_set
    __swig_getmethods__["dataset"] = _VisusDbPy.Query_dataset_get
    if _newclass:
        dataset = _swig_property(_VisusDbPy.Query_dataset_get, _VisusDbPy.Query_dataset_set)
    __swig_setmethods__["mode"] = _VisusDbPy.Query_mode_set
    __swig_getmethods__["mode"] = _VisusDbPy.Query_mode_get
    if _newclass:
        mode = _swig_property(_VisusDbPy.Query_mode_get, _VisusDbPy.Query_mode_set)
    __swig_setmethods__["field"] = _VisusDbPy.Query_field_set
    __swig_getmethods__["field"] = _VisusDbPy.Query_field_get
    if _newclass:
        field = _swig_property(_VisusDbPy.Query_field_get, _VisusDbPy.Query_field_set)
    __swig_setmethods__["time"] = _VisusDbPy.Query_time_set
    __swig_getmethods__["time"] = _VisusDbPy.Query_time_get
    if _newclass:
        time = _swig_property(_VisusDbPy.Query_time_get, _VisusDbPy.Query_time_set)
    __swig_setmethods__["aborted"] = _VisusDbPy.Query_aborted_set
    __swig_getmethods__["aborted"] = _VisusDbPy.Query_aborted_get
    if _newclass:
        aborted = _swig_property(_VisusDbPy.Query_aborted_get, _VisusDbPy.Query_aborted_set)
    __swig_setmethods__["buffer"] = _VisusDbPy.Query_buffer_set
    __swig_getmethods__["buffer"] = _VisusDbPy.Query_buffer_get
    if _newclass:
        buffer = _swig_property(_VisusDbPy.Query_buffer_get, _VisusDbPy.Query_buffer_set)
    __swig_destroy__ = _VisusDbPy.delete_Query
    __del__ = lambda self: None

    def getNumberOfSamples(self):
        return _VisusDbPy.Query_getNumberOfSamples(self)

    def getByteSize(self):
        return _VisusDbPy.Query_getByteSize(self)

    def getStatus(self):
        return _VisusDbPy.Query_getStatus(self)

    def setStatus(self, value):
        return _VisusDbPy.Query_setStatus(self, value)

    def ok(self):
        return _VisusDbPy.Query_ok(self)

    def failed(self):
        return _VisusDbPy.Query_failed(self)

    def isRunning(self):
        return _VisusDbPy.Query_isRunning(self)

    def setRunning(self):
        return _VisusDbPy.Query_setRunning(self)

    def setOk(self):
        return _VisusDbPy.Query_setOk(self)

    def setFailed(self, *args):
        return _VisusDbPy.Query_setFailed(self, *args)

    def getLastErrorMsg(self):
        return _VisusDbPy.Query_getLastErrorMsg(self)

    def setLastErrorMsg(self, value):
        return _VisusDbPy.Query_setLastErrorMsg(self, value)

    def allocateBufferIfNeeded(self):
        return _VisusDbPy.Query_allocateBufferIfNeeded(self)
Query_swigregister = _VisusDbPy.Query_swigregister
Query_swigregister(Query)

class BlockQuery(Query):
    __swig_setmethods__ = {}
    for _s in [Query]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlockQuery, name, value)
    __swig_getmethods__ = {}
    for _s in [Query]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlockQuery, name)
    __repr__ = _swig_repr
    __swig_setmethods__["start_address"] = _VisusDbPy.BlockQuery_start_address_set
    __swig_getmethods__["start_address"] = _VisusDbPy.BlockQuery_start_address_get
    if _newclass:
        start_address = _swig_property(_VisusDbPy.BlockQuery_start_address_get, _VisusDbPy.BlockQuery_start_address_set)
    __swig_setmethods__["end_address"] = _VisusDbPy.BlockQuery_end_address_set
    __swig_getmethods__["end_address"] = _VisusDbPy.BlockQuery_end_address_get
    if _newclass:
        end_address = _swig_property(_VisusDbPy.BlockQuery_end_address_get, _VisusDbPy.BlockQuery_end_address_set)
    __swig_setmethods__["logic_samples"] = _VisusDbPy.BlockQuery_logic_samples_set
    __swig_getmethods__["logic_samples"] = _VisusDbPy.BlockQuery_logic_samples_get
    if _newclass:
        logic_samples = _swig_property(_VisusDbPy.BlockQuery_logic_samples_get, _VisusDbPy.BlockQuery_logic_samples_set)
    __swig_setmethods__["done"] = _VisusDbPy.BlockQuery_done_set
    __swig_getmethods__["done"] = _VisusDbPy.BlockQuery_done_get
    if _newclass:
        done = _swig_property(_VisusDbPy.BlockQuery_done_get, _VisusDbPy.BlockQuery_done_set)

    def __init__(self, dataset, field, time, start_address, end_address, mode, aborted):
        this = _VisusDbPy.new_BlockQuery(dataset, field, time, start_address, end_address, mode, aborted)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusDbPy.delete_BlockQuery
    __del__ = lambda self: None

    def setStatus(self, value):
        return _VisusDbPy.BlockQuery_setStatus(self, value)

    def getNumberOfSamples(self):
        return _VisusDbPy.BlockQuery_getNumberOfSamples(self)

    def getLogicBox(self):
        return _VisusDbPy.BlockQuery_getLogicBox(self)

    def getBlockNumber(self, bitsperblock):
        return _VisusDbPy.BlockQuery_getBlockNumber(self, bitsperblock)
BlockQuery_swigregister = _VisusDbPy.BlockQuery_swigregister
BlockQuery_swigregister(BlockQuery)

QueryGuessProgression = _VisusDbPy.QueryGuessProgression
QueryNoProgression = _VisusDbPy.QueryNoProgression
QueryDefaultQuality = _VisusDbPy.QueryDefaultQuality
class BoxQuery(Query):
    __swig_setmethods__ = {}
    for _s in [Query]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoxQuery, name, value)
    __swig_getmethods__ = {}
    for _s in [Query]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BoxQuery, name)
    __repr__ = _swig_repr
    __swig_setmethods__["logic_box"] = _VisusDbPy.BoxQuery_logic_box_set
    __swig_getmethods__["logic_box"] = _VisusDbPy.BoxQuery_logic_box_get
    if _newclass:
        logic_box = _swig_property(_VisusDbPy.BoxQuery_logic_box_get, _VisusDbPy.BoxQuery_logic_box_set)
    __swig_setmethods__["merge_mode"] = _VisusDbPy.BoxQuery_merge_mode_set
    __swig_getmethods__["merge_mode"] = _VisusDbPy.BoxQuery_merge_mode_get
    if _newclass:
        merge_mode = _swig_property(_VisusDbPy.BoxQuery_merge_mode_get, _VisusDbPy.BoxQuery_merge_mode_set)
    __swig_setmethods__["start_resolution"] = _VisusDbPy.BoxQuery_start_resolution_set
    __swig_getmethods__["start_resolution"] = _VisusDbPy.BoxQuery_start_resolution_get
    if _newclass:
        start_resolution = _swig_property(_VisusDbPy.BoxQuery_start_resolution_get, _VisusDbPy.BoxQuery_start_resolution_set)
    __swig_setmethods__["end_resolution"] = _VisusDbPy.BoxQuery_end_resolution_set
    __swig_getmethods__["end_resolution"] = _VisusDbPy.BoxQuery_end_resolution_get
    if _newclass:
        end_resolution = _swig_property(_VisusDbPy.BoxQuery_end_resolution_get, _VisusDbPy.BoxQuery_end_resolution_set)
    __swig_setmethods__["end_resolutions"] = _VisusDbPy.BoxQuery_end_resolutions_set
    __swig_getmethods__["end_resolutions"] = _VisusDbPy.BoxQuery_end_resolutions_get
    if _newclass:
        end_resolutions = _swig_property(_VisusDbPy.BoxQuery_end_resolutions_get, _VisusDbPy.BoxQuery_end_resolutions_set)
    __swig_setmethods__["logic_samples"] = _VisusDbPy.BoxQuery_logic_samples_set
    __swig_getmethods__["logic_samples"] = _VisusDbPy.BoxQuery_logic_samples_get
    if _newclass:
        logic_samples = _swig_property(_VisusDbPy.BoxQuery_logic_samples_get, _VisusDbPy.BoxQuery_logic_samples_set)

    def __init__(self, *args):
        this = _VisusDbPy.new_BoxQuery(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusDbPy.delete_BoxQuery
    __del__ = lambda self: None

    def getNumberOfSamples(self):
        return _VisusDbPy.BoxQuery_getNumberOfSamples(self)

    def getCurrentResolution(self):
        return _VisusDbPy.BoxQuery_getCurrentResolution(self)

    def setCurrentResolution(self, value):
        return _VisusDbPy.BoxQuery_setCurrentResolution(self, value)

    def getEndResolution(self):
        return _VisusDbPy.BoxQuery_getEndResolution(self)

    def setResolutionRange(self, A, B):
        return _VisusDbPy.BoxQuery_setResolutionRange(self, A, B)

    def canExecute(self):
        return _VisusDbPy.BoxQuery_canExecute(self)

    def mergeWith(self, other, aborted):
        return _VisusDbPy.BoxQuery_mergeWith(self, other, aborted)
BoxQuery_swigregister = _VisusDbPy.BoxQuery_swigregister
BoxQuery_swigregister(BoxQuery)

class PointQuery(Query):
    __swig_setmethods__ = {}
    for _s in [Query]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PointQuery, name, value)
    __swig_getmethods__ = {}
    for _s in [Query]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PointQuery, name)
    __repr__ = _swig_repr
    __swig_setmethods__["end_resolution"] = _VisusDbPy.PointQuery_end_resolution_set
    __swig_getmethods__["end_resolution"] = _VisusDbPy.PointQuery_end_resolution_get
    if _newclass:
        end_resolution = _swig_property(_VisusDbPy.PointQuery_end_resolution_get, _VisusDbPy.PointQuery_end_resolution_set)
    __swig_setmethods__["logic_position"] = _VisusDbPy.PointQuery_logic_position_set
    __swig_getmethods__["logic_position"] = _VisusDbPy.PointQuery_logic_position_get
    if _newclass:
        logic_position = _swig_property(_VisusDbPy.PointQuery_logic_position_get, _VisusDbPy.PointQuery_logic_position_set)
    __swig_setmethods__["points"] = _VisusDbPy.PointQuery_points_set
    __swig_getmethods__["points"] = _VisusDbPy.PointQuery_points_get
    if _newclass:
        points = _swig_property(_VisusDbPy.PointQuery_points_get, _VisusDbPy.PointQuery_points_set)

    def __init__(self, *args):
        this = _VisusDbPy.new_PointQuery(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusDbPy.delete_PointQuery
    __del__ = lambda self: None

    def getNumberOfSamples(self):
        return _VisusDbPy.PointQuery_getNumberOfSamples(self)

    def setPoints(self, nsamples):
        return _VisusDbPy.PointQuery_setPoints(self, nsamples)
PointQuery_swigregister = _VisusDbPy.PointQuery_swigregister
PointQuery_swigregister(PointQuery)

DatasetBitmaskMaxLen = _VisusDbPy.DatasetBitmaskMaxLen
class DatasetBitmask(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatasetBitmask, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DatasetBitmask, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _VisusDbPy.new_DatasetBitmask(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        guess = staticmethod(_VisusDbPy.DatasetBitmask_guess)
    else:
        guess = _VisusDbPy.DatasetBitmask_guess
    if _newclass:
        invalid = staticmethod(_VisusDbPy.DatasetBitmask_invalid)
    else:
        invalid = _VisusDbPy.DatasetBitmask_invalid

    def empty(self):
        return _VisusDbPy.DatasetBitmask_empty(self)

    def valid(self):
        return _VisusDbPy.DatasetBitmask_valid(self)

    def getMaxResolution(self):
        return _VisusDbPy.DatasetBitmask_getMaxResolution(self)

    def getPointDim(self):
        return _VisusDbPy.DatasetBitmask_getPointDim(self)

    def getPow2Dims(self):
        return _VisusDbPy.DatasetBitmask_getPow2Dims(self)

    def getPow2Box(self):
        return _VisusDbPy.DatasetBitmask_getPow2Box(self)

    def __getitem__(self, I):
        return _VisusDbPy.DatasetBitmask___getitem__(self, I)

    def __eq__(self, other):
        return _VisusDbPy.DatasetBitmask___eq__(self, other)

    def __ne__(self, other):
        return _VisusDbPy.DatasetBitmask___ne__(self, other)

    def deinterleave(self, z, max_resolution):
        return _VisusDbPy.DatasetBitmask_deinterleave(self, z, max_resolution)

    def toString(self):
        return _VisusDbPy.DatasetBitmask_toString(self)
    if _newclass:
        add = staticmethod(_VisusDbPy.DatasetBitmask_add)
    else:
        add = _VisusDbPy.DatasetBitmask_add
    __swig_destroy__ = _VisusDbPy.delete_DatasetBitmask
    __del__ = lambda self: None
DatasetBitmask_swigregister = _VisusDbPy.DatasetBitmask_swigregister
DatasetBitmask_swigregister(DatasetBitmask)

def DatasetBitmask_guess(dims, makeRegularAsSoonAsPossible=True):
    return _VisusDbPy.DatasetBitmask_guess(dims, makeRegularAsSoonAsPossible)
DatasetBitmask_guess = _VisusDbPy.DatasetBitmask_guess

def DatasetBitmask_invalid():
    return _VisusDbPy.DatasetBitmask_invalid()
DatasetBitmask_invalid = _VisusDbPy.DatasetBitmask_invalid

def DatasetBitmask_add(a, b):
    return _VisusDbPy.DatasetBitmask_add(a, b)
DatasetBitmask_add = _VisusDbPy.DatasetBitmask_add

class DatasetTimesteps(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatasetTimesteps, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DatasetTimesteps, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _VisusDbPy.new_DatasetTimesteps(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusDbPy.delete_DatasetTimesteps
    __del__ = lambda self: None
    if _newclass:
        star = staticmethod(_VisusDbPy.DatasetTimesteps_star)
    else:
        star = _VisusDbPy.DatasetTimesteps_star

    def clear(self):
        return _VisusDbPy.DatasetTimesteps_clear(self)

    def empty(self):
        return _VisusDbPy.DatasetTimesteps_empty(self)

    def size(self):
        return _VisusDbPy.DatasetTimesteps_size(self)

    def getAt(self, I):
        return _VisusDbPy.DatasetTimesteps_getAt(self, I)

    def __eq__(self, other):
        return _VisusDbPy.DatasetTimesteps___eq__(self, other)

    def __ne__(self, other):
        return _VisusDbPy.DatasetTimesteps___ne__(self, other)

    def containsTimestep(self, t):
        return _VisusDbPy.DatasetTimesteps_containsTimestep(self, t)

    def addTimesteps(self, *args):
        return _VisusDbPy.DatasetTimesteps_addTimesteps(self, *args)

    def addTimestep(self, t):
        return _VisusDbPy.DatasetTimesteps_addTimestep(self, t)

    def getDefault(self):
        return _VisusDbPy.DatasetTimesteps_getDefault(self)

    def getMin(self):
        return _VisusDbPy.DatasetTimesteps_getMin(self)

    def getMax(self):
        return _VisusDbPy.DatasetTimesteps_getMax(self)

    def getRange(self):
        return _VisusDbPy.DatasetTimesteps_getRange(self)

    def asVector(self):
        return _VisusDbPy.DatasetTimesteps_asVector(self)

    def toString(self):
        return _VisusDbPy.DatasetTimesteps_toString(self)

    def writeToObjectStream(self, ostream):
        return _VisusDbPy.DatasetTimesteps_writeToObjectStream(self, ostream)

    def readFromObjectStream(self, istream):
        return _VisusDbPy.DatasetTimesteps_readFromObjectStream(self, istream)
DatasetTimesteps_swigregister = _VisusDbPy.DatasetTimesteps_swigregister
DatasetTimesteps_swigregister(DatasetTimesteps)

def DatasetTimesteps_star():
    return _VisusDbPy.DatasetTimesteps_star()
DatasetTimesteps_star = _VisusDbPy.DatasetTimesteps_star

class DatasetFilter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatasetFilter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DatasetFilter, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _VisusDbPy.delete_DatasetFilter
    __del__ = lambda self: None

    def getDataset(self):
        return _VisusDbPy.DatasetFilter_getDataset(self)

    def setNeedExtraComponent(self, value):
        return _VisusDbPy.DatasetFilter_setNeedExtraComponent(self, value)

    def doesNeedExtraComponent(self):
        return _VisusDbPy.DatasetFilter_doesNeedExtraComponent(self)

    def getName(self):
        return _VisusDbPy.DatasetFilter_getName(self)

    def getSize(self):
        return _VisusDbPy.DatasetFilter_getSize(self)

    def getDType(self):
        return _VisusDbPy.DatasetFilter_getDType(self)

    def getFilterStep(self, H):
        return _VisusDbPy.DatasetFilter_getFilterStep(self, H)

    def dropExtraComponentIfExists(self, src):
        return _VisusDbPy.DatasetFilter_dropExtraComponentIfExists(self, src)

    def computeFilter(self, *args):
        return _VisusDbPy.DatasetFilter_computeFilter(self, *args)
DatasetFilter_swigregister = _VisusDbPy.DatasetFilter_swigregister
DatasetFilter_swigregister(DatasetFilter)

class KdQueryMode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KdQueryMode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KdQueryMode, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    NotSpecified = _VisusDbPy.KdQueryMode_NotSpecified
    UseBlockQuery = _VisusDbPy.KdQueryMode_UseBlockQuery
    UseBoxQuery = _VisusDbPy.KdQueryMode_UseBoxQuery
    if _newclass:
        fromString = staticmethod(_VisusDbPy.KdQueryMode_fromString)
    else:
        fromString = _VisusDbPy.KdQueryMode_fromString
    if _newclass:
        toString = staticmethod(_VisusDbPy.KdQueryMode_toString)
    else:
        toString = _VisusDbPy.KdQueryMode_toString
    __swig_destroy__ = _VisusDbPy.delete_KdQueryMode
    __del__ = lambda self: None
KdQueryMode_swigregister = _VisusDbPy.KdQueryMode_swigregister
KdQueryMode_swigregister(KdQueryMode)

def KdQueryMode_fromString(value):
    return _VisusDbPy.KdQueryMode_fromString(value)
KdQueryMode_fromString = _VisusDbPy.KdQueryMode_fromString

def KdQueryMode_toString(value):
    return _VisusDbPy.KdQueryMode_toString(value)
KdQueryMode_toString = _VisusDbPy.KdQueryMode_toString

class Dataset(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Dataset, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Dataset, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_setmethods__["color"] = _VisusDbPy.Dataset_color_set
    __swig_getmethods__["color"] = _VisusDbPy.Dataset_color_get
    if _newclass:
        color = _swig_property(_VisusDbPy.Dataset_color_get, _VisusDbPy.Dataset_color_set)
    __swig_setmethods__["down_datasets"] = _VisusDbPy.Dataset_down_datasets_set
    __swig_getmethods__["down_datasets"] = _VisusDbPy.Dataset_down_datasets_get
    if _newclass:
        down_datasets = _swig_property(_VisusDbPy.Dataset_down_datasets_get, _VisusDbPy.Dataset_down_datasets_set)
    __swig_setmethods__["logic_to_LOGIC"] = _VisusDbPy.Dataset_logic_to_LOGIC_set
    __swig_getmethods__["logic_to_LOGIC"] = _VisusDbPy.Dataset_logic_to_LOGIC_get
    if _newclass:
        logic_to_LOGIC = _swig_property(_VisusDbPy.Dataset_logic_to_LOGIC_get, _VisusDbPy.Dataset_logic_to_LOGIC_set)
    __swig_setmethods__["annotations"] = _VisusDbPy.Dataset_annotations_set
    __swig_getmethods__["annotations"] = _VisusDbPy.Dataset_annotations_get
    if _newclass:
        annotations = _swig_property(_VisusDbPy.Dataset_annotations_get, _VisusDbPy.Dataset_annotations_set)
    __swig_destroy__ = _VisusDbPy.delete_Dataset
    __del__ = lambda self: None

    def getTypeName(self):
        return _VisusDbPy.Dataset_getTypeName(self)

    def clone(self):
        return _VisusDbPy.Dataset_clone(self)
    if _newclass:
        copyDataset = staticmethod(_VisusDbPy.Dataset_copyDataset)
    else:
        copyDataset = _VisusDbPy.Dataset_copyDataset

    def valid(self):
        return _VisusDbPy.Dataset_valid(self)

    def invalidate(self):
        return _VisusDbPy.Dataset_invalidate(self)

    def getUrl(self):
        return _VisusDbPy.Dataset_getUrl(self)

    def setUrl(self, value):
        return _VisusDbPy.Dataset_setUrl(self, value)

    def isServerMode(self):
        return _VisusDbPy.Dataset_isServerMode(self)

    def setServerMode(self, value):
        return _VisusDbPy.Dataset_setServerMode(self, value)

    def getTimesteps(self):
        return _VisusDbPy.Dataset_getTimesteps(self)

    def setTimesteps(self, value):
        return _VisusDbPy.Dataset_setTimesteps(self, value)

    def getConfig(self):
        return _VisusDbPy.Dataset_getConfig(self)

    def setConfig(self, value):
        return _VisusDbPy.Dataset_setConfig(self, value)

    def getDefaultTime(self):
        return _VisusDbPy.Dataset_getDefaultTime(self)

    def getAccessConfigs(self):
        return _VisusDbPy.Dataset_getAccessConfigs(self)

    def getDefaultAccessConfig(self):
        return _VisusDbPy.Dataset_getDefaultAccessConfig(self)

    def getKdQueryMode(self):
        return _VisusDbPy.Dataset_getKdQueryMode(self)

    def setKdQueryMode(self, value):
        return _VisusDbPy.Dataset_setKdQueryMode(self, value)

    def getDefaultField(self):
        return _VisusDbPy.Dataset_getDefaultField(self)

    def getDefaultScene(self):
        return _VisusDbPy.Dataset_getDefaultScene(self)

    def setDefaultScene(self, value):
        return _VisusDbPy.Dataset_setDefaultScene(self, value)

    def getDatasetBody(self):
        return _VisusDbPy.Dataset_getDatasetBody(self)

    def setDatasetBody(self, value):
        return _VisusDbPy.Dataset_setDatasetBody(self, value)

    def getDatasetInfos(self):
        return _VisusDbPy.Dataset_getDatasetInfos(self)

    def clearFields(self):
        return _VisusDbPy.Dataset_clearFields(self)

    def getFields(self):
        return _VisusDbPy.Dataset_getFields(self)

    def addField(self, *args):
        return _VisusDbPy.Dataset_addField(self, *args)

    def getFieldByNameThrowEx(self, name):
        return _VisusDbPy.Dataset_getFieldByNameThrowEx(self, name)

    def getFieldByName(self, name):
        return _VisusDbPy.Dataset_getFieldByName(self, name)

    def getPointDim(self):
        return _VisusDbPy.Dataset_getPointDim(self)

    def getBitmask(self):
        return _VisusDbPy.Dataset_getBitmask(self)

    def setBitmask(self, value):
        return _VisusDbPy.Dataset_setBitmask(self, value)

    def getLogicBox(self):
        return _VisusDbPy.Dataset_getLogicBox(self)

    def setLogicBox(self, value):
        return _VisusDbPy.Dataset_setLogicBox(self, value)

    def getDatasetBounds(self):
        return _VisusDbPy.Dataset_getDatasetBounds(self)

    def setDatasetBounds(self, value):
        return _VisusDbPy.Dataset_setDatasetBounds(self, value)

    def logicToPhysic(self, *args):
        return _VisusDbPy.Dataset_logicToPhysic(self, *args)

    def physicToLogic(self, *args):
        return _VisusDbPy.Dataset_physicToLogic(self, *args)

    def logicToScreen(self, physic_to_screen):
        return _VisusDbPy.Dataset_logicToScreen(self, physic_to_screen)

    def physicToScreen(self, logic_to_screen):
        return _VisusDbPy.Dataset_physicToScreen(self, logic_to_screen)

    def getDefaultBitsPerBlock(self):
        return _VisusDbPy.Dataset_getDefaultBitsPerBlock(self)

    def setDefaultBitsPerBlock(self, value):
        return _VisusDbPy.Dataset_setDefaultBitsPerBlock(self, value)

    def getTotalNumberOfBlocks(self):
        return _VisusDbPy.Dataset_getTotalNumberOfBlocks(self)

    def getMaxResolution(self):
        return _VisusDbPy.Dataset_getMaxResolution(self)

    def getLevelSamples(self, H):
        return _VisusDbPy.Dataset_getLevelSamples(self, H)

    def getAddressRangeSamples(self, start_address, end_address):
        return _VisusDbPy.Dataset_getAddressRangeSamples(self, start_address, end_address)

    def openFromUrl(self, url):
        return _VisusDbPy.Dataset_openFromUrl(self, url)

    def compressDataset(self, compression):
        return _VisusDbPy.Dataset_compressDataset(self, compression)

    def getInnerDatasets(self):
        return _VisusDbPy.Dataset_getInnerDatasets(self)

    def guessEndResolutions(self, *args):
        return _VisusDbPy.Dataset_guessEndResolutions(self, *args)

    def createAccess(self, *args):
        return _VisusDbPy.Dataset_createAccess(self, *args)

    def createAccessForBlockQuery(self, *args):
        return _VisusDbPy.Dataset_createAccessForBlockQuery(self, *args)

    def createRamAccess(self, available, can_read=True, can_write=True):
        return _VisusDbPy.Dataset_createRamAccess(self, available, can_read, can_write)

    def executeBlockQuery(self, access, query):
        return _VisusDbPy.Dataset_executeBlockQuery(self, access, query)

    def executeBlockQueryAndWait(self, access, query):
        return _VisusDbPy.Dataset_executeBlockQueryAndWait(self, access, query)

    def convertBlockQueryToRowMajor(self, block_query):
        return _VisusDbPy.Dataset_convertBlockQueryToRowMajor(self, block_query)

    def createFilter(self, field):
        return _VisusDbPy.Dataset_createFilter(self, field)

    def nextQuery(self, query):
        return _VisusDbPy.Dataset_nextQuery(self, query)

    def mergeBoxQueryWithBlock(self, query, block_query):
        return _VisusDbPy.Dataset_mergeBoxQueryWithBlock(self, query, block_query)

    def createBoxQueryRequest(self, query):
        return _VisusDbPy.Dataset_createBoxQueryRequest(self, query)

    def executeBoxQueryOnServer(self, query):
        return _VisusDbPy.Dataset_executeBoxQueryOnServer(self, query)

    def guessPointQueryNumberOfSamples(self, logic_to_screen, logic_position, end_resolution):
        return _VisusDbPy.Dataset_guessPointQueryNumberOfSamples(self, logic_to_screen, logic_position, end_resolution)

    def beginQuery(self, *args):
        return _VisusDbPy.Dataset_beginQuery(self, *args)

    def executeQuery(self, *args):
        return _VisusDbPy.Dataset_executeQuery(self, *args)

    def createPointQueryRequest(self, query):
        return _VisusDbPy.Dataset_createPointQueryRequest(self, query)

    def executePointQueryOnServer(self, query):
        return _VisusDbPy.Dataset_executePointQueryOnServer(self, query)

    def generateTiles(self, TileSize):
        return _VisusDbPy.Dataset_generateTiles(self, TileSize)

    def readFullResolutionData(self, *args):
        return _VisusDbPy.Dataset_readFullResolutionData(self, *args)

    def writeFullResolutionData(self, *args):
        return _VisusDbPy.Dataset_writeFullResolutionData(self, *args)

    def extractLevelImage(self, access, field, time, H):
        return _VisusDbPy.Dataset_extractLevelImage(self, access, field, time, H)

    def toString(self):
        return _VisusDbPy.Dataset_toString(self)

    def writeToObjectStream(self, ostream):
        return _VisusDbPy.Dataset_writeToObjectStream(self, ostream)

    def readFromObjectStream(self, istream):
        return _VisusDbPy.Dataset_readFromObjectStream(self, istream)
Dataset_swigregister = _VisusDbPy.Dataset_swigregister
Dataset_swigregister(Dataset)

def Dataset_copyDataset(Dvf, Daccess, Dfield, Dtime, Svf, Saccess, Sfield, Stime):
    return _VisusDbPy.Dataset_copyDataset(Dvf, Daccess, Dfield, Dtime, Svf, Saccess, Sfield, Stime)
Dataset_copyDataset = _VisusDbPy.Dataset_copyDataset

class DatasetFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatasetFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DatasetFactory, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        getSingleton = staticmethod(_VisusDbPy.DatasetFactory_getSingleton)
    else:
        getSingleton = _VisusDbPy.DatasetFactory_getSingleton
    if _newclass:
        allocSingleton = staticmethod(_VisusDbPy.DatasetFactory_allocSingleton)
    else:
        allocSingleton = _VisusDbPy.DatasetFactory_allocSingleton
    if _newclass:
        releaseSingleton = staticmethod(_VisusDbPy.DatasetFactory_releaseSingleton)
    else:
        releaseSingleton = _VisusDbPy.DatasetFactory_releaseSingleton

    def registerDatasetType(self, extension, TypeName, createInstance):
        return _VisusDbPy.DatasetFactory_registerDatasetType(self, extension, TypeName, createInstance)

    def getDatasetTypeNameFromExtension(self, extension):
        return _VisusDbPy.DatasetFactory_getDatasetTypeNameFromExtension(self, extension)

    def createInstance(self, TypeName):
        return _VisusDbPy.DatasetFactory_createInstance(self, TypeName)
    __swig_destroy__ = _VisusDbPy.delete_DatasetFactory
    __del__ = lambda self: None
DatasetFactory_swigregister = _VisusDbPy.DatasetFactory_swigregister
DatasetFactory_swigregister(DatasetFactory)

def DatasetFactory_getSingleton():
    return _VisusDbPy.DatasetFactory_getSingleton()
DatasetFactory_getSingleton = _VisusDbPy.DatasetFactory_getSingleton

def DatasetFactory_allocSingleton():
    return _VisusDbPy.DatasetFactory_allocSingleton()
DatasetFactory_allocSingleton = _VisusDbPy.DatasetFactory_allocSingleton

def DatasetFactory_releaseSingleton():
    return _VisusDbPy.DatasetFactory_releaseSingleton()
DatasetFactory_releaseSingleton = _VisusDbPy.DatasetFactory_releaseSingleton


def LoadDatasetEx(name, config):
    return _VisusDbPy.LoadDatasetEx(name, config)
LoadDatasetEx = _VisusDbPy.LoadDatasetEx

def LoadDataset(url):
    return _VisusDbPy.LoadDataset(url)
LoadDataset = _VisusDbPy.LoadDataset
class ModVisus(VisusKernelPy.NetServerModule):
    __swig_setmethods__ = {}
    for _s in [VisusKernelPy.NetServerModule]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModVisus, name, value)
    __swig_getmethods__ = {}
    for _s in [VisusKernelPy.NetServerModule]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModVisus, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _VisusDbPy.new_ModVisus()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusDbPy.delete_ModVisus
    __del__ = lambda self: None

    def configureDatasets(self, *args):
        return _VisusDbPy.ModVisus_configureDatasets(self, *args)

    def handleRequest(self, request):
        return _VisusDbPy.ModVisus_handleRequest(self, request)
ModVisus_swigregister = _VisusDbPy.ModVisus_swigregister
ModVisus_swigregister(ModVisus)

# This file is compatible with both classic and new-style classes.


