#!python

# The MIT License (MIT)
#
# Copyright (c) 2019 Caian Benedicto <caian@ggaunicamp.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.

import sys, os, base64

_examples = {
    'getting-started': {
        'main.cpp': 'LyoKICogVGhlIE1JVCBMaWNlbnNlIChNSVQpCiAqCiAqIENvcHlyaWdodCAoYykgMjAxNiBDYWlhbiBCZW5lZGljdG8gPGNhaWFuQGdnYXVuaWNhbXAuY29tPgogKgogKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5IAogKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSAiU29mdHdhcmUiKSwgdG8gCiAqIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIAogKiByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCAKICogYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIAogKiBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOgogKiAKICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gCiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLgogKiAKICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICJBUyBJUyIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1IgCiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLCAKICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgCiAqIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIAogKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyAKICogRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyAKICogSU4gVEhFIFNPRlRXQVJFLgogKi8KCgovLyBUaGlzIGRlZmluZSBlbmFibGVzIHRoZSBDKysgd3JhcHBpbmcgY29kZSBhcm91bmQgdGhlIEMgQVBJLCBpdCBtdXN0IGJlIHVzZWQKLy8gb25seSBvbmNlIHBlciBDKysgbW9kdWxlLgojZGVmaW5lIFNQSVRaX0VOVFJZX1BPSU5UCgovLyBTcGl0eiBzZXJpYWwgZGVidWcgZW5hYmxlcyBhIFNwaXR6LWNvbXBsaWFudCBtYWluIGZ1bmN0aW9uIHRvIGFsbG93IAovLyB0aGUgbW9kdWxlIHRvIHJ1biBhcyBhbiBleGVjdXRhYmxlIGZvciB0ZXN0aW5nIHB1cnBvc2VzLgovLyAjZGVmaW5lIFNQSVRaX1NFUklBTF9ERUJVRwoKI2luY2x1ZGUgPHNwaXR6L3NwaXR6LmhwcD4KCiNpbmNsdWRlIDxpb3N0cmVhbT4KCi8vIFRoaXMgY2xhc3MgY3JlYXRlcyB0YXNrcy4KY2xhc3Mgam9iX21hbmFnZXIgOiBwdWJsaWMgc3BpdHo6OmpvYl9tYW5hZ2VyCnsKcHVibGljOgogICAgam9iX21hbmFnZXIoaW50IGFyZ2MsIGNvbnN0IGNoYXIgKmFyZ3ZbXSwgc3BpdHo6OmlzdHJlYW0mIGpvYmluZm8pCiAgICB7CiAgICAgICAgc3RkOjpjb3V0IDw8ICJbSk1dIEpvYiBtYW5hZ2VyIGNyZWF0ZWQuIiA8PCBzdGQ6OmVuZGw7CiAgICB9CiAgICAKICAgIGJvb2wgbmV4dF90YXNrKGNvbnN0IHNwaXR6OjpwdXNoZXImIHRhc2spCiAgICB7CiAgICAgICAgc3BpdHo6Om9zdHJlYW0gbzsKICAgICAgICAgICAgICAgIAogICAgICAgIC8vIFNlcmlhbGl6ZSB0aGUgdGFzayBpbnRvIGEgYmluYXJ5IHN0cmVhbQogICAgICAgIC8vIC4uLgoKICAgICAgICBzdGQ6OmNvdXQgPDwgIltKTV0gVGFzayBnZW5lcmF0ZWQuIiA8PCBzdGQ6OmVuZGw7CiAgICAgICAgCiAgICAgICAgLy8gU2VuZCB0aGUgdGFzayB0byB0aGUgU3BpdHogcnVudGltZQogICAgICAgIHRhc2sucHVzaChvKTsKICAgICAgICAKICAgICAgICAvLyBSZXR1cm4gdHJ1ZSB1bnRpbCBmaW5pc2hlZCBjcmVhdGluZyB0YXNrcwoKICAgICAgICBzdGQ6OmNvdXQgPDwgIltKTV0gVGhlIG1vZHVsZSB3aWxsIHJ1biBmb3JldmVyIHVudGlsICIKICAgICAgICAgICAgInlvdSBhZGQgYSByZXR1cm4gZmFsc2UhIiA8PCBzdGQ6OmVuZGw7CgogICAgICAgIHJldHVybiB0cnVlOwogICAgfQogICAgCiAgICB+am9iX21hbmFnZXIoKQogICAgewogICAgfQp9OwoKLy8gVGhpcyBjbGFzcyBleGVjdXRlcyB0YXNrcywgcHJlZmVyYWJseSB3aXRob3V0IG1vZGlmeWluZyBpdHMgaW50ZXJuYWwgc3RhdGUKLy8gYmVjYXVzZSB0aGlzIGNhbiBsZWFkIHRvIGEgYnJlYWsgb2YgaWRlbXBvdGVuY2UgYmV0d2VlbiB0YXNrcy4gVGhlICdydW4nCi8vIG1ldGhvZCB3aWxsIG5vdCBpbXBvc2UgYSAnY29uc3QnIGJlaGF2aW9yIHRvIGFsbG93IGxpYnJhcmllcyB0aGF0IHJlbHkgCi8vIG9uIGNoYW5naW5nIGl0cyBpbnRlcm5hbCBzdGF0ZSwgZm9yIGluc3RhbmNlLCBPcGVuQ0wgKHNlZSBjbHBpIGV4YW1wbGUpLgpjbGFzcyB3b3JrZXIgOiBwdWJsaWMgc3BpdHo6Ondvcmtlcgp7ICAgIApwdWJsaWM6CiAgICB3b3JrZXIoaW50IGFyZ2MsIGNvbnN0IGNoYXIgKmFyZ3ZbXSkKICAgIHsKICAgICAgICBzdGQ6OmNvdXQgPDwgIltXS10gV29ya2VyIGNyZWF0ZWQuIiA8PCBzdGQ6OmVuZGw7CiAgICB9CiAgICAKICAgIGludCBydW4oc3BpdHo6OmlzdHJlYW0mIHRhc2ssIGNvbnN0IHNwaXR6OjpwdXNoZXImIHJlc3VsdCkKICAgIHsKICAgICAgICAvLyBCaW5hcnkgc3RyZWFtIHVzZWQgdG8gc3RvcmUgdGhlIG91dHB1dAogICAgICAgIHNwaXR6Ojpvc3RyZWFtIG87CiAgICAgICAgCiAgICAgICAgLy8gRGVzZXJpYWxpemUgdGhlIHRhc2ssIHByb2Nlc3MgaXQgYW5kIHNlcmlhbGl6ZSB0aGUgcmVzdWx0CiAgICAgICAgLy8gLi4uCiAgICAgICAgCiAgICAgICAgLy8gU2VuZCB0aGUgcmVzdWx0IHRvIHRoZSBTcGl0eiBydW50aW1lCiAgICAgICAgcmVzdWx0LnB1c2gobyk7CiAgICAgICAgCiAgICAgICAgc3RkOjpjb3V0IDw8ICJbV0tdIFRhc2sgcHJvY2Vzc2VkLiIgPDwgc3RkOjplbmRsOwoKICAgICAgICByZXR1cm4gMDsKICAgIH0KfTsKCi8vIFRoaXMgY2xhc3MgaXMgcmVzcG9uc2libGUgZm9yIG1lcmdpbmcgdGhlIHJlc3VsdCBvZiBlYWNoIGluZGl2aWR1YWwgdGFzayAKLy8gYW5kLCBpZiBuZWNlc3NhcnksIHRvIHByb2R1Y2UgdGhlIGZpbmFsIHJlc3VsdCBhZnRlciBhbGwgb2YgdGhlIHRhc2sgCi8vIHJlc3VsdHMgaGF2ZSBiZWVuIHJlY2VpdmVkLgpjbGFzcyBjb21taXR0ZXIgOiBwdWJsaWMgc3BpdHo6OmNvbW1pdHRlcgp7CnB1YmxpYzoKICAgIGNvbW1pdHRlcihpbnQgYXJnYywgY29uc3QgY2hhciAqYXJndltdLCBzcGl0ejo6aXN0cmVhbSYgam9iaW5mbykKICAgIHsKICAgICAgICBzdGQ6OmNvdXQgPDwgIltDT10gQ29tbWl0dGVyIGNyZWF0ZWQuIiA8PCBzdGQ6OmVuZGw7CiAgICB9CiAgICAKICAgIGludCBjb21taXRfdGFzayhzcGl0ejo6aXN0cmVhbSYgcmVzdWx0KQogICAgewogICAgICAgIC8vIERlc2VyaWFsaXplIHRoZSByZXN1bHQgZnJvbSB0aGUgdGFzayBhbmQgdXNlIGl0IAogICAgICAgIC8vIHRvIGNvbXBvc2UgdGhlIGZpbmFsIHJlc3VsdAogICAgICAgIC8vIC4uLgoKICAgICAgICBzdGQ6OmNvdXQgPDwgIltDT10gUmVzdWx0IGNvbW1pdHRlZC4iIDw8IHN0ZDo6ZW5kbDsKCiAgICAgICAgcmV0dXJuIDA7CiAgICB9CiAgICAKICAgIC8vIE9wdGlvbmFsLiBJZiB0aGUgcmVzdWx0IGRlcGVuZHMgb24gcmVjZWl2aW5nIGFsbCBvZiB0aGUgdGFzayAKICAgIC8vIHJlc3VsdHMsIG9yIGlmIHRoZSBmaW5hbCByZXN1bHQgbXVzdCBiZSBzZXJpYWxpemVkIHRvIHRoZSAKICAgIC8vIFNwaXR6IE1haW4sIHRoZW4gYW4gYWRkaXRpb25hbCBDb21taXQgSm9iIGlzIGNhbGxlZC4KCiAgICAvLyBpbnQgY29tbWl0X2pvYihjb25zdCBzcGl0ejo6cHVzaGVyJiBmaW5hbF9yZXN1bHQpIAogICAgLy8gewogICAgLy8gICAgIC8vIFByb2Nlc3MgdGhlIGZpbmFsIHJlc3VsdAogICAgLy8KICAgIC8vICAgICAvLyBBIHJlc3VsdCBtdXN0IGJlIHB1c2hlZCBldmVuIGlmIHRoZSBmaW5hbCAKICAgIC8vICAgICAvLyByZXN1bHQgaXMgbm90IHBhc3NlZCBvbgogICAgLy8gICAgIGZpbmFsX3Jlc3VsdC5wdXNoKE5VTEwsIDApOwogICAgLy8gICAgIHJldHVybiAwOwogICAgLy8gfQoKICAgIH5jb21taXR0ZXIoKQogICAgewogICAgICAgIAogICAgfQp9OwoKLy8gVGhlIGZhY3RvcnkgYmluZHMgdGhlIHVzZXIgY29kZSB3aXRoIHRoZSBTcGl0eiBDKysgd3JhcHBlciBjb2RlLgpjbGFzcyBmYWN0b3J5IDogcHVibGljIHNwaXR6OjpmYWN0b3J5CnsKcHVibGljOgogICAgc3BpdHo6OmpvYl9tYW5hZ2VyICpjcmVhdGVfam9iX21hbmFnZXIoaW50IGFyZ2MsIGNvbnN0IGNoYXIgKmFyZ3ZbXSwKICAgICAgICBzcGl0ejo6aXN0cmVhbSYgam9iaW5mbykKICAgIHsKICAgICAgICByZXR1cm4gbmV3IGpvYl9tYW5hZ2VyKGFyZ2MsIGFyZ3YsIGpvYmluZm8pOwogICAgfQogICAgCiAgICBzcGl0ejo6d29ya2VyICpjcmVhdGVfd29ya2VyKGludCBhcmdjLCBjb25zdCBjaGFyICphcmd2W10pCiAgICB7CiAgICAgICAgcmV0dXJuIG5ldyB3b3JrZXIoYXJnYywgYXJndik7CiAgICB9CiAgICAKICAgIHNwaXR6Ojpjb21taXR0ZXIgKmNyZWF0ZV9jb21taXR0ZXIoaW50IGFyZ2MsIGNvbnN0IGNoYXIgKmFyZ3ZbXSwgCiAgICAgICAgc3BpdHo6OmlzdHJlYW0mIGpvYmluZm8pCiAgICB7CiAgICAgICAgcmV0dXJuIG5ldyBjb21taXR0ZXIoYXJnYywgYXJndiwgam9iaW5mbyk7CiAgICB9Cn07CgovLyBDcmVhdGVzIGEgZmFjdG9yeSBjbGFzcy4Kc3BpdHo6OmZhY3RvcnkgKnNwaXR6X2ZhY3RvcnkgPSBuZXcgZmFjdG9yeSgpOwo=',
        'README' : 'VGhpcyBleGFtcGxlIHNob3dzIHRoZSBtaW5pbXVtIGFtb3VudCBvZiBjb2RlIHJlcXVpcmVkIHRvIGNyZWF0ZSBhIFNwaXR6LWNvbXBsaWFudCBtb2R1bGUgaW4gQysrLiAKCkEgbW9kdWxlIGNvbnRhaW5zIGEgSm9iIE1hbmFnZXIsIHJlc3BvbnNpYmxlIGZvciBwcm9kdWNpbmcgaWRlbXBvdGVudCB0YXNrcywgdGhhdCB3aWxsIGJlIHNlbnQgdG8gV29ya2VycyB3aXRob3V0IGFueSBjb21wcm9taXNlIHdpdGggb3JkZXIgYW5kIHdoaWNoIHJlc3VsdHMgd2lsbCwgdGhlbiwgYmUgc2VudCB0byBhIENvbW1pdHRlciwgcmVzcG9uc2libGUgZm9yIGNvbXBvc2luZyB0aGUgZmluYWwgcmVzdWx0IGZyb20gdGhlIHJlY2VpdmVkIHRhc2tzLgoKQWRkaXRpb25hbGx5LCBpZiBhIG1vZHVsZSBkZXBlbmRzIG9uIHRoZSBleGVjdXRpb24gb2YgbXVsdGlwbGUgam9icywgaXQgY2FuIGRlZmluZSBhIFNwaXR6IE1haW4gcmVwb25zaWJsZSBmb3IgY29vcmRpbmF0aW5nIHRoZSBleGVjdXRpb24gb2YgdGhlIGpvYnMuCgpJZiB5b3UgcnVuIHRoaXMgZXhhbXBsZSwgaXQgd2lsbCBub3QgZmluaXNoIHVudGlsIHByb3Blcmx5IG1vZGlmeSB0aGUgYm9pbGVycGxhdGUgdG8gc3RvcCBnZW5lcmF0aW5nIHRhc2tzLgo=',
        'LICENSE' : 'VGhlIE1JVCBMaWNlbnNlIChNSVQpCgpDb3B5cmlnaHQgKGMpIDIwMTYgQ2FpYW4gQmVuZWRpY3RvIDxjYWlhbkBnZ2F1bmljYW1wLmNvbT4KQ29weXJpZ2h0IChjKSAyMDE0IElhbiBMaXUgUm9kcmlndWVzIDxpYW4ubGl1QGdnYXVuaWNhbXAuY29tPgoKUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSAiU29mdHdhcmUiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6CgpUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS4KClRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS4KCg=='
    },
    'spitz-pi': {
        'main.cpp': '',
        'README' : 'VGhpcyBpcyBhIHF1aWNrIGV4YW1wbGUgdG8gc2hvdyBob3cgdG8gY29tcHV0ZSB0aGUgdmFsdWUgb2YgcGkgaW4gcGFyYWxsZWwgdXNpbmcgdGhlIFNwaXR6IEFQSSBhbmQgcHJvZ3JhbW1pbmcgbW9kZWwuCgo=',
        'LICENSE' : 'VGhlIE1JVCBMaWNlbnNlIChNSVQpCgpDb3B5cmlnaHQgKGMpIDIwMTYgQ2FpYW4gQmVuZWRpY3RvIDxjYWlhbkBnZ2F1bmljYW1wLmNvbT4KQ29weXJpZ2h0IChjKSAyMDE0IElhbiBMaXUgUm9kcmlndWVzIDxpYW4ubGl1QGdnYXVuaWNhbXAuY29tPgoKUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSAiU29mdHdhcmUiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6CgpUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS4KClRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS4KCg=='
    },
    'spitz-pi-2': {
        'main.cpp': '',
        'README' : 'VGhpcyBleGFtcGxlIHNob3dzIGhvdyB0aGUgU3BpdHogcHJvZ3JhbW1pbmcgbW9kZWwgY2FuIGJlIHVzZWQgdG8gY29tcHV0ZSBhIG11bHRpLXN0YWdlZCBqb2IuIFRoZSB2YWx1ZSBvZiBwaSBpcyBjb21wdXRlZCB0d2ljZSB1c2luZyBkaWZmZXJlbnQgbnVtYmVyIGlmIGl0ZXJhY3Rpb25zIGFuZCB0aGUgZXJyb3IgaXMgY29tcGFyZWQuCgo=',
        'LICENSE' : 'VGhlIE1JVCBMaWNlbnNlIChNSVQpCgpDb3B5cmlnaHQgKGMpIDIwMTYgQ2FpYW4gQmVuZWRpY3RvIDxjYWlhbkBnZ2F1bmljYW1wLmNvbT4KQ29weXJpZ2h0IChjKSAyMDE0IElhbiBMaXUgUm9kcmlndWVzIDxpYW4ubGl1QGdnYXVuaWNhbXAuY29tPgoKUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSAiU29mdHdhcmUiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6CgpUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS4KClRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS4KCg=='
    }
}


def render_example(name):
    """"""
    if name not in _examples:
        sys.stderr.write("Error: Unknown example '%s'!\n" % name)
        exit(1)
    destdir = name
    if os.path.exists(destdir):
        sys.stderr.write("Error: The directory '%s' already exists!\n" % destdir)
        exit(1)
    print("Creating '%s'..." % destdir)
    os.makedirs(destdir)
    for filename, blob in sorted(_examples[name].items()):
        filepath = os.path.join(destdir, filename)
        if os.path.exists(filepath):
            sys.stderr.write("Error: The file '%s' already exists!\n" % filepath)
            exit(1)
        print("Creating '%s'..." % filepath)
        fblob = open(filepath, 'wb')
        fblob.write(base64.b64decode(blob))
    print("Done.")


if __name__ == '__main__':
    if len(sys.argv) != 2:
        print('USAGE: spitz-examples example_name')
        print('Available examples:')
        for name in sorted(_examples.keys()):
            print('  %s' % name)
        exit(1)
    render_example(sys.argv[1])
