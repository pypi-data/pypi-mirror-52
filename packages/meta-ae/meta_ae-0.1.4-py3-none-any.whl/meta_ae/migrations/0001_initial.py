# Generated by Django 2.2.3 on 2019-08-26 14:10

import _socket
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django_audit_fields.fields.hostname_modification_field
import django_audit_fields.fields.userfield
import django_audit_fields.fields.uuid_auto_field
import django_audit_fields.models.audit_model_mixin
import django_revision.revision_field
import edc_action_item.managers
import edc_model.validators.date
import edc_model_fields.fields.other_charfield
import edc_utils.date
import simple_history.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("edc_adverse_event", "0002_auto_20190802_0059"),
        ("edc_action_item", "0022_auto_20190628_2136"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("sites", "0002_alter_domain_unique"),
    ]

    operations = [
        migrations.CreateModel(
            name="AeInitial",
            fields=[
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(
                        blank=True,
                        default=django_audit_fields.models.audit_model_mixin.utcnow,
                    ),
                ),
                (
                    "modified",
                    models.DateTimeField(
                        blank=True,
                        default=django_audit_fields.models.audit_model_mixin.utcnow,
                    ),
                ),
                (
                    "user_created",
                    django_audit_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    django_audit_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    django_audit_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    django_audit_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("tracking_identifier", models.CharField(max_length=30, unique=True)),
                ("action_identifier", models.CharField(max_length=50, unique=True)),
                ("subject_identifier", models.CharField(max_length=50)),
                (
                    "parent_action_identifier",
                    models.CharField(
                        help_text="action identifier that links to parent reference model instance.",
                        max_length=30,
                        null=True,
                    ),
                ),
                (
                    "related_action_identifier",
                    models.CharField(
                        help_text="action identifier that links to related reference model instance.",
                        max_length=30,
                        null=True,
                    ),
                ),
                ("action_item_reason", models.TextField(editable=False, null=True)),
                (
                    "ae_auto_created",
                    models.BooleanField(default=False, editable=False, max_length=25),
                ),
                (
                    "ae_auto_created_criteria",
                    models.CharField(default="N/A", editable=False, max_length=50),
                ),
                (
                    "report_datetime",
                    models.DateTimeField(
                        default=edc_utils.date.get_utcnow,
                        verbose_name="Report Date and Time",
                    ),
                ),
                (
                    "ae_classification_other",
                    edc_model_fields.fields.other_charfield.OtherCharField(
                        blank=True,
                        max_length=250,
                        null=True,
                        verbose_name="If Other, specify ...",
                    ),
                ),
                (
                    "ae_description",
                    models.TextField(verbose_name="Adverse Event (AE) description"),
                ),
                (
                    "ae_awareness_date",
                    models.DateField(
                        default=edc_utils.date.get_utcnow,
                        validators=[edc_model.validators.date.date_not_future],
                        verbose_name="AE Awareness date",
                    ),
                ),
                (
                    "ae_start_date",
                    models.DateField(
                        default=edc_utils.date.get_utcnow,
                        validators=[edc_model.validators.date.date_not_future],
                        verbose_name="Actual Start Date of AE",
                    ),
                ),
                (
                    "ae_grade",
                    models.CharField(
                        choices=[
                            ("3", "Grade III - Severe"),
                            ("4", "Grade 4 - Life-threatening"),
                            ("5", "Grade 5 - Death"),
                        ],
                        max_length=25,
                        verbose_name="Severity of AE",
                    ),
                ),
                (
                    "susar",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        help_text="If yes, SUSAR must be reported to Principal Investigator and TMG immediately,",
                        max_length=5,
                        verbose_name="Is this a Suspected Unexpected Serious Adverse Reaction (SUSAR)?",
                    ),
                ),
                (
                    "susar_reported",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("N/A", "Not applicable"),
                        ],
                        default="N/A",
                        max_length=5,
                        verbose_name="Is SUSAR reported?",
                    ),
                ),
                (
                    "sae",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        help_text="(i.e. results in death, in-patient hospitalisation/prolongation, significant disability or is life-threatening)",
                        max_length=5,
                        verbose_name="Is this event a SAE?",
                    ),
                ),
                (
                    "sae_reason_old",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("dead", "Death"),
                            ("life_threatening", "Life-threatening"),
                            ("significant_disability", "Significant disability"),
                            (
                                "in-patient_hospitalization",
                                "In-patient hospitalization or prolongation (17 or more days from study inclusion)",
                            ),
                            (
                                "medically_important_event",
                                "Medically important event (e.g. Severe thrombophlebitis, Bacteraemia, recurrence of symptoms not requiring admission, Hospital acquired pneumonia)",
                            ),
                        ],
                        default="QUESTION_RETIRED",
                        help_text="If subject deceased, submit a Death Report",
                        max_length=50,
                        verbose_name='If "Yes", reason for SAE:',
                    ),
                ),
                (
                    "ae_classification_old",
                    models.CharField(default="QUESTION_RETIRED", max_length=150),
                ),
                (
                    "ae_study_relation_possibility",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No"), ("unknown", "Unknown")],
                        max_length=10,
                        verbose_name="Is the incident related to the patient involvement in the study?",
                    ),
                ),
                (
                    "ae_cause",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=5,
                        verbose_name="Has a reason other than the specified study drug been identified as the cause of the event(s)?",
                    ),
                ),
                (
                    "ae_cause_other",
                    edc_model_fields.fields.other_charfield.OtherCharField(
                        blank=True,
                        max_length=250,
                        null=True,
                        verbose_name='If "Yes", specify',
                    ),
                ),
                (
                    "ae_treatment",
                    models.TextField(
                        verbose_name="Specify action taken for treatment of AE:"
                    ),
                ),
                (
                    "action_item",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="edc_action_item.ActionItem",
                    ),
                ),
                (
                    "ae_classification",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="edc_adverse_event.AeClassification",
                        verbose_name="Adverse Event (AE) Classification",
                    ),
                ),
                (
                    "parent_action_item",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="edc_action_item.ActionItem",
                    ),
                ),
                (
                    "related_action_item",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="edc_action_item.ActionItem",
                    ),
                ),
                (
                    "sae_reason",
                    models.ForeignKey(
                        help_text="If subject deceased, submit a Death Report",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="edc_adverse_event.SaeReason",
                        verbose_name='If "Yes", reason for SAE:',
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="sites.Site",
                    ),
                ),
            ],
            options={"verbose_name": "AE Initial Report", "abstract": False},
            managers=[
                ("on_site", edc_action_item.managers.ActionIdentifierSiteManager()),
                ("objects", edc_action_item.managers.ActionIdentifierManager()),
            ],
        ),
        migrations.CreateModel(
            name="HistoricalAeInitial",
            fields=[
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(
                        blank=True,
                        default=django_audit_fields.models.audit_model_mixin.utcnow,
                    ),
                ),
                (
                    "modified",
                    models.DateTimeField(
                        blank=True,
                        default=django_audit_fields.models.audit_model_mixin.utcnow,
                    ),
                ),
                (
                    "user_created",
                    django_audit_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    django_audit_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    django_audit_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    django_audit_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        db_index=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                    ),
                ),
                ("tracking_identifier", models.CharField(db_index=True, max_length=30)),
                ("action_identifier", models.CharField(db_index=True, max_length=50)),
                ("subject_identifier", models.CharField(max_length=50)),
                (
                    "parent_action_identifier",
                    models.CharField(
                        help_text="action identifier that links to parent reference model instance.",
                        max_length=30,
                        null=True,
                    ),
                ),
                (
                    "related_action_identifier",
                    models.CharField(
                        help_text="action identifier that links to related reference model instance.",
                        max_length=30,
                        null=True,
                    ),
                ),
                ("action_item_reason", models.TextField(editable=False, null=True)),
                (
                    "history_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "ae_auto_created",
                    models.BooleanField(default=False, editable=False, max_length=25),
                ),
                (
                    "ae_auto_created_criteria",
                    models.CharField(default="N/A", editable=False, max_length=50),
                ),
                (
                    "report_datetime",
                    models.DateTimeField(
                        default=edc_utils.date.get_utcnow,
                        verbose_name="Report Date and Time",
                    ),
                ),
                (
                    "ae_classification_other",
                    edc_model_fields.fields.other_charfield.OtherCharField(
                        blank=True,
                        max_length=250,
                        null=True,
                        verbose_name="If Other, specify ...",
                    ),
                ),
                (
                    "ae_description",
                    models.TextField(verbose_name="Adverse Event (AE) description"),
                ),
                (
                    "ae_awareness_date",
                    models.DateField(
                        default=edc_utils.date.get_utcnow,
                        validators=[edc_model.validators.date.date_not_future],
                        verbose_name="AE Awareness date",
                    ),
                ),
                (
                    "ae_start_date",
                    models.DateField(
                        default=edc_utils.date.get_utcnow,
                        validators=[edc_model.validators.date.date_not_future],
                        verbose_name="Actual Start Date of AE",
                    ),
                ),
                (
                    "ae_grade",
                    models.CharField(
                        choices=[
                            ("3", "Grade III - Severe"),
                            ("4", "Grade 4 - Life-threatening"),
                            ("5", "Grade 5 - Death"),
                        ],
                        max_length=25,
                        verbose_name="Severity of AE",
                    ),
                ),
                (
                    "susar",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        help_text="If yes, SUSAR must be reported to Principal Investigator and TMG immediately,",
                        max_length=5,
                        verbose_name="Is this a Suspected Unexpected Serious Adverse Reaction (SUSAR)?",
                    ),
                ),
                (
                    "susar_reported",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("N/A", "Not applicable"),
                        ],
                        default="N/A",
                        max_length=5,
                        verbose_name="Is SUSAR reported?",
                    ),
                ),
                (
                    "sae",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        help_text="(i.e. results in death, in-patient hospitalisation/prolongation, significant disability or is life-threatening)",
                        max_length=5,
                        verbose_name="Is this event a SAE?",
                    ),
                ),
                (
                    "sae_reason_old",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("dead", "Death"),
                            ("life_threatening", "Life-threatening"),
                            ("significant_disability", "Significant disability"),
                            (
                                "in-patient_hospitalization",
                                "In-patient hospitalization or prolongation (17 or more days from study inclusion)",
                            ),
                            (
                                "medically_important_event",
                                "Medically important event (e.g. Severe thrombophlebitis, Bacteraemia, recurrence of symptoms not requiring admission, Hospital acquired pneumonia)",
                            ),
                        ],
                        default="QUESTION_RETIRED",
                        help_text="If subject deceased, submit a Death Report",
                        max_length=50,
                        verbose_name='If "Yes", reason for SAE:',
                    ),
                ),
                (
                    "ae_classification_old",
                    models.CharField(default="QUESTION_RETIRED", max_length=150),
                ),
                (
                    "ae_study_relation_possibility",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No"), ("unknown", "Unknown")],
                        max_length=10,
                        verbose_name="Is the incident related to the patient involvement in the study?",
                    ),
                ),
                (
                    "ae_cause",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=5,
                        verbose_name="Has a reason other than the specified study drug been identified as the cause of the event(s)?",
                    ),
                ),
                (
                    "ae_cause_other",
                    edc_model_fields.fields.other_charfield.OtherCharField(
                        blank=True,
                        max_length=250,
                        null=True,
                        verbose_name='If "Yes", specify',
                    ),
                ),
                (
                    "ae_treatment",
                    models.TextField(
                        verbose_name="Specify action taken for treatment of AE:"
                    ),
                ),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "action_item",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="edc_action_item.ActionItem",
                    ),
                ),
                (
                    "ae_classification",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="edc_adverse_event.AeClassification",
                        verbose_name="Adverse Event (AE) Classification",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "parent_action_item",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="edc_action_item.ActionItem",
                    ),
                ),
                (
                    "related_action_item",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="edc_action_item.ActionItem",
                    ),
                ),
                (
                    "sae_reason",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="If subject deceased, submit a Death Report",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="edc_adverse_event.SaeReason",
                        verbose_name='If "Yes", reason for SAE:',
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="sites.Site",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical AE Initial Report",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalAeFollowup",
            fields=[
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(
                        blank=True,
                        default=django_audit_fields.models.audit_model_mixin.utcnow,
                    ),
                ),
                (
                    "modified",
                    models.DateTimeField(
                        blank=True,
                        default=django_audit_fields.models.audit_model_mixin.utcnow,
                    ),
                ),
                (
                    "user_created",
                    django_audit_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    django_audit_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    django_audit_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    django_audit_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        db_index=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                    ),
                ),
                ("tracking_identifier", models.CharField(db_index=True, max_length=30)),
                ("action_identifier", models.CharField(db_index=True, max_length=50)),
                ("subject_identifier", models.CharField(max_length=50)),
                (
                    "parent_action_identifier",
                    models.CharField(
                        help_text="action identifier that links to parent reference model instance.",
                        max_length=30,
                        null=True,
                    ),
                ),
                (
                    "related_action_identifier",
                    models.CharField(
                        help_text="action identifier that links to related reference model instance.",
                        max_length=30,
                        null=True,
                    ),
                ),
                ("action_item_reason", models.TextField(editable=False, null=True)),
                (
                    "history_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "report_datetime",
                    models.DateTimeField(
                        default=edc_utils.date.get_utcnow,
                        verbose_name="Report date and time",
                    ),
                ),
                (
                    "outcome",
                    models.CharField(
                        choices=[
                            ("continuing/update", "Continuing/Update"),
                            ("increase_from_g3", "Severity increased from Grade III"),
                            ("recovered", "Recovered/Resolved"),
                            ("recovering", "Recovering/Resolving at end of study"),
                            ("not_recovered", "Not Recovered/Resolved at end of study"),
                            ("LTFU", "Unknown/Lost to follow-up"),
                            ("recovered_with_sequelae", "Recovered with sequelae"),
                            ("dead", "Death"),
                        ],
                        max_length=25,
                    ),
                ),
                (
                    "outcome_date",
                    models.DateField(
                        validators=[edc_model.validators.date.date_not_future]
                    ),
                ),
                (
                    "ae_grade",
                    models.CharField(
                        choices=[
                            ("4", "Grade 4 - Life-threatening"),
                            ("5", "Grade 5 - Death"),
                            ("N/A", "Not applicable"),
                        ],
                        default="N/A",
                        max_length=25,
                        verbose_name="If severity increased, indicate grade",
                    ),
                ),
                (
                    "relevant_history",
                    models.TextField(
                        help_text="Indicate Adverse Event, clinical results,medications given, dosage,treatment plan and outcomes.",
                        max_length=1000,
                        verbose_name="Description summary of Adverse Event outcome",
                    ),
                ),
                (
                    "followup",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        default="Yes",
                        help_text="If NO, this will be considered the final report",
                        max_length=15,
                        verbose_name="Is a follow-up to this report required?",
                    ),
                ),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "action_item",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="edc_action_item.ActionItem",
                    ),
                ),
                (
                    "ae_initial",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="meta_ae.AeInitial",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "parent_action_item",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="edc_action_item.ActionItem",
                    ),
                ),
                (
                    "related_action_item",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="edc_action_item.ActionItem",
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="sites.Site",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical AE Follow-up Report",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="AeFollowup",
            fields=[
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(
                        blank=True,
                        default=django_audit_fields.models.audit_model_mixin.utcnow,
                    ),
                ),
                (
                    "modified",
                    models.DateTimeField(
                        blank=True,
                        default=django_audit_fields.models.audit_model_mixin.utcnow,
                    ),
                ),
                (
                    "user_created",
                    django_audit_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    django_audit_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    django_audit_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    django_audit_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("tracking_identifier", models.CharField(max_length=30, unique=True)),
                ("action_identifier", models.CharField(max_length=50, unique=True)),
                ("subject_identifier", models.CharField(max_length=50)),
                (
                    "parent_action_identifier",
                    models.CharField(
                        help_text="action identifier that links to parent reference model instance.",
                        max_length=30,
                        null=True,
                    ),
                ),
                (
                    "related_action_identifier",
                    models.CharField(
                        help_text="action identifier that links to related reference model instance.",
                        max_length=30,
                        null=True,
                    ),
                ),
                ("action_item_reason", models.TextField(editable=False, null=True)),
                (
                    "report_datetime",
                    models.DateTimeField(
                        default=edc_utils.date.get_utcnow,
                        verbose_name="Report date and time",
                    ),
                ),
                (
                    "outcome",
                    models.CharField(
                        choices=[
                            ("continuing/update", "Continuing/Update"),
                            ("increase_from_g3", "Severity increased from Grade III"),
                            ("recovered", "Recovered/Resolved"),
                            ("recovering", "Recovering/Resolving at end of study"),
                            ("not_recovered", "Not Recovered/Resolved at end of study"),
                            ("LTFU", "Unknown/Lost to follow-up"),
                            ("recovered_with_sequelae", "Recovered with sequelae"),
                            ("dead", "Death"),
                        ],
                        max_length=25,
                    ),
                ),
                (
                    "outcome_date",
                    models.DateField(
                        validators=[edc_model.validators.date.date_not_future]
                    ),
                ),
                (
                    "ae_grade",
                    models.CharField(
                        choices=[
                            ("4", "Grade 4 - Life-threatening"),
                            ("5", "Grade 5 - Death"),
                            ("N/A", "Not applicable"),
                        ],
                        default="N/A",
                        max_length=25,
                        verbose_name="If severity increased, indicate grade",
                    ),
                ),
                (
                    "relevant_history",
                    models.TextField(
                        help_text="Indicate Adverse Event, clinical results,medications given, dosage,treatment plan and outcomes.",
                        max_length=1000,
                        verbose_name="Description summary of Adverse Event outcome",
                    ),
                ),
                (
                    "followup",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        default="Yes",
                        help_text="If NO, this will be considered the final report",
                        max_length=15,
                        verbose_name="Is a follow-up to this report required?",
                    ),
                ),
                (
                    "action_item",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="edc_action_item.ActionItem",
                    ),
                ),
                (
                    "ae_initial",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="meta_ae.AeInitial",
                    ),
                ),
                (
                    "parent_action_item",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="edc_action_item.ActionItem",
                    ),
                ),
                (
                    "related_action_item",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="edc_action_item.ActionItem",
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="sites.Site",
                    ),
                ),
            ],
            options={"verbose_name": "AE Follow-up Report", "abstract": False},
            managers=[
                ("on_site", edc_action_item.managers.ActionIdentifierSiteManager()),
                ("objects", edc_action_item.managers.ActionIdentifierManager()),
            ],
        ),
        migrations.AddIndex(
            model_name="aeinitial",
            index=models.Index(
                fields=["subject_identifier", "action_identifier", "site", "id"],
                name="meta_ae_aei_subject_9fefa3_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="aefollowup",
            index=models.Index(
                fields=["subject_identifier", "action_identifier", "site", "id"],
                name="meta_ae_aef_subject_a574af_idx",
            ),
        ),
    ]
