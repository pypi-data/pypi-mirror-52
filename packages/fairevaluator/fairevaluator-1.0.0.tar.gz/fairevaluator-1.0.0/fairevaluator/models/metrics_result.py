# coding: utf-8

"""
    FAIR Evaluator API

    The FAIR Evaluator - automated testing of Web resources for their compliance with the FAIR Metrics  # noqa: E501

    OpenAPI spec version: 0.3.0
    Contact: mark.wilkinson@upm.es
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class MetricsResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'type': 'list[str]',
        'context': 'str',
        'created_at': 'str',
        'creator': 'str',
        'email': 'str',
        'name': 'str',
        'principle': 'str',
        'smarturl': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'id': '@id',
        'type': '@type',
        'context': '@context',
        'created_at': 'created_at',
        'creator': 'creator',
        'email': 'email',
        'name': 'name',
        'principle': 'principle',
        'smarturl': 'smarturl',
        'updated_at': 'updated_at'
    }

    def __init__(self, id=None, type=None, context=None, created_at=None, creator=None, email=None, name=None, principle=None, smarturl=None, updated_at=None):  # noqa: E501
        """MetricsResult - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._type = None
        self._context = None
        self._created_at = None
        self._creator = None
        self._email = None
        self._name = None
        self._principle = None
        self._smarturl = None
        self._updated_at = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if context is not None:
            self.context = context
        if created_at is not None:
            self.created_at = created_at
        if creator is not None:
            self.creator = creator
        if email is not None:
            self.email = email
        if name is not None:
            self.name = name
        if principle is not None:
            self.principle = principle
        if smarturl is not None:
            self.smarturl = smarturl
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this MetricsResult.  # noqa: E501


        :return: The id of this MetricsResult.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MetricsResult.


        :param id: The id of this MetricsResult.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this MetricsResult.  # noqa: E501


        :return: The type of this MetricsResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MetricsResult.


        :param type: The type of this MetricsResult.  # noqa: E501
        :type: list[str]
        """

        self._type = type

    @property
    def context(self):
        """Gets the context of this MetricsResult.  # noqa: E501


        :return: The context of this MetricsResult.  # noqa: E501
        :rtype: str
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this MetricsResult.


        :param context: The context of this MetricsResult.  # noqa: E501
        :type: str
        """

        self._context = context

    @property
    def created_at(self):
        """Gets the created_at of this MetricsResult.  # noqa: E501


        :return: The created_at of this MetricsResult.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this MetricsResult.


        :param created_at: The created_at of this MetricsResult.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def creator(self):
        """Gets the creator of this MetricsResult.  # noqa: E501


        :return: The creator of this MetricsResult.  # noqa: E501
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this MetricsResult.


        :param creator: The creator of this MetricsResult.  # noqa: E501
        :type: str
        """

        self._creator = creator

    @property
    def email(self):
        """Gets the email of this MetricsResult.  # noqa: E501


        :return: The email of this MetricsResult.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this MetricsResult.


        :param email: The email of this MetricsResult.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def name(self):
        """Gets the name of this MetricsResult.  # noqa: E501


        :return: The name of this MetricsResult.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MetricsResult.


        :param name: The name of this MetricsResult.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def principle(self):
        """Gets the principle of this MetricsResult.  # noqa: E501


        :return: The principle of this MetricsResult.  # noqa: E501
        :rtype: str
        """
        return self._principle

    @principle.setter
    def principle(self, principle):
        """Sets the principle of this MetricsResult.


        :param principle: The principle of this MetricsResult.  # noqa: E501
        :type: str
        """

        self._principle = principle

    @property
    def smarturl(self):
        """Gets the smarturl of this MetricsResult.  # noqa: E501


        :return: The smarturl of this MetricsResult.  # noqa: E501
        :rtype: str
        """
        return self._smarturl

    @smarturl.setter
    def smarturl(self, smarturl):
        """Sets the smarturl of this MetricsResult.


        :param smarturl: The smarturl of this MetricsResult.  # noqa: E501
        :type: str
        """

        self._smarturl = smarturl

    @property
    def updated_at(self):
        """Gets the updated_at of this MetricsResult.  # noqa: E501


        :return: The updated_at of this MetricsResult.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this MetricsResult.


        :param updated_at: The updated_at of this MetricsResult.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MetricsResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetricsResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
