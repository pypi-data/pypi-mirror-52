.\" Man page generated from reStructuredText.
.
.TH "PKGCHECK" "1" "Sep 13, 2019" "0.6.4" "pkgcheck"
.SH NAME
pkgcheck \- pkgcore-based QA utility
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.SH SYNOPSIS
.sp
pkgcheck [\-h] [\-\-version] [\-\-debug] [\-q] [\-v] [\-\-color BOOLEAN] [\-\-add\-config SECTION KEY VALUE] [\-\-new\-config SECTION KEY VALUE] [\-\-empty\-config] [\-\-config PATH] [\-\-domain DOMAIN] {scan,replay,show} ...
.SH DESCRIPTION
.sp
pkgcheck is a QA utility based on \fBpkgcore\fP(5) that supports scanning
ebuild repositories for various issues.
.SH BASE OPTIONS
.INDENT 0.0
.TP
.B \-h\fP,\fB  \-\-help
Show this help message and exit. To get more
information see the related man page.
.TP
.B \-\-version
Show this program\(aqs version information and exit.
.sp
When running from within a git repo or a version
installed from git the latest commit hash and date will
be shown.
.TP
.B \-\-debug
Enable debug checks and show verbose debug output.
.TP
.B \-q\fP,\fB  \-\-quiet
Suppress non\-error, informational messages.
.TP
.B \-v\fP,\fB  \-\-verbose
Increase the verbosity of various output.
.TP
.BI \-\-color \ BOOLEAN
Toggle colored output support. This can be used to forcibly
enable color support when piping output or other sitations
where stdout is not a tty.
.UNINDENT
.SH CONFIG OPTIONS
.INDENT 0.0
.TP
.B \-\-add\-config SECTION KEY VALUE
modify an existing configuration section
.TP
.B \-\-new\-config SECTION KEY VALUE
add a new configuration section
.UNINDENT
.INDENT 0.0
.TP
.B \-\-empty\-config
do not load user/system configuration
.TP
.BI \-\-config \ PATH
override location of config files
.TP
.BI \-\-domain \ DOMAIN
domain to use for this operation
.UNINDENT
.SH SUBCOMMANDS
.sp
check applets
.SS pkgcheck scan \- scan targets for QA issues
.SS Synopsis
.sp
pkgcheck scan [\-R REPORTER] [\-\-format FORMAT_STR] [\-h] [\-\-debug] [\-q] [\-v] [\-\-color BOOLEAN] [\-r REPO] [\-\-filtered] [\-c CHECK] [\-C CHECKSET] [\-k KEYWORD] [\-s SCOPE] [\-a ARCH] [\-\-git\-disable] [\-\-git\-cache] [\-\-commits] [\-\-glsa\-dir GLSA_LOCATION] [\-\-profiles\-base PROFILES_DIR] [\-\-profile\-cache BOOLEAN] [\-p PROFILE] [\-\-source\-arches ARCH] [\-\-reset\-caching\-per {version,package,category}] [TARGET [TARGET ...]]
.SS Positional Arguments
.INDENT 0.0
.TP
.B TARGET
optional target atom(s)
.UNINDENT
.SS Reporter Options
.INDENT 0.0
.TP
.BI \-R \ REPORTER\fP,\fB \ \-\-reporter \ REPORTER
Select a reporter to use for output.
.sp
Use \fBpkgcheck show \-\-reporters\fP to see available options.
.TP
.BI \-\-format \ FORMAT_STR
Custom format string used to format output by FormatReporter.
.sp
Supports python format string syntax where result object attribute names
surrounded by curly braces are replaced with their values (if they exist).
.sp
For example, \fB\-\-format \(aq{category}/{package}/{package}\-{version}.ebuild\fP
will output ebuild paths in the target repo for results relating to
specific ebuild versions. If a result is for the generic package (or a
higher scope), no output will be produced for that result.
.sp
Furthermore, no output will be produced if a result object is missing any
requested attribute expansion in the format string. In other words,
\fB\-\-format {foo}\fP will never produce any output because no result has the
\fBfoo\fP attribute.
.UNINDENT
.SS Base Options
.INDENT 0.0
.TP
.B \-h\fP,\fB  \-\-help
Show this help message and exit. To get more
information see the related man page.
.TP
.B \-\-debug
Enable debug checks and show verbose debug output.
.TP
.B \-q\fP,\fB  \-\-quiet
Suppress non\-error, informational messages.
.TP
.B \-v\fP,\fB  \-\-verbose
Increase the verbosity of various output.
.TP
.BI \-\-color \ BOOLEAN
Toggle colored output support. This can be used to forcibly
enable color support when piping output or other sitations
where stdout is not a tty.
.UNINDENT
.SS Main Options
.INDENT 0.0
.TP
.BI \-r \ REPO\fP,\fB \ \-\-repo \ REPO
repo to pull packages from
.TP
.B \-\-filtered
Enable all package filtering mechanisms such as ACCEPT_KEYWORDS,
ACCEPT_LICENSE, and package.mask.
.UNINDENT
.SS Check Selection
.INDENT 0.0
.TP
.BI \-c \ CHECK\fP,\fB \ \-\-checks \ CHECK
limit checks to regex or package/class matching (comma\-separated list)
.TP
.BI \-C \ CHECKSET\fP,\fB \ \-\-checkset \ CHECKSET
preconfigured set of checks to run
.TP
.BI \-k \ KEYWORD\fP,\fB \ \-\-keywords \ KEYWORD
Comma separated list of keywords to enable and disable for
scanning. Any keywords specified in this fashion will be the
only keywords that get reported, skipping any disabled keywords.
.sp
To specify disabled keywords prefix them with \fB\-\fP\&. Note that when
starting the argument list with a disabled keyword an equals sign must
be used, e.g. \fB\-k=\-keyword\fP, otherwise the disabled keyword argument is
treated as an option.
.sp
The special arguments of \fBerrors\fP and \fBwarnings\fP correspond to the
lists of error and warning keywords, respectively. Therefore, to only
scan for errors and ignore all QA warnings use \fB\-k errors\fP\&.
.sp
Use \fBpkgcheck show \-\-keywords\fP or the list below to see available options.
.TP
.BI \-s \ SCOPE\fP,\fB \ \-\-scopes \ SCOPE
Comma separated list of scopes to enable and disable for scanning. Any
scopes specified in this fashion will affect the keywords that get
reported. For example, running pkgcheck with only the repo scope
enabled will cause only repo\-level keywords to be scanned for and
reported.
.sp
To specify disabled scopes prefix them with \fB\-\fP similar to the
\-k/\-\-keywords option.
.sp
Available scopes: repo, cat, pkg, ver
.UNINDENT
.SS Plugin Options
.INDENT 0.0
.TP
.BI \-\-glsa\-dir \ GLSA_LOCATION
source directory for glsas; tries to autodetermine it, may be required if no glsa dirs are known
.TP
.BI \-\-source\-arches \ ARCH
Comma separated list of arches to compare against for
lagging stabilization.
.sp
The default arches are all stable arches (unless \-\-arches is specified).
.UNINDENT
.SS Arches
.INDENT 0.0
.TP
.BI \-a \ ARCH\fP,\fB \ \-\-arches \ ARCH
Comma separated list of arches to enable and disable.
.sp
To specify disabled arches prefix them with \(aq\-\(aq. Note that when
starting the argument list with a disabled arch an equals sign
must be used, e.g. \-a=\-arch, otherwise the disabled arch
argument is treated as an option.
.sp
By default all repo defined arches are used; however,
stable\-related checks (e.g. UnstableOnly) default to the set of
arches having stable profiles in the target repo.
.UNINDENT
.SS Git
.sp
Git repo support for various checks.
.sp
Pkgcheck can create virtual package repos from a given git repo\(aqs history
in order to provide more info for checks relating to stable requests,
outdated blockers, or local commits. These virtual repos are cached and
updated every run if new commits are detected.
.sp
Git repos must have a supported config in order to work properly.
Specifically, pkgcheck assumes that both origin and master branches exist
and relate to the upstream and local development states, respectively.
.sp
Additionally, the origin/HEAD ref must exist. If it doesn\(aqt, running \fBgit
fetch origin\fP should create it. Otherwise, using \fBgit remote set\-head
origin master\fP or similar will also create the reference.
.INDENT 0.0
.TP
.B \-\-git\-disable
Disable all checks that use git to parse repo logs.
.TP
.B \-\-git\-cache
Parses a repo\(aqs git log and caches various historical information.
.TP
.B \-\-commits
For a local git repo, pkgcheck will pull package targets to
scan from the changes compared to the repo\(aqs origin.
.UNINDENT
.SS Profiles
.INDENT 0.0
.TP
.BI \-\-profiles\-base \ PROFILES_DIR
The path to the base profiles directory. This will override the
default usage of profiles bundled in the target repository;
primarily for testing.
.TP
.BI \-\-profile\-cache \ BOOLEAN
Significantly decreases profile load time by caching and reusing
the resulting filters rather than rebuilding them for each run.
.sp
Caches are used by default. In order to forcibly refresh them,
enable this option. Conversely, if caches are unwanted disable
this instead.
.TP
.BI \-p \ PROFILE\fP,\fB \ \-\-profiles \ PROFILE
Comma separated list of profiles to enable and disable for
scanning. Any profiles specified in this fashion will be the
only profiles that get scanned, skipping any disabled profiles.
In addition, if no profiles are explicitly enabled, all
profiles defined in the target repo\(aqs profiles.desc file will be
scanned except those marked as experimental (exp).
.sp
To specify disabled profiles prefix them with \fB\-\fP which
removes the from the list of profiles to be considered. Note
that when starting the argument list with a disabled profile an
equals sign must be used, e.g.  \fB\-p=\-path/to/profile\fP,
otherwise the disabled profile argument is treated as an
option.
.sp
The special keywords of \fBstable\fP, \fBdev\fP, \fBexp\fP, and
\fBdeprecated\fP correspond to the lists of stable, development,
experimental, and deprecated profiles, respectively. Therefore,
to only scan all stable profiles pass the \fBstable\fP argument
to \-\-profiles. Additionally the keyword \fBall\fP can be used to
scan all defined profiles in the target repo.
.UNINDENT
.SS Query Caching
.INDENT 0.0
.TP
.B \-\-reset\-caching\-per {version,package,category}
control how often the cache is cleared (version, package or category)
.UNINDENT
.SS pkgcheck replay \- replay results streams
.SS Synopsis
.sp
pkgcheck replay [\-R REPORTER] [\-\-format FORMAT_STR] [\-h] [\-\-debug] [\-q] [\-v] [\-\-color BOOLEAN] FILE
.SS Positional Arguments
.INDENT 0.0
.TP
.B FILE
path to serialized results file
.UNINDENT
.SS Reporter Options
.INDENT 0.0
.TP
.BI \-R \ REPORTER\fP,\fB \ \-\-reporter \ REPORTER
Select a reporter to use for output.
.sp
Use \fBpkgcheck show \-\-reporters\fP to see available options.
.TP
.BI \-\-format \ FORMAT_STR
Custom format string used to format output by FormatReporter.
.sp
Supports python format string syntax where result object attribute names
surrounded by curly braces are replaced with their values (if they exist).
.sp
For example, \fB\-\-format \(aq{category}/{package}/{package}\-{version}.ebuild\fP
will output ebuild paths in the target repo for results relating to
specific ebuild versions. If a result is for the generic package (or a
higher scope), no output will be produced for that result.
.sp
Furthermore, no output will be produced if a result object is missing any
requested attribute expansion in the format string. In other words,
\fB\-\-format {foo}\fP will never produce any output because no result has the
\fBfoo\fP attribute.
.UNINDENT
.SS Base Options
.INDENT 0.0
.TP
.B \-h\fP,\fB  \-\-help
Show this help message and exit. To get more
information see the related man page.
.TP
.B \-\-debug
Enable debug checks and show verbose debug output.
.TP
.B \-q\fP,\fB  \-\-quiet
Suppress non\-error, informational messages.
.TP
.B \-v\fP,\fB  \-\-verbose
Increase the verbosity of various output.
.TP
.BI \-\-color \ BOOLEAN
Toggle colored output support. This can be used to forcibly
enable color support when piping output or other sitations
where stdout is not a tty.
.UNINDENT
.SS pkgcheck show \- show various pkgcheck info
.SS Synopsis
.sp
pkgcheck show [\-h] [\-\-debug] [\-q] [\-v] [\-\-color BOOLEAN] [\-\-keywords | \-\-checks | \-\-scopes | \-\-reporters]
.SS Base Options
.INDENT 0.0
.TP
.B \-h\fP,\fB  \-\-help
Show this help message and exit. To get more
information see the related man page.
.TP
.B \-\-debug
Enable debug checks and show verbose debug output.
.TP
.B \-q\fP,\fB  \-\-quiet
Suppress non\-error, informational messages.
.TP
.B \-v\fP,\fB  \-\-verbose
Increase the verbosity of various output.
.TP
.BI \-\-color \ BOOLEAN
Toggle colored output support. This can be used to forcibly
enable color support when piping output or other sitations
where stdout is not a tty.
.UNINDENT
.SS List Options
.INDENT 0.0
.TP
.B \-\-keywords
List all available keywords.
.sp
Use \-v/\-\-verbose to show keywords sorted into the scope they run at
(repository, category, package, or version) along with their
descriptions.
.TP
.B \-\-checks
List all available checks.
.sp
Use \-v/\-\-verbose to show descriptions and possible keyword results for
each check.
.TP
.B \-\-scopes
List all available keyword and check scopes.
.sp
Use \-v/\-\-verbose to show scope descriptions.
.TP
.B \-\-reporters
List all available reporters.
.sp
Use \-v/\-\-verbose to show reporter descriptions.
.UNINDENT
.SH KEYWORDS
.sp
List of result keywords that can be produced by pkgcheck.
.SS Repository scope
.SS ArchesWithoutProfiles
.sp
Arches without corresponding profile listings.
.sp
(related check: \fI\%RepoProfilesCheck\fP)
.SS BadPackageUpdate
.sp
Badly formatted package update in profiles/updates files.
.sp
(related check: \fI\%PackageUpdatesCheck\fP)
.SS BadProfileEntry
.sp
Badly formatted entry in a profiles file.
.sp
(related check: \fI\%ProfilesCheck\fP)
.SS BinaryFile
.sp
Binary file found in the repository.
.sp
(related check: \fI\%RepoDirCheck\fP)
.SS ConflictingAccountIdentifiers
.sp
Same UID/GID is used by multiple packages.
.sp
(related check: \fI\%AcctCheck\fP)
.SS LaggingProfileEAPI
.sp
Profile has an EAPI that is older than one of its parents.
.sp
(related check: \fI\%RepoProfilesCheck\fP)
.SS MovedPackageUpdate
.sp
Entry for package already moved in profiles/updates files.
.sp
(related check: \fI\%PackageUpdatesCheck\fP)
.SS MultiMovePackageUpdate
.sp
Entry for package moved multiple times in profiles/updates files.
.sp
(related check: \fI\%PackageUpdatesCheck\fP)
.SS NonexistentProfilePath
.sp
Specified profile path in profiles.desc doesn\(aqt exist.
.sp
(related check: \fI\%RepoProfilesCheck\fP)
.SS OldMultiMovePackageUpdate
.sp
Old entry for removed package moved multiple times in profiles/updates files.
.sp
This means that the reported pkg has been moved at least three times and
finally removed from the tree. All the related lines should be removed from
the update files.
.sp
(related check: \fI\%PackageUpdatesCheck\fP)
.SS OldPackageUpdate
.sp
Old entry for removed package in profiles/updates files.
.sp
(related check: \fI\%PackageUpdatesCheck\fP)
.SS PotentialGlobalUSE
.sp
Local USE flag is a potential global USE flag.
.sp
(related check: \fI\%GlobalUSECheck\fP)
.SS PotentialLocalUSE
.sp
Global USE flag is a potential local USE flag.
.sp
(related check: \fI\%GlobalUSECheck\fP)
.SS ProfileError
.sp
Erroneously formatted data in various profile files.
.sp
(related checks: \fI\%ProfilesCheck\fP, \fI\%RepoProfilesCheck\fP)
.SS ProfileWarning
.sp
Badly formatted data in various profile files.
.sp
(related checks: \fI\%ProfilesCheck\fP, \fI\%RepoProfilesCheck\fP)
.SS UnknownCategories
.sp
Category directories that aren\(aqt listed in a repo\(aqs categories.
.sp
Or the categories of the repo\(aqs masters as well.
.sp
(related check: \fI\%RepoProfilesCheck\fP)
.SS UnknownLicenses
.sp
License(s) listed in license group(s) that don\(aqt exist.
.sp
(related check: \fI\%LicenseGroupsCheck\fP)
.SS UnknownProfilePackageKeywords
.sp
Profile files include package keywords that don\(aqt exist.
.sp
(related check: \fI\%ProfilesCheck\fP)
.SS UnknownProfilePackageUse
.sp
Profile files include entries with USE flags that aren\(aqt used on any matching packages.
.sp
(related check: \fI\%ProfilesCheck\fP)
.SS UnknownProfilePackages
.sp
Profile files include package entries that don\(aqt exist in the repo.
.sp
(related check: \fI\%ProfilesCheck\fP)
.SS UnknownProfileUse
.sp
Profile files include USE flags that don\(aqt exist.
.sp
(related check: \fI\%ProfilesCheck\fP)
.SS UnusedEclasses
.sp
Unused eclasses detected.
.sp
(related check: \fI\%UnusedEclassesCheck\fP)
.SS UnusedGlobalUSE
.sp
Unused use.desc flag(s).
.sp
(related check: \fI\%GlobalUSECheck\fP)
.SS UnusedLicenses
.sp
Unused license(s) detected.
.sp
(related check: \fI\%UnusedLicensesCheck\fP)
.SS UnusedMirrors
.sp
Unused mirrors detected.
.sp
(related check: \fI\%UnusedMirrorsCheck\fP)
.SS UnusedProfileDirs
.sp
Unused profile directories detected.
.sp
(related check: \fI\%RepoProfilesCheck\fP)
.SS Category scope
.SS CatBadlyFormedXml
.sp
Badly formed category metadata.xml.
.sp
(related check: \fI\%CategoryMetadataXmlCheck\fP)
.SS CatInvalidXml
.sp
Invalid category metadata.xml.
.sp
(related check: \fI\%CategoryMetadataXmlCheck\fP)
.SS CatMetadataXmlEmptyElement
.sp
Empty element in category metadata.xml file.
.sp
(related check: \fI\%CategoryMetadataXmlCheck\fP)
.SS CatMetadataXmlIndentation
.sp
Inconsistent indentation in category metadata.xml file.
.sp
Either all tabs or all spaces should be used, not a mixture of both.
.sp
(related check: \fI\%CategoryMetadataXmlCheck\fP)
.SS CatMetadataXmlInvalidCatRef
.sp
Invalid category reference in category metadata.xml.
.sp
(related check: \fI\%CategoryMetadataXmlCheck\fP)
.SS CatMetadataXmlInvalidPkgRef
.sp
Invalid package reference in category metadata.xml.
.sp
(related check: \fI\%CategoryMetadataXmlCheck\fP)
.SS CatMissingMetadataXml
.sp
Category is missing metadata.xml.
.sp
(related check: \fI\%CategoryMetadataXmlCheck\fP)
.SS Package scope
.SS DirectNoMaintainer
.sp
Directly added, new package with no specified maintainer.
.sp
(related check: \fI\%GitCommitsCheck\fP)
.SS DroppedStableKeywords
.sp
Stable keywords dropped from package.
.sp
(related check: \fI\%GitCommitsCheck\fP)
.SS DroppedUnstableKeywords
.sp
Unstable keywords dropped from package.
.sp
(related check: \fI\%GitCommitsCheck\fP)
.SS DuplicateFiles
.sp
Two or more identical files in FILESDIR.
.sp
(related check: \fI\%PkgDirCheck\fP)
.SS EmptyFile
.sp
File in FILESDIR is empty.
.sp
(related check: \fI\%PkgDirCheck\fP)
.SS EmptyMaintainer
.sp
Package with neither a maintainer or maintainer\-needed comment in metadata.xml.
.sp
(related check: \fI\%PackageMetadataXmlCheck\fP)
.SS EqualVersions
.sp
Ebuilds that have equal versions.
.sp
For example, cat/pn\-1.0.2, cat/pn\-1.0.2\-r0, cat/pn\-1.0.2\-r00 and
cat/pn\-1.000.2 all have equal versions according to PMS and therefore
shouldn\(aqt exist in the same repository.
.sp
(related check: \fI\%EqualVersionsCheck\fP)
.SS ExecutableFile
.sp
File has executable bit, but doesn\(aqt need it.
.sp
(related check: \fI\%PkgDirCheck\fP)
.SS Glep31Violation
.sp
File doesn\(aqt abide by glep31 requirements.
.sp
(related check: \fI\%PkgDirCheck\fP)
.SS InvalidPN
.sp
Ebuilds that have invalid package names.
.sp
(related check: \fI\%PkgDirCheck\fP)
.SS InvalidUTF8
.sp
File isn\(aqt UTF\-8 compliant.
.sp
(related check: \fI\%PkgDirCheck\fP)
.SS MaintainerWithoutProxy
.sp
Package has a proxied maintainer without a proxy.
.sp
All package maintainers have \fI\%non\-@gentoo.org\fP e\-mail addresses. Most likely,
this means that the package is maintained by a proxied maintainer but there
is no explicit proxy (developer or project) listed. This means no Gentoo
developer will be CC\-ed on bug reports, and most likely no developer
oversees the proxied maintainer\(aqs activity.
.sp
(related check: \fI\%PackageMetadataXmlCheck\fP)
.SS MatchingGlobalUSE
.sp
Local USE flag description matches a global USE flag.
.sp
(related check: \fI\%LocalUSECheck\fP)
.SS MismatchedPN
.sp
Ebuilds that have different names than their parent directory.
.sp
(related check: \fI\%PkgDirCheck\fP)
.SS NonexistentProjectMaintainer
.sp
Package specifying nonexistent project as a maintainer.
.sp
(related check: \fI\%PackageMetadataXmlCheck\fP)
.SS PkgBadlyFormedXml
.sp
Badly formed package metadata.xml.
.sp
(related check: \fI\%PackageMetadataXmlCheck\fP)
.SS PkgInvalidXml
.sp
Invalid package metadata.xml.
.sp
(related check: \fI\%PackageMetadataXmlCheck\fP)
.SS PkgMetadataXmlEmptyElement
.sp
Empty element in package metadata.xml file.
.sp
(related check: \fI\%PackageMetadataXmlCheck\fP)
.SS PkgMetadataXmlIndentation
.sp
Inconsistent indentation in package metadata.xml file.
.sp
Either all tabs or all spaces should be used, not a mixture of both.
.sp
(related check: \fI\%PackageMetadataXmlCheck\fP)
.SS PkgMetadataXmlInvalidCatRef
.sp
Invalid category reference in package metadata.xml.
.sp
(related check: \fI\%PackageMetadataXmlCheck\fP)
.SS PkgMetadataXmlInvalidPkgRef
.sp
Invalid package reference in package metadata.xml.
.sp
(related check: \fI\%PackageMetadataXmlCheck\fP)
.SS PkgMissingMetadataXml
.sp
Package is missing metadata.xml.
.sp
(related check: \fI\%PackageMetadataXmlCheck\fP)
.SS ProbableGlobalUSE
.sp
Local USE flag description closely matches a global USE flag.
.sp
(related check: \fI\%LocalUSECheck\fP)
.SS ProbableUseExpand
.sp
Local USE flag that isn\(aqt overridden matches a USE_EXPAND group.
.sp
The local USE flag starts with a prefix reserved to USE_EXPAND group,
yet it is not a globally defined member of this group. According
to the standing policy [1], all possible values for each USE_EXPAND
must be defined and documented globally.
.sp
This warning can be fixed via moving the local flag description
into appropriate profiles/desc file.
.IP [1] 5
\fI\%https://devmanual.gentoo.org/general\-concepts/use\-flags/\fP
.sp
(related check: \fI\%LocalUSECheck\fP)
.SS SizeViolation
.sp
File in $FILESDIR is too large (current limit is 20k).
.sp
(related check: \fI\%PkgDirCheck\fP)
.SS StaleProxyMaintProject
.sp
Package lists proxy\-maint project but has no proxied maintainers.
.sp
The package explicitly lists \fI\%proxy\-maint@g.o\fP as the only maintainer.
Most likely, this means that the proxied maintainer has been removed
but proxy\-maint was left over.
.sp
(related check: \fI\%PackageMetadataXmlCheck\fP)
.SS UnderscoreInUseFlag
.sp
USE flag uses underscore that is reserved for USE_EXPAND.
.sp
The USE flag name uses underscore. However, according to PMS
underscores are reserved for USE_EXPAND flags [2]\&. The recommended
replacement is hyphen (\(aq\-\(aq).
.IP [2] 5
\fI\%https://projects.gentoo.org/pms/7/pms.html#x1\-200003.1.4\fP
.sp
(related check: \fI\%LocalUSECheck\fP)
.SS UnknownFile
.sp
Unknown file in package directory.
.sp
Relevant for the gentoo repo only since the spec states that a package
directory may contain other files or directories.
.sp
(related check: \fI\%PkgDirCheck\fP)
.SS UnknownManifest
.sp
Manifest entries not matching any SRC_URI targets.
.sp
(related check: \fI\%ManifestCheck\fP)
.SS UnnecessaryManifest
.sp
Manifest entries for non\-DIST targets on a repo with thin manifests enabled.
.sp
(related check: \fI\%ManifestCheck\fP)
.SS UnstableOnly
.sp
Package/keywords that are strictly unstable.
.sp
(related check: \fI\%UnstableOnlyCheck\fP)
.SS UnusedLocalUSE
.sp
Unused local USE flag(s).
.sp
(related check: \fI\%LocalUSECheck\fP)
.SS WrongMaintainerType
.sp
A person\-type maintainer matches an existing project.
.sp
(related check: \fI\%PackageMetadataXmlCheck\fP)
.SS Version scope
.SS AbsoluteSymlink
.sp
Ebuild uses dosym with absolute paths instead of relative.
.sp
(related check: \fI\%AbsoluteSymlinkCheck\fP)
.SS BadDescription
.sp
Package\(aqs description is bad for some reason.
.sp
(related check: \fI\%DescriptionCheck\fP)
.SS BadFilename
.sp
URI uses unspecific or poor filename(s).
.sp
Archive filenames should be disambiguated using \fB\->\fP to rename them.
.sp
(related check: \fI\%SrcUriCheck\fP)
.SS BadHomepage
.sp
Package\(aqs homepage is bad for some reason.
.sp
(related check: \fI\%HomepageCheck\fP)
.SS BadInsIntoDir
.sp
Ebuild uses insinto where more compact commands exist.
.sp
(related check: \fI\%BadInsIntoCheck\fP)
.SS BadProtocol
.sp
URI uses an unsupported protocol.
.sp
Valid protocols are currently: http, https, and ftp
.sp
(related check: \fI\%SrcUriCheck\fP)
.SS BadRestricts
.sp
Package\(aqs RESTRICT metadata has unknown entries.
.sp
(related check: \fI\%RestrictsCheck\fP)
.SS BannedEAPI
.sp
Package\(aqs EAPI is banned according to repo metadata.
.sp
(related check: \fI\%MetadataCheck\fP)
.SS ConflictingChksums
.sp
Checksum conflict detected between two files.
.sp
(related check: \fI\%ManifestConflictCheck\fP)
.SS DeprecatedChksum
.sp
A file in the chksum data does not use modern checksum set.
.sp
(related check: \fI\%ManifestCheck\fP)
.SS DeprecatedEAPI
.sp
Package\(aqs EAPI is deprecated according to repo metadata.
.sp
(related check: \fI\%MetadataCheck\fP)
.SS DeprecatedEclass
.sp
Package uses an eclass that is deprecated/abandoned.
.sp
(related check: \fI\%DeprecatedEclassCheck\fP)
.SS DirectStableKeywords
.sp
Newly committed ebuild with stable keywords.
.sp
(related check: \fI\%GitCommitsCheck\fP)
.SS DoubleEmptyLine
.sp
Unneeded blank lines found.
.sp
(related check: \fI\%WhitespaceCheck\fP)
.SS DoublePrefixInPath
.sp
Ebuild uses two consecutive paths including EPREFIX.
.sp
Ebuild combines two path variables (or a variable and a getter), both
of which include EPREFIX, resulting in double prefixing. This is the case
when combining many pkg\-config\-based or alike getters with ED or EROOT.
.sp
For example, \fB${ED}$(python_get_sitedir)\fP should be replaced
with \fB${D}$(python_get_sitedir)\fP\&.
.sp
(related check: \fI\%PathVariablesCheck\fP)
.SS DroppedKeywords
.sp
Arch keywords dropped during version bumping.
.sp
(related check: \fI\%DroppedKeywordsCheck\fP)
.SS DuplicateKeywords
.sp
Packages having duplicate KEYWORDS.
.sp
(related check: \fI\%KeywordsCheck\fP)
.SS HomepageInSrcUri
.sp
${HOMEPAGE} is referenced in SRC_URI.
.sp
SRC_URI is built on top of ${HOMEPAGE}. This is discouraged since HOMEPAGE
is multi\-valued by design, and is subject to potential changes that should
not accidentally affect SRC_URI.
.sp
(related check: \fI\%HomepageInSrcUriCheck\fP)
.SS HttpsAvailable
.sp
Ebuild contains an \fBhttp://\fP link that should use \fBhttps://\fP instead.
.sp
(related check: \fI\%HttpsAvailableCheck\fP)
.SS InvalidCopyright
.sp
Ebuild with invalid copyright.
.sp
The ebuild does not start with a valid copyright line. Each ebuild must
start with a copyright line of the form:
.INDENT 0.0
.INDENT 3.5
# Copyright YEARS MAIN\-CONTRIBUTOR [OTHER\-CONTRIBUTOR]... [and others]
.UNINDENT
.UNINDENT
.sp
Ebuilds in the Gentoo repository must use:
.INDENT 0.0
.INDENT 3.5
# Copyright YEARS Gentoo Authors
.UNINDENT
.UNINDENT
.sp
(related check: \fI\%CopyrightCheck\fP)
.SS InvalidKeywords
.sp
Packages using invalid KEYWORDS.
.sp
(related check: \fI\%KeywordsCheck\fP)
.SS LaggingStable
.sp
Stable arches for stabilized package that are lagging from a stabling standpoint.
.sp
(related check: \fI\%ImlateCheck\fP)
.SS MetadataError
.sp
Problem detected with a package\(aqs metadata.
.sp
(related checks: \fI\%DependencyCheck\fP, \fI\%IUSEMetadataCheck\fP, \fI\%KeywordsCheck\fP, \fI\%LicenseMetadataCheck\fP, \fI\%MetadataCheck\fP, \fI\%PythonCheck\fP, \fI\%RequiredUSEMetadataCheck\fP, \fI\%SrcUriCheck\fP)
.SS MissingAccountIdentifier
.sp
UID/GID can not be found in account package.
.sp
(related check: \fI\%AcctCheck\fP)
.SS MissingChksum
.sp
A file in the chksum data lacks required checksums.
.sp
(related check: \fI\%ManifestCheck\fP)
.SS MissingConditionalTestRestrict
.sp
Missing \fBRESTRICT="!test? ( test )"\fP\&.
.sp
Traditionally, it was assumed that \fBIUSE=test\fP is a special flag that is
implicitly enabled when running \fBsrc_test()\fP is enabled. However, this is
not standarized and packages need to explicitly specify
\fBRESTRICT="!test? ( test )"\fP in order to guarantee that test phase will
be skipped when the flag is disabled and therefore test dependencies may
not be installed.
.sp
(related check: \fI\%ConditionalTestRestrictCheck\fP)
.SS MissingLicense
.sp
Used license(s) have no matching license file(s).
.sp
(related check: \fI\%LicenseMetadataCheck\fP)
.SS MissingManifest
.sp
SRC_URI targets missing from Manifest file.
.sp
(related check: \fI\%ManifestCheck\fP)
.SS MissingPackageRevision
.sp
Missing package revision in =cat/pkg dependencies.
.sp
The dependency string uses the \fB=\fP operator without specifying a revision.
This means that only \fB\-r0\fP of the dependency will be matched, and newer
revisions of the same ebuild will not be accepted.
.sp
If any revision of the package is acceptable, the \fB~\fP operator should be
used instead of \fB=\fP\&. If only the initial revision of the dependency is
allowed, \fB\-r0\fP should be appended in order to make the intent explicit.
.sp
(related check: \fI\%DependencyCheck\fP)
.SS MissingPythonEclass
.sp
Package depends on Python but does not use the eclasses.
.sp
All packages depending on Python are required to use one of the following
python eclasses: python\-r1, python\-single\-r1, or python\-any\-r1. For
documentation on choosing the correct eclass, please see the Python project
wiki page on eclasses [3]\&.
.IP [3] 5
\fI\%https://wiki.gentoo.org/wiki/Project:Python/Eclasses\fP
.sp
(related check: \fI\%PythonCheck\fP)
.SS MissingSlash
.sp
Ebuild uses a path variable missing a trailing slash.
.sp
(related check: \fI\%PathVariablesCheck\fP)
.SS MissingSlotDep
.sp
Missing slot value in dependencies.
.sp
The package dependency does not specify a slot but the target package
has multiple slots. The behavior for satisfying this kind of dependency
is not strictly defined, and may result in either any or the newest package
slot being accepted.
.sp
Please verify whether the package works with all the dependency slots.
If only one slot is actually acceptable, specify it explicitly. If multiple
slots are acceptable, please use either \fB:=\fP or explicit \fB:*\fP slot operator.
The operators are described in detail in the devmanual [4]\&.
.IP [4] 5
\fI\%https://devmanual.gentoo.org/general\-concepts/dependencies/#slot\-dependencies\fP
.sp
(related check: \fI\%MissingSlotDepCheck\fP)
.SS MissingUnpackerDep
.sp
Missing dependency on a required unpacker package.
.sp
Package uses an archive format for which an unpacker is not provided by the
system set, and lacks an explicit dependency on the unpacker package.
.sp
(related check: \fI\%MissingUnpackerDepCheck\fP)
.SS MissingUri
.sp
RESTRICT=fetch isn\(aqt set, yet no full URI exists.
.sp
(related check: \fI\%SrcUriCheck\fP)
.SS MissingUseDepDefault
.sp
Package dependencies with USE dependencies missing defaults.
.sp
(related check: \fI\%DependencyCheck\fP)
.SS MissingVirtualKeywords
.sp
Virtual packages with keywords missing from their dependencies.
.sp
(related check: \fI\%KeywordsCheck\fP)
.SS NoFinalNewline
.sp
Ebuild\(aqs last line does not have a final newline.
.sp
(related check: \fI\%WhitespaceCheck\fP)
.SS NonGentooAuthorsCopyright
.sp
Ebuild with copyright stating owner other than "Gentoo Authors".
.sp
The ebuild specifies explicit copyright owner, while the Gentoo repository
policy specifies that all ebuilds must use "Gentoo Authors". If the owner
is not listed in metadata/AUTHORS, addition can be requested via
bugs.gentoo.org.
.sp
(related check: \fI\%CopyrightCheck\fP)
.SS NonexistentBlocker
.sp
No matches for blocker dependency in repo history.
.sp
For the gentoo repo this means it was either removed before the CVS \-> git
transition (which occurred around 2015\-08\-08) or it never existed at all.
.sp
Note that this ignores slot/subslot deps and USE deps in blocker atoms.
.sp
(related check: \fI\%DependencyCheck\fP)
.SS NonexistentDeps
.sp
No matches exist for a package dependency.
.sp
(related check: \fI\%VisibilityCheck\fP)
.SS NonsolvableDepsInDev
.sp
No potential solution for dependency on dev profile.
.sp
(related check: \fI\%VisibilityCheck\fP)
.SS NonsolvableDepsInExp
.sp
No potential solution for dependency on exp profile.
.sp
(related check: \fI\%VisibilityCheck\fP)
.SS NonsolvableDepsInStable
.sp
No potential solution for dependency on stable profile.
.sp
(related check: \fI\%VisibilityCheck\fP)
.SS ObsoleteUri
.sp
URI used is obsolete.
.sp
The URI used to fetch distfile is obsolete and can be replaced
by something more modern. Note that the modern replacement usually
results in different file contents, so you need to rename it (to
avoid mirror collisions with the old file) and update the ebuild
(for example, by removing no longer necessary vcs\-snapshot.eclass).
.sp
(related check: \fI\%ObsoleteUriCheck\fP)
.SS OldGentooCopyright
.sp
Ebuild with old Gentoo Foundation copyright.
.sp
The ebuild still assigns copyright to the Gentoo Foundation even though
it has been committed after the new copyright policy was approved
(2018\-10\-21).
.sp
The ebuilds in Gentoo repository must use \(aqGentoo Authors\(aq instead. Ebuilds
in other repositories may specify an explicit copyright holder instead.
.sp
(related check: \fI\%CopyrightCheck\fP)
.SS OutdatedBlocker
.sp
Blocker dependency removed more than two years ago from the tree.
.sp
Note that this ignores slot/subslot deps and USE deps in blocker atoms.
.sp
(related check: \fI\%DependencyCheck\fP)
.SS OutdatedCopyright
.sp
Changed ebuild with outdated copyright.
.sp
(related check: \fI\%GitCommitsCheck\fP)
.SS OutsideRangeAccountIdentifier
.sp
UID/GID outside allowed allocation range.
.sp
(related check: \fI\%AcctCheck\fP)
.SS OverlappingKeywords
.sp
Packages having overlapping arch and ~arch KEYWORDS.
.sp
(related check: \fI\%KeywordsCheck\fP)
.SS PortageInternals
.sp
Ebuild uses a function or variable internal to portage.
.sp
(related check: \fI\%PortageInternalsCheck\fP)
.SS PotentialStable
.sp
Stable arches with potential stable package candidates.
.sp
(related check: \fI\%ImlateCheck\fP)
.SS PythonMissingDeps
.sp
Package is missing PYTHON_DEPS.
.sp
The python\-r1 and python\-single\-r1 eclasses require the packages
to explicitly reference \fI${PYTHON_DEPS}\fP in RDEPEND (and DEPEND,
if necessary); python\-any\-r1 requires it in DEPEND.
.sp
If Python is used conditionally, the dependency can be wrapped
in appropriate USE conditionals.
.sp
(related check: \fI\%PythonCheck\fP)
.SS PythonMissingRequiredUSE
.sp
Package is missing PYTHON_REQUIRED_USE.
.sp
The python\-r1 and python\-single\-r1 eclasses require the packages to
explicitly specify \fIREQUIRED_USE=${PYTHON_REQUIRED_USE}\fP\&. If Python is used
conditionally, it can be wrapped in appropriate USE conditionals.
.sp
(related check: \fI\%PythonCheck\fP)
.SS PythonRuntimeDepInAnyR1
.sp
Package depends on Python at runtime but uses any\-r1 eclass.
.sp
The python\-any\-r1 eclass is meant to be used purely for build\-time
dependencies on Python. However, this package lists Python as a runtime
dependency. If this is intentional, the package needs to switch to
python\-r1 or python\-single\-r1 eclass, otherwise the runtime dependency
should be removed.
.sp
(related check: \fI\%PythonCheck\fP)
.SS PythonSingleUseMismatch
.sp
Package has mismatched PYTHON_SINGLE_TARGET and PYTHON_TARGETS flags.
.sp
The package declares both PYTHON_SINGLE_TARGET and PYTHON_TARGETS flags but
each includes a different set of supported Python implementations. This
either indicates a bug in the eclasses or the package is manually changing
the flags.
.sp
(related check: \fI\%PythonCheck\fP)
.SS RedundantVersion
.sp
Redundant version(s) of a package in a specific slot.
.sp
(related check: \fI\%RedundantVersionCheck\fP)
.SS RequiredUseDefaults
.sp
Default USE flag settings don\(aqt satisfy REQUIRED_USE.
.sp
The REQUIRED_USE constraints specified in the ebuild are not satisfied
by the default USE flags used in one or more profiles. This means that
users on those profiles may be unable to install the package out of the box,
without having to modify package.use.
.sp
This warning is usually fixed via using IUSE defaults to enable one
of the needed flags, modifying package.use in the most relevant profiles
or modifying REQUIRED_USE.
.sp
(related check: \fI\%RequiredUSEMetadataCheck\fP)
.SS StableRequest
.sp
Unstable package added over thirty days ago that could be stabilized.
.sp
(related check: \fI\%StableRequestCheck\fP)
.SS StupidKeywords
.sp
Packages using \fB\-*\fP; use package.mask instead.
.sp
(related check: \fI\%KeywordsCheck\fP)
.SS TarballAvailable
.sp
URI uses .zip archive when .tar* is available.
.sp
Tarballs should be preferred over zip archives due to better compression
and no extra unpack dependencies.
.sp
(related check: \fI\%SrcUriCheck\fP)
.SS TrailingEmptyLine
.sp
Unneeded trailing blank lines found.
.sp
(related check: \fI\%WhitespaceCheck\fP)
.SS UncheckableDep
.sp
Given dependency cannot be checked due to the number of transitive use deps in it.
.sp
(related check: \fI\%VisibilityCheck\fP)
.SS UnknownMirror
.sp
URI uses an unknown mirror.
.sp
(related check: \fI\%SrcUriCheck\fP)
.SS UnknownProperties
.sp
Package\(aqs PROPERTIES metadata has unknown entries.
.sp
(related check: \fI\%RestrictsCheck\fP)
.SS UnnecessaryLicense
.sp
LICENSE defined for package that is license\-less.
.sp
(related check: \fI\%LicenseMetadataCheck\fP)
.SS UnnecessarySlashStrip
.sp
Ebuild uses a path variable that strips a nonexistent slash.
.sp
(related check: \fI\%PathVariablesCheck\fP)
.SS UnsortedKeywords
.sp
Packages with unsorted KEYWORDS.
.sp
KEYWORDS should be sorted in alphabetical order with prefix keywords (those
with hyphens in them, e.g. amd64\-fbsd) after regular arches and globs (e.g. \fB\-*\fP)
before them.
.sp
(related check: \fI\%KeywordsCheck\fP)
.SS UnstatedIUSE
.sp
Package is reliant on conditionals that aren\(aqt in IUSE.
.sp
(related checks: \fI\%DependencyCheck\fP, \fI\%LicenseMetadataCheck\fP, \fI\%LocalUSECheck\fP, \fI\%RequiredUSEMetadataCheck\fP, \fI\%RestrictsCheck\fP, \fI\%SrcUriCheck\fP)
.SS UnusedInMastersEclasses
.sp
Eclasses detected that are unused in the master repo(s).
.sp
In other words, they\(aqre likely to be removed so should be copied to the overlay.
.sp
(related check: \fI\%UnusedInMastersCheck\fP)
.SS UnusedInMastersGlobalUSE
.sp
Global USE flags detected that are unused in the master repo(s).
.sp
In other words, they\(aqre likely to be removed so should be copied to the overlay.
.sp
(related check: \fI\%UnusedInMastersCheck\fP)
.SS UnusedInMastersLicenses
.sp
Licenses detected that are unused in the master repo(s).
.sp
In other words, they\(aqre likely to be removed so should be copied to the overlay.
.sp
(related check: \fI\%UnusedInMastersCheck\fP)
.SS UnusedInMastersMirrors
.sp
Mirrors detected that are unused in the master repo(s).
.sp
In other words, they\(aqre likely to be removed so should be copied to the overlay.
.sp
(related check: \fI\%UnusedInMastersCheck\fP)
.SS VisibleVcsPkg
.sp
Package is VCS\-based, but visible.
.sp
(related check: \fI\%VisibilityCheck\fP)
.SS VulnerablePackage
.sp
Packages marked as vulnerable by GLSAs.
.sp
(related check: \fI\%TreeVulnerabilitiesCheck\fP)
.SS WhitespaceFound
.sp
Leading or trailing whitespace found.
.sp
(related check: \fI\%WhitespaceCheck\fP)
.SS WrongIndentFound
.sp
Incorrect indentation whitespace found.
.sp
(related check: \fI\%WhitespaceCheck\fP)
.SH CHECKS
.sp
List of checks that can be selected to run.
.sp
By default, all checks that operate at the current scope or below will be run.
In other words, if running inside a package directory in a repo, only checks
that operate at a package or version scope will be run. On the other hand, when
running against an entire repo, all defined checks will be run.
.SS Repository scope
.SS AbsoluteSymlinkCheck
.sp
Scan ebuild for dosym absolute path usage instead of relative.
.sp
(known result: \fI\%AbsoluteSymlink\fP)
.SS BadInsIntoCheck
.sp
Scan ebuild for bad insinto usage.
.sp
(known result: \fI\%BadInsIntoDir\fP)
.SS ConditionalTestRestrictCheck
.sp
Check whether packages specify RESTRICT="!test? ( test )".
.sp
(known result: \fI\%MissingConditionalTestRestrict\fP)
.SS CopyrightCheck
.sp
Scan ebuild for incorrect copyright header.
.sp
(known results: \fI\%InvalidCopyright\fP, \fI\%NonGentooAuthorsCopyright\fP,
\fI\%OldGentooCopyright\fP)
.SS DependencyCheck
.sp
Check BDEPEND, DEPEND, RDEPEND, and PDEPEND.
.sp
(known results: \fI\%MetadataError\fP, \fI\%MissingPackageRevision\fP, \fI\%MissingUseDepDefault\fP,
\fI\%NonexistentBlocker\fP, \fI\%OutdatedBlocker\fP, \fI\%UnstatedIUSE\fP)
.SS DeprecatedEclassCheck
.sp
Scan for deprecated eclass usage.
.sp
deprecated eclasses: 64\-bit, autotools\-multilib, autotools\-utils, base, bash\-completion, boost\-utils, clutter, confutils, darcs, db4\-fix, debian, distutils, embassy\-2.10, embassy\-2.9, epatch, fdo\-mime, games, gcc, gems, git, git\-2, gnustep\-old, gpe, gst\-plugins\-bad, gst\-plugins\-base, gst\-plugins\-good, gst\-plugins\-ugly, gst\-plugins10, gtk\-engines, gtk\-engines2, inherit, jakarta\-commons, java\-pkg, java\-utils, kde\-base, kde\-i18n, kde\-source, kde4\-meta\-pkg, kmod, koffice\-i18n, ltprune, mono, motif, mozconfig, mozconfig\-2, mozcoreconf, mozilla, myth, pcmcia, perl\-post, php, php\-2, php\-ext, php\-ext\-base, php\-ext\-pecl, php\-ext\-pecl\-r1, php\-ext\-source, php\-ext\-source\-r1, php\-lib, php\-pear, php\-sapi, php5\-sapi, php5\-sapi\-r1, php5\-sapi\-r2, php5\-sapi\-r3, python, python\-distutils\-ng, qt3, qt4, ruby, ruby\-gnome2, tla, user, vim, webapp\-apache, x\-modular, xfconf, xfree
.sp
(known result: \fI\%DeprecatedEclass\fP)
.SS DescriptionCheck
.sp
DESCRIPTION checks.
.sp
Check on length (<=150), too short (<10), or generic (lifted from eclass or
just using the package\(aqs name.
.sp
(known result: \fI\%BadDescription\fP)
.SS HomepageCheck
.sp
HOMEPAGE checks.
.sp
(known result: \fI\%BadHomepage\fP)
.SS HomepageInSrcUriCheck
.sp
Scan ebuild for ${HOMEPAGE} in SRC_URI.
.sp
(known result: \fI\%HomepageInSrcUri\fP)
.SS HttpsAvailableCheck
.sp
Scan ebuild for \fBhttp://\fP links that should use \fBhttps://\fP\&.
.sp
(known result: \fI\%HttpsAvailable\fP)
.SS IUSEMetadataCheck
.sp
IUSE validity checks.
.sp
(known result: \fI\%MetadataError\fP)
.SS KeywordsCheck
.sp
Check package keywords for sanity; empty keywords, and \-* are flagged.
.sp
(known results: \fI\%DuplicateKeywords\fP, \fI\%InvalidKeywords\fP, \fI\%MetadataError\fP,
\fI\%MissingVirtualKeywords\fP, \fI\%OverlappingKeywords\fP, \fI\%StupidKeywords\fP,
\fI\%UnsortedKeywords\fP)
.SS LicenseMetadataCheck
.sp
LICENSE validity checks.
.sp
(known results: \fI\%MetadataError\fP, \fI\%MissingLicense\fP, \fI\%UnnecessaryLicense\fP,
\fI\%UnstatedIUSE\fP)
.SS MetadataCheck
.sp
Scan for packages with banned/deprecated EAPIs or bad metadata.
.sp
(known results: \fI\%BannedEAPI\fP, \fI\%DeprecatedEAPI\fP, \fI\%MetadataError\fP)
.SS MissingSlotDepCheck
.sp
Check for missing slot dependencies.
.sp
(known result: \fI\%MissingSlotDep\fP)
.SS MissingUnpackerDepCheck
.sp
Check whether package is missing unpacker dependencies.
.sp
(known result: \fI\%MissingUnpackerDep\fP)
.SS ObsoleteUriCheck
.sp
Scan ebuild for obsolete URIs.
.sp
(known result: \fI\%ObsoleteUri\fP)
.SS PathVariablesCheck
.sp
Scan ebuild for path variables with various issues.
.sp
(known results: \fI\%DoublePrefixInPath\fP, \fI\%MissingSlash\fP, \fI\%UnnecessarySlashStrip\fP)
.SS PortageInternalsCheck
.sp
Scan ebuild for portage internals usage.
.sp
(known result: \fI\%PortageInternals\fP)
.SS PythonCheck
.sp
Python eclass checks.
.sp
Check whether Python eclasses are used for Python packages, and whether
they don\(aqt suffer from common mistakes.
.sp
(known results: \fI\%MetadataError\fP, \fI\%MissingPythonEclass\fP, \fI\%PythonMissingDeps\fP,
\fI\%PythonMissingRequiredUSE\fP, \fI\%PythonRuntimeDepInAnyR1\fP, \fI\%PythonSingleUseMismatch\fP)
.SS RequiredUSEMetadataCheck
.sp
REQUIRED_USE validity checks.
.sp
(known results: \fI\%MetadataError\fP, \fI\%RequiredUseDefaults\fP, \fI\%UnstatedIUSE\fP)
.SS RestrictsCheck
.sp
Check for valid RESTRICT settings.
.sp
(known results: \fI\%BadRestricts\fP, \fI\%UnknownProperties\fP, \fI\%UnstatedIUSE\fP)
.SS SrcUriCheck
.sp
SRC_URI related checks.
.sp
Verify that URIs are valid, fetchable, using a supported protocol, and
don\(aqt use unspecific filenames.
.sp
(known results: \fI\%BadFilename\fP, \fI\%BadProtocol\fP, \fI\%MetadataError\fP, \fI\%MissingUri\fP,
\fI\%TarballAvailable\fP, \fI\%UnknownMirror\fP, \fI\%UnstatedIUSE\fP)
.SS TreeVulnerabilitiesCheck
.sp
Scan for vulnerable ebuilds in the tree.
.sp
Requires a GLSA directory for vulnerability info.
.sp
(known result: \fI\%VulnerablePackage\fP)
.SS VisibilityCheck
.sp
Visibility dependency scans.
.sp
Check that at least one solution is possible for a pkg, checking all
profiles (defined by arch.list) visibility modifiers per stable/unstable
keyword.
.sp
(known results: \fI\%NonexistentDeps\fP, \fI\%NonsolvableDepsInDev\fP, \fI\%NonsolvableDepsInExp\fP,
\fI\%NonsolvableDepsInStable\fP, \fI\%UncheckableDep\fP, \fI\%VisibleVcsPkg\fP)
.SS WhitespaceCheck
.sp
Scan ebuild for useless whitespace.
.sp
(known results: \fI\%DoubleEmptyLine\fP, \fI\%NoFinalNewline\fP, \fI\%TrailingEmptyLine\fP,
\fI\%WhitespaceFound\fP, \fI\%WrongIndentFound\fP)
.SS Category scope
.SS DroppedKeywordsCheck
.sp
Scan packages for keyword dropping across versions.
.sp
(known result: \fI\%DroppedKeywords\fP)
.SS EqualVersionsCheck
.sp
Scan package ebuilds for semantically equal versions.
.sp
(known result: \fI\%EqualVersions\fP)
.SS GitCommitsCheck
.sp
Check unpushed git commits for various issues.
.sp
(known results: \fI\%DirectNoMaintainer\fP, \fI\%DirectStableKeywords\fP,
\fI\%DroppedStableKeywords\fP, \fI\%DroppedUnstableKeywords\fP, \fI\%OutdatedCopyright\fP)
.SS ImlateCheck
.sp
Scan for ebuilds that are lagging in stabilization.
.sp
(known results: \fI\%LaggingStable\fP, \fI\%PotentialStable\fP)
.SS LocalUSECheck
.sp
Check local USE flags in metadata.xml for various issues.
.sp
(known results: \fI\%MatchingGlobalUSE\fP, \fI\%ProbableGlobalUSE\fP, \fI\%ProbableUseExpand\fP,
\fI\%UnderscoreInUseFlag\fP, \fI\%UnstatedIUSE\fP, \fI\%UnusedLocalUSE\fP)
.SS ManifestCheck
.sp
Manifest related checks.
.sp
Verify that the Manifest file exists, doesn\(aqt have missing or
extraneous entries, and that the required hashes are in use.
.sp
(known results: \fI\%DeprecatedChksum\fP, \fI\%MissingChksum\fP, \fI\%MissingManifest\fP,
\fI\%UnknownManifest\fP, \fI\%UnnecessaryManifest\fP)
.SS PackageMetadataXmlCheck
.sp
Package level metadata.xml scans.
.sp
(known results: \fI\%EmptyMaintainer\fP, \fI\%MaintainerWithoutProxy\fP,
\fI\%NonexistentProjectMaintainer\fP, \fI\%PkgBadlyFormedXml\fP, \fI\%PkgInvalidXml\fP,
\fI\%PkgMetadataXmlEmptyElement\fP, \fI\%PkgMetadataXmlIndentation\fP,
\fI\%PkgMetadataXmlInvalidCatRef\fP, \fI\%PkgMetadataXmlInvalidPkgRef\fP,
\fI\%PkgMissingMetadataXml\fP, \fI\%StaleProxyMaintProject\fP, \fI\%WrongMaintainerType\fP)
.SS PkgDirCheck
.sp
Actual ebuild directory scans; file size, glep31 rule enforcement.
.sp
(known results: \fI\%DuplicateFiles\fP, \fI\%EmptyFile\fP, \fI\%ExecutableFile\fP,
\fI\%Glep31Violation\fP, \fI\%InvalidPN\fP, \fI\%InvalidUTF8\fP, \fI\%MismatchedPN\fP, \fI\%SizeViolation\fP,
\fI\%UnknownFile\fP)
.SS RedundantVersionCheck
.sp
Scan for overshadowed package versions.
.sp
Scan for versions that are likely shadowed by later versions from a
keywords standpoint (ignoring live packages that erroneously have
keywords).
.sp
Example: pkga\-1 is keyworded amd64, pkga\-2 is amd64.
pkga\-1 can potentially be removed.
.sp
(known result: \fI\%RedundantVersion\fP)
.SS StableRequestCheck
.sp
Ebuilds that have sat unstable with no changes for over a month.
.sp
By default, only triggered for arches with stable profiles. To check
additional arches outside the stable set specify them manually using the
\-a/\-\-arches option.
.sp
Note that packages with no stable keywords won\(aqt trigger this at all.
Instead they\(aqll be caught by the UnstableOnly check.
.sp
(known result: \fI\%StableRequest\fP)
.SS UnstableOnlyCheck
.sp
Scan for packages that have just unstable keywords.
.sp
(known result: \fI\%UnstableOnly\fP)
.SS Package scope
.SS CategoryMetadataXmlCheck
.sp
Category level metadata.xml scans.
.sp
(known results: \fI\%CatBadlyFormedXml\fP, \fI\%CatInvalidXml\fP,
\fI\%CatMetadataXmlEmptyElement\fP, \fI\%CatMetadataXmlIndentation\fP,
\fI\%CatMetadataXmlInvalidCatRef\fP, \fI\%CatMetadataXmlInvalidPkgRef\fP,
\fI\%CatMissingMetadataXml\fP)
.SS Version scope
.SS AcctCheck
.sp
Various checks for acct\-* packages.
.sp
Verify that acct\-* packages do not use conflicting, invalid or out\-of\-range
UIDs/GIDs.
.sp
(known results: \fI\%ConflictingAccountIdentifiers\fP, \fI\%MissingAccountIdentifier\fP,
\fI\%OutsideRangeAccountIdentifier\fP)
.SS GlobalUSECheck
.sp
Check global USE and USE_EXPAND flags for various issues.
.sp
(known results: \fI\%PotentialGlobalUSE\fP, \fI\%PotentialLocalUSE\fP, \fI\%UnusedGlobalUSE\fP)
.SS LicenseGroupsCheck
.sp
Scan license groups for unknown licenses.
.sp
(known result: \fI\%UnknownLicenses\fP)
.SS ManifestConflictCheck
.sp
Conflicting checksum check.
.sp
Verify that two Manifest files do not contain conflicting checksums
for the same filename.
.sp
(known result: \fI\%ConflictingChksums\fP)
.SS PackageUpdatesCheck
.sp
Scan profiles/updates/* for outdated entries and other issues.
.sp
(known results: \fI\%BadPackageUpdate\fP, \fI\%MovedPackageUpdate\fP,
\fI\%MultiMovePackageUpdate\fP, \fI\%OldMultiMovePackageUpdate\fP, \fI\%OldPackageUpdate\fP)
.SS ProfilesCheck
.sp
Scan repo profiles for unknown flags/packages.
.sp
(known results: \fI\%BadProfileEntry\fP, \fI\%ProfileError\fP, \fI\%ProfileWarning\fP,
\fI\%UnknownProfilePackageKeywords\fP, \fI\%UnknownProfilePackageUse\fP,
\fI\%UnknownProfilePackages\fP, \fI\%UnknownProfileUse\fP)
.SS RepoDirCheck
.sp
Scan all files in the repository for issues.
.sp
(known result: \fI\%BinaryFile\fP)
.SS RepoProfilesCheck
.sp
Scan repo for various profiles directory issues.
.sp
Including unknown arches in profiles, arches without profiles, and unknown
categories.
.sp
(known results: \fI\%ArchesWithoutProfiles\fP, \fI\%LaggingProfileEAPI\fP,
\fI\%NonexistentProfilePath\fP, \fI\%ProfileError\fP, \fI\%ProfileWarning\fP, \fI\%UnknownCategories\fP,
\fI\%UnusedProfileDirs\fP)
.SS UnusedEclassesCheck
.sp
Check for unused eclasses.
.sp
(known result: \fI\%UnusedEclasses\fP)
.SS UnusedInMastersCheck
.sp
Check for various metadata that may be removed from master repos.
.sp
(known results: \fI\%UnusedInMastersEclasses\fP, \fI\%UnusedInMastersGlobalUSE\fP,
\fI\%UnusedInMastersLicenses\fP, \fI\%UnusedInMastersMirrors\fP)
.SS UnusedLicensesCheck
.sp
Check for unused license files.
.sp
(known result: \fI\%UnusedLicenses\fP)
.SS UnusedMirrorsCheck
.sp
Check for unused mirrors.
.sp
(known result: \fI\%UnusedMirrors\fP)
.SH REPORTERS
.SS BinaryPickleStream
.sp
Dump a binary pickle stream using the highest pickling protocol.
.sp
Unlike \fI\%PickleStream\fP which uses the most compatible pickling protocol
available, this uses the newest version so it won\(aqt be compatible with
older versions of Python.
.sp
For more details of the stream, see \fI\%PickleStream\fP\&.
.SS CsvReporter
.sp
Comma\-separated value reporter, convenient for shell processing.
.sp
Example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
,,,"global USE flag \(aqbig\-endian\(aq is a potential local, used by 1 package: dev\-java/icedtea\-bin"
sys\-apps,portage,2.1\-r2,sys\-apps/portage\-2.1\-r2.ebuild has whitespace in indentation on line 169
sys\-apps,portage,2.1\-r2,"rdepend  ppc\-macos: unsolvable default\-darwin/macos/10.4, solutions: [ >=app\-misc/pax\-utils\-0.1.13 ]"
sys\-apps,portage,2.1\-r2,"no change in 75 days, keywords [ ~x86\-fbsd ]"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS FancyReporter
.sp
grouped colored output
.sp
Example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
sys\-apps/portage
  WrongIndentFound: sys\-apps/portage\-2.1\-r2.ebuild has whitespace in indentation on line 169
  NonsolvableDeps: sys\-apps/portage\-2.1\-r2: rdepend  ppc\-macos: unsolvable default\-darwin/macos/10.4, solutions: [ >=app\-misc/pax\-utils\-0.1.13 ]
  StableRequest: sys\-apps/portage\-2.1\-r2: no change in 75 days, keywords [ ~x86 ]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS FormatReporter
.sp
Custom format string reporter.
.SS JsonReporter
.sp
Dump a json feed of reports.
.sp
Note that the format is newline\-delimited JSON with each line being related
to a separate report. To merge the objects together a tool such as jq can
be leveraged similar to the following:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
jq \-c \-s \(aqreduce.[]as$x({};.*$x)\(aq orig.json > new.json
.ft P
.fi
.UNINDENT
.UNINDENT
.SS JsonStream
.sp
Generate a stream of result objects serialized in JSON.
.SS NullReporter
.sp
Reporter used for timing tests; no output.
.SS PickleStream
.sp
Generate a stream of pickled objects using the original pickling protocol.
.sp
For each specific target for checks, a header is pickled detailing the
checks used, possible results, and search criteria.
.sp
This reporter uses the original "human\-readable" protocol that is backwards
compatible with earlier versions of Python.
.SS StrReporter
.sp
Simple string reporter, pkgcheck\-0.1 behaviour.
.sp
Example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
sys\-apps/portage\-2.1\-r2: sys\-apps/portage\-2.1\-r2.ebuild has whitespace in indentation on line 169
sys\-apps/portage\-2.1\-r2: rdepend  ppc\-macos: unsolvable default\-darwin/macos/10.4, solutions: [ >=app\-misc/pax\-utils\-0.1.13 ]
sys\-apps/portage\-2.1\-r2: no change in 75 days, keywords [ ~x86\-fbsd ]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS XmlReporter
.sp
dump an xml feed of reports
.SH REPORTING BUGS
.sp
Please submit an issue via github:
.sp
\fI\%https://github.com/pkgcore/pkgcheck/issues\fP
.sp
You can also stop by #pkgcore on freenode.
.SH SEE ALSO
.sp
\fBpkgcore\fP(5)
.SH COPYRIGHT
2006-2019, pkgcheck contributors
.\" Generated by docutils manpage writer.
.
