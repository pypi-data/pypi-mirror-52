AWSTemplateFormatVersion: '2010-09-09'
Description: Self hosted dynamic DNS with Lambda and API Gateway


Parameters:
  LambdaFunctionCode:
    Type: String
    Description: Python code of Lambda function to reflect public IP

Resources:
  LambdaFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: 'Nimi-DynamicDNS-Route53'
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
            {% if hosted_zones %}
              - Effect: "Allow"
                Action:
                  - "route53:ChangeResourceRecordSets"
                  - "route53:ListResourceRecordSets"
                Resource:
                {% for hosted_zone in hosted_zones %}
                  - "arn:aws:route53:::hostedzone/{{ hosted_zone }}"
                {% endfor %}
            {% endif %}
              - Effect: "Allow"
                Action:
                  - "route53:GetChange"
                Resource:
                  - "arn:aws:route53:::change/*"

  LambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: !Ref LambdaFunctionCode
      {% if env %}
      Environment:
        Variables:
        {% for key, value in env.items() %}
          {{ key }}: {{ value }}
        {% endfor %}
      {% endif %}
      Handler: index.lambda_handler
      Role: !GetAtt LambdaFunctionRole.Arn
      Runtime: python3.6

  LambdaProxy:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: DynamicDNS API
      Description: Public API for self hosted dynamic DNS

  LambdaProxyPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt LambdaFunction.Arn
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${LambdaProxy}/*/*

  ProxyResourceANY:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref LambdaProxy
      ResourceId: !GetAtt [LambdaProxy, RootResourceId]
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations

  ProxyDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn: ProxyResourceANY
    Properties:
      RestApiId: !Ref LambdaProxy
      Description: Dynamic DNS API deployment
      StageName: dyndns

Outputs:
  ApiUrl:
    Value: !Sub "https://${LambdaProxy}.execute-api.${AWS::Region}.amazonaws.com/dyndns"
  LambdaFunctionName:
    Value: !Ref LambdaFunction
