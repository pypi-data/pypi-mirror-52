.. :doctest:

Initial imports:

    >>> from __future__ import print_function
    >>> from __future__ import unicode_literals
    >>> from checkoutmanager.runner import get_custom_actions, get_action
    >>> from checkoutmanager.dirinfo import DirInfo

In our own ``setup.py``, we have registered an entry point called "test". It
is registerd as a "custom action" entry point.

Check if abovementioned entry point is recognized by the program runner:

    >>> custom_actions = get_custom_actions()
    >>> func = custom_actions['test']
    >>> callable(func)
    True

Check if this action is selected when we pass its name on the command line:

    >>> dirinfo = DirInfo('/some/directory', 'http://some.url')
    >>> (action, kwargs) = get_action(dirinfo, custom_actions, 'test')
    >>> callable(action)
    True
    >>> kwargs
    {}

Call the action function:

    >>> action()
    Test action
    dirinfo: <DirInfo (xxx) for /some/directory>
    arguments:
    echo command executed.

Check if arguments are parsed correctly:

    >>> (action, kwargs) = get_action(dirinfo, custom_actions, 'test:arg1=val1,arg2=val2')
    >>> callable(action)
    True
    >>> kwargs['arg1'] == 'val1'
    True
    >>> kwargs['arg2'] == 'val2'
    True

Call the action function with the arguments:

    >>> action(**kwargs)
    Test action
    dirinfo: <DirInfo (xxx) for /some/directory>
    arguments: arg1: val1, arg2: val2
    echo command executed.

Check if an exception is raised when an invalid action name is given:

    >>> get_action(dirinfo, custom_actions, 'invalid_action_name')
    Traceback (most recent call last):
    ...
    RuntimeError: Invalid action: invalid_action_name
