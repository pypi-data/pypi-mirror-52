#!/usr/bin/env python3

"""
Each account in Libra is represented by a 32-byte address usually generated by
the sha3 hash of the accounts public key.
"""

import librapy.lib.hasher as hasher
from hashlib import sha3_256


class AccountAddress:
    def __init__(self, value):
        self.value = value

    def __repr__(self):
        return "AccountAddress({})".format(self.value.hex())

    def association():
        hex_value = "{:x}".format(0xA550C18)
        return AccountAddress.from_hex(hex_value)

    def default():
        return AccountAddress.from_hex("")

    def deserialize(deserializer):
        return AccountAddress(deserializer.decode_bytes())

    def from_hex(base_value):
        account_length = 64
        hex_value = ("0" * (account_length - len(base_value))) + base_value
        return AccountAddress(bytes(bytearray.fromhex(hex_value)))

    def from_signing_key(key):
        # hf = hasher.get_hash_function(AccountAddress)
        hf = sha3_256()
        hf.update(key.verify_key.encode())
        return AccountAddress(hf.digest())

    @classmethod
    def get_hash_prefix(cls):
        return b"AccountAddress"

    def serialize(self, serializer):
        serializer.encode_bytes(self.value)
        return serializer
