# coding: utf-8

"""
    Bridge API

    bridgeapi.io  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class AccountAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'name': 'str',
        'balance': 'float',
        'status': 'int',
        'item': 'IntegerIdResource',
        'bank': 'IntegerIdResource',
        'last_refresh_date': 'datetime',
        'loan_details': 'LoanDetails',
        'saving_details': 'SavingDetails'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'balance': 'balance',
        'status': 'status',
        'item': 'item',
        'bank': 'bank',
        'last_refresh_date': 'last_refresh_date',
        'loan_details': 'loan_details',
        'saving_details': 'saving_details'
    }

    def __init__(self, id=None, name=None, balance=None, status=None, item=None, bank=None, last_refresh_date=None, loan_details=None, saving_details=None):  # noqa: E501
        """AccountAllOf - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._name = None
        self._balance = None
        self._status = None
        self._item = None
        self._bank = None
        self._last_refresh_date = None
        self._loan_details = None
        self._saving_details = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if balance is not None:
            self.balance = balance
        if status is not None:
            self.status = status
        if item is not None:
            self.item = item
        if bank is not None:
            self.bank = bank
        if last_refresh_date is not None:
            self.last_refresh_date = last_refresh_date
        if loan_details is not None:
            self.loan_details = loan_details
        if saving_details is not None:
            self.saving_details = saving_details

    @property
    def id(self):
        """Gets the id of this AccountAllOf.  # noqa: E501


        :return: The id of this AccountAllOf.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AccountAllOf.


        :param id: The id of this AccountAllOf.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this AccountAllOf.  # noqa: E501


        :return: The name of this AccountAllOf.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AccountAllOf.


        :param name: The name of this AccountAllOf.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def balance(self):
        """Gets the balance of this AccountAllOf.  # noqa: E501


        :return: The balance of this AccountAllOf.  # noqa: E501
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this AccountAllOf.


        :param balance: The balance of this AccountAllOf.  # noqa: E501
        :type: float
        """

        self._balance = balance

    @property
    def status(self):
        """Gets the status of this AccountAllOf.  # noqa: E501


        :return: The status of this AccountAllOf.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AccountAllOf.


        :param status: The status of this AccountAllOf.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def item(self):
        """Gets the item of this AccountAllOf.  # noqa: E501


        :return: The item of this AccountAllOf.  # noqa: E501
        :rtype: IntegerIdResource
        """
        return self._item

    @item.setter
    def item(self, item):
        """Sets the item of this AccountAllOf.


        :param item: The item of this AccountAllOf.  # noqa: E501
        :type: IntegerIdResource
        """

        self._item = item

    @property
    def bank(self):
        """Gets the bank of this AccountAllOf.  # noqa: E501


        :return: The bank of this AccountAllOf.  # noqa: E501
        :rtype: IntegerIdResource
        """
        return self._bank

    @bank.setter
    def bank(self, bank):
        """Sets the bank of this AccountAllOf.


        :param bank: The bank of this AccountAllOf.  # noqa: E501
        :type: IntegerIdResource
        """

        self._bank = bank

    @property
    def last_refresh_date(self):
        """Gets the last_refresh_date of this AccountAllOf.  # noqa: E501


        :return: The last_refresh_date of this AccountAllOf.  # noqa: E501
        :rtype: datetime
        """
        return self._last_refresh_date

    @last_refresh_date.setter
    def last_refresh_date(self, last_refresh_date):
        """Sets the last_refresh_date of this AccountAllOf.


        :param last_refresh_date: The last_refresh_date of this AccountAllOf.  # noqa: E501
        :type: datetime
        """

        self._last_refresh_date = last_refresh_date

    @property
    def loan_details(self):
        """Gets the loan_details of this AccountAllOf.  # noqa: E501


        :return: The loan_details of this AccountAllOf.  # noqa: E501
        :rtype: LoanDetails
        """
        return self._loan_details

    @loan_details.setter
    def loan_details(self, loan_details):
        """Sets the loan_details of this AccountAllOf.


        :param loan_details: The loan_details of this AccountAllOf.  # noqa: E501
        :type: LoanDetails
        """

        self._loan_details = loan_details

    @property
    def saving_details(self):
        """Gets the saving_details of this AccountAllOf.  # noqa: E501


        :return: The saving_details of this AccountAllOf.  # noqa: E501
        :rtype: SavingDetails
        """
        return self._saving_details

    @saving_details.setter
    def saving_details(self, saving_details):
        """Sets the saving_details of this AccountAllOf.


        :param saving_details: The saving_details of this AccountAllOf.  # noqa: E501
        :type: SavingDetails
        """

        self._saving_details = saving_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountAllOf):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
