# coding: utf-8

"""
    Bridge API

    bridgeapi.io  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Transaction(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'resource_type': 'str',
        'resource_uri': 'str',
        'id': 'int',
        'description': 'str',
        'raw_description': 'str',
        'amount': 'float',
        'date': 'date',
        'updated_at': 'datetime',
        'is_deleted': 'bool',
        'category': 'Resource',
        'account': 'Resource'
    }

    attribute_map = {
        'resource_type': 'resource_type',
        'resource_uri': 'resource_uri',
        'id': 'id',
        'description': 'description',
        'raw_description': 'raw_description',
        'amount': 'amount',
        'date': 'date',
        'updated_at': 'updated_at',
        'is_deleted': 'is_deleted',
        'category': 'category',
        'account': 'account'
    }

    def __init__(self, resource_type=None, resource_uri=None, id=None, description=None, raw_description=None, amount=None, date=None, updated_at=None, is_deleted=None, category=None, account=None):  # noqa: E501
        """Transaction - a model defined in OpenAPI"""  # noqa: E501

        self._resource_type = None
        self._resource_uri = None
        self._id = None
        self._description = None
        self._raw_description = None
        self._amount = None
        self._date = None
        self._updated_at = None
        self._is_deleted = None
        self._category = None
        self._account = None
        self.discriminator = None

        if resource_type is not None:
            self.resource_type = resource_type
        if resource_uri is not None:
            self.resource_uri = resource_uri
        if id is not None:
            self.id = id
        if description is not None:
            self.description = description
        if raw_description is not None:
            self.raw_description = raw_description
        if amount is not None:
            self.amount = amount
        if date is not None:
            self.date = date
        if updated_at is not None:
            self.updated_at = updated_at
        if is_deleted is not None:
            self.is_deleted = is_deleted
        if category is not None:
            self.category = category
        if account is not None:
            self.account = account

    @property
    def resource_type(self):
        """Gets the resource_type of this Transaction.  # noqa: E501


        :return: The resource_type of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this Transaction.


        :param resource_type: The resource_type of this Transaction.  # noqa: E501
        :type: str
        """
        allowed_values = ["bank", "item", "account", "category", "user"]  # noqa: E501
        if resource_type not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_type` ({0}), must be one of {1}"  # noqa: E501
                .format(resource_type, allowed_values)
            )

        self._resource_type = resource_type

    @property
    def resource_uri(self):
        """Gets the resource_uri of this Transaction.  # noqa: E501


        :return: The resource_uri of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._resource_uri

    @resource_uri.setter
    def resource_uri(self, resource_uri):
        """Sets the resource_uri of this Transaction.


        :param resource_uri: The resource_uri of this Transaction.  # noqa: E501
        :type: str
        """

        self._resource_uri = resource_uri

    @property
    def id(self):
        """Gets the id of this Transaction.  # noqa: E501


        :return: The id of this Transaction.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Transaction.


        :param id: The id of this Transaction.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def description(self):
        """Gets the description of this Transaction.  # noqa: E501


        :return: The description of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Transaction.


        :param description: The description of this Transaction.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def raw_description(self):
        """Gets the raw_description of this Transaction.  # noqa: E501


        :return: The raw_description of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._raw_description

    @raw_description.setter
    def raw_description(self, raw_description):
        """Sets the raw_description of this Transaction.


        :param raw_description: The raw_description of this Transaction.  # noqa: E501
        :type: str
        """

        self._raw_description = raw_description

    @property
    def amount(self):
        """Gets the amount of this Transaction.  # noqa: E501


        :return: The amount of this Transaction.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Transaction.


        :param amount: The amount of this Transaction.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def date(self):
        """Gets the date of this Transaction.  # noqa: E501


        :return: The date of this Transaction.  # noqa: E501
        :rtype: date
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this Transaction.


        :param date: The date of this Transaction.  # noqa: E501
        :type: date
        """

        self._date = date

    @property
    def updated_at(self):
        """Gets the updated_at of this Transaction.  # noqa: E501


        :return: The updated_at of this Transaction.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Transaction.


        :param updated_at: The updated_at of this Transaction.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def is_deleted(self):
        """Gets the is_deleted of this Transaction.  # noqa: E501


        :return: The is_deleted of this Transaction.  # noqa: E501
        :rtype: bool
        """
        return self._is_deleted

    @is_deleted.setter
    def is_deleted(self, is_deleted):
        """Sets the is_deleted of this Transaction.


        :param is_deleted: The is_deleted of this Transaction.  # noqa: E501
        :type: bool
        """

        self._is_deleted = is_deleted

    @property
    def category(self):
        """Gets the category of this Transaction.  # noqa: E501


        :return: The category of this Transaction.  # noqa: E501
        :rtype: Resource
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Transaction.


        :param category: The category of this Transaction.  # noqa: E501
        :type: Resource
        """

        self._category = category

    @property
    def account(self):
        """Gets the account of this Transaction.  # noqa: E501


        :return: The account of this Transaction.  # noqa: E501
        :rtype: Resource
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this Transaction.


        :param account: The account of this Transaction.  # noqa: E501
        :type: Resource
        """

        self._account = account

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Transaction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
