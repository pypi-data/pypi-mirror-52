# coding: utf-8

"""
    Bridge API

    bridgeapi.io  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ItemAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'status': 'int',
        'bank': 'Resource',
        'accounts': 'list[IntegerIdResource]'
    }

    attribute_map = {
        'id': 'id',
        'status': 'status',
        'bank': 'bank',
        'accounts': 'accounts'
    }

    def __init__(self, id=None, status=None, bank=None, accounts=None):  # noqa: E501
        """ItemAllOf - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._status = None
        self._bank = None
        self._accounts = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if status is not None:
            self.status = status
        if bank is not None:
            self.bank = bank
        if accounts is not None:
            self.accounts = accounts

    @property
    def id(self):
        """Gets the id of this ItemAllOf.  # noqa: E501


        :return: The id of this ItemAllOf.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ItemAllOf.


        :param id: The id of this ItemAllOf.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def status(self):
        """Gets the status of this ItemAllOf.  # noqa: E501


        :return: The status of this ItemAllOf.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ItemAllOf.


        :param status: The status of this ItemAllOf.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def bank(self):
        """Gets the bank of this ItemAllOf.  # noqa: E501


        :return: The bank of this ItemAllOf.  # noqa: E501
        :rtype: Resource
        """
        return self._bank

    @bank.setter
    def bank(self, bank):
        """Sets the bank of this ItemAllOf.


        :param bank: The bank of this ItemAllOf.  # noqa: E501
        :type: Resource
        """

        self._bank = bank

    @property
    def accounts(self):
        """Gets the accounts of this ItemAllOf.  # noqa: E501


        :return: The accounts of this ItemAllOf.  # noqa: E501
        :rtype: list[IntegerIdResource]
        """
        return self._accounts

    @accounts.setter
    def accounts(self, accounts):
        """Sets the accounts of this ItemAllOf.


        :param accounts: The accounts of this ItemAllOf.  # noqa: E501
        :type: list[IntegerIdResource]
        """

        self._accounts = accounts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ItemAllOf):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
