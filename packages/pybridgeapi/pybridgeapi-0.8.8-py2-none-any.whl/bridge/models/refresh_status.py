# coding: utf-8

"""
    Bridge API

    bridgeapi.io  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class RefreshStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'status': 'str',
        'mfa': 'Mfa',
        'refreshed_at': 'datetime',
        'refreshed_accounts_count': 'int',
        'total_accounts_count': 'int'
    }

    attribute_map = {
        'status': 'status',
        'mfa': 'mfa',
        'refreshed_at': 'refreshed_at',
        'refreshed_accounts_count': 'refreshed_accounts_count',
        'total_accounts_count': 'total_accounts_count'
    }

    def __init__(self, status=None, mfa=None, refreshed_at=None, refreshed_accounts_count=None, total_accounts_count=None):  # noqa: E501
        """RefreshStatus - a model defined in OpenAPI"""  # noqa: E501

        self._status = None
        self._mfa = None
        self._refreshed_at = None
        self._refreshed_accounts_count = None
        self._total_accounts_count = None
        self.discriminator = None

        if status is not None:
            self.status = status
        if mfa is not None:
            self.mfa = mfa
        if refreshed_at is not None:
            self.refreshed_at = refreshed_at
        if refreshed_accounts_count is not None:
            self.refreshed_accounts_count = refreshed_accounts_count
        if total_accounts_count is not None:
            self.total_accounts_count = total_accounts_count

    @property
    def status(self):
        """Gets the status of this RefreshStatus.  # noqa: E501


        :return: The status of this RefreshStatus.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RefreshStatus.


        :param status: The status of this RefreshStatus.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def mfa(self):
        """Gets the mfa of this RefreshStatus.  # noqa: E501


        :return: The mfa of this RefreshStatus.  # noqa: E501
        :rtype: Mfa
        """
        return self._mfa

    @mfa.setter
    def mfa(self, mfa):
        """Sets the mfa of this RefreshStatus.


        :param mfa: The mfa of this RefreshStatus.  # noqa: E501
        :type: Mfa
        """

        self._mfa = mfa

    @property
    def refreshed_at(self):
        """Gets the refreshed_at of this RefreshStatus.  # noqa: E501


        :return: The refreshed_at of this RefreshStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._refreshed_at

    @refreshed_at.setter
    def refreshed_at(self, refreshed_at):
        """Sets the refreshed_at of this RefreshStatus.


        :param refreshed_at: The refreshed_at of this RefreshStatus.  # noqa: E501
        :type: datetime
        """

        self._refreshed_at = refreshed_at

    @property
    def refreshed_accounts_count(self):
        """Gets the refreshed_accounts_count of this RefreshStatus.  # noqa: E501


        :return: The refreshed_accounts_count of this RefreshStatus.  # noqa: E501
        :rtype: int
        """
        return self._refreshed_accounts_count

    @refreshed_accounts_count.setter
    def refreshed_accounts_count(self, refreshed_accounts_count):
        """Sets the refreshed_accounts_count of this RefreshStatus.


        :param refreshed_accounts_count: The refreshed_accounts_count of this RefreshStatus.  # noqa: E501
        :type: int
        """

        self._refreshed_accounts_count = refreshed_accounts_count

    @property
    def total_accounts_count(self):
        """Gets the total_accounts_count of this RefreshStatus.  # noqa: E501


        :return: The total_accounts_count of this RefreshStatus.  # noqa: E501
        :rtype: int
        """
        return self._total_accounts_count

    @total_accounts_count.setter
    def total_accounts_count(self, total_accounts_count):
        """Sets the total_accounts_count of this RefreshStatus.


        :param total_accounts_count: The total_accounts_count of this RefreshStatus.  # noqa: E501
        :type: int
        """

        self._total_accounts_count = total_accounts_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RefreshStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
