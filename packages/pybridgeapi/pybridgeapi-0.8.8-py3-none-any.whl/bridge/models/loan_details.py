# coding: utf-8

"""
    Bridge API

    bridgeapi.io  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class LoanDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'next_payment_date': 'date',
        'next_payment_amount': 'int',
        'maturity_date': 'date',
        'opening_date': 'date',
        'interest_rate': 'float',
        'type': 'str',
        'borrowed_capital': 'int',
        'repaid_capital': 'int',
        'remaining_capital': 'int'
    }

    attribute_map = {
        'next_payment_date': 'next_payment_date',
        'next_payment_amount': 'next_payment_amount',
        'maturity_date': 'maturity_date',
        'opening_date': 'opening_date',
        'interest_rate': 'interest_rate',
        'type': 'type',
        'borrowed_capital': 'borrowed_capital',
        'repaid_capital': 'repaid_capital',
        'remaining_capital': 'remaining_capital'
    }

    def __init__(self, next_payment_date=None, next_payment_amount=None, maturity_date=None, opening_date=None, interest_rate=None, type=None, borrowed_capital=None, repaid_capital=None, remaining_capital=None):  # noqa: E501
        """LoanDetails - a model defined in OpenAPI"""  # noqa: E501

        self._next_payment_date = None
        self._next_payment_amount = None
        self._maturity_date = None
        self._opening_date = None
        self._interest_rate = None
        self._type = None
        self._borrowed_capital = None
        self._repaid_capital = None
        self._remaining_capital = None
        self.discriminator = None

        if next_payment_date is not None:
            self.next_payment_date = next_payment_date
        if next_payment_amount is not None:
            self.next_payment_amount = next_payment_amount
        if maturity_date is not None:
            self.maturity_date = maturity_date
        if opening_date is not None:
            self.opening_date = opening_date
        if interest_rate is not None:
            self.interest_rate = interest_rate
        if type is not None:
            self.type = type
        if borrowed_capital is not None:
            self.borrowed_capital = borrowed_capital
        if repaid_capital is not None:
            self.repaid_capital = repaid_capital
        if remaining_capital is not None:
            self.remaining_capital = remaining_capital

    @property
    def next_payment_date(self):
        """Gets the next_payment_date of this LoanDetails.  # noqa: E501


        :return: The next_payment_date of this LoanDetails.  # noqa: E501
        :rtype: date
        """
        return self._next_payment_date

    @next_payment_date.setter
    def next_payment_date(self, next_payment_date):
        """Sets the next_payment_date of this LoanDetails.


        :param next_payment_date: The next_payment_date of this LoanDetails.  # noqa: E501
        :type: date
        """

        self._next_payment_date = next_payment_date

    @property
    def next_payment_amount(self):
        """Gets the next_payment_amount of this LoanDetails.  # noqa: E501


        :return: The next_payment_amount of this LoanDetails.  # noqa: E501
        :rtype: int
        """
        return self._next_payment_amount

    @next_payment_amount.setter
    def next_payment_amount(self, next_payment_amount):
        """Sets the next_payment_amount of this LoanDetails.


        :param next_payment_amount: The next_payment_amount of this LoanDetails.  # noqa: E501
        :type: int
        """

        self._next_payment_amount = next_payment_amount

    @property
    def maturity_date(self):
        """Gets the maturity_date of this LoanDetails.  # noqa: E501


        :return: The maturity_date of this LoanDetails.  # noqa: E501
        :rtype: date
        """
        return self._maturity_date

    @maturity_date.setter
    def maturity_date(self, maturity_date):
        """Sets the maturity_date of this LoanDetails.


        :param maturity_date: The maturity_date of this LoanDetails.  # noqa: E501
        :type: date
        """

        self._maturity_date = maturity_date

    @property
    def opening_date(self):
        """Gets the opening_date of this LoanDetails.  # noqa: E501


        :return: The opening_date of this LoanDetails.  # noqa: E501
        :rtype: date
        """
        return self._opening_date

    @opening_date.setter
    def opening_date(self, opening_date):
        """Sets the opening_date of this LoanDetails.


        :param opening_date: The opening_date of this LoanDetails.  # noqa: E501
        :type: date
        """

        self._opening_date = opening_date

    @property
    def interest_rate(self):
        """Gets the interest_rate of this LoanDetails.  # noqa: E501


        :return: The interest_rate of this LoanDetails.  # noqa: E501
        :rtype: float
        """
        return self._interest_rate

    @interest_rate.setter
    def interest_rate(self, interest_rate):
        """Sets the interest_rate of this LoanDetails.


        :param interest_rate: The interest_rate of this LoanDetails.  # noqa: E501
        :type: float
        """

        self._interest_rate = interest_rate

    @property
    def type(self):
        """Gets the type of this LoanDetails.  # noqa: E501


        :return: The type of this LoanDetails.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this LoanDetails.


        :param type: The type of this LoanDetails.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def borrowed_capital(self):
        """Gets the borrowed_capital of this LoanDetails.  # noqa: E501


        :return: The borrowed_capital of this LoanDetails.  # noqa: E501
        :rtype: int
        """
        return self._borrowed_capital

    @borrowed_capital.setter
    def borrowed_capital(self, borrowed_capital):
        """Sets the borrowed_capital of this LoanDetails.


        :param borrowed_capital: The borrowed_capital of this LoanDetails.  # noqa: E501
        :type: int
        """

        self._borrowed_capital = borrowed_capital

    @property
    def repaid_capital(self):
        """Gets the repaid_capital of this LoanDetails.  # noqa: E501


        :return: The repaid_capital of this LoanDetails.  # noqa: E501
        :rtype: int
        """
        return self._repaid_capital

    @repaid_capital.setter
    def repaid_capital(self, repaid_capital):
        """Sets the repaid_capital of this LoanDetails.


        :param repaid_capital: The repaid_capital of this LoanDetails.  # noqa: E501
        :type: int
        """

        self._repaid_capital = repaid_capital

    @property
    def remaining_capital(self):
        """Gets the remaining_capital of this LoanDetails.  # noqa: E501


        :return: The remaining_capital of this LoanDetails.  # noqa: E501
        :rtype: int
        """
        return self._remaining_capital

    @remaining_capital.setter
    def remaining_capital(self, remaining_capital):
        """Sets the remaining_capital of this LoanDetails.


        :param remaining_capital: The remaining_capital of this LoanDetails.  # noqa: E501
        :type: int
        """

        self._remaining_capital = remaining_capital

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoanDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
