Metadata-Version: 2.1
Name: seabird
Version: 0.11.5
Summary: Parser for Sea-Bird's CTD and TSG.
Home-page: http://seabird.castelao.net
Author: Guilherme Castelao , Luiz Irber
Author-email: guilherme@castelao.net, luiz.irber@gmail.com
License: 3-clause BSD
Description: =======
        Seabird
        =======
        
        .. image:: https://zenodo.org/badge/4645/castelao/seabird.svg
           :target: https://zenodo.org/badge/latestdoi/4645/castelao/seabird
        
        .. image:: https://readthedocs.org/projects/seabird/badge/?version=latest
           :target: https://readthedocs.org/projects/seabird/?badge=latest
              :alt: Documentation Status
        
        .. image:: https://img.shields.io/travis/castelao/seabird.svg
           :target: https://travis-ci.org/castelao/seabird
        
        .. image:: https://codecov.io/gh/castelao/seabird/branch/master/graph/badge.svg
          :target: https://codecov.io/gh/castelao/seabird
        
        .. image:: https://img.shields.io/pypi/v/seabird.svg
           :target: https://pypi.python.org/pypi/seabird
        
        .. image:: https://mybinder.org/badge_logo.svg
           :target: https://mybinder.org/v2/gh/castelao/seabird/master?filepath=docs%2Fnotebooks
        
        
        This is a parser for Sea Bird CTD and TSG output files.
        
        The `Sea Bird CTD`_ post processed data usually uses the .cnv extention. The purpose of the PySeabird is to parse this type of files, considering the different versions along the time, as well as different setups.
        
        At this point my goal is to have an object with the attributes parsed from the header, and the data as Masked Arrays, so that the user doesn't need to loose time evaluating the version and details of that cnv, but have it in a standard pattern, ready to use.
        
        ATENTION, this is not an official package, so if you have trouble with it, do not complain to Sea-Bird. Open an issue at GitHub (https://github.com/castelao/seabird/issues), and I'll try to help you.
        
        .. _`Sea Bird CTD`: http://www.seabird.com/software/SBEDataProcforWindows.htm
        
        Support and Documentation
        -------------------------
        
        The documentation is available at `seabird.readthedocs.org`_.
        
        The `Seasoft`_ manual might be the best reference for the format used.
        
        If PySeabird doesn't work with your .cnv files, send me a sample (just one .cnv) and I'll fix to run it. The SeaBird changed the format several times along the time, so I need to see what do you have, to adjust PySeabird to work with it.
        
        .. _`seabird.readthedocs.org`: http://seabird.readthedocs.org
        .. _`Seasoft`: http://www.seabird.com/pdf_documents/manuals/Seasoft_4.249Rev05-02.pdf
        
        Quick howto use
        ---------------
        
        To install:
        
            pip install seabird
        
        
        One way to use is running on the shell the cnvdump. Independent of the historical version of the cnv file, it will return a default structure: 
        
            seabird cnvdump your_file.cnv
        
        
        To convert a .cnv (CTD output) into a NetCDF file, run:
        
            seabird cnv2nc your_file.cnv
        
        
        In a python script, one can use like this:
        
            from seabird.cnv import fCNV
        
            profile = fCNV('your_file.cnv')
        
            profile.attrs # It will return the header, as a dictionary.
        
            profile.keys() # It will list the available variables.
        
            profile['TEMP2'] # If TEMP2 was on the .keys(), this is how you get the data. It will be a masked array.
        
        
        Check the example notebooks: http://nbviewer.ipython.org/github/castelao/seabird/tree/master/docs/notebooks/
        
        
        License
        -------
        
        ``seabird`` is licensed under a 3-clause BSD style license - see LICENSE.rst
        
        Authors
        -------
        
        Guilherme Castel√£o <guilherme@castelao.net> and Luiz Irber <luiz.irber@gmail.com>
        
        
        
        
        History
        -------
        
        0.11.x
        ------
        
        * Migrating QC resources from CoTeDe to here. Until now CoTeDe would use PySeabird to understand CTD & TSG data files to QC, but now it is PySeabird that imports CoTeDe, as a plugin, to apply those same QC procedures.
        
        0.10.x
        ------
        
        * Data variables split by position. Rare cases use 11 characters thus not leaving any space between fields.
        * Improved bottle dataset
        
        0.9.x
        -----
        
        * This release is a dirty solution for some issues that I would like to address before refactor the whole package.
        * Reads CTD bottle files (.btl)
        
        0.8.x
        -----
        
        * Removed dependency on YAML, in favor to JSON.
        * Added support to read binary file type.
        
        0.7.x
        -----
        
        * Python 2.6 is no long supported.
        
        0.6.x
        -----
        
        * CF vocabulary for variables names (PRES, TEMP, PSAL, LONGITUDE ...)
        * Reorganizing the package. Removed src, and added several supporting files.
        * Moving CNVError into seabird.exceptions
        * Updated status for Production.
        * Bugfix to md5hash a file with special latin1 characters.
        
        0.5.9
        -----
        
        * New attributes, sbe_model and instrument_type.
        * Sorry, lost track of updates.
        
        0.5.3
        -----
        
        * Found a bug on load_data. Zeros could be mistaken by a bad_flag lower than 1e-8.
        * The new rule accepts no notes on the header.
        * Thanks to Laurynas for the .cnv file example that trigged the items above.
        
        0.5.1
        -----
        
        * Testing structure
        * Some minor improvements in the core.
        
        0.4.4
        -----
        
        * Carolina Nobre provided some .cnv files without any time variable, i.e. no timeS, timeJ or timeQ. The CNV() will not fail anymore if lacks a time record.
        
        0.4
        ---
        
        * The oficial package name now is seabird. I realized that my goal here goes beyond to just parse the .cnv files, so the name seabird covers it better.
        
        0.3
        ---
        
        * cnv2nc, a script to convert the cnv into a netCDF file.
        
        0.2
        ---
        
        * First public release
        
        0.1.8
        -----
        
        * Refactoring. Parsed text is saved in self.parsed, preparing to output
            everything that wasn't specifically parsed.
        * XML is extracted into self.attrs['awkward_xml']
        
        0.1.7
        -----
        
        * Now it calculate and include the hex md5sum.
        * Bugfix, now handle well when timeJ has masked values.
        * Bugfix converting timeJ, it was one day longer.
        * I'll run on the whole PIRATA dataset to check against different formats
            and after that it will be ready for 0.2 as Beta version
        
        0.1.6
        -----
        
        * When position available in the header.intro as NMEA, load this instead of
            try to parse from the header.notes.
        * Load default values from a yaml file, like attributes{cruise, project, 
            shipname ...}
        * Using a recommended variable names list
        
        0.1.5
        -----
        
        * Initial prototype of the cnvdump
        
        0.1.1
        -----
        
        * Rules are now inside the package, and loaded with pkg_resources.
        
        0.1
        ---
        
        *Release date: 3-Jul-2012*
        
        * Initial import.
        * It's able to load the variables into Masked Array, but it's not the best way to do it.
        
Keywords: oceanography ocean data CTD TSG SeaBird hydrography parser
Platform: any
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: BSD License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Topic :: Scientific/Engineering
Provides-Extra: QC
Provides-Extra: CDF
Provides-Extra: test
