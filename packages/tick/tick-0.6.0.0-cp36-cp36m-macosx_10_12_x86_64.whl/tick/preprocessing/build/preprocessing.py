# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_preprocessing', [dirname(__file__)])
        except ImportError:
            import _preprocessing
            return _preprocessing
        if fp is not None:
            try:
                _mod = imp.load_module('_preprocessing', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _preprocessing = swig_import_helper()
    del swig_import_helper
else:
    import _preprocessing
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_preprocessing.SHARED_PTR_DISOWN_swigconstant(_preprocessing)
SHARED_PTR_DISOWN = _preprocessing.SHARED_PTR_DISOWN

def to_hex(bytes: 'std::string const &') -> "std::string":
    """to_hex(std::string const & bytes) -> std::string"""
    return _preprocessing.to_hex(bytes)

def to_bytes(hex: 'std::string const &') -> "std::string":
    """to_bytes(std::string const & hex) -> std::string"""
    return _preprocessing.to_bytes(hex)
import tick.base
import tick.array.build.array
class SparseLongitudinalFeaturesProduct(_object):
    """Proxy of C++ SparseLongitudinalFeaturesProduct class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SparseLongitudinalFeaturesProduct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SparseLongitudinalFeaturesProduct, name)
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtrList1D const &'):
        """__init__(SparseLongitudinalFeaturesProduct self, SBaseArrayDouble2dPtrList1D const & features) -> SparseLongitudinalFeaturesProduct"""
        this = _preprocessing.new_SparseLongitudinalFeaturesProduct(features)
        try:
            self.this.append(this)
        except:
            self.this = this

    def sparse_features_product(self, row: 'ArrayULong &', col: 'ArrayULong &', data: 'ArrayDouble &', out_row: 'ArrayULong &', out_col: 'ArrayULong &', out_data: 'ArrayDouble &') -> "void":
        """sparse_features_product(SparseLongitudinalFeaturesProduct self, ArrayULong & row, ArrayULong & col, ArrayDouble & data, ArrayULong & out_row, ArrayULong & out_col, ArrayDouble & out_data)"""
        return _preprocessing.SparseLongitudinalFeaturesProduct_sparse_features_product(self, row, col, data, out_row, out_col, out_data)


    def __getstate__(self): return SparseLongitudinalFeaturesProductSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return SparseLongitudinalFeaturesProductDeserialize(self, s)

    __swig_destroy__ = _preprocessing.delete_SparseLongitudinalFeaturesProduct
    __del__ = lambda self: None
SparseLongitudinalFeaturesProduct_swigregister = _preprocessing.SparseLongitudinalFeaturesProduct_swigregister
SparseLongitudinalFeaturesProduct_swigregister(SparseLongitudinalFeaturesProduct)


def SparseLongitudinalFeaturesProductDeserialize(ptr: 'SparseLongitudinalFeaturesProduct', hex: 'std::string const &') -> "void":
    """SparseLongitudinalFeaturesProductDeserialize(SparseLongitudinalFeaturesProduct ptr, std::string const & hex)"""
    return _preprocessing.SparseLongitudinalFeaturesProductDeserialize(ptr, hex)

def SparseLongitudinalFeaturesProductSerialize(ptr: 'SparseLongitudinalFeaturesProduct') -> "std::string":
    """SparseLongitudinalFeaturesProductSerialize(SparseLongitudinalFeaturesProduct ptr) -> std::string"""
    return _preprocessing.SparseLongitudinalFeaturesProductSerialize(ptr)
class LongitudinalFeaturesLagger(_object):
    """Proxy of C++ LongitudinalFeaturesLagger class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LongitudinalFeaturesLagger, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LongitudinalFeaturesLagger, name)
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtrList1D const &', n_lags: 'SArrayULongPtr const'):
        """__init__(LongitudinalFeaturesLagger self, SBaseArrayDouble2dPtrList1D const & features, SArrayULongPtr const n_lags) -> LongitudinalFeaturesLagger"""
        this = _preprocessing.new_LongitudinalFeaturesLagger(features, n_lags)
        try:
            self.this.append(this)
        except:
            self.this = this

    def dense_lag_preprocessor(self, features: 'ArrayDouble2d &', out: 'ArrayDouble2d &', censoring: 'ulong') -> "void":
        """dense_lag_preprocessor(LongitudinalFeaturesLagger self, ArrayDouble2d & features, ArrayDouble2d & out, ulong censoring)"""
        return _preprocessing.LongitudinalFeaturesLagger_dense_lag_preprocessor(self, features, out, censoring)


    def sparse_lag_preprocessor(self, row: 'ArrayULong &', col: 'ArrayULong &', data: 'ArrayDouble &', out_row: 'ArrayULong &', out_col: 'ArrayULong &', out_data: 'ArrayDouble &', censoring: 'ulong') -> "void":
        """sparse_lag_preprocessor(LongitudinalFeaturesLagger self, ArrayULong & row, ArrayULong & col, ArrayDouble & data, ArrayULong & out_row, ArrayULong & out_col, ArrayDouble & out_data, ulong censoring)"""
        return _preprocessing.LongitudinalFeaturesLagger_sparse_lag_preprocessor(self, row, col, data, out_row, out_col, out_data, censoring)


    def __getstate__(self): return LongitudinalFeaturesLaggerSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return LongitudinalFeaturesLaggerDeserialize(self, s)

    __swig_destroy__ = _preprocessing.delete_LongitudinalFeaturesLagger
    __del__ = lambda self: None
LongitudinalFeaturesLagger_swigregister = _preprocessing.LongitudinalFeaturesLagger_swigregister
LongitudinalFeaturesLagger_swigregister(LongitudinalFeaturesLagger)


def LongitudinalFeaturesLaggerDeserialize(ptr: 'LongitudinalFeaturesLagger', hex: 'std::string const &') -> "void":
    """LongitudinalFeaturesLaggerDeserialize(LongitudinalFeaturesLagger ptr, std::string const & hex)"""
    return _preprocessing.LongitudinalFeaturesLaggerDeserialize(ptr, hex)

def LongitudinalFeaturesLaggerSerialize(ptr: 'LongitudinalFeaturesLagger') -> "std::string":
    """LongitudinalFeaturesLaggerSerialize(LongitudinalFeaturesLagger ptr) -> std::string"""
    return _preprocessing.LongitudinalFeaturesLaggerSerialize(ptr)
# This file is compatible with both classic and new-style classes.


