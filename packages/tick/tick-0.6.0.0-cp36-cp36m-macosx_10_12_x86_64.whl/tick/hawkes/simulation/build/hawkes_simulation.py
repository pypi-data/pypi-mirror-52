# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_hawkes_simulation', [dirname(__file__)])
        except ImportError:
            import _hawkes_simulation
            return _hawkes_simulation
        if fp is not None:
            try:
                _mod = imp.load_module('_hawkes_simulation', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _hawkes_simulation = swig_import_helper()
    del swig_import_helper
else:
    import _hawkes_simulation
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def to_hex(bytes: 'std::string const &') -> "std::string":
    """to_hex(std::string const & bytes) -> std::string"""
    return _hawkes_simulation.to_hex(bytes)

def to_bytes(hex: 'std::string const &') -> "std::string":
    """to_bytes(std::string const & hex) -> std::string"""
    return _hawkes_simulation.to_bytes(hex)

_hawkes_simulation.SHARED_PTR_DISOWN_swigconstant(_hawkes_simulation)
SHARED_PTR_DISOWN = _hawkes_simulation.SHARED_PTR_DISOWN
import tick.base
import tick.array.build.array
class PP(_object):
    """Proxy of C++ PP class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PP, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PP, name)
    __repr__ = _swig_repr

    def __init__(self, n_nodes: 'unsigned int', seed: 'int'=-1):
        """
        __init__(PP self, unsigned int n_nodes, int seed=-1) -> PP
        __init__(PP self, unsigned int n_nodes) -> PP
        """
        this = _hawkes_simulation.new_PP(n_nodes, seed)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _hawkes_simulation.delete_PP
    __del__ = lambda self: None

    def activate_itr(self, dt: 'double') -> "void":
        """activate_itr(PP self, double dt)"""
        return _hawkes_simulation.PP_activate_itr(self, dt)


    def simulate(self, *args) -> "void":
        """
        simulate(PP self, double run_time)
        simulate(PP self, ulong n_points)
        simulate(PP self, double run_time, ulong n_points)
        """
        return _hawkes_simulation.PP_simulate(self, *args)


    def reset(self) -> "void":
        """reset(PP self)"""
        return _hawkes_simulation.PP_reset(self)


    def itr_on(self) -> "bool":
        """itr_on(PP self) -> bool"""
        return _hawkes_simulation.PP_itr_on(self)


    def get_time(self) -> "double":
        """get_time(PP self) -> double"""
        return _hawkes_simulation.PP_get_time(self)


    def get_n_nodes(self) -> "unsigned int":
        """get_n_nodes(PP self) -> unsigned int"""
        return _hawkes_simulation.PP_get_n_nodes(self)


    def get_seed(self) -> "int":
        """get_seed(PP self) -> int"""
        return _hawkes_simulation.PP_get_seed(self)


    def get_n_total_jumps(self) -> "ulong":
        """get_n_total_jumps(PP self) -> ulong"""
        return _hawkes_simulation.PP_get_n_total_jumps(self)


    def get_itr(self) -> "VArrayDoublePtrList1D":
        """get_itr(PP self) -> VArrayDoublePtrList1D"""
        return _hawkes_simulation.PP_get_itr(self)


    def get_itr_times(self) -> "VArrayDoublePtr":
        """get_itr_times(PP self) -> VArrayDoublePtr"""
        return _hawkes_simulation.PP_get_itr_times(self)


    def get_itr_step(self) -> "double":
        """get_itr_step(PP self) -> double"""
        return _hawkes_simulation.PP_get_itr_step(self)


    def reseed_random_generator(self, seed: 'int') -> "void":
        """reseed_random_generator(PP self, int seed)"""
        return _hawkes_simulation.PP_reseed_random_generator(self, seed)


    def get_timestamps(self) -> "SArrayDoublePtrList1D":
        """get_timestamps(PP self) -> SArrayDoublePtrList1D"""
        return _hawkes_simulation.PP_get_timestamps(self)


    def set_timestamps(self, timestamps: 'VArrayDoublePtrList1D &', end_time: 'double') -> "void":
        """set_timestamps(PP self, VArrayDoublePtrList1D & timestamps, double end_time)"""
        return _hawkes_simulation.PP_set_timestamps(self, timestamps, end_time)


    def get_threshold_negative_intensity(self) -> "bool":
        """get_threshold_negative_intensity(PP self) -> bool"""
        return _hawkes_simulation.PP_get_threshold_negative_intensity(self)


    def set_threshold_negative_intensity(self, threshold_negative_intensity: 'bool const') -> "void":
        """set_threshold_negative_intensity(PP self, bool const threshold_negative_intensity)"""
        return _hawkes_simulation.PP_set_threshold_negative_intensity(self, threshold_negative_intensity)

PP_swigregister = _hawkes_simulation.PP_swigregister
PP_swigregister(PP)

class Poisson(PP):
    """Proxy of C++ Poisson class"""
    __swig_setmethods__ = {}
    for _s in [PP]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Poisson, name, value)
    __swig_getmethods__ = {}
    for _s in [PP]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Poisson, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Poisson self, double intensity, int seed=-1) -> Poisson
        __init__(Poisson self, double intensity) -> Poisson
        __init__(Poisson self, SArrayDoublePtr intensities, int seed=-1) -> Poisson
        __init__(Poisson self, SArrayDoublePtr intensities) -> Poisson
        """
        this = _hawkes_simulation.new_Poisson(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _hawkes_simulation.delete_Poisson
    __del__ = lambda self: None

    def get_intensities(self) -> "SArrayDoublePtr":
        """get_intensities(Poisson self) -> SArrayDoublePtr"""
        return _hawkes_simulation.Poisson_get_intensities(self)

Poisson_swigregister = _hawkes_simulation.Poisson_swigregister
Poisson_swigregister(Poisson)

class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _hawkes_simulation.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        """value(SwigPyIterator self) -> PyObject *"""
        return _hawkes_simulation.SwigPyIterator_value(self)


    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        """
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        incr(SwigPyIterator self) -> SwigPyIterator
        """
        return _hawkes_simulation.SwigPyIterator_incr(self, n)


    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        """
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        decr(SwigPyIterator self) -> SwigPyIterator
        """
        return _hawkes_simulation.SwigPyIterator_decr(self, n)


    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        """distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _hawkes_simulation.SwigPyIterator_distance(self, x)


    def equal(self, x: 'SwigPyIterator') -> "bool":
        """equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _hawkes_simulation.SwigPyIterator_equal(self, x)


    def copy(self) -> "swig::SwigPyIterator *":
        """copy(SwigPyIterator self) -> SwigPyIterator"""
        return _hawkes_simulation.SwigPyIterator_copy(self)


    def next(self) -> "PyObject *":
        """next(SwigPyIterator self) -> PyObject *"""
        return _hawkes_simulation.SwigPyIterator_next(self)


    def __next__(self) -> "PyObject *":
        """__next__(SwigPyIterator self) -> PyObject *"""
        return _hawkes_simulation.SwigPyIterator___next__(self)


    def previous(self) -> "PyObject *":
        """previous(SwigPyIterator self) -> PyObject *"""
        return _hawkes_simulation.SwigPyIterator_previous(self)


    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        """advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _hawkes_simulation.SwigPyIterator_advance(self, n)


    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        """__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _hawkes_simulation.SwigPyIterator___eq__(self, x)


    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        """__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _hawkes_simulation.SwigPyIterator___ne__(self, x)


    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        """__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _hawkes_simulation.SwigPyIterator___iadd__(self, n)


    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        """__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _hawkes_simulation.SwigPyIterator___isub__(self, n)


    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        """__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _hawkes_simulation.SwigPyIterator___add__(self, n)


    def __sub__(self, *args) -> "ptrdiff_t":
        """
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _hawkes_simulation.SwigPyIterator___sub__(self, *args)

    def __iter__(self):
        return self
SwigPyIterator_swigregister = _hawkes_simulation.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class TimeFunctionVector(_object):
    """Proxy of C++ std::vector<(TimeFunction)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeFunctionVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TimeFunctionVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(TimeFunctionVector self) -> SwigPyIterator"""
        return _hawkes_simulation.TimeFunctionVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(TimeFunctionVector self) -> bool"""
        return _hawkes_simulation.TimeFunctionVector___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(TimeFunctionVector self) -> bool"""
        return _hawkes_simulation.TimeFunctionVector___bool__(self)


    def __len__(self) -> "std::vector< TimeFunction >::size_type":
        """__len__(TimeFunctionVector self) -> std::vector< TimeFunction >::size_type"""
        return _hawkes_simulation.TimeFunctionVector___len__(self)


    def pop(self) -> "std::vector< TimeFunction >::value_type":
        """pop(TimeFunctionVector self) -> TimeFunction"""
        return _hawkes_simulation.TimeFunctionVector_pop(self)


    def __getslice__(self, i: 'std::vector< TimeFunction >::difference_type', j: 'std::vector< TimeFunction >::difference_type') -> "std::vector< TimeFunction,std::allocator< TimeFunction > > *":
        """__getslice__(TimeFunctionVector self, std::vector< TimeFunction >::difference_type i, std::vector< TimeFunction >::difference_type j) -> TimeFunctionVector"""
        return _hawkes_simulation.TimeFunctionVector___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(TimeFunctionVector self, std::vector< TimeFunction >::difference_type i, std::vector< TimeFunction >::difference_type j, TimeFunctionVector v)
        __setslice__(TimeFunctionVector self, std::vector< TimeFunction >::difference_type i, std::vector< TimeFunction >::difference_type j)
        """
        return _hawkes_simulation.TimeFunctionVector___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< TimeFunction >::difference_type', j: 'std::vector< TimeFunction >::difference_type') -> "void":
        """__delslice__(TimeFunctionVector self, std::vector< TimeFunction >::difference_type i, std::vector< TimeFunction >::difference_type j)"""
        return _hawkes_simulation.TimeFunctionVector___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(TimeFunctionVector self, std::vector< TimeFunction >::difference_type i)
        __delitem__(TimeFunctionVector self, PySliceObject * slice)
        """
        return _hawkes_simulation.TimeFunctionVector___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< TimeFunction >::value_type const &":
        """
        __getitem__(TimeFunctionVector self, PySliceObject * slice) -> TimeFunctionVector
        __getitem__(TimeFunctionVector self, std::vector< TimeFunction >::difference_type i) -> TimeFunction
        """
        return _hawkes_simulation.TimeFunctionVector___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(TimeFunctionVector self, PySliceObject * slice, TimeFunctionVector v)
        __setitem__(TimeFunctionVector self, PySliceObject * slice)
        __setitem__(TimeFunctionVector self, std::vector< TimeFunction >::difference_type i, TimeFunction x)
        """
        return _hawkes_simulation.TimeFunctionVector___setitem__(self, *args)


    def append(self, x: 'TimeFunction') -> "void":
        """append(TimeFunctionVector self, TimeFunction x)"""
        return _hawkes_simulation.TimeFunctionVector_append(self, x)


    def empty(self) -> "bool":
        """empty(TimeFunctionVector self) -> bool"""
        return _hawkes_simulation.TimeFunctionVector_empty(self)


    def size(self) -> "std::vector< TimeFunction >::size_type":
        """size(TimeFunctionVector self) -> std::vector< TimeFunction >::size_type"""
        return _hawkes_simulation.TimeFunctionVector_size(self)


    def clear(self) -> "void":
        """clear(TimeFunctionVector self)"""
        return _hawkes_simulation.TimeFunctionVector_clear(self)


    def swap(self, v: 'TimeFunctionVector') -> "void":
        """swap(TimeFunctionVector self, TimeFunctionVector v)"""
        return _hawkes_simulation.TimeFunctionVector_swap(self, v)


    def get_allocator(self) -> "std::vector< TimeFunction >::allocator_type":
        """get_allocator(TimeFunctionVector self) -> std::vector< TimeFunction >::allocator_type"""
        return _hawkes_simulation.TimeFunctionVector_get_allocator(self)


    def begin(self) -> "std::vector< TimeFunction >::iterator":
        """begin(TimeFunctionVector self) -> std::vector< TimeFunction >::iterator"""
        return _hawkes_simulation.TimeFunctionVector_begin(self)


    def end(self) -> "std::vector< TimeFunction >::iterator":
        """end(TimeFunctionVector self) -> std::vector< TimeFunction >::iterator"""
        return _hawkes_simulation.TimeFunctionVector_end(self)


    def rbegin(self) -> "std::vector< TimeFunction >::reverse_iterator":
        """rbegin(TimeFunctionVector self) -> std::vector< TimeFunction >::reverse_iterator"""
        return _hawkes_simulation.TimeFunctionVector_rbegin(self)


    def rend(self) -> "std::vector< TimeFunction >::reverse_iterator":
        """rend(TimeFunctionVector self) -> std::vector< TimeFunction >::reverse_iterator"""
        return _hawkes_simulation.TimeFunctionVector_rend(self)


    def pop_back(self) -> "void":
        """pop_back(TimeFunctionVector self)"""
        return _hawkes_simulation.TimeFunctionVector_pop_back(self)


    def erase(self, *args) -> "std::vector< TimeFunction >::iterator":
        """
        erase(TimeFunctionVector self, std::vector< TimeFunction >::iterator pos) -> std::vector< TimeFunction >::iterator
        erase(TimeFunctionVector self, std::vector< TimeFunction >::iterator first, std::vector< TimeFunction >::iterator last) -> std::vector< TimeFunction >::iterator
        """
        return _hawkes_simulation.TimeFunctionVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(TimeFunction)> self) -> TimeFunctionVector
        __init__(std::vector<(TimeFunction)> self, TimeFunctionVector arg2) -> TimeFunctionVector
        __init__(std::vector<(TimeFunction)> self, std::vector< TimeFunction >::size_type size) -> TimeFunctionVector
        __init__(std::vector<(TimeFunction)> self, std::vector< TimeFunction >::size_type size, TimeFunction value) -> TimeFunctionVector
        """
        this = _hawkes_simulation.new_TimeFunctionVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'TimeFunction') -> "void":
        """push_back(TimeFunctionVector self, TimeFunction x)"""
        return _hawkes_simulation.TimeFunctionVector_push_back(self, x)


    def front(self) -> "std::vector< TimeFunction >::value_type const &":
        """front(TimeFunctionVector self) -> TimeFunction"""
        return _hawkes_simulation.TimeFunctionVector_front(self)


    def back(self) -> "std::vector< TimeFunction >::value_type const &":
        """back(TimeFunctionVector self) -> TimeFunction"""
        return _hawkes_simulation.TimeFunctionVector_back(self)


    def assign(self, n: 'std::vector< TimeFunction >::size_type', x: 'TimeFunction') -> "void":
        """assign(TimeFunctionVector self, std::vector< TimeFunction >::size_type n, TimeFunction x)"""
        return _hawkes_simulation.TimeFunctionVector_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(TimeFunctionVector self, std::vector< TimeFunction >::size_type new_size)
        resize(TimeFunctionVector self, std::vector< TimeFunction >::size_type new_size, TimeFunction x)
        """
        return _hawkes_simulation.TimeFunctionVector_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(TimeFunctionVector self, std::vector< TimeFunction >::iterator pos, TimeFunction x) -> std::vector< TimeFunction >::iterator
        insert(TimeFunctionVector self, std::vector< TimeFunction >::iterator pos, std::vector< TimeFunction >::size_type n, TimeFunction x)
        """
        return _hawkes_simulation.TimeFunctionVector_insert(self, *args)


    def reserve(self, n: 'std::vector< TimeFunction >::size_type') -> "void":
        """reserve(TimeFunctionVector self, std::vector< TimeFunction >::size_type n)"""
        return _hawkes_simulation.TimeFunctionVector_reserve(self, n)


    def capacity(self) -> "std::vector< TimeFunction >::size_type":
        """capacity(TimeFunctionVector self) -> std::vector< TimeFunction >::size_type"""
        return _hawkes_simulation.TimeFunctionVector_capacity(self)

    __swig_destroy__ = _hawkes_simulation.delete_TimeFunctionVector
    __del__ = lambda self: None
TimeFunctionVector_swigregister = _hawkes_simulation.TimeFunctionVector_swigregister
TimeFunctionVector_swigregister(TimeFunctionVector)

class InhomogeneousPoisson(PP):
    """Proxy of C++ InhomogeneousPoisson class"""
    __swig_setmethods__ = {}
    for _s in [PP]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InhomogeneousPoisson, name, value)
    __swig_getmethods__ = {}
    for _s in [PP]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InhomogeneousPoisson, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(InhomogeneousPoisson self, TimeFunction intensity_function, int seed=-1) -> InhomogeneousPoisson
        __init__(InhomogeneousPoisson self, TimeFunction intensity_function) -> InhomogeneousPoisson
        __init__(InhomogeneousPoisson self, TimeFunctionVector intensity_functions, int seed=-1) -> InhomogeneousPoisson
        __init__(InhomogeneousPoisson self, TimeFunctionVector intensity_functions) -> InhomogeneousPoisson
        """
        this = _hawkes_simulation.new_InhomogeneousPoisson(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _hawkes_simulation.delete_InhomogeneousPoisson
    __del__ = lambda self: None

    def intensity_value(self, dimension: 'int', times_values: 'ArrayDouble &') -> "SArrayDoublePtr":
        """intensity_value(InhomogeneousPoisson self, int dimension, ArrayDouble & times_values) -> SArrayDoublePtr"""
        return _hawkes_simulation.InhomogeneousPoisson_intensity_value(self, dimension, times_values)

InhomogeneousPoisson_swigregister = _hawkes_simulation.InhomogeneousPoisson_swigregister
InhomogeneousPoisson_swigregister(InhomogeneousPoisson)

class Hawkes(PP):
    """Proxy of C++ Hawkes class"""
    __swig_setmethods__ = {}
    for _s in [PP]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Hawkes, name, value)
    __swig_getmethods__ = {}
    for _s in [PP]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Hawkes, name)
    __repr__ = _swig_repr

    def __init__(self, dimension: 'int', seed: 'int'=-1):
        """
        __init__(Hawkes self, int dimension, int seed=-1) -> Hawkes
        __init__(Hawkes self, int dimension) -> Hawkes
        """
        this = _hawkes_simulation.new_Hawkes(dimension, seed)
        try:
            self.this.append(this)
        except:
            self.this = this

    def set_kernel(self, i: 'unsigned int', j: 'unsigned int', kernel: 'std::shared_ptr< HawkesKernel >') -> "void":
        """set_kernel(Hawkes self, unsigned int i, unsigned int j, std::shared_ptr< HawkesKernel > kernel)"""
        return _hawkes_simulation.Hawkes_set_kernel(self, i, j, kernel)


    def set_baseline(self, *args) -> "void":
        """
        set_baseline(Hawkes self, unsigned int i, double baseline)
        set_baseline(Hawkes self, unsigned int i, ArrayDouble & times, ArrayDouble & values)
        set_baseline(Hawkes self, unsigned int i, TimeFunction time_function)
        """
        return _hawkes_simulation.Hawkes_set_baseline(self, *args)


    def get_baseline(self, *args) -> "double":
        """
        get_baseline(Hawkes self, unsigned int i, ArrayDouble & t) -> SArrayDoublePtr
        get_baseline(Hawkes self, unsigned int i, double t) -> double
        """
        return _hawkes_simulation.Hawkes_get_baseline(self, *args)


    def __getstate__(self): return HawkesSerialize(self)
    def __setstate__(self, s):
        self.__init__(0)
        return HawkesDeserialize(self, s)

    __swig_destroy__ = _hawkes_simulation.delete_Hawkes
    __del__ = lambda self: None
Hawkes_swigregister = _hawkes_simulation.Hawkes_swigregister
Hawkes_swigregister(Hawkes)


def HawkesDeserialize(ptr: 'Hawkes', hex: 'std::string const &') -> "void":
    """HawkesDeserialize(Hawkes ptr, std::string const & hex)"""
    return _hawkes_simulation.HawkesDeserialize(ptr, hex)

def HawkesSerialize(ptr: 'Hawkes') -> "std::string":
    """HawkesSerialize(Hawkes ptr) -> std::string"""
    return _hawkes_simulation.HawkesSerialize(ptr)
class HawkesKernel(_object):
    """Proxy of C++ HawkesKernel class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HawkesKernel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HawkesKernel, name)
    __repr__ = _swig_repr

    def __init__(self, support: 'double'=0):
        """
        __init__(HawkesKernel self, double support=0) -> HawkesKernel
        __init__(HawkesKernel self) -> HawkesKernel
        """
        this = _hawkes_simulation.new_HawkesKernel(support)
        try:
            self.this.append(this)
        except:
            self.this = this

    def is_zero(self) -> "bool":
        """is_zero(HawkesKernel self) -> bool"""
        return _hawkes_simulation.HawkesKernel_is_zero(self)


    def get_support(self) -> "double":
        """get_support(HawkesKernel self) -> double"""
        return _hawkes_simulation.HawkesKernel_get_support(self)


    def get_plot_support(self) -> "double":
        """get_plot_support(HawkesKernel self) -> double"""
        return _hawkes_simulation.HawkesKernel_get_plot_support(self)


    def get_value(self, x: 'double') -> "double":
        """get_value(HawkesKernel self, double x) -> double"""
        return _hawkes_simulation.HawkesKernel_get_value(self, x)


    def get_values(self, t_values: 'ArrayDouble const &') -> "SArrayDoublePtr":
        """get_values(HawkesKernel self, ArrayDouble const & t_values) -> SArrayDoublePtr"""
        return _hawkes_simulation.HawkesKernel_get_values(self, t_values)


    def get_norm(self, nsteps: 'int'=10000) -> "double":
        """
        get_norm(HawkesKernel self, int nsteps=10000) -> double
        get_norm(HawkesKernel self) -> double
        """
        return _hawkes_simulation.HawkesKernel_get_norm(self, nsteps)

    __swig_destroy__ = _hawkes_simulation.delete_HawkesKernel
    __del__ = lambda self: None
HawkesKernel_swigregister = _hawkes_simulation.HawkesKernel_swigregister
HawkesKernel_swigregister(HawkesKernel)

class HawkesKernelExp(HawkesKernel):
    """Proxy of C++ HawkesKernelExp class"""
    __swig_setmethods__ = {}
    for _s in [HawkesKernel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HawkesKernelExp, name, value)
    __swig_getmethods__ = {}
    for _s in [HawkesKernel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HawkesKernelExp, name)
    __repr__ = _swig_repr

    def set_fast_exp(flag: 'bool') -> "void":
        """set_fast_exp(bool flag)"""
        return _hawkes_simulation.HawkesKernelExp_set_fast_exp(flag)

    if _newclass:
        set_fast_exp = staticmethod(set_fast_exp)
    __swig_getmethods__["set_fast_exp"] = lambda x: set_fast_exp

    def get_fast_exp() -> "bool":
        """get_fast_exp() -> bool"""
        return _hawkes_simulation.HawkesKernelExp_get_fast_exp()

    if _newclass:
        get_fast_exp = staticmethod(get_fast_exp)
    __swig_getmethods__["get_fast_exp"] = lambda x: get_fast_exp

    def __init__(self, intensity: 'double', decay: 'double'):
        """__init__(HawkesKernelExp self, double intensity, double decay) -> HawkesKernelExp"""
        this = _hawkes_simulation.new_HawkesKernelExp(intensity, decay)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_intensity(self) -> "double":
        """get_intensity(HawkesKernelExp self) -> double"""
        return _hawkes_simulation.HawkesKernelExp_get_intensity(self)


    def get_decay(self) -> "double":
        """get_decay(HawkesKernelExp self) -> double"""
        return _hawkes_simulation.HawkesKernelExp_get_decay(self)


    def __getstate__(self): return HawkesKernelExpSerialize(self)
    def __setstate__(self, s):
        self.__init__(0.0,0.0)
        return HawkesKernelExpDeserialize(self, s)

    __swig_destroy__ = _hawkes_simulation.delete_HawkesKernelExp
    __del__ = lambda self: None
HawkesKernelExp_swigregister = _hawkes_simulation.HawkesKernelExp_swigregister
HawkesKernelExp_swigregister(HawkesKernelExp)

def HawkesKernelExp_set_fast_exp(flag: 'bool') -> "void":
    """HawkesKernelExp_set_fast_exp(bool flag)"""
    return _hawkes_simulation.HawkesKernelExp_set_fast_exp(flag)

def HawkesKernelExp_get_fast_exp() -> "bool":
    """HawkesKernelExp_get_fast_exp() -> bool"""
    return _hawkes_simulation.HawkesKernelExp_get_fast_exp()


def HawkesKernelExpDeserialize(ptr: 'HawkesKernelExp', hex: 'std::string const &') -> "void":
    """HawkesKernelExpDeserialize(HawkesKernelExp ptr, std::string const & hex)"""
    return _hawkes_simulation.HawkesKernelExpDeserialize(ptr, hex)

def HawkesKernelExpSerialize(ptr: 'HawkesKernelExp') -> "std::string":
    """HawkesKernelExpSerialize(HawkesKernelExp ptr) -> std::string"""
    return _hawkes_simulation.HawkesKernelExpSerialize(ptr)
class HawkesKernelSumExp(HawkesKernel):
    """Proxy of C++ HawkesKernelSumExp class"""
    __swig_setmethods__ = {}
    for _s in [HawkesKernel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HawkesKernelSumExp, name, value)
    __swig_getmethods__ = {}
    for _s in [HawkesKernel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HawkesKernelSumExp, name)
    __repr__ = _swig_repr

    def set_fast_exp(flag: 'bool') -> "void":
        """set_fast_exp(bool flag)"""
        return _hawkes_simulation.HawkesKernelSumExp_set_fast_exp(flag)

    if _newclass:
        set_fast_exp = staticmethod(set_fast_exp)
    __swig_getmethods__["set_fast_exp"] = lambda x: set_fast_exp

    def get_fast_exp() -> "bool":
        """get_fast_exp() -> bool"""
        return _hawkes_simulation.HawkesKernelSumExp_get_fast_exp()

    if _newclass:
        get_fast_exp = staticmethod(get_fast_exp)
    __swig_getmethods__["get_fast_exp"] = lambda x: get_fast_exp

    def __init__(self, *args):
        """
        __init__(HawkesKernelSumExp self, ArrayDouble const & intensities, ArrayDouble const & decays) -> HawkesKernelSumExp
        __init__(HawkesKernelSumExp self) -> HawkesKernelSumExp
        """
        this = _hawkes_simulation.new_HawkesKernelSumExp(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_intensities(self) -> "SArrayDoublePtr":
        """get_intensities(HawkesKernelSumExp self) -> SArrayDoublePtr"""
        return _hawkes_simulation.HawkesKernelSumExp_get_intensities(self)


    def get_decays(self) -> "SArrayDoublePtr":
        """get_decays(HawkesKernelSumExp self) -> SArrayDoublePtr"""
        return _hawkes_simulation.HawkesKernelSumExp_get_decays(self)


    def get_n_decays(self) -> "ulong":
        """get_n_decays(HawkesKernelSumExp self) -> ulong"""
        return _hawkes_simulation.HawkesKernelSumExp_get_n_decays(self)


    def __getstate__(self): return HawkesKernelSumExpSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return HawkesKernelSumExpDeserialize(self, s)

    __swig_destroy__ = _hawkes_simulation.delete_HawkesKernelSumExp
    __del__ = lambda self: None
HawkesKernelSumExp_swigregister = _hawkes_simulation.HawkesKernelSumExp_swigregister
HawkesKernelSumExp_swigregister(HawkesKernelSumExp)

def HawkesKernelSumExp_set_fast_exp(flag: 'bool') -> "void":
    """HawkesKernelSumExp_set_fast_exp(bool flag)"""
    return _hawkes_simulation.HawkesKernelSumExp_set_fast_exp(flag)

def HawkesKernelSumExp_get_fast_exp() -> "bool":
    """HawkesKernelSumExp_get_fast_exp() -> bool"""
    return _hawkes_simulation.HawkesKernelSumExp_get_fast_exp()


def HawkesKernelSumExpDeserialize(ptr: 'HawkesKernelSumExp', hex: 'std::string const &') -> "void":
    """HawkesKernelSumExpDeserialize(HawkesKernelSumExp ptr, std::string const & hex)"""
    return _hawkes_simulation.HawkesKernelSumExpDeserialize(ptr, hex)

def HawkesKernelSumExpSerialize(ptr: 'HawkesKernelSumExp') -> "std::string":
    """HawkesKernelSumExpSerialize(HawkesKernelSumExp ptr) -> std::string"""
    return _hawkes_simulation.HawkesKernelSumExpSerialize(ptr)
class HawkesKernelPowerLaw(HawkesKernel):
    """Proxy of C++ HawkesKernelPowerLaw class"""
    __swig_setmethods__ = {}
    for _s in [HawkesKernel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HawkesKernelPowerLaw, name, value)
    __swig_getmethods__ = {}
    for _s in [HawkesKernel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HawkesKernelPowerLaw, name)
    __repr__ = _swig_repr

    def __init__(self, multiplier: 'double', cutoff: 'double', exponent: 'double', support: 'double'=-1, error: 'double'=1e-5):
        """
        __init__(HawkesKernelPowerLaw self, double multiplier, double cutoff, double exponent, double support=-1, double error=1e-5) -> HawkesKernelPowerLaw
        __init__(HawkesKernelPowerLaw self, double multiplier, double cutoff, double exponent, double support=-1) -> HawkesKernelPowerLaw
        __init__(HawkesKernelPowerLaw self, double multiplier, double cutoff, double exponent) -> HawkesKernelPowerLaw
        """
        this = _hawkes_simulation.new_HawkesKernelPowerLaw(multiplier, cutoff, exponent, support, error)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_multiplier(self) -> "double":
        """get_multiplier(HawkesKernelPowerLaw self) -> double"""
        return _hawkes_simulation.HawkesKernelPowerLaw_get_multiplier(self)


    def get_exponent(self) -> "double":
        """get_exponent(HawkesKernelPowerLaw self) -> double"""
        return _hawkes_simulation.HawkesKernelPowerLaw_get_exponent(self)


    def get_cutoff(self) -> "double":
        """get_cutoff(HawkesKernelPowerLaw self) -> double"""
        return _hawkes_simulation.HawkesKernelPowerLaw_get_cutoff(self)


    def __getstate__(self): return HawkesKernelPowerLawSerialize(self)
    def __setstate__(self, s):
        self.__init__(0.0,1.0,1.0)
        return HawkesKernelPowerLawDeserialize(self, s)

    __swig_destroy__ = _hawkes_simulation.delete_HawkesKernelPowerLaw
    __del__ = lambda self: None
HawkesKernelPowerLaw_swigregister = _hawkes_simulation.HawkesKernelPowerLaw_swigregister
HawkesKernelPowerLaw_swigregister(HawkesKernelPowerLaw)


def HawkesKernelPowerLawDeserialize(ptr: 'HawkesKernelPowerLaw', hex: 'std::string const &') -> "void":
    """HawkesKernelPowerLawDeserialize(HawkesKernelPowerLaw ptr, std::string const & hex)"""
    return _hawkes_simulation.HawkesKernelPowerLawDeserialize(ptr, hex)

def HawkesKernelPowerLawSerialize(ptr: 'HawkesKernelPowerLaw') -> "std::string":
    """HawkesKernelPowerLawSerialize(HawkesKernelPowerLaw ptr) -> std::string"""
    return _hawkes_simulation.HawkesKernelPowerLawSerialize(ptr)
class HawkesKernelTimeFunc(HawkesKernel):
    """Proxy of C++ HawkesKernelTimeFunc class"""
    __swig_setmethods__ = {}
    for _s in [HawkesKernel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HawkesKernelTimeFunc, name, value)
    __swig_getmethods__ = {}
    for _s in [HawkesKernel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HawkesKernelTimeFunc, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(HawkesKernelTimeFunc self, TimeFunction time_function) -> HawkesKernelTimeFunc
        __init__(HawkesKernelTimeFunc self, ArrayDouble const & t_axis, ArrayDouble const & y_axis) -> HawkesKernelTimeFunc
        __init__(HawkesKernelTimeFunc self) -> HawkesKernelTimeFunc
        """
        this = _hawkes_simulation.new_HawkesKernelTimeFunc(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_time_function(self) -> "TimeFunction":
        """get_time_function(HawkesKernelTimeFunc self) -> TimeFunction"""
        return _hawkes_simulation.HawkesKernelTimeFunc_get_time_function(self)


    def __getstate__(self): return HawkesKernelTimeFuncSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return HawkesKernelTimeFuncDeserialize(self, s)

    __swig_destroy__ = _hawkes_simulation.delete_HawkesKernelTimeFunc
    __del__ = lambda self: None
HawkesKernelTimeFunc_swigregister = _hawkes_simulation.HawkesKernelTimeFunc_swigregister
HawkesKernelTimeFunc_swigregister(HawkesKernelTimeFunc)


def HawkesKernelTimeFuncDeserialize(ptr: 'HawkesKernelTimeFunc', hex: 'std::string const &') -> "void":
    """HawkesKernelTimeFuncDeserialize(HawkesKernelTimeFunc ptr, std::string const & hex)"""
    return _hawkes_simulation.HawkesKernelTimeFuncDeserialize(ptr, hex)

def HawkesKernelTimeFuncSerialize(ptr: 'HawkesKernelTimeFunc') -> "std::string":
    """HawkesKernelTimeFuncSerialize(HawkesKernelTimeFunc ptr) -> std::string"""
    return _hawkes_simulation.HawkesKernelTimeFuncSerialize(ptr)
class HawkesKernel0(HawkesKernel):
    """Proxy of C++ HawkesKernel0 class"""
    __swig_setmethods__ = {}
    for _s in [HawkesKernel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HawkesKernel0, name, value)
    __swig_getmethods__ = {}
    for _s in [HawkesKernel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HawkesKernel0, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(HawkesKernel0 self) -> HawkesKernel0"""
        this = _hawkes_simulation.new_HawkesKernel0()
        try:
            self.this.append(this)
        except:
            self.this = this

    def __getstate__(self): return HawkesKernel0Serialize(self)
    def __setstate__(self, s):
        self.__init__()
        return HawkesKernel0Deserialize(self, s)

    __swig_destroy__ = _hawkes_simulation.delete_HawkesKernel0
    __del__ = lambda self: None
HawkesKernel0_swigregister = _hawkes_simulation.HawkesKernel0_swigregister
HawkesKernel0_swigregister(HawkesKernel0)


def HawkesKernel0Deserialize(ptr: 'HawkesKernel0', hex: 'std::string const &') -> "void":
    """HawkesKernel0Deserialize(HawkesKernel0 ptr, std::string const & hex)"""
    return _hawkes_simulation.HawkesKernel0Deserialize(ptr, hex)

def HawkesKernel0Serialize(ptr: 'HawkesKernel0') -> "std::string":
    """HawkesKernel0Serialize(HawkesKernel0 ptr) -> std::string"""
    return _hawkes_simulation.HawkesKernel0Serialize(ptr)
# This file is compatible with both classic and new-style classes.


