# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_hawkes_inference', [dirname(__file__)])
        except ImportError:
            import _hawkes_inference
            return _hawkes_inference
        if fp is not None:
            try:
                _mod = imp.load_module('_hawkes_inference', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _hawkes_inference = swig_import_helper()
    del swig_import_helper
else:
    import _hawkes_inference
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def to_hex(bytes: 'std::string const &') -> "std::string":
    """to_hex(std::string const & bytes) -> std::string"""
    return _hawkes_inference.to_hex(bytes)

def to_bytes(hex: 'std::string const &') -> "std::string":
    """to_bytes(std::string const & hex) -> std::string"""
    return _hawkes_inference.to_bytes(hex)
import tick.base
import tick.array.build.array
class Model(_object):
    """Proxy of C++ TModel<(double,double)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Model, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Model, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(TModel<(double,double)> self) -> Model"""
        this = _hawkes_inference.new_Model()
        try:
            self.this.append(this)
        except:
            self.this = this

    def grad(self, coeffs: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
        """grad(Model self, ArrayDouble const & coeffs, ArrayDouble & out)"""
        return _hawkes_inference.Model_grad(self, coeffs, out)


    def loss(self, coeffs: 'ArrayDouble const &') -> "double":
        """loss(Model self, ArrayDouble const & coeffs) -> double"""
        return _hawkes_inference.Model_loss(self, coeffs)


    def get_epoch_size(self) -> "unsigned long":
        """get_epoch_size(Model self) -> unsigned long"""
        return _hawkes_inference.Model_get_epoch_size(self)


    def is_sparse(self) -> "bool":
        """is_sparse(Model self) -> bool"""
        return _hawkes_inference.Model_is_sparse(self)

    __swig_destroy__ = _hawkes_inference.delete_Model
    __del__ = lambda self: None
Model_swigregister = _hawkes_inference.Model_swigregister
Model_swigregister(Model)

class ModelDouble(_object):
    """Proxy of C++ TModel<(double,double)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModelDouble, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(TModel<(double,double)> self) -> ModelDouble"""
        this = _hawkes_inference.new_ModelDouble()
        try:
            self.this.append(this)
        except:
            self.this = this

    def grad(self, coeffs: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
        """grad(ModelDouble self, ArrayDouble const & coeffs, ArrayDouble & out)"""
        return _hawkes_inference.ModelDouble_grad(self, coeffs, out)


    def loss(self, coeffs: 'ArrayDouble const &') -> "double":
        """loss(ModelDouble self, ArrayDouble const & coeffs) -> double"""
        return _hawkes_inference.ModelDouble_loss(self, coeffs)


    def get_epoch_size(self) -> "unsigned long":
        """get_epoch_size(ModelDouble self) -> unsigned long"""
        return _hawkes_inference.ModelDouble_get_epoch_size(self)


    def is_sparse(self) -> "bool":
        """is_sparse(ModelDouble self) -> bool"""
        return _hawkes_inference.ModelDouble_is_sparse(self)

    __swig_destroy__ = _hawkes_inference.delete_ModelDouble
    __del__ = lambda self: None
ModelDouble_swigregister = _hawkes_inference.ModelDouble_swigregister
ModelDouble_swigregister(ModelDouble)

class ModelFloat(_object):
    """Proxy of C++ TModel<(float,float)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModelFloat, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(TModel<(float,float)> self) -> ModelFloat"""
        this = _hawkes_inference.new_ModelFloat()
        try:
            self.this.append(this)
        except:
            self.this = this

    def grad(self, coeffs: 'ArrayFloat const &', out: 'ArrayFloat &') -> "void":
        """grad(ModelFloat self, ArrayFloat const & coeffs, ArrayFloat & out)"""
        return _hawkes_inference.ModelFloat_grad(self, coeffs, out)


    def loss(self, coeffs: 'ArrayFloat const &') -> "double":
        """loss(ModelFloat self, ArrayFloat const & coeffs) -> double"""
        return _hawkes_inference.ModelFloat_loss(self, coeffs)


    def get_epoch_size(self) -> "unsigned long":
        """get_epoch_size(ModelFloat self) -> unsigned long"""
        return _hawkes_inference.ModelFloat_get_epoch_size(self)


    def is_sparse(self) -> "bool":
        """is_sparse(ModelFloat self) -> bool"""
        return _hawkes_inference.ModelFloat_is_sparse(self)

    __swig_destroy__ = _hawkes_inference.delete_ModelFloat
    __del__ = lambda self: None
ModelFloat_swigregister = _hawkes_inference.ModelFloat_swigregister
ModelFloat_swigregister(ModelFloat)

class ModelAtomicDouble(_object):
    """Proxy of C++ TModel<(double,std::atomic<(double)>)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelAtomicDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModelAtomicDouble, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(TModel<(double,std::atomic<(double)>)> self) -> ModelAtomicDouble"""
        this = _hawkes_inference.new_ModelAtomicDouble()
        try:
            self.this.append(this)
        except:
            self.this = this

    def grad(self, coeffs: 'ArrayAtomicDouble const &', out: 'ArrayDouble &') -> "void":
        """grad(ModelAtomicDouble self, ArrayAtomicDouble const & coeffs, ArrayDouble & out)"""
        return _hawkes_inference.ModelAtomicDouble_grad(self, coeffs, out)


    def loss(self, coeffs: 'ArrayAtomicDouble const &') -> "double":
        """loss(ModelAtomicDouble self, ArrayAtomicDouble const & coeffs) -> double"""
        return _hawkes_inference.ModelAtomicDouble_loss(self, coeffs)


    def get_epoch_size(self) -> "unsigned long":
        """get_epoch_size(ModelAtomicDouble self) -> unsigned long"""
        return _hawkes_inference.ModelAtomicDouble_get_epoch_size(self)


    def is_sparse(self) -> "bool":
        """is_sparse(ModelAtomicDouble self) -> bool"""
        return _hawkes_inference.ModelAtomicDouble_is_sparse(self)

    __swig_destroy__ = _hawkes_inference.delete_ModelAtomicDouble
    __del__ = lambda self: None
ModelAtomicDouble_swigregister = _hawkes_inference.ModelAtomicDouble_swigregister
ModelAtomicDouble_swigregister(ModelAtomicDouble)

class ModelAtomicFloat(_object):
    """Proxy of C++ TModel<(float,std::atomic<(float)>)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelAtomicFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModelAtomicFloat, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(TModel<(float,std::atomic<(float)>)> self) -> ModelAtomicFloat"""
        this = _hawkes_inference.new_ModelAtomicFloat()
        try:
            self.this.append(this)
        except:
            self.this = this

    def grad(self, coeffs: 'Array< std::atomic< float > > const &', out: 'ArrayFloat &') -> "void":
        """grad(ModelAtomicFloat self, Array< std::atomic< float > > const & coeffs, ArrayFloat & out)"""
        return _hawkes_inference.ModelAtomicFloat_grad(self, coeffs, out)


    def loss(self, coeffs: 'Array< std::atomic< float > > const &') -> "float":
        """loss(ModelAtomicFloat self, Array< std::atomic< float > > const & coeffs) -> float"""
        return _hawkes_inference.ModelAtomicFloat_loss(self, coeffs)


    def get_epoch_size(self) -> "unsigned long":
        """get_epoch_size(ModelAtomicFloat self) -> unsigned long"""
        return _hawkes_inference.ModelAtomicFloat_get_epoch_size(self)


    def is_sparse(self) -> "bool":
        """is_sparse(ModelAtomicFloat self) -> bool"""
        return _hawkes_inference.ModelAtomicFloat_is_sparse(self)

    __swig_destroy__ = _hawkes_inference.delete_ModelAtomicFloat
    __del__ = lambda self: None
ModelAtomicFloat_swigregister = _hawkes_inference.ModelAtomicFloat_swigregister
ModelAtomicFloat_swigregister(ModelAtomicFloat)

class ModelLabelsFeaturesDouble(Model):
    """Proxy of C++ TModelLabelsFeatures<(double,double)> class"""
    __swig_setmethods__ = {}
    for _s in [Model]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelLabelsFeaturesDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [Model]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelLabelsFeaturesDouble, name)
    __repr__ = _swig_repr

    def __init__(self, features: 'std::shared_ptr< BaseArray2d< double > > const', labels: 'std::shared_ptr< SArray< double > > const'):
        """__init__(TModelLabelsFeatures<(double,double)> self, std::shared_ptr< BaseArray2d< double > > const features, std::shared_ptr< SArray< double > > const labels) -> ModelLabelsFeaturesDouble"""
        this = _hawkes_inference.new_ModelLabelsFeaturesDouble(features, labels)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_n_samples(self) -> "unsigned long":
        """get_n_samples(ModelLabelsFeaturesDouble self) -> unsigned long"""
        return _hawkes_inference.ModelLabelsFeaturesDouble_get_n_samples(self)


    def get_n_features(self) -> "unsigned long":
        """get_n_features(ModelLabelsFeaturesDouble self) -> unsigned long"""
        return _hawkes_inference.ModelLabelsFeaturesDouble_get_n_features(self)

    __swig_destroy__ = _hawkes_inference.delete_ModelLabelsFeaturesDouble
    __del__ = lambda self: None
ModelLabelsFeaturesDouble_swigregister = _hawkes_inference.ModelLabelsFeaturesDouble_swigregister
ModelLabelsFeaturesDouble_swigregister(ModelLabelsFeaturesDouble)

class ModelLabelsFeaturesFloat(ModelFloat):
    """Proxy of C++ TModelLabelsFeatures<(float,float)> class"""
    __swig_setmethods__ = {}
    for _s in [ModelFloat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelLabelsFeaturesFloat, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelFloat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelLabelsFeaturesFloat, name)
    __repr__ = _swig_repr

    def __init__(self, features: 'std::shared_ptr< BaseArray2d< float > > const', labels: 'std::shared_ptr< SArray< float > > const'):
        """__init__(TModelLabelsFeatures<(float,float)> self, std::shared_ptr< BaseArray2d< float > > const features, std::shared_ptr< SArray< float > > const labels) -> ModelLabelsFeaturesFloat"""
        this = _hawkes_inference.new_ModelLabelsFeaturesFloat(features, labels)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_n_samples(self) -> "unsigned long":
        """get_n_samples(ModelLabelsFeaturesFloat self) -> unsigned long"""
        return _hawkes_inference.ModelLabelsFeaturesFloat_get_n_samples(self)


    def get_n_features(self) -> "unsigned long":
        """get_n_features(ModelLabelsFeaturesFloat self) -> unsigned long"""
        return _hawkes_inference.ModelLabelsFeaturesFloat_get_n_features(self)

    __swig_destroy__ = _hawkes_inference.delete_ModelLabelsFeaturesFloat
    __del__ = lambda self: None
ModelLabelsFeaturesFloat_swigregister = _hawkes_inference.ModelLabelsFeaturesFloat_swigregister
ModelLabelsFeaturesFloat_swigregister(ModelLabelsFeaturesFloat)

class ModelLabelsFeaturesAtomicDouble(ModelAtomicDouble):
    """Proxy of C++ TModelLabelsFeatures<(double,std::atomic<(double)>)> class"""
    __swig_setmethods__ = {}
    for _s in [ModelAtomicDouble]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelLabelsFeaturesAtomicDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelAtomicDouble]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelLabelsFeaturesAtomicDouble, name)
    __repr__ = _swig_repr

    def __init__(self, features: 'std::shared_ptr< BaseArray2d< double > > const', labels: 'std::shared_ptr< SArray< double > > const'):
        """__init__(TModelLabelsFeatures<(double,std::atomic<(double)>)> self, std::shared_ptr< BaseArray2d< double > > const features, std::shared_ptr< SArray< double > > const labels) -> ModelLabelsFeaturesAtomicDouble"""
        this = _hawkes_inference.new_ModelLabelsFeaturesAtomicDouble(features, labels)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_n_samples(self) -> "unsigned long":
        """get_n_samples(ModelLabelsFeaturesAtomicDouble self) -> unsigned long"""
        return _hawkes_inference.ModelLabelsFeaturesAtomicDouble_get_n_samples(self)


    def get_n_features(self) -> "unsigned long":
        """get_n_features(ModelLabelsFeaturesAtomicDouble self) -> unsigned long"""
        return _hawkes_inference.ModelLabelsFeaturesAtomicDouble_get_n_features(self)

    __swig_destroy__ = _hawkes_inference.delete_ModelLabelsFeaturesAtomicDouble
    __del__ = lambda self: None
ModelLabelsFeaturesAtomicDouble_swigregister = _hawkes_inference.ModelLabelsFeaturesAtomicDouble_swigregister
ModelLabelsFeaturesAtomicDouble_swigregister(ModelLabelsFeaturesAtomicDouble)

class ModelLabelsFeaturesAtomicFloat(ModelAtomicFloat):
    """Proxy of C++ TModelLabelsFeatures<(float,std::atomic<(float)>)> class"""
    __swig_setmethods__ = {}
    for _s in [ModelAtomicFloat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelLabelsFeaturesAtomicFloat, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelAtomicFloat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelLabelsFeaturesAtomicFloat, name)
    __repr__ = _swig_repr

    def __init__(self, features: 'std::shared_ptr< BaseArray2d< float > > const', labels: 'std::shared_ptr< SArray< float > > const'):
        """__init__(TModelLabelsFeatures<(float,std::atomic<(float)>)> self, std::shared_ptr< BaseArray2d< float > > const features, std::shared_ptr< SArray< float > > const labels) -> ModelLabelsFeaturesAtomicFloat"""
        this = _hawkes_inference.new_ModelLabelsFeaturesAtomicFloat(features, labels)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_n_samples(self) -> "unsigned long":
        """get_n_samples(ModelLabelsFeaturesAtomicFloat self) -> unsigned long"""
        return _hawkes_inference.ModelLabelsFeaturesAtomicFloat_get_n_samples(self)


    def get_n_features(self) -> "unsigned long":
        """get_n_features(ModelLabelsFeaturesAtomicFloat self) -> unsigned long"""
        return _hawkes_inference.ModelLabelsFeaturesAtomicFloat_get_n_features(self)

    __swig_destroy__ = _hawkes_inference.delete_ModelLabelsFeaturesAtomicFloat
    __del__ = lambda self: None
ModelLabelsFeaturesAtomicFloat_swigregister = _hawkes_inference.ModelLabelsFeaturesAtomicFloat_swigregister
ModelLabelsFeaturesAtomicFloat_swigregister(ModelLabelsFeaturesAtomicFloat)

class ModelLipschitz(Model):
    """Proxy of C++ TModelLipschitz<(double,double)> class"""
    __swig_setmethods__ = {}
    for _s in [Model]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelLipschitz, name, value)
    __swig_getmethods__ = {}
    for _s in [Model]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelLipschitz, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(TModelLipschitz<(double,double)> self) -> ModelLipschitz"""
        this = _hawkes_inference.new_ModelLipschitz()
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_lip_max(self) -> "double":
        """get_lip_max(ModelLipschitz self) -> double"""
        return _hawkes_inference.ModelLipschitz_get_lip_max(self)


    def get_lip_mean(self) -> "double":
        """get_lip_mean(ModelLipschitz self) -> double"""
        return _hawkes_inference.ModelLipschitz_get_lip_mean(self)

    __swig_destroy__ = _hawkes_inference.delete_ModelLipschitz
    __del__ = lambda self: None
ModelLipschitz_swigregister = _hawkes_inference.ModelLipschitz_swigregister
ModelLipschitz_swigregister(ModelLipschitz)

class ModelLipschitzDouble(Model):
    """Proxy of C++ TModelLipschitz<(double,double)> class"""
    __swig_setmethods__ = {}
    for _s in [Model]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelLipschitzDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [Model]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelLipschitzDouble, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(TModelLipschitz<(double,double)> self) -> ModelLipschitzDouble"""
        this = _hawkes_inference.new_ModelLipschitzDouble()
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_lip_max(self) -> "double":
        """get_lip_max(ModelLipschitzDouble self) -> double"""
        return _hawkes_inference.ModelLipschitzDouble_get_lip_max(self)


    def get_lip_mean(self) -> "double":
        """get_lip_mean(ModelLipschitzDouble self) -> double"""
        return _hawkes_inference.ModelLipschitzDouble_get_lip_mean(self)

    __swig_destroy__ = _hawkes_inference.delete_ModelLipschitzDouble
    __del__ = lambda self: None
ModelLipschitzDouble_swigregister = _hawkes_inference.ModelLipschitzDouble_swigregister
ModelLipschitzDouble_swigregister(ModelLipschitzDouble)

class ModelLipschitzFloat(ModelFloat):
    """Proxy of C++ TModelLipschitz<(float,float)> class"""
    __swig_setmethods__ = {}
    for _s in [ModelFloat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelLipschitzFloat, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelFloat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelLipschitzFloat, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(TModelLipschitz<(float,float)> self) -> ModelLipschitzFloat"""
        this = _hawkes_inference.new_ModelLipschitzFloat()
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_lip_max(self) -> "float":
        """get_lip_max(ModelLipschitzFloat self) -> float"""
        return _hawkes_inference.ModelLipschitzFloat_get_lip_max(self)


    def get_lip_mean(self) -> "float":
        """get_lip_mean(ModelLipschitzFloat self) -> float"""
        return _hawkes_inference.ModelLipschitzFloat_get_lip_mean(self)

    __swig_destroy__ = _hawkes_inference.delete_ModelLipschitzFloat
    __del__ = lambda self: None
ModelLipschitzFloat_swigregister = _hawkes_inference.ModelLipschitzFloat_swigregister
ModelLipschitzFloat_swigregister(ModelLipschitzFloat)

class ModelLipschitzAtomicDouble(ModelAtomicDouble):
    """Proxy of C++ TModelLipschitz<(double,std::atomic<(double)>)> class"""
    __swig_setmethods__ = {}
    for _s in [ModelAtomicDouble]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelLipschitzAtomicDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelAtomicDouble]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelLipschitzAtomicDouble, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(TModelLipschitz<(double,std::atomic<(double)>)> self) -> ModelLipschitzAtomicDouble"""
        this = _hawkes_inference.new_ModelLipschitzAtomicDouble()
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_lip_max(self) -> "double":
        """get_lip_max(ModelLipschitzAtomicDouble self) -> double"""
        return _hawkes_inference.ModelLipschitzAtomicDouble_get_lip_max(self)


    def get_lip_mean(self) -> "double":
        """get_lip_mean(ModelLipschitzAtomicDouble self) -> double"""
        return _hawkes_inference.ModelLipschitzAtomicDouble_get_lip_mean(self)

    __swig_destroy__ = _hawkes_inference.delete_ModelLipschitzAtomicDouble
    __del__ = lambda self: None
ModelLipschitzAtomicDouble_swigregister = _hawkes_inference.ModelLipschitzAtomicDouble_swigregister
ModelLipschitzAtomicDouble_swigregister(ModelLipschitzAtomicDouble)

class ModelLipschitzAtomicFloat(ModelAtomicFloat):
    """Proxy of C++ TModelLipschitz<(float,std::atomic<(float)>)> class"""
    __swig_setmethods__ = {}
    for _s in [ModelAtomicFloat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelLipschitzAtomicFloat, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelAtomicFloat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelLipschitzAtomicFloat, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(TModelLipschitz<(float,std::atomic<(float)>)> self) -> ModelLipschitzAtomicFloat"""
        this = _hawkes_inference.new_ModelLipschitzAtomicFloat()
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_lip_max(self) -> "float":
        """get_lip_max(ModelLipschitzAtomicFloat self) -> float"""
        return _hawkes_inference.ModelLipschitzAtomicFloat_get_lip_max(self)


    def get_lip_mean(self) -> "float":
        """get_lip_mean(ModelLipschitzAtomicFloat self) -> float"""
        return _hawkes_inference.ModelLipschitzAtomicFloat_get_lip_mean(self)

    __swig_destroy__ = _hawkes_inference.delete_ModelLipschitzAtomicFloat
    __del__ = lambda self: None
ModelLipschitzAtomicFloat_swigregister = _hawkes_inference.ModelLipschitzAtomicFloat_swigregister
ModelLipschitzAtomicFloat_swigregister(ModelLipschitzAtomicFloat)

class ModelGeneralizedLinearDouble(ModelLabelsFeaturesDouble):
    """Proxy of C++ TModelGeneralizedLinear<(double,double)> class"""
    __swig_setmethods__ = {}
    for _s in [ModelLabelsFeaturesDouble]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelGeneralizedLinearDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelLabelsFeaturesDouble]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelGeneralizedLinearDouble, name)
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', labels: 'SArrayDoublePtr const', fit_intercept: 'bool const', n_threads: 'int const'=1):
        """
        __init__(TModelGeneralizedLinear<(double,double)> self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelGeneralizedLinearDouble
        __init__(TModelGeneralizedLinear<(double,double)> self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept) -> ModelGeneralizedLinearDouble
        """
        this = _hawkes_inference.new_ModelGeneralizedLinearDouble(features, labels, fit_intercept, n_threads)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_n_coeffs(self) -> "unsigned long":
        """get_n_coeffs(ModelGeneralizedLinearDouble self) -> unsigned long"""
        return _hawkes_inference.ModelGeneralizedLinearDouble_get_n_coeffs(self)


    def set_fit_intercept(self, fit_intercept: 'bool') -> "void":
        """set_fit_intercept(ModelGeneralizedLinearDouble self, bool fit_intercept)"""
        return _hawkes_inference.ModelGeneralizedLinearDouble_set_fit_intercept(self, fit_intercept)


    def sdca_primal_dual_relation(self, l_l2sq: 'double const', dual_vector: 'ArrayDouble const &', out_primal_vector: 'ArrayDouble &') -> "void":
        """sdca_primal_dual_relation(ModelGeneralizedLinearDouble self, double const l_l2sq, ArrayDouble const & dual_vector, ArrayDouble & out_primal_vector)"""
        return _hawkes_inference.ModelGeneralizedLinearDouble_sdca_primal_dual_relation(self, l_l2sq, dual_vector, out_primal_vector)

    __swig_destroy__ = _hawkes_inference.delete_ModelGeneralizedLinearDouble
    __del__ = lambda self: None
ModelGeneralizedLinearDouble_swigregister = _hawkes_inference.ModelGeneralizedLinearDouble_swigregister
ModelGeneralizedLinearDouble_swigregister(ModelGeneralizedLinearDouble)

class ModelGeneralizedLinearFloat(ModelLabelsFeaturesFloat):
    """Proxy of C++ TModelGeneralizedLinear<(float,float)> class"""
    __swig_setmethods__ = {}
    for _s in [ModelLabelsFeaturesFloat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelGeneralizedLinearFloat, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelLabelsFeaturesFloat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelGeneralizedLinearFloat, name)
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayFloat2dPtr const', labels: 'SArrayFloatPtr const', fit_intercept: 'bool const', n_threads: 'int const'=1):
        """
        __init__(TModelGeneralizedLinear<(float,float)> self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelGeneralizedLinearFloat
        __init__(TModelGeneralizedLinear<(float,float)> self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept) -> ModelGeneralizedLinearFloat
        """
        this = _hawkes_inference.new_ModelGeneralizedLinearFloat(features, labels, fit_intercept, n_threads)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_n_coeffs(self) -> "unsigned long":
        """get_n_coeffs(ModelGeneralizedLinearFloat self) -> unsigned long"""
        return _hawkes_inference.ModelGeneralizedLinearFloat_get_n_coeffs(self)


    def set_fit_intercept(self, fit_intercept: 'bool') -> "void":
        """set_fit_intercept(ModelGeneralizedLinearFloat self, bool fit_intercept)"""
        return _hawkes_inference.ModelGeneralizedLinearFloat_set_fit_intercept(self, fit_intercept)


    def sdca_primal_dual_relation(self, l_l2sq: 'float const', dual_vector: 'ArrayFloat const &', out_primal_vector: 'ArrayFloat &') -> "void":
        """sdca_primal_dual_relation(ModelGeneralizedLinearFloat self, float const l_l2sq, ArrayFloat const & dual_vector, ArrayFloat & out_primal_vector)"""
        return _hawkes_inference.ModelGeneralizedLinearFloat_sdca_primal_dual_relation(self, l_l2sq, dual_vector, out_primal_vector)

    __swig_destroy__ = _hawkes_inference.delete_ModelGeneralizedLinearFloat
    __del__ = lambda self: None
ModelGeneralizedLinearFloat_swigregister = _hawkes_inference.ModelGeneralizedLinearFloat_swigregister
ModelGeneralizedLinearFloat_swigregister(ModelGeneralizedLinearFloat)

class ModelGeneralizedLinearAtomicDouble(ModelLabelsFeaturesAtomicDouble):
    """Proxy of C++ TModelGeneralizedLinear<(double,std::atomic<(double)>)> class"""
    __swig_setmethods__ = {}
    for _s in [ModelLabelsFeaturesAtomicDouble]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelGeneralizedLinearAtomicDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelLabelsFeaturesAtomicDouble]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelGeneralizedLinearAtomicDouble, name)
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', labels: 'SArrayDoublePtr const', fit_intercept: 'bool const', n_threads: 'int const'=1):
        """
        __init__(TModelGeneralizedLinear<(double,std::atomic<(double)>)> self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelGeneralizedLinearAtomicDouble
        __init__(TModelGeneralizedLinear<(double,std::atomic<(double)>)> self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept) -> ModelGeneralizedLinearAtomicDouble
        """
        this = _hawkes_inference.new_ModelGeneralizedLinearAtomicDouble(features, labels, fit_intercept, n_threads)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_n_coeffs(self) -> "unsigned long":
        """get_n_coeffs(ModelGeneralizedLinearAtomicDouble self) -> unsigned long"""
        return _hawkes_inference.ModelGeneralizedLinearAtomicDouble_get_n_coeffs(self)


    def set_fit_intercept(self, fit_intercept: 'bool') -> "void":
        """set_fit_intercept(ModelGeneralizedLinearAtomicDouble self, bool fit_intercept)"""
        return _hawkes_inference.ModelGeneralizedLinearAtomicDouble_set_fit_intercept(self, fit_intercept)


    def sdca_primal_dual_relation(self, l_l2sq: 'double const', dual_vector: 'ArrayDouble const &', out_primal_vector: 'ArrayDouble &') -> "void":
        """sdca_primal_dual_relation(ModelGeneralizedLinearAtomicDouble self, double const l_l2sq, ArrayDouble const & dual_vector, ArrayDouble & out_primal_vector)"""
        return _hawkes_inference.ModelGeneralizedLinearAtomicDouble_sdca_primal_dual_relation(self, l_l2sq, dual_vector, out_primal_vector)

    __swig_destroy__ = _hawkes_inference.delete_ModelGeneralizedLinearAtomicDouble
    __del__ = lambda self: None
ModelGeneralizedLinearAtomicDouble_swigregister = _hawkes_inference.ModelGeneralizedLinearAtomicDouble_swigregister
ModelGeneralizedLinearAtomicDouble_swigregister(ModelGeneralizedLinearAtomicDouble)

class ModelGeneralizedLinearAtomicFloat(ModelLabelsFeaturesAtomicFloat):
    """Proxy of C++ TModelGeneralizedLinear<(float,std::atomic<(float)>)> class"""
    __swig_setmethods__ = {}
    for _s in [ModelLabelsFeaturesAtomicFloat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelGeneralizedLinearAtomicFloat, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelLabelsFeaturesAtomicFloat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelGeneralizedLinearAtomicFloat, name)
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayFloat2dPtr const', labels: 'SArrayFloatPtr const', fit_intercept: 'bool const', n_threads: 'int const'=1):
        """
        __init__(TModelGeneralizedLinear<(float,std::atomic<(float)>)> self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelGeneralizedLinearAtomicFloat
        __init__(TModelGeneralizedLinear<(float,std::atomic<(float)>)> self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept) -> ModelGeneralizedLinearAtomicFloat
        """
        this = _hawkes_inference.new_ModelGeneralizedLinearAtomicFloat(features, labels, fit_intercept, n_threads)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_n_coeffs(self) -> "unsigned long":
        """get_n_coeffs(ModelGeneralizedLinearAtomicFloat self) -> unsigned long"""
        return _hawkes_inference.ModelGeneralizedLinearAtomicFloat_get_n_coeffs(self)


    def set_fit_intercept(self, fit_intercept: 'bool') -> "void":
        """set_fit_intercept(ModelGeneralizedLinearAtomicFloat self, bool fit_intercept)"""
        return _hawkes_inference.ModelGeneralizedLinearAtomicFloat_set_fit_intercept(self, fit_intercept)


    def sdca_primal_dual_relation(self, l_l2sq: 'float const', dual_vector: 'ArrayFloat const &', out_primal_vector: 'ArrayFloat &') -> "void":
        """sdca_primal_dual_relation(ModelGeneralizedLinearAtomicFloat self, float const l_l2sq, ArrayFloat const & dual_vector, ArrayFloat & out_primal_vector)"""
        return _hawkes_inference.ModelGeneralizedLinearAtomicFloat_sdca_primal_dual_relation(self, l_l2sq, dual_vector, out_primal_vector)

    __swig_destroy__ = _hawkes_inference.delete_ModelGeneralizedLinearAtomicFloat
    __del__ = lambda self: None
ModelGeneralizedLinearAtomicFloat_swigregister = _hawkes_inference.ModelGeneralizedLinearAtomicFloat_swigregister
ModelGeneralizedLinearAtomicFloat_swigregister(ModelGeneralizedLinearAtomicFloat)

class ModelHawkes(Model):
    """Proxy of C++ ModelHawkes class"""
    __swig_setmethods__ = {}
    for _s in [Model]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelHawkes, name, value)
    __swig_getmethods__ = {}
    for _s in [Model]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelHawkes, name)
    __repr__ = _swig_repr

    def __init__(self, max_n_threads: 'int const'=1, optimization_level: 'unsigned int const'=0):
        """
        __init__(ModelHawkes self, int const max_n_threads=1, unsigned int const optimization_level=0) -> ModelHawkes
        __init__(ModelHawkes self, int const max_n_threads=1) -> ModelHawkes
        __init__(ModelHawkes self) -> ModelHawkes
        """
        this = _hawkes_inference.new_ModelHawkes(max_n_threads, optimization_level)
        try:
            self.this.append(this)
        except:
            self.this = this

    def set_n_threads(self, max_n_threads: 'int const') -> "void":
        """set_n_threads(ModelHawkes self, int const max_n_threads)"""
        return _hawkes_inference.ModelHawkes_set_n_threads(self, max_n_threads)


    def get_n_nodes(self) -> "ulong":
        """get_n_nodes(ModelHawkes self) -> ulong"""
        return _hawkes_inference.ModelHawkes_get_n_nodes(self)


    def get_n_total_jumps(self) -> "ulong":
        """get_n_total_jumps(ModelHawkes self) -> ulong"""
        return _hawkes_inference.ModelHawkes_get_n_total_jumps(self)


    def get_n_jumps_per_node(self) -> "SArrayULongPtr":
        """get_n_jumps_per_node(ModelHawkes self) -> SArrayULongPtr"""
        return _hawkes_inference.ModelHawkes_get_n_jumps_per_node(self)

    __swig_destroy__ = _hawkes_inference.delete_ModelHawkes
    __del__ = lambda self: None
ModelHawkes_swigregister = _hawkes_inference.ModelHawkes_swigregister
ModelHawkes_swigregister(ModelHawkes)

class ModelHawkesList(ModelHawkes):
    """Proxy of C++ ModelHawkesList class"""
    __swig_setmethods__ = {}
    for _s in [ModelHawkes]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelHawkesList, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelHawkes]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelHawkesList, name)
    __repr__ = _swig_repr

    def __init__(self, max_n_threads: 'int const'=1, optimization_level: 'unsigned int const'=0):
        """
        __init__(ModelHawkesList self, int const max_n_threads=1, unsigned int const optimization_level=0) -> ModelHawkesList
        __init__(ModelHawkesList self, int const max_n_threads=1) -> ModelHawkesList
        __init__(ModelHawkesList self) -> ModelHawkesList
        """
        this = _hawkes_inference.new_ModelHawkesList(max_n_threads, optimization_level)
        try:
            self.this.append(this)
        except:
            self.this = this

    def set_data(self, timestamps_list: 'SArrayDoublePtrList2D const &', end_time: 'VArrayDoublePtr const') -> "void":
        """set_data(ModelHawkesList self, SArrayDoublePtrList2D const & timestamps_list, VArrayDoublePtr const end_time)"""
        return _hawkes_inference.ModelHawkesList_set_data(self, timestamps_list, end_time)


    def get_end_times(self) -> "VArrayDoublePtr":
        """get_end_times(ModelHawkesList self) -> VArrayDoublePtr"""
        return _hawkes_inference.ModelHawkesList_get_end_times(self)


    def get_n_coeffs(self) -> "ulong":
        """get_n_coeffs(ModelHawkesList self) -> ulong"""
        return _hawkes_inference.ModelHawkesList_get_n_coeffs(self)


    def get_n_threads(self) -> "ulong":
        """get_n_threads(ModelHawkesList self) -> ulong"""
        return _hawkes_inference.ModelHawkesList_get_n_threads(self)


    def get_n_jumps_per_realization(self) -> "SArrayULongPtr":
        """get_n_jumps_per_realization(ModelHawkesList self) -> SArrayULongPtr"""
        return _hawkes_inference.ModelHawkesList_get_n_jumps_per_realization(self)


    def get_timestamps_list(self) -> "SArrayDoublePtrList2D":
        """get_timestamps_list(ModelHawkesList self) -> SArrayDoublePtrList2D"""
        return _hawkes_inference.ModelHawkesList_get_timestamps_list(self)


    def set_n_threads(self, max_n_threads: 'int const') -> "void":
        """set_n_threads(ModelHawkesList self, int const max_n_threads)"""
        return _hawkes_inference.ModelHawkesList_set_n_threads(self, max_n_threads)

    __swig_destroy__ = _hawkes_inference.delete_ModelHawkesList
    __del__ = lambda self: None
ModelHawkesList_swigregister = _hawkes_inference.ModelHawkesList_swigregister
ModelHawkesList_swigregister(ModelHawkesList)

class ModelHawkesLeastSq(ModelHawkesList):
    """Proxy of C++ ModelHawkesLeastSq class"""
    __swig_setmethods__ = {}
    for _s in [ModelHawkesList]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelHawkesLeastSq, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelHawkesList]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelHawkesLeastSq, name)
    __repr__ = _swig_repr

    def __init__(self, max_n_threads: 'int const'=1, optimization_level: 'unsigned int const'=0):
        """
        __init__(ModelHawkesLeastSq self, int const max_n_threads=1, unsigned int const optimization_level=0) -> ModelHawkesLeastSq
        __init__(ModelHawkesLeastSq self, int const max_n_threads=1) -> ModelHawkesLeastSq
        __init__(ModelHawkesLeastSq self) -> ModelHawkesLeastSq
        """
        this = _hawkes_inference.new_ModelHawkesLeastSq(max_n_threads, optimization_level)
        try:
            self.this.append(this)
        except:
            self.this = this

    def incremental_set_data(self, timestamps: 'SArrayDoublePtrList1D const &', end_time: 'double') -> "void":
        """incremental_set_data(ModelHawkesLeastSq self, SArrayDoublePtrList1D const & timestamps, double end_time)"""
        return _hawkes_inference.ModelHawkesLeastSq_incremental_set_data(self, timestamps, end_time)


    def compute_weights(self) -> "void":
        """compute_weights(ModelHawkesLeastSq self)"""
        return _hawkes_inference.ModelHawkesLeastSq_compute_weights(self)

    __swig_destroy__ = _hawkes_inference.delete_ModelHawkesLeastSq
    __del__ = lambda self: None
ModelHawkesLeastSq_swigregister = _hawkes_inference.ModelHawkesLeastSq_swigregister
ModelHawkesLeastSq_swigregister(ModelHawkesLeastSq)

class ModelHawkesLogLik(ModelHawkesList):
    """Proxy of C++ ModelHawkesLogLik class"""
    __swig_setmethods__ = {}
    for _s in [ModelHawkesList]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelHawkesLogLik, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelHawkesList]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelHawkesLogLik, name)
    __repr__ = _swig_repr

    def __init__(self, max_n_threads: 'int const'=1):
        """
        __init__(ModelHawkesLogLik self, int const max_n_threads=1) -> ModelHawkesLogLik
        __init__(ModelHawkesLogLik self) -> ModelHawkesLogLik
        """
        this = _hawkes_inference.new_ModelHawkesLogLik(max_n_threads)
        try:
            self.this.append(this)
        except:
            self.this = this

    def loss_and_grad(self, coeffs: 'ArrayDouble const &', out: 'ArrayDouble &') -> "double":
        """loss_and_grad(ModelHawkesLogLik self, ArrayDouble const & coeffs, ArrayDouble & out) -> double"""
        return _hawkes_inference.ModelHawkesLogLik_loss_and_grad(self, coeffs, out)


    def hessian_norm(self, coeffs: 'ArrayDouble const &', vector: 'ArrayDouble const &') -> "double":
        """hessian_norm(ModelHawkesLogLik self, ArrayDouble const & coeffs, ArrayDouble const & vector) -> double"""
        return _hawkes_inference.ModelHawkesLogLik_hessian_norm(self, coeffs, vector)


    def hessian(self, coeffs: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
        """hessian(ModelHawkesLogLik self, ArrayDouble const & coeffs, ArrayDouble & out)"""
        return _hawkes_inference.ModelHawkesLogLik_hessian(self, coeffs, out)


    def incremental_set_data(self, timestamps: 'SArrayDoublePtrList1D const &', end_time: 'double') -> "void":
        """incremental_set_data(ModelHawkesLogLik self, SArrayDoublePtrList1D const & timestamps, double end_time)"""
        return _hawkes_inference.ModelHawkesLogLik_incremental_set_data(self, timestamps, end_time)


    def compute_weights(self) -> "void":
        """compute_weights(ModelHawkesLogLik self)"""
        return _hawkes_inference.ModelHawkesLogLik_compute_weights(self)

    __swig_destroy__ = _hawkes_inference.delete_ModelHawkesLogLik
    __del__ = lambda self: None
ModelHawkesLogLik_swigregister = _hawkes_inference.ModelHawkesLogLik_swigregister
ModelHawkesLogLik_swigregister(ModelHawkesLogLik)

class ModelHawkesExpKernLeastSq(ModelHawkesLeastSq):
    """Proxy of C++ ModelHawkesExpKernLeastSq class"""
    __swig_setmethods__ = {}
    for _s in [ModelHawkesLeastSq]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelHawkesExpKernLeastSq, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelHawkesLeastSq]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelHawkesExpKernLeastSq, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ModelHawkesExpKernLeastSq self) -> ModelHawkesExpKernLeastSq
        __init__(ModelHawkesExpKernLeastSq self, SArrayDouble2dPtr const decays, int const max_n_threads=1, unsigned int const optimization_level=0) -> ModelHawkesExpKernLeastSq
        __init__(ModelHawkesExpKernLeastSq self, SArrayDouble2dPtr const decays, int const max_n_threads=1) -> ModelHawkesExpKernLeastSq
        __init__(ModelHawkesExpKernLeastSq self, SArrayDouble2dPtr const decays) -> ModelHawkesExpKernLeastSq
        """
        this = _hawkes_inference.new_ModelHawkesExpKernLeastSq(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def hessian(self, out: 'ArrayDouble &') -> "void":
        """hessian(ModelHawkesExpKernLeastSq self, ArrayDouble & out)"""
        return _hawkes_inference.ModelHawkesExpKernLeastSq_hessian(self, out)


    def set_decays(self, decays: 'SArrayDouble2dPtr const') -> "void":
        """set_decays(ModelHawkesExpKernLeastSq self, SArrayDouble2dPtr const decays)"""
        return _hawkes_inference.ModelHawkesExpKernLeastSq_set_decays(self, decays)


    def __getstate__(self): return ModelHawkesExpKernLeastSqSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelHawkesExpKernLeastSqDeserialize(self, s)

    __swig_destroy__ = _hawkes_inference.delete_ModelHawkesExpKernLeastSq
    __del__ = lambda self: None
ModelHawkesExpKernLeastSq_swigregister = _hawkes_inference.ModelHawkesExpKernLeastSq_swigregister
ModelHawkesExpKernLeastSq_swigregister(ModelHawkesExpKernLeastSq)


def ModelHawkesExpKernLeastSqDeserialize(ptr: 'ModelHawkesExpKernLeastSq', hex: 'std::string const &') -> "void":
    """ModelHawkesExpKernLeastSqDeserialize(ModelHawkesExpKernLeastSq ptr, std::string const & hex)"""
    return _hawkes_inference.ModelHawkesExpKernLeastSqDeserialize(ptr, hex)

def ModelHawkesExpKernLeastSqSerialize(ptr: 'ModelHawkesExpKernLeastSq') -> "std::string":
    """ModelHawkesExpKernLeastSqSerialize(ModelHawkesExpKernLeastSq ptr) -> std::string"""
    return _hawkes_inference.ModelHawkesExpKernLeastSqSerialize(ptr)
class ModelHawkesSumExpKernLeastSq(ModelHawkesLeastSq):
    """Proxy of C++ ModelHawkesSumExpKernLeastSq class"""
    __swig_setmethods__ = {}
    for _s in [ModelHawkesLeastSq]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelHawkesSumExpKernLeastSq, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelHawkesLeastSq]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelHawkesSumExpKernLeastSq, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ModelHawkesSumExpKernLeastSq self) -> ModelHawkesSumExpKernLeastSq
        __init__(ModelHawkesSumExpKernLeastSq self, ArrayDouble const & decays, ulong const n_baselines, double const period_length, unsigned int const max_n_threads=1, unsigned int const optimization_level=0) -> ModelHawkesSumExpKernLeastSq
        __init__(ModelHawkesSumExpKernLeastSq self, ArrayDouble const & decays, ulong const n_baselines, double const period_length, unsigned int const max_n_threads=1) -> ModelHawkesSumExpKernLeastSq
        __init__(ModelHawkesSumExpKernLeastSq self, ArrayDouble const & decays, ulong const n_baselines, double const period_length) -> ModelHawkesSumExpKernLeastSq
        """
        this = _hawkes_inference.new_ModelHawkesSumExpKernLeastSq(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def set_decays(self, decays: 'ArrayDouble const &') -> "void":
        """set_decays(ModelHawkesSumExpKernLeastSq self, ArrayDouble const & decays)"""
        return _hawkes_inference.ModelHawkesSumExpKernLeastSq_set_decays(self, decays)


    def get_n_decays(self) -> "ulong":
        """get_n_decays(ModelHawkesSumExpKernLeastSq self) -> ulong"""
        return _hawkes_inference.ModelHawkesSumExpKernLeastSq_get_n_decays(self)


    def get_n_baselines(self) -> "ulong":
        """get_n_baselines(ModelHawkesSumExpKernLeastSq self) -> ulong"""
        return _hawkes_inference.ModelHawkesSumExpKernLeastSq_get_n_baselines(self)


    def get_period_length(self) -> "double":
        """get_period_length(ModelHawkesSumExpKernLeastSq self) -> double"""
        return _hawkes_inference.ModelHawkesSumExpKernLeastSq_get_period_length(self)


    def set_n_baselines(self, n_baselines: 'ulong') -> "void":
        """set_n_baselines(ModelHawkesSumExpKernLeastSq self, ulong n_baselines)"""
        return _hawkes_inference.ModelHawkesSumExpKernLeastSq_set_n_baselines(self, n_baselines)


    def set_period_length(self, period_length: 'double') -> "void":
        """set_period_length(ModelHawkesSumExpKernLeastSq self, double period_length)"""
        return _hawkes_inference.ModelHawkesSumExpKernLeastSq_set_period_length(self, period_length)


    def __getstate__(self): return ModelHawkesSumExpKernLeastSqSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelHawkesSumExpKernLeastSqDeserialize(self, s)

    __swig_destroy__ = _hawkes_inference.delete_ModelHawkesSumExpKernLeastSq
    __del__ = lambda self: None
ModelHawkesSumExpKernLeastSq_swigregister = _hawkes_inference.ModelHawkesSumExpKernLeastSq_swigregister
ModelHawkesSumExpKernLeastSq_swigregister(ModelHawkesSumExpKernLeastSq)


def ModelHawkesSumExpKernLeastSqDeserialize(ptr: 'ModelHawkesSumExpKernLeastSq', hex: 'std::string const &') -> "void":
    """ModelHawkesSumExpKernLeastSqDeserialize(ModelHawkesSumExpKernLeastSq ptr, std::string const & hex)"""
    return _hawkes_inference.ModelHawkesSumExpKernLeastSqDeserialize(ptr, hex)

def ModelHawkesSumExpKernLeastSqSerialize(ptr: 'ModelHawkesSumExpKernLeastSq') -> "std::string":
    """ModelHawkesSumExpKernLeastSqSerialize(ModelHawkesSumExpKernLeastSq ptr) -> std::string"""
    return _hawkes_inference.ModelHawkesSumExpKernLeastSqSerialize(ptr)
class ModelHawkesExpKernLogLik(ModelHawkesLogLik):
    """Proxy of C++ ModelHawkesExpKernLogLik class"""
    __swig_setmethods__ = {}
    for _s in [ModelHawkesLogLik]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelHawkesExpKernLogLik, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelHawkesLogLik]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelHawkesExpKernLogLik, name)
    __repr__ = _swig_repr

    def __init__(self, decay: 'double const', max_n_threads: 'int const'=1):
        """
        __init__(ModelHawkesExpKernLogLik self, double const decay, int const max_n_threads=1) -> ModelHawkesExpKernLogLik
        __init__(ModelHawkesExpKernLogLik self, double const decay) -> ModelHawkesExpKernLogLik
        """
        this = _hawkes_inference.new_ModelHawkesExpKernLogLik(decay, max_n_threads)
        try:
            self.this.append(this)
        except:
            self.this = this

    def set_decay(self, decay: 'double const') -> "void":
        """set_decay(ModelHawkesExpKernLogLik self, double const decay)"""
        return _hawkes_inference.ModelHawkesExpKernLogLik_set_decay(self, decay)

    __swig_destroy__ = _hawkes_inference.delete_ModelHawkesExpKernLogLik
    __del__ = lambda self: None
ModelHawkesExpKernLogLik_swigregister = _hawkes_inference.ModelHawkesExpKernLogLik_swigregister
ModelHawkesExpKernLogLik_swigregister(ModelHawkesExpKernLogLik)

class ModelHawkesSumExpKernLogLik(ModelHawkesLogLik):
    """Proxy of C++ ModelHawkesSumExpKernLogLik class"""
    __swig_setmethods__ = {}
    for _s in [ModelHawkesLogLik]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelHawkesSumExpKernLogLik, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelHawkesLogLik]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelHawkesSumExpKernLogLik, name)
    __repr__ = _swig_repr

    def __init__(self, decays: 'ArrayDouble const &', max_n_threads: 'int const'=1):
        """
        __init__(ModelHawkesSumExpKernLogLik self, ArrayDouble const & decays, int const max_n_threads=1) -> ModelHawkesSumExpKernLogLik
        __init__(ModelHawkesSumExpKernLogLik self, ArrayDouble const & decays) -> ModelHawkesSumExpKernLogLik
        """
        this = _hawkes_inference.new_ModelHawkesSumExpKernLogLik(decays, max_n_threads)
        try:
            self.this.append(this)
        except:
            self.this = this

    def set_decays(self, decays: 'ArrayDouble &') -> "void":
        """set_decays(ModelHawkesSumExpKernLogLik self, ArrayDouble & decays)"""
        return _hawkes_inference.ModelHawkesSumExpKernLogLik_set_decays(self, decays)


    def get_decays(self) -> "SArrayDoublePtr":
        """get_decays(ModelHawkesSumExpKernLogLik self) -> SArrayDoublePtr"""
        return _hawkes_inference.ModelHawkesSumExpKernLogLik_get_decays(self)

    __swig_destroy__ = _hawkes_inference.delete_ModelHawkesSumExpKernLogLik
    __del__ = lambda self: None
ModelHawkesSumExpKernLogLik_swigregister = _hawkes_inference.ModelHawkesSumExpKernLogLik_swigregister
ModelHawkesSumExpKernLogLik_swigregister(ModelHawkesSumExpKernLogLik)


def PointProcessCondLaw(y_time: 'ArrayDouble &', z_time: 'ArrayDouble &', z_mark: 'ArrayDouble &', lags: 'ArrayDouble &', zmin: 'double', zmax: 'double', y_T: 'double', y_lambda: 'double', res_X: 'ArrayDouble &', res_Y: 'ArrayDouble &') -> "void":
    """PointProcessCondLaw(ArrayDouble & y_time, ArrayDouble & z_time, ArrayDouble & z_mark, ArrayDouble & lags, double zmin, double zmax, double y_T, double y_lambda, ArrayDouble & res_X, ArrayDouble & res_Y)"""
    return _hawkes_inference.PointProcessCondLaw(y_time, z_time, z_mark, lags, zmin, zmax, y_T, y_lambda, res_X, res_Y)
class HawkesEM(ModelHawkesList):
    """Proxy of C++ HawkesEM class"""
    __swig_setmethods__ = {}
    for _s in [ModelHawkesList]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HawkesEM, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelHawkesList]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HawkesEM, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(HawkesEM self, double const kernel_support, ulong const kernel_size, int const max_n_threads=1) -> HawkesEM
        __init__(HawkesEM self, double const kernel_support, ulong const kernel_size) -> HawkesEM
        __init__(HawkesEM self, SArrayDoublePtr const kernel_discretization, int const max_n_threads=1) -> HawkesEM
        __init__(HawkesEM self, SArrayDoublePtr const kernel_discretization) -> HawkesEM
        """
        this = _hawkes_inference.new_HawkesEM(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def allocate_weights(self) -> "void":
        """allocate_weights(HawkesEM self)"""
        return _hawkes_inference.HawkesEM_allocate_weights(self)


    def solve(self, mu: 'ArrayDouble &', kernels: 'ArrayDouble2d &') -> "void":
        """solve(HawkesEM self, ArrayDouble & mu, ArrayDouble2d & kernels)"""
        return _hawkes_inference.HawkesEM_solve(self, mu, kernels)


    def get_kernel_norms(self, kernels: 'ArrayDouble2d &') -> "SArrayDouble2dPtr":
        """get_kernel_norms(HawkesEM self, ArrayDouble2d & kernels) -> SArrayDouble2dPtr"""
        return _hawkes_inference.HawkesEM_get_kernel_norms(self, kernels)


    def loglikelihood(self, mu: 'ArrayDouble &', kernels: 'ArrayDouble2d &') -> "double":
        """loglikelihood(HawkesEM self, ArrayDouble & mu, ArrayDouble2d & kernels) -> double"""
        return _hawkes_inference.HawkesEM_loglikelihood(self, mu, kernels)


    def get_kernel_support(self) -> "double":
        """get_kernel_support(HawkesEM self) -> double"""
        return _hawkes_inference.HawkesEM_get_kernel_support(self)


    def get_kernel_size(self) -> "ulong":
        """get_kernel_size(HawkesEM self) -> ulong"""
        return _hawkes_inference.HawkesEM_get_kernel_size(self)


    def get_kernel_fixed_dt(self) -> "double":
        """get_kernel_fixed_dt(HawkesEM self) -> double"""
        return _hawkes_inference.HawkesEM_get_kernel_fixed_dt(self)


    def get_kernel_discretization(self) -> "SArrayDoublePtr":
        """get_kernel_discretization(HawkesEM self) -> SArrayDoublePtr"""
        return _hawkes_inference.HawkesEM_get_kernel_discretization(self)


    def set_kernel_support(self, kernel_support: 'double const') -> "void":
        """set_kernel_support(HawkesEM self, double const kernel_support)"""
        return _hawkes_inference.HawkesEM_set_kernel_support(self, kernel_support)


    def set_kernel_size(self, kernel_size: 'ulong const') -> "void":
        """set_kernel_size(HawkesEM self, ulong const kernel_size)"""
        return _hawkes_inference.HawkesEM_set_kernel_size(self, kernel_size)


    def set_kernel_dt(self, kernel_dt: 'double const') -> "void":
        """set_kernel_dt(HawkesEM self, double const kernel_dt)"""
        return _hawkes_inference.HawkesEM_set_kernel_dt(self, kernel_dt)


    def set_kernel_discretization(self, kernel_discretization: 'SArrayDoublePtr const') -> "void":
        """set_kernel_discretization(HawkesEM self, SArrayDoublePtr const kernel_discretization)"""
        return _hawkes_inference.HawkesEM_set_kernel_discretization(self, kernel_discretization)

    __swig_destroy__ = _hawkes_inference.delete_HawkesEM
    __del__ = lambda self: None
HawkesEM_swigregister = _hawkes_inference.HawkesEM_swigregister
HawkesEM_swigregister(HawkesEM)

class HawkesADM4(ModelHawkesList):
    """Proxy of C++ HawkesADM4 class"""
    __swig_setmethods__ = {}
    for _s in [ModelHawkesList]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HawkesADM4, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelHawkesList]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HawkesADM4, name)
    __repr__ = _swig_repr

    def __init__(self, decay: 'double const', rho: 'double const', max_n_threads: 'int const'=1, optimization_level: 'unsigned int const'=0):
        """
        __init__(HawkesADM4 self, double const decay, double const rho, int const max_n_threads=1, unsigned int const optimization_level=0) -> HawkesADM4
        __init__(HawkesADM4 self, double const decay, double const rho, int const max_n_threads=1) -> HawkesADM4
        __init__(HawkesADM4 self, double const decay, double const rho) -> HawkesADM4
        """
        this = _hawkes_inference.new_HawkesADM4(decay, rho, max_n_threads, optimization_level)
        try:
            self.this.append(this)
        except:
            self.this = this

    def solve(self, mu: 'ArrayDouble &', auv: 'ArrayDouble2d &', z1uv: 'ArrayDouble2d &', z2uv: 'ArrayDouble2d &', u1uv: 'ArrayDouble2d &', u2uv: 'ArrayDouble2d &') -> "void":
        """solve(HawkesADM4 self, ArrayDouble & mu, ArrayDouble2d & auv, ArrayDouble2d & z1uv, ArrayDouble2d & z2uv, ArrayDouble2d & u1uv, ArrayDouble2d & u2uv)"""
        return _hawkes_inference.HawkesADM4_solve(self, mu, auv, z1uv, z2uv, u1uv, u2uv)


    def compute_weights(self) -> "void":
        """compute_weights(HawkesADM4 self)"""
        return _hawkes_inference.HawkesADM4_compute_weights(self)


    def get_decay(self) -> "double":
        """get_decay(HawkesADM4 self) -> double"""
        return _hawkes_inference.HawkesADM4_get_decay(self)


    def set_decay(self, decay: 'double const') -> "void":
        """set_decay(HawkesADM4 self, double const decay)"""
        return _hawkes_inference.HawkesADM4_set_decay(self, decay)


    def get_rho(self) -> "double":
        """get_rho(HawkesADM4 self) -> double"""
        return _hawkes_inference.HawkesADM4_get_rho(self)


    def set_rho(self, rho: 'double const') -> "void":
        """set_rho(HawkesADM4 self, double const rho)"""
        return _hawkes_inference.HawkesADM4_set_rho(self, rho)

    __swig_destroy__ = _hawkes_inference.delete_HawkesADM4
    __del__ = lambda self: None
HawkesADM4_swigregister = _hawkes_inference.HawkesADM4_swigregister
HawkesADM4_swigregister(HawkesADM4)

class HawkesBasisKernels(ModelHawkesList):
    """Proxy of C++ HawkesBasisKernels class"""
    __swig_setmethods__ = {}
    for _s in [ModelHawkesList]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HawkesBasisKernels, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelHawkesList]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HawkesBasisKernels, name)
    __repr__ = _swig_repr

    def __init__(self, D: 'ulong const', kernel_dt: 'double const', kernel_tmax: 'double const', alpha: 'double const', max_n_threads: 'int const'=1):
        """
        __init__(HawkesBasisKernels self, ulong const D, double const kernel_dt, double const kernel_tmax, double const alpha, int const max_n_threads=1) -> HawkesBasisKernels
        __init__(HawkesBasisKernels self, ulong const D, double const kernel_dt, double const kernel_tmax, double const alpha) -> HawkesBasisKernels
        """
        this = _hawkes_inference.new_HawkesBasisKernels(D, kernel_dt, kernel_tmax, alpha, max_n_threads)
        try:
            self.this.append(this)
        except:
            self.this = this

    def solve(self, mu: 'ArrayDouble &', gdm: 'ArrayDouble2d &', auvd: 'ArrayDouble2d &', max_iter_gdm: 'ulong', max_tol_gdm: 'double') -> "double":
        """solve(HawkesBasisKernels self, ArrayDouble & mu, ArrayDouble2d & gdm, ArrayDouble2d & auvd, ulong max_iter_gdm, double max_tol_gdm) -> double"""
        return _hawkes_inference.HawkesBasisKernels_solve(self, mu, gdm, auvd, max_iter_gdm, max_tol_gdm)


    def get_kernel_support(self) -> "double":
        """get_kernel_support(HawkesBasisKernels self) -> double"""
        return _hawkes_inference.HawkesBasisKernels_get_kernel_support(self)


    def get_kernel_size(self) -> "ulong":
        """get_kernel_size(HawkesBasisKernels self) -> ulong"""
        return _hawkes_inference.HawkesBasisKernels_get_kernel_size(self)


    def get_kernel_dt(self) -> "double":
        """get_kernel_dt(HawkesBasisKernels self) -> double"""
        return _hawkes_inference.HawkesBasisKernels_get_kernel_dt(self)


    def get_n_basis(self) -> "ulong":
        """get_n_basis(HawkesBasisKernels self) -> ulong"""
        return _hawkes_inference.HawkesBasisKernels_get_n_basis(self)


    def get_alpha(self) -> "double":
        """get_alpha(HawkesBasisKernels self) -> double"""
        return _hawkes_inference.HawkesBasisKernels_get_alpha(self)


    def get_kernel_discretization(self) -> "SArrayDoublePtr":
        """get_kernel_discretization(HawkesBasisKernels self) -> SArrayDoublePtr"""
        return _hawkes_inference.HawkesBasisKernels_get_kernel_discretization(self)


    def set_kernel_support(self, kernel_support: 'double const') -> "void":
        """set_kernel_support(HawkesBasisKernels self, double const kernel_support)"""
        return _hawkes_inference.HawkesBasisKernels_set_kernel_support(self, kernel_support)


    def set_kernel_size(self, kernel_size: 'ulong const') -> "void":
        """set_kernel_size(HawkesBasisKernels self, ulong const kernel_size)"""
        return _hawkes_inference.HawkesBasisKernels_set_kernel_size(self, kernel_size)


    def set_kernel_dt(self, kernel_dt: 'double const') -> "void":
        """set_kernel_dt(HawkesBasisKernels self, double const kernel_dt)"""
        return _hawkes_inference.HawkesBasisKernels_set_kernel_dt(self, kernel_dt)


    def set_n_basis(self, n_basis: 'ulong const') -> "void":
        """set_n_basis(HawkesBasisKernels self, ulong const n_basis)"""
        return _hawkes_inference.HawkesBasisKernels_set_n_basis(self, n_basis)


    def set_alpha(self, alpha: 'double const') -> "void":
        """set_alpha(HawkesBasisKernels self, double const alpha)"""
        return _hawkes_inference.HawkesBasisKernels_set_alpha(self, alpha)

    __swig_destroy__ = _hawkes_inference.delete_HawkesBasisKernels
    __del__ = lambda self: None
HawkesBasisKernels_swigregister = _hawkes_inference.HawkesBasisKernels_swigregister
HawkesBasisKernels_swigregister(HawkesBasisKernels)

class HawkesSumGaussians(ModelHawkesList):
    """Proxy of C++ HawkesSumGaussians class"""
    __swig_setmethods__ = {}
    for _s in [ModelHawkesList]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HawkesSumGaussians, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelHawkesList]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HawkesSumGaussians, name)
    __repr__ = _swig_repr

    def __init__(self, n_gaussians: 'ulong const', max_mean_gaussian: 'double const', step_size: 'double const', strength_lasso: 'double const', strength_grouplasso: 'double const', em_max_iter: 'ulong const', max_n_threads: 'int const'=1, optimization_level: 'unsigned int const'=0):
        """
        __init__(HawkesSumGaussians self, ulong const n_gaussians, double const max_mean_gaussian, double const step_size, double const strength_lasso, double const strength_grouplasso, ulong const em_max_iter, int const max_n_threads=1, unsigned int const optimization_level=0) -> HawkesSumGaussians
        __init__(HawkesSumGaussians self, ulong const n_gaussians, double const max_mean_gaussian, double const step_size, double const strength_lasso, double const strength_grouplasso, ulong const em_max_iter, int const max_n_threads=1) -> HawkesSumGaussians
        __init__(HawkesSumGaussians self, ulong const n_gaussians, double const max_mean_gaussian, double const step_size, double const strength_lasso, double const strength_grouplasso, ulong const em_max_iter) -> HawkesSumGaussians
        """
        this = _hawkes_inference.new_HawkesSumGaussians(n_gaussians, max_mean_gaussian, step_size, strength_lasso, strength_grouplasso, em_max_iter, max_n_threads, optimization_level)
        try:
            self.this.append(this)
        except:
            self.this = this

    def compute_weights(self) -> "void":
        """compute_weights(HawkesSumGaussians self)"""
        return _hawkes_inference.HawkesSumGaussians_compute_weights(self)


    def solve(self, mu: 'ArrayDouble &', amplitudes: 'ArrayDouble2d &') -> "void":
        """solve(HawkesSumGaussians self, ArrayDouble & mu, ArrayDouble2d & amplitudes)"""
        return _hawkes_inference.HawkesSumGaussians_solve(self, mu, amplitudes)


    def get_n_gaussians(self) -> "ulong":
        """get_n_gaussians(HawkesSumGaussians self) -> ulong"""
        return _hawkes_inference.HawkesSumGaussians_get_n_gaussians(self)


    def set_n_gaussians(self, n_gaussians: 'ulong const') -> "void":
        """set_n_gaussians(HawkesSumGaussians self, ulong const n_gaussians)"""
        return _hawkes_inference.HawkesSumGaussians_set_n_gaussians(self, n_gaussians)


    def get_em_max_iter(self) -> "ulong":
        """get_em_max_iter(HawkesSumGaussians self) -> ulong"""
        return _hawkes_inference.HawkesSumGaussians_get_em_max_iter(self)


    def set_em_max_iter(self, em_max_iter: 'ulong const') -> "void":
        """set_em_max_iter(HawkesSumGaussians self, ulong const em_max_iter)"""
        return _hawkes_inference.HawkesSumGaussians_set_em_max_iter(self, em_max_iter)


    def get_max_mean_gaussian(self) -> "double":
        """get_max_mean_gaussian(HawkesSumGaussians self) -> double"""
        return _hawkes_inference.HawkesSumGaussians_get_max_mean_gaussian(self)


    def set_max_mean_gaussian(self, max_mean_gaussian: 'double const') -> "void":
        """set_max_mean_gaussian(HawkesSumGaussians self, double const max_mean_gaussian)"""
        return _hawkes_inference.HawkesSumGaussians_set_max_mean_gaussian(self, max_mean_gaussian)


    def get_step_size(self) -> "double":
        """get_step_size(HawkesSumGaussians self) -> double"""
        return _hawkes_inference.HawkesSumGaussians_get_step_size(self)


    def set_step_size(self, step_size: 'double const') -> "void":
        """set_step_size(HawkesSumGaussians self, double const step_size)"""
        return _hawkes_inference.HawkesSumGaussians_set_step_size(self, step_size)


    def get_strength_lasso(self) -> "double":
        """get_strength_lasso(HawkesSumGaussians self) -> double"""
        return _hawkes_inference.HawkesSumGaussians_get_strength_lasso(self)


    def set_strength_lasso(self, strength_lasso: 'double const') -> "void":
        """set_strength_lasso(HawkesSumGaussians self, double const strength_lasso)"""
        return _hawkes_inference.HawkesSumGaussians_set_strength_lasso(self, strength_lasso)


    def get_strength_grouplasso(self) -> "double":
        """get_strength_grouplasso(HawkesSumGaussians self) -> double"""
        return _hawkes_inference.HawkesSumGaussians_get_strength_grouplasso(self)


    def set_strength_grouplasso(self, strength_grouplasso: 'double const') -> "void":
        """set_strength_grouplasso(HawkesSumGaussians self, double const strength_grouplasso)"""
        return _hawkes_inference.HawkesSumGaussians_set_strength_grouplasso(self, strength_grouplasso)

    __swig_destroy__ = _hawkes_inference.delete_HawkesSumGaussians
    __del__ = lambda self: None
HawkesSumGaussians_swigregister = _hawkes_inference.HawkesSumGaussians_swigregister
HawkesSumGaussians_swigregister(HawkesSumGaussians)

class HawkesCumulant(ModelHawkesList):
    """Proxy of C++ HawkesCumulant class"""
    __swig_setmethods__ = {}
    for _s in [ModelHawkesList]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HawkesCumulant, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelHawkesList]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HawkesCumulant, name)
    __repr__ = _swig_repr

    def __init__(self, integration_support: 'double'):
        """__init__(HawkesCumulant self, double integration_support) -> HawkesCumulant"""
        this = _hawkes_inference.new_HawkesCumulant(integration_support)
        try:
            self.this.append(this)
        except:
            self.this = this

    def compute_A_and_I_ij(self, r: 'ulong', i: 'ulong', j: 'ulong', mean_intensity_j: 'double') -> "SArrayDoublePtr":
        """compute_A_and_I_ij(HawkesCumulant self, ulong r, ulong i, ulong j, double mean_intensity_j) -> SArrayDoublePtr"""
        return _hawkes_inference.HawkesCumulant_compute_A_and_I_ij(self, r, i, j, mean_intensity_j)


    def compute_E_ijk(self, r: 'ulong', i: 'ulong', j: 'ulong', k: 'ulong', mean_intensity_i: 'double', mean_intensity_j: 'double', J_ij: 'double') -> "double":
        """compute_E_ijk(HawkesCumulant self, ulong r, ulong i, ulong j, ulong k, double mean_intensity_i, double mean_intensity_j, double J_ij) -> double"""
        return _hawkes_inference.HawkesCumulant_compute_E_ijk(self, r, i, j, k, mean_intensity_i, mean_intensity_j, J_ij)


    def get_integration_support(self) -> "double":
        """get_integration_support(HawkesCumulant self) -> double"""
        return _hawkes_inference.HawkesCumulant_get_integration_support(self)


    def set_integration_support(self, integration_support: 'double const') -> "void":
        """set_integration_support(HawkesCumulant self, double const integration_support)"""
        return _hawkes_inference.HawkesCumulant_set_integration_support(self, integration_support)


    def get_are_cumulants_ready(self) -> "bool":
        """get_are_cumulants_ready(HawkesCumulant self) -> bool"""
        return _hawkes_inference.HawkesCumulant_get_are_cumulants_ready(self)


    def set_are_cumulants_ready(self, recompute_cumulants: 'bool const') -> "void":
        """set_are_cumulants_ready(HawkesCumulant self, bool const recompute_cumulants)"""
        return _hawkes_inference.HawkesCumulant_set_are_cumulants_ready(self, recompute_cumulants)

    __swig_destroy__ = _hawkes_inference.delete_HawkesCumulant
    __del__ = lambda self: None
HawkesCumulant_swigregister = _hawkes_inference.HawkesCumulant_swigregister
HawkesCumulant_swigregister(HawkesCumulant)

# This file is compatible with both classic and new-style classes.


