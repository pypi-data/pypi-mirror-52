# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_crandom', [dirname(__file__)])
        except ImportError:
            import _crandom
            return _crandom
        if fp is not None:
            try:
                _mod = imp.load_module('_crandom', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _crandom = swig_import_helper()
    del swig_import_helper
else:
    import _crandom
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


import tick.base
import tick.array.build.array

def test_uniform_int(a: 'int', b: 'int', size: 'ulong', seed: 'int'=-1) -> "SArrayIntPtr":
    """
    test_uniform_int(int a, int b, ulong size, int seed=-1) -> SArrayIntPtr
    test_uniform_int(int a, int b, ulong size) -> SArrayIntPtr
    """
    return _crandom.test_uniform_int(a, b, size, seed)

def test_uniform(*args) -> "SArrayDoublePtr":
    """
    test_uniform(ulong size, int seed=-1) -> SArrayDoublePtr
    test_uniform(ulong size) -> SArrayDoublePtr
    test_uniform(double a, double b, ulong size, int seed=-1) -> SArrayDoublePtr
    test_uniform(double a, double b, ulong size) -> SArrayDoublePtr
    """
    return _crandom.test_uniform(*args)

def test_gaussian(*args) -> "SArrayDoublePtr":
    """
    test_gaussian(ulong size, int seed=-1) -> SArrayDoublePtr
    test_gaussian(ulong size) -> SArrayDoublePtr
    test_gaussian(double mean, double std, ulong size, int seed=-1) -> SArrayDoublePtr
    test_gaussian(double mean, double std, ulong size) -> SArrayDoublePtr
    """
    return _crandom.test_gaussian(*args)

def test_exponential(intensity: 'double', size: 'ulong', seed: 'int'=-1) -> "SArrayDoublePtr":
    """
    test_exponential(double intensity, ulong size, int seed=-1) -> SArrayDoublePtr
    test_exponential(double intensity, ulong size) -> SArrayDoublePtr
    """
    return _crandom.test_exponential(intensity, size, seed)

def test_poisson(rate: 'double', size: 'ulong', seed: 'int'=-1) -> "SArrayDoublePtr":
    """
    test_poisson(double rate, ulong size, int seed=-1) -> SArrayDoublePtr
    test_poisson(double rate, ulong size) -> SArrayDoublePtr
    """
    return _crandom.test_poisson(rate, size, seed)

def test_discrete(probabilities: 'ArrayDouble &', size: 'ulong', seed: 'int'=-1) -> "SArrayDoublePtr":
    """
    test_discrete(ArrayDouble & probabilities, ulong size, int seed=-1) -> SArrayDoublePtr
    test_discrete(ArrayDouble & probabilities, ulong size) -> SArrayDoublePtr
    """
    return _crandom.test_discrete(probabilities, size, seed)

def test_uniform_lagged(size: 'ulong', wait_time: 'int'=0, seed: 'int'=-1) -> "SArrayDoublePtr":
    """
    test_uniform_lagged(ulong size, int wait_time=0, int seed=-1) -> SArrayDoublePtr
    test_uniform_lagged(ulong size, int wait_time=0) -> SArrayDoublePtr
    test_uniform_lagged(ulong size) -> SArrayDoublePtr
    """
    return _crandom.test_uniform_lagged(size, wait_time, seed)

def test_uniform_threaded(size: 'ulong', wait_time: 'int'=0, seed: 'int'=-1) -> "SArrayDoublePtr":
    """
    test_uniform_threaded(ulong size, int wait_time=0, int seed=-1) -> SArrayDoublePtr
    test_uniform_threaded(ulong size, int wait_time=0) -> SArrayDoublePtr
    test_uniform_threaded(ulong size) -> SArrayDoublePtr
    """
    return _crandom.test_uniform_threaded(size, wait_time, seed)
# This file is compatible with both classic and new-style classes.


