# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_prox', [dirname(__file__)])
        except ImportError:
            import _prox
            return _prox
        if fp is not None:
            try:
                _mod = imp.load_module('_prox', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _prox = swig_import_helper()
    del swig_import_helper
else:
    import _prox
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_prox.SHARED_PTR_DISOWN_swigconstant(_prox)
SHARED_PTR_DISOWN = _prox.SHARED_PTR_DISOWN
import tick.base
import tick.array.build.array
class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _prox.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        """value(SwigPyIterator self) -> PyObject *"""
        return _prox.SwigPyIterator_value(self)


    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        """
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        incr(SwigPyIterator self) -> SwigPyIterator
        """
        return _prox.SwigPyIterator_incr(self, n)


    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        """
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        decr(SwigPyIterator self) -> SwigPyIterator
        """
        return _prox.SwigPyIterator_decr(self, n)


    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        """distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _prox.SwigPyIterator_distance(self, x)


    def equal(self, x: 'SwigPyIterator') -> "bool":
        """equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _prox.SwigPyIterator_equal(self, x)


    def copy(self) -> "swig::SwigPyIterator *":
        """copy(SwigPyIterator self) -> SwigPyIterator"""
        return _prox.SwigPyIterator_copy(self)


    def next(self) -> "PyObject *":
        """next(SwigPyIterator self) -> PyObject *"""
        return _prox.SwigPyIterator_next(self)


    def __next__(self) -> "PyObject *":
        """__next__(SwigPyIterator self) -> PyObject *"""
        return _prox.SwigPyIterator___next__(self)


    def previous(self) -> "PyObject *":
        """previous(SwigPyIterator self) -> PyObject *"""
        return _prox.SwigPyIterator_previous(self)


    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        """advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _prox.SwigPyIterator_advance(self, n)


    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        """__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _prox.SwigPyIterator___eq__(self, x)


    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        """__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _prox.SwigPyIterator___ne__(self, x)


    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        """__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _prox.SwigPyIterator___iadd__(self, n)


    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        """__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _prox.SwigPyIterator___isub__(self, n)


    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        """__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _prox.SwigPyIterator___add__(self, n)


    def __sub__(self, *args) -> "ptrdiff_t":
        """
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _prox.SwigPyIterator___sub__(self, *args)

    def __iter__(self):
        return self
SwigPyIterator_swigregister = _prox.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class Prox(_object):
    """Proxy of C++ TProx<(double,double)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Prox, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Prox, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProx<(double,double)> self, double strength, bool positive) -> Prox
        __init__(TProx<(double,double)> self, double strength, unsigned long start, unsigned long end, bool positive) -> Prox
        """
        this = _prox.new_Prox(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def call(self, coeffs: 'ArrayDouble const &', step: 'double', out: 'ArrayDouble &') -> "void":
        """call(Prox self, ArrayDouble const & coeffs, double step, ArrayDouble & out)"""
        return _prox.Prox_call(self, coeffs, step, out)


    def value(self, coeffs: 'ArrayDouble const &') -> "double":
        """value(Prox self, ArrayDouble const & coeffs) -> double"""
        return _prox.Prox_value(self, coeffs)


    def get_strength(self) -> "double":
        """get_strength(Prox self) -> double"""
        return _prox.Prox_get_strength(self)


    def set_strength(self, strength: 'double') -> "void":
        """set_strength(Prox self, double strength)"""
        return _prox.Prox_set_strength(self, strength)


    def get_start(self) -> "ulong":
        """get_start(Prox self) -> ulong"""
        return _prox.Prox_get_start(self)


    def get_end(self) -> "ulong":
        """get_end(Prox self) -> ulong"""
        return _prox.Prox_get_end(self)


    def set_start_end(self, start: 'ulong', end: 'ulong') -> "void":
        """set_start_end(Prox self, ulong start, ulong end)"""
        return _prox.Prox_set_start_end(self, start, end)


    def get_positive(self) -> "bool":
        """get_positive(Prox self) -> bool"""
        return _prox.Prox_get_positive(self)


    def set_positive(self, positive: 'bool') -> "void":
        """set_positive(Prox self, bool positive)"""
        return _prox.Prox_set_positive(self, positive)

    __swig_destroy__ = _prox.delete_Prox
    __del__ = lambda self: None
Prox_swigregister = _prox.Prox_swigregister
Prox_swigregister(Prox)

class ProxDouble(_object):
    """Proxy of C++ TProx<(double,double)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProxDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ProxDouble, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProx<(double,double)> self, double strength, bool positive) -> ProxDouble
        __init__(TProx<(double,double)> self, double strength, unsigned long start, unsigned long end, bool positive) -> ProxDouble
        """
        this = _prox.new_ProxDouble(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def call(self, coeffs: 'ArrayDouble const &', step: 'double', out: 'ArrayDouble &') -> "void":
        """call(ProxDouble self, ArrayDouble const & coeffs, double step, ArrayDouble & out)"""
        return _prox.ProxDouble_call(self, coeffs, step, out)


    def value(self, coeffs: 'ArrayDouble const &') -> "double":
        """value(ProxDouble self, ArrayDouble const & coeffs) -> double"""
        return _prox.ProxDouble_value(self, coeffs)


    def get_strength(self) -> "double":
        """get_strength(ProxDouble self) -> double"""
        return _prox.ProxDouble_get_strength(self)


    def set_strength(self, strength: 'double') -> "void":
        """set_strength(ProxDouble self, double strength)"""
        return _prox.ProxDouble_set_strength(self, strength)


    def get_start(self) -> "ulong":
        """get_start(ProxDouble self) -> ulong"""
        return _prox.ProxDouble_get_start(self)


    def get_end(self) -> "ulong":
        """get_end(ProxDouble self) -> ulong"""
        return _prox.ProxDouble_get_end(self)


    def set_start_end(self, start: 'ulong', end: 'ulong') -> "void":
        """set_start_end(ProxDouble self, ulong start, ulong end)"""
        return _prox.ProxDouble_set_start_end(self, start, end)


    def get_positive(self) -> "bool":
        """get_positive(ProxDouble self) -> bool"""
        return _prox.ProxDouble_get_positive(self)


    def set_positive(self, positive: 'bool') -> "void":
        """set_positive(ProxDouble self, bool positive)"""
        return _prox.ProxDouble_set_positive(self, positive)

    __swig_destroy__ = _prox.delete_ProxDouble
    __del__ = lambda self: None
ProxDouble_swigregister = _prox.ProxDouble_swigregister
ProxDouble_swigregister(ProxDouble)

class ProxFloat(_object):
    """Proxy of C++ TProx<(float,float)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProxFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ProxFloat, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProx<(float,float)> self, float strength, bool positive) -> ProxFloat
        __init__(TProx<(float,float)> self, float strength, unsigned long start, unsigned long end, bool positive) -> ProxFloat
        """
        this = _prox.new_ProxFloat(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def call(self, coeffs: 'ArrayFloat const &', step: 'float', out: 'ArrayFloat &') -> "void":
        """call(ProxFloat self, ArrayFloat const & coeffs, float step, ArrayFloat & out)"""
        return _prox.ProxFloat_call(self, coeffs, step, out)


    def value(self, coeffs: 'ArrayFloat const &') -> "float":
        """value(ProxFloat self, ArrayFloat const & coeffs) -> float"""
        return _prox.ProxFloat_value(self, coeffs)


    def get_strength(self) -> "float":
        """get_strength(ProxFloat self) -> float"""
        return _prox.ProxFloat_get_strength(self)


    def set_strength(self, strength: 'float') -> "void":
        """set_strength(ProxFloat self, float strength)"""
        return _prox.ProxFloat_set_strength(self, strength)


    def get_start(self) -> "ulong":
        """get_start(ProxFloat self) -> ulong"""
        return _prox.ProxFloat_get_start(self)


    def get_end(self) -> "ulong":
        """get_end(ProxFloat self) -> ulong"""
        return _prox.ProxFloat_get_end(self)


    def set_start_end(self, start: 'ulong', end: 'ulong') -> "void":
        """set_start_end(ProxFloat self, ulong start, ulong end)"""
        return _prox.ProxFloat_set_start_end(self, start, end)


    def get_positive(self) -> "bool":
        """get_positive(ProxFloat self) -> bool"""
        return _prox.ProxFloat_get_positive(self)


    def set_positive(self, positive: 'bool') -> "void":
        """set_positive(ProxFloat self, bool positive)"""
        return _prox.ProxFloat_set_positive(self, positive)

    __swig_destroy__ = _prox.delete_ProxFloat
    __del__ = lambda self: None
ProxFloat_swigregister = _prox.ProxFloat_swigregister
ProxFloat_swigregister(ProxFloat)

class ProxAtomicDouble(_object):
    """Proxy of C++ TProx<(double,std::atomic<(double)>)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProxAtomicDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ProxAtomicDouble, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProx<(double,std::atomic<(double)>)> self, double strength, bool positive) -> ProxAtomicDouble
        __init__(TProx<(double,std::atomic<(double)>)> self, double strength, unsigned long start, unsigned long end, bool positive) -> ProxAtomicDouble
        """
        this = _prox.new_ProxAtomicDouble(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def call(self, coeffs: 'Array< std::atomic< double > > const &', step: 'double', out: 'Array< std::atomic< double > > &') -> "void":
        """call(ProxAtomicDouble self, Array< std::atomic< double > > const & coeffs, double step, Array< std::atomic< double > > & out)"""
        return _prox.ProxAtomicDouble_call(self, coeffs, step, out)


    def value(self, coeffs: 'ArrayAtomicDouble const &') -> "double":
        """value(ProxAtomicDouble self, ArrayAtomicDouble const & coeffs) -> double"""
        return _prox.ProxAtomicDouble_value(self, coeffs)


    def get_strength(self) -> "double":
        """get_strength(ProxAtomicDouble self) -> double"""
        return _prox.ProxAtomicDouble_get_strength(self)


    def set_strength(self, strength: 'double') -> "void":
        """set_strength(ProxAtomicDouble self, double strength)"""
        return _prox.ProxAtomicDouble_set_strength(self, strength)


    def get_start(self) -> "ulong":
        """get_start(ProxAtomicDouble self) -> ulong"""
        return _prox.ProxAtomicDouble_get_start(self)


    def get_end(self) -> "ulong":
        """get_end(ProxAtomicDouble self) -> ulong"""
        return _prox.ProxAtomicDouble_get_end(self)


    def set_start_end(self, start: 'ulong', end: 'ulong') -> "void":
        """set_start_end(ProxAtomicDouble self, ulong start, ulong end)"""
        return _prox.ProxAtomicDouble_set_start_end(self, start, end)


    def get_positive(self) -> "bool":
        """get_positive(ProxAtomicDouble self) -> bool"""
        return _prox.ProxAtomicDouble_get_positive(self)


    def set_positive(self, positive: 'bool') -> "void":
        """set_positive(ProxAtomicDouble self, bool positive)"""
        return _prox.ProxAtomicDouble_set_positive(self, positive)

    __swig_destroy__ = _prox.delete_ProxAtomicDouble
    __del__ = lambda self: None
ProxAtomicDouble_swigregister = _prox.ProxAtomicDouble_swigregister
ProxAtomicDouble_swigregister(ProxAtomicDouble)

class TProxAtomicFloat(_object):
    """Proxy of C++ TProx<(float,std::atomic<(float)>)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TProxAtomicFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TProxAtomicFloat, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProx<(float,std::atomic<(float)>)> self, float strength, bool positive) -> TProxAtomicFloat
        __init__(TProx<(float,std::atomic<(float)>)> self, float strength, unsigned long start, unsigned long end, bool positive) -> TProxAtomicFloat
        """
        this = _prox.new_TProxAtomicFloat(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def call(self, coeffs: 'Array< std::atomic< float > > const &', step: 'float', out: 'Array< std::atomic< float > > &') -> "void":
        """call(TProxAtomicFloat self, Array< std::atomic< float > > const & coeffs, float step, Array< std::atomic< float > > & out)"""
        return _prox.TProxAtomicFloat_call(self, coeffs, step, out)


    def value(self, coeffs: 'Array< std::atomic< float > > const &') -> "float":
        """value(TProxAtomicFloat self, Array< std::atomic< float > > const & coeffs) -> float"""
        return _prox.TProxAtomicFloat_value(self, coeffs)


    def get_strength(self) -> "float":
        """get_strength(TProxAtomicFloat self) -> float"""
        return _prox.TProxAtomicFloat_get_strength(self)


    def set_strength(self, strength: 'float') -> "void":
        """set_strength(TProxAtomicFloat self, float strength)"""
        return _prox.TProxAtomicFloat_set_strength(self, strength)


    def get_start(self) -> "ulong":
        """get_start(TProxAtomicFloat self) -> ulong"""
        return _prox.TProxAtomicFloat_get_start(self)


    def get_end(self) -> "ulong":
        """get_end(TProxAtomicFloat self) -> ulong"""
        return _prox.TProxAtomicFloat_get_end(self)


    def set_start_end(self, start: 'ulong', end: 'ulong') -> "void":
        """set_start_end(TProxAtomicFloat self, ulong start, ulong end)"""
        return _prox.TProxAtomicFloat_set_start_end(self, start, end)


    def get_positive(self) -> "bool":
        """get_positive(TProxAtomicFloat self) -> bool"""
        return _prox.TProxAtomicFloat_get_positive(self)


    def set_positive(self, positive: 'bool') -> "void":
        """set_positive(TProxAtomicFloat self, bool positive)"""
        return _prox.TProxAtomicFloat_set_positive(self, positive)

    __swig_destroy__ = _prox.delete_TProxAtomicFloat
    __del__ = lambda self: None
TProxAtomicFloat_swigregister = _prox.TProxAtomicFloat_swigregister
TProxAtomicFloat_swigregister(TProxAtomicFloat)

class TProxSeparableDouble(Prox):
    """Proxy of C++ TProxSeparable<(double,double)> class"""
    __swig_setmethods__ = {}
    for _s in [Prox]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TProxSeparableDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [Prox]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TProxSeparableDouble, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProxSeparable<(double,double)> self, double strength, bool positive) -> TProxSeparableDouble
        __init__(TProxSeparable<(double,double)> self, double strength, unsigned long start, unsigned long end, bool positive) -> TProxSeparableDouble
        """
        this = _prox.new_TProxSeparableDouble(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def call(self, *args) -> "void":
        """
        call(TProxSeparableDouble self, ArrayDouble const & coeffs, double step, ArrayDouble & out)
        call(TProxSeparableDouble self, ArrayDouble const & coeffs, ArrayDouble const & step, ArrayDouble & out)
        """
        return _prox.TProxSeparableDouble_call(self, *args)

    __swig_destroy__ = _prox.delete_TProxSeparableDouble
    __del__ = lambda self: None
TProxSeparableDouble_swigregister = _prox.TProxSeparableDouble_swigregister
TProxSeparableDouble_swigregister(TProxSeparableDouble)

class TProxSeparableFloat(ProxFloat):
    """Proxy of C++ TProxSeparable<(float,float)> class"""
    __swig_setmethods__ = {}
    for _s in [ProxFloat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TProxSeparableFloat, name, value)
    __swig_getmethods__ = {}
    for _s in [ProxFloat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TProxSeparableFloat, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        TProxSeparable(float strength, bool positive) -> TProxSeparableFloat
        __init__(TProxSeparable<(float,float)> self, float strength, unsigned long start, unsigned long end, bool positive) -> TProxSeparableFloat
        """
        this = _prox.new_TProxSeparableFloat(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def call(self, *args) -> "void":
        """
        call(TProxSeparableFloat self, ArrayFloat const & coeffs, float step, ArrayFloat & out)
        call(TProxSeparableFloat self, ArrayFloat const & coeffs, ArrayFloat const & step, ArrayFloat & out)
        """
        return _prox.TProxSeparableFloat_call(self, *args)

    __swig_destroy__ = _prox.delete_TProxSeparableFloat
    __del__ = lambda self: None
TProxSeparableFloat_swigregister = _prox.TProxSeparableFloat_swigregister
TProxSeparableFloat_swigregister(TProxSeparableFloat)

class TProxSeparableAtomicDouble(ProxAtomicDouble):
    """Proxy of C++ TProxSeparable<(double,std::atomic<(double)>)> class"""
    __swig_setmethods__ = {}
    for _s in [ProxAtomicDouble]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TProxSeparableAtomicDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [ProxAtomicDouble]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TProxSeparableAtomicDouble, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProxSeparable<(double,std::atomic<(double)>)> self, double strength, bool positive) -> TProxSeparableAtomicDouble
        __init__(TProxSeparable<(double,std::atomic<(double)>)> self, double strength, unsigned long start, unsigned long end, bool positive) -> TProxSeparableAtomicDouble
        """
        this = _prox.new_TProxSeparableAtomicDouble(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def call(self, *args) -> "void":
        """
        call(TProxSeparableAtomicDouble self, Array< std::atomic< double > > const & coeffs, double step, Array< std::atomic< double > > & out)
        call(TProxSeparableAtomicDouble self, Array< std::atomic< double > > const & coeffs, Array< double > const & step, Array< std::atomic< double > > & out)
        """
        return _prox.TProxSeparableAtomicDouble_call(self, *args)

    __swig_destroy__ = _prox.delete_TProxSeparableAtomicDouble
    __del__ = lambda self: None
TProxSeparableAtomicDouble_swigregister = _prox.TProxSeparableAtomicDouble_swigregister
TProxSeparableAtomicDouble_swigregister(TProxSeparableAtomicDouble)

class TProxSeparableAtomicFloat(TProxAtomicFloat):
    """Proxy of C++ TProxSeparable<(float,std::atomic<(float)>)> class"""
    __swig_setmethods__ = {}
    for _s in [TProxAtomicFloat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TProxSeparableAtomicFloat, name, value)
    __swig_getmethods__ = {}
    for _s in [TProxAtomicFloat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TProxSeparableAtomicFloat, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProxSeparable<(float,std::atomic<(float)>)> self, float strength, bool positive) -> TProxSeparableAtomicFloat
        __init__(TProxSeparable<(float,std::atomic<(float)>)> self, float strength, unsigned long start, unsigned long end, bool positive) -> TProxSeparableAtomicFloat
        """
        this = _prox.new_TProxSeparableAtomicFloat(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def call(self, *args) -> "void":
        """
        call(TProxSeparableAtomicFloat self, Array< std::atomic< float > > const & coeffs, float step, Array< std::atomic< float > > & out)
        call(TProxSeparableAtomicFloat self, Array< std::atomic< float > > const & coeffs, Array< float > const & step, Array< std::atomic< float > > & out)
        """
        return _prox.TProxSeparableAtomicFloat_call(self, *args)

    __swig_destroy__ = _prox.delete_TProxSeparableAtomicFloat
    __del__ = lambda self: None
TProxSeparableAtomicFloat_swigregister = _prox.TProxSeparableAtomicFloat_swigregister
TProxSeparableAtomicFloat_swigregister(TProxSeparableAtomicFloat)

class ProxZeroDouble(Prox):
    """Proxy of C++ TProxZero<(double,double)> class"""
    __swig_setmethods__ = {}
    for _s in [Prox]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProxZeroDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [Prox]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProxZeroDouble, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProxZero<(double,double)> self) -> ProxZeroDouble
        __init__(TProxZero<(double,double)> self, double strength) -> ProxZeroDouble
        __init__(TProxZero<(double,double)> self, double strength, unsigned long start, unsigned long end) -> ProxZeroDouble
        """
        this = _prox.new_ProxZeroDouble(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def compare(self, that: 'ProxZeroDouble') -> "bool":
        """compare(ProxZeroDouble self, ProxZeroDouble that) -> bool"""
        return _prox.ProxZeroDouble_compare(self, that)


    def __getstate__(self): return ProxZeroDoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxZeroDoubleDeserialize(self, s)

    __swig_destroy__ = _prox.delete_ProxZeroDouble
    __del__ = lambda self: None
ProxZeroDouble_swigregister = _prox.ProxZeroDouble_swigregister
ProxZeroDouble_swigregister(ProxZeroDouble)


def ProxZeroDoubleDeserialize(ptr: 'ProxZeroDouble', hex: 'std::string const &') -> "void":
    """ProxZeroDoubleDeserialize(ProxZeroDouble ptr, std::string const & hex)"""
    return _prox.ProxZeroDoubleDeserialize(ptr, hex)

def ProxZeroDoubleSerialize(ptr: 'ProxZeroDouble') -> "std::string":
    """ProxZeroDoubleSerialize(ProxZeroDouble ptr) -> std::string"""
    return _prox.ProxZeroDoubleSerialize(ptr)
class ProxZeroFloat(ProxFloat):
    """Proxy of C++ TProxZero<(float,float)> class"""
    __swig_setmethods__ = {}
    for _s in [ProxFloat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProxZeroFloat, name, value)
    __swig_getmethods__ = {}
    for _s in [ProxFloat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProxZeroFloat, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProxZero<(float,float)> self) -> ProxZeroFloat
        __init__(TProxZero<(float,float)> self, float strength) -> ProxZeroFloat
        __init__(TProxZero<(float,float)> self, float strength, unsigned long start, unsigned long end) -> ProxZeroFloat
        """
        this = _prox.new_ProxZeroFloat(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def compare(self, that: 'ProxZeroFloat') -> "bool":
        """compare(ProxZeroFloat self, ProxZeroFloat that) -> bool"""
        return _prox.ProxZeroFloat_compare(self, that)


    def __getstate__(self): return ProxZeroFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxZeroFloatDeserialize(self, s)

    __swig_destroy__ = _prox.delete_ProxZeroFloat
    __del__ = lambda self: None
ProxZeroFloat_swigregister = _prox.ProxZeroFloat_swigregister
ProxZeroFloat_swigregister(ProxZeroFloat)


def ProxZeroFloatDeserialize(ptr: 'ProxZeroFloat', hex: 'std::string const &') -> "void":
    """ProxZeroFloatDeserialize(ProxZeroFloat ptr, std::string const & hex)"""
    return _prox.ProxZeroFloatDeserialize(ptr, hex)

def ProxZeroFloatSerialize(ptr: 'ProxZeroFloat') -> "std::string":
    """ProxZeroFloatSerialize(ProxZeroFloat ptr) -> std::string"""
    return _prox.ProxZeroFloatSerialize(ptr)
class ProxPositiveDouble(Prox):
    """Proxy of C++ TProxPositive<(double,double)> class"""
    __swig_setmethods__ = {}
    for _s in [Prox]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProxPositiveDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [Prox]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProxPositiveDouble, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProxPositive<(double,double)> self) -> ProxPositiveDouble
        __init__(TProxPositive<(double,double)> self, double strength) -> ProxPositiveDouble
        __init__(TProxPositive<(double,double)> self, double strength, unsigned long start, unsigned long end) -> ProxPositiveDouble
        """
        this = _prox.new_ProxPositiveDouble(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def compare(self, that: 'ProxPositiveDouble') -> "bool":
        """compare(ProxPositiveDouble self, ProxPositiveDouble that) -> bool"""
        return _prox.ProxPositiveDouble_compare(self, that)


    def __getstate__(self): return ProxPositiveDoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxPositiveDoubleDeserialize(self, s)

    __swig_destroy__ = _prox.delete_ProxPositiveDouble
    __del__ = lambda self: None
ProxPositiveDouble_swigregister = _prox.ProxPositiveDouble_swigregister
ProxPositiveDouble_swigregister(ProxPositiveDouble)


def ProxPositiveDoubleDeserialize(ptr: 'ProxPositiveDouble', hex: 'std::string const &') -> "void":
    """ProxPositiveDoubleDeserialize(ProxPositiveDouble ptr, std::string const & hex)"""
    return _prox.ProxPositiveDoubleDeserialize(ptr, hex)

def ProxPositiveDoubleSerialize(ptr: 'ProxPositiveDouble') -> "std::string":
    """ProxPositiveDoubleSerialize(ProxPositiveDouble ptr) -> std::string"""
    return _prox.ProxPositiveDoubleSerialize(ptr)
class ProxPositiveFloat(ProxFloat):
    """Proxy of C++ TProxPositive<(float,float)> class"""
    __swig_setmethods__ = {}
    for _s in [ProxFloat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProxPositiveFloat, name, value)
    __swig_getmethods__ = {}
    for _s in [ProxFloat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProxPositiveFloat, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProxPositive<(float,float)> self) -> ProxPositiveFloat
        __init__(TProxPositive<(float,float)> self, float strength) -> ProxPositiveFloat
        __init__(TProxPositive<(float,float)> self, float strength, unsigned long start, unsigned long end) -> ProxPositiveFloat
        """
        this = _prox.new_ProxPositiveFloat(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def compare(self, that: 'ProxPositiveFloat') -> "bool":
        """compare(ProxPositiveFloat self, ProxPositiveFloat that) -> bool"""
        return _prox.ProxPositiveFloat_compare(self, that)


    def __getstate__(self): return ProxPositiveFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxPositiveFloatDeserialize(self, s)

    __swig_destroy__ = _prox.delete_ProxPositiveFloat
    __del__ = lambda self: None
ProxPositiveFloat_swigregister = _prox.ProxPositiveFloat_swigregister
ProxPositiveFloat_swigregister(ProxPositiveFloat)


def ProxPositiveFloatDeserialize(ptr: 'ProxPositiveFloat', hex: 'std::string const &') -> "void":
    """ProxPositiveFloatDeserialize(ProxPositiveFloat ptr, std::string const & hex)"""
    return _prox.ProxPositiveFloatDeserialize(ptr, hex)

def ProxPositiveFloatSerialize(ptr: 'ProxPositiveFloat') -> "std::string":
    """ProxPositiveFloatSerialize(ProxPositiveFloat ptr) -> std::string"""
    return _prox.ProxPositiveFloatSerialize(ptr)
class ProxL2SqDouble(TProxSeparableDouble):
    """Proxy of C++ TProxL2Sq<(double,double)> class"""
    __swig_setmethods__ = {}
    for _s in [TProxSeparableDouble]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProxL2SqDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [TProxSeparableDouble]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProxL2SqDouble, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProxL2Sq<(double,double)> self) -> ProxL2SqDouble
        __init__(TProxL2Sq<(double,double)> self, double strength, bool positive) -> ProxL2SqDouble
        __init__(TProxL2Sq<(double,double)> self, double strength, ulong start, ulong end, bool positive) -> ProxL2SqDouble
        """
        this = _prox.new_ProxL2SqDouble(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def compare(self, that: 'ProxL2SqDouble') -> "bool":
        """compare(ProxL2SqDouble self, ProxL2SqDouble that) -> bool"""
        return _prox.ProxL2SqDouble_compare(self, that)


    def __getstate__(self): return ProxL2SqDoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxL2SqDoubleDeserialize(self, s)

    __swig_destroy__ = _prox.delete_ProxL2SqDouble
    __del__ = lambda self: None
ProxL2SqDouble_swigregister = _prox.ProxL2SqDouble_swigregister
ProxL2SqDouble_swigregister(ProxL2SqDouble)


def ProxL2SqDoubleDeserialize(ptr: 'ProxL2SqDouble', hex: 'std::string const &') -> "void":
    """ProxL2SqDoubleDeserialize(ProxL2SqDouble ptr, std::string const & hex)"""
    return _prox.ProxL2SqDoubleDeserialize(ptr, hex)

def ProxL2SqDoubleSerialize(ptr: 'ProxL2SqDouble') -> "std::string":
    """ProxL2SqDoubleSerialize(ProxL2SqDouble ptr) -> std::string"""
    return _prox.ProxL2SqDoubleSerialize(ptr)
class ProxL2SqFloat(TProxSeparableFloat):
    """Proxy of C++ TProxL2Sq<(float,float)> class"""
    __swig_setmethods__ = {}
    for _s in [TProxSeparableFloat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProxL2SqFloat, name, value)
    __swig_getmethods__ = {}
    for _s in [TProxSeparableFloat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProxL2SqFloat, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProxL2Sq<(float,float)> self) -> ProxL2SqFloat
        __init__(TProxL2Sq<(float,float)> self, float strength, bool positive) -> ProxL2SqFloat
        __init__(TProxL2Sq<(float,float)> self, float strength, ulong start, ulong end, bool positive) -> ProxL2SqFloat
        """
        this = _prox.new_ProxL2SqFloat(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def compare(self, that: 'ProxL2SqFloat') -> "bool":
        """compare(ProxL2SqFloat self, ProxL2SqFloat that) -> bool"""
        return _prox.ProxL2SqFloat_compare(self, that)


    def __getstate__(self): return ProxL2SqFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxL2SqFloatDeserialize(self, s)

    __swig_destroy__ = _prox.delete_ProxL2SqFloat
    __del__ = lambda self: None
ProxL2SqFloat_swigregister = _prox.ProxL2SqFloat_swigregister
ProxL2SqFloat_swigregister(ProxL2SqFloat)


def ProxL2SqFloatDeserialize(ptr: 'ProxL2SqFloat', hex: 'std::string const &') -> "void":
    """ProxL2SqFloatDeserialize(ProxL2SqFloat ptr, std::string const & hex)"""
    return _prox.ProxL2SqFloatDeserialize(ptr, hex)

def ProxL2SqFloatSerialize(ptr: 'ProxL2SqFloat') -> "std::string":
    """ProxL2SqFloatSerialize(ProxL2SqFloat ptr) -> std::string"""
    return _prox.ProxL2SqFloatSerialize(ptr)
class ProxL2Double(Prox):
    """Proxy of C++ TProxL2<(double,double)> class"""
    __swig_setmethods__ = {}
    for _s in [Prox]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProxL2Double, name, value)
    __swig_getmethods__ = {}
    for _s in [Prox]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProxL2Double, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProxL2<(double,double)> self) -> ProxL2Double
        __init__(TProxL2<(double,double)> self, double strength, bool positive) -> ProxL2Double
        __init__(TProxL2<(double,double)> self, double strength, unsigned long start, unsigned long end, bool positive) -> ProxL2Double
        """
        this = _prox.new_ProxL2Double(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def compare(self, that: 'ProxL2Double') -> "bool":
        """compare(ProxL2Double self, ProxL2Double that) -> bool"""
        return _prox.ProxL2Double_compare(self, that)


    def __getstate__(self): return ProxL2DoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxL2DoubleDeserialize(self, s)

    __swig_destroy__ = _prox.delete_ProxL2Double
    __del__ = lambda self: None
ProxL2Double_swigregister = _prox.ProxL2Double_swigregister
ProxL2Double_swigregister(ProxL2Double)


def ProxL2DoubleDeserialize(ptr: 'ProxL2Double', hex: 'std::string const &') -> "void":
    """ProxL2DoubleDeserialize(ProxL2Double ptr, std::string const & hex)"""
    return _prox.ProxL2DoubleDeserialize(ptr, hex)

def ProxL2DoubleSerialize(ptr: 'ProxL2Double') -> "std::string":
    """ProxL2DoubleSerialize(ProxL2Double ptr) -> std::string"""
    return _prox.ProxL2DoubleSerialize(ptr)
class ProxL2Float(ProxFloat):
    """Proxy of C++ TProxL2<(float,float)> class"""
    __swig_setmethods__ = {}
    for _s in [ProxFloat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProxL2Float, name, value)
    __swig_getmethods__ = {}
    for _s in [ProxFloat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProxL2Float, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProxL2<(float,float)> self) -> ProxL2Float
        __init__(TProxL2<(float,float)> self, float strength, bool positive) -> ProxL2Float
        __init__(TProxL2<(float,float)> self, float strength, unsigned long start, unsigned long end, bool positive) -> ProxL2Float
        """
        this = _prox.new_ProxL2Float(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def compare(self, that: 'ProxL2Float') -> "bool":
        """compare(ProxL2Float self, ProxL2Float that) -> bool"""
        return _prox.ProxL2Float_compare(self, that)


    def __getstate__(self): return ProxL2FloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxL2FloatDeserialize(self, s)

    __swig_destroy__ = _prox.delete_ProxL2Float
    __del__ = lambda self: None
ProxL2Float_swigregister = _prox.ProxL2Float_swigregister
ProxL2Float_swigregister(ProxL2Float)


def ProxL2FloatDeserialize(ptr: 'ProxL2Float', hex: 'std::string const &') -> "void":
    """ProxL2FloatDeserialize(ProxL2Float ptr, std::string const & hex)"""
    return _prox.ProxL2FloatDeserialize(ptr, hex)

def ProxL2FloatSerialize(ptr: 'ProxL2Float') -> "std::string":
    """ProxL2FloatSerialize(ProxL2Float ptr) -> std::string"""
    return _prox.ProxL2FloatSerialize(ptr)
class ProxL1Double(TProxSeparableDouble):
    """Proxy of C++ ProxL1Double class"""
    __swig_setmethods__ = {}
    for _s in [TProxSeparableDouble]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProxL1Double, name, value)
    __swig_getmethods__ = {}
    for _s in [TProxSeparableDouble]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProxL1Double, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ProxL1Double self) -> ProxL1Double
        __init__(ProxL1Double self, double strength, bool positive) -> ProxL1Double
        __init__(ProxL1Double self, double strength, ulong start, ulong end, bool positive) -> ProxL1Double
        """
        this = _prox.new_ProxL1Double(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def compare(self, that: 'ProxL1Double') -> "bool":
        """compare(ProxL1Double self, ProxL1Double that) -> bool"""
        return _prox.ProxL1Double_compare(self, that)


    def __getstate__(self): return ProxL1DoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxL1DoubleDeserialize(self, s)

    __swig_destroy__ = _prox.delete_ProxL1Double
    __del__ = lambda self: None
ProxL1Double_swigregister = _prox.ProxL1Double_swigregister
ProxL1Double_swigregister(ProxL1Double)


def ProxL1DoubleDeserialize(ptr: 'ProxL1Double', hex: 'std::string const &') -> "void":
    """ProxL1DoubleDeserialize(ProxL1Double ptr, std::string const & hex)"""
    return _prox.ProxL1DoubleDeserialize(ptr, hex)

def ProxL1DoubleSerialize(ptr: 'ProxL1Double') -> "std::string":
    """ProxL1DoubleSerialize(ProxL1Double ptr) -> std::string"""
    return _prox.ProxL1DoubleSerialize(ptr)
class ProxL1Float(TProxSeparableFloat):
    """Proxy of C++ ProxL1Float class"""
    __swig_setmethods__ = {}
    for _s in [TProxSeparableFloat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProxL1Float, name, value)
    __swig_getmethods__ = {}
    for _s in [TProxSeparableFloat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProxL1Float, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ProxL1Float self) -> ProxL1Float
        __init__(ProxL1Float self, float strength, bool positive) -> ProxL1Float
        __init__(ProxL1Float self, float strength, ulong start, ulong end, bool positive) -> ProxL1Float
        """
        this = _prox.new_ProxL1Float(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def compare(self, that: 'ProxL1Float') -> "bool":
        """compare(ProxL1Float self, ProxL1Float that) -> bool"""
        return _prox.ProxL1Float_compare(self, that)


    def __getstate__(self): return ProxL1FloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxL1FloatDeserialize(self, s)

    __swig_destroy__ = _prox.delete_ProxL1Float
    __del__ = lambda self: None
ProxL1Float_swigregister = _prox.ProxL1Float_swigregister
ProxL1Float_swigregister(ProxL1Float)


def ProxL1FloatDeserialize(ptr: 'ProxL1Float', hex: 'std::string const &') -> "void":
    """ProxL1FloatDeserialize(ProxL1Float ptr, std::string const & hex)"""
    return _prox.ProxL1FloatDeserialize(ptr, hex)

def ProxL1FloatSerialize(ptr: 'ProxL1Float') -> "std::string":
    """ProxL1FloatSerialize(ProxL1Float ptr) -> std::string"""
    return _prox.ProxL1FloatSerialize(ptr)
class ProxL1wDouble(TProxSeparableDouble):
    """Proxy of C++ ProxL1wDouble class"""
    __swig_setmethods__ = {}
    for _s in [TProxSeparableDouble]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProxL1wDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [TProxSeparableDouble]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProxL1wDouble, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ProxL1wDouble self) -> ProxL1wDouble
        __init__(ProxL1wDouble self, double strength, SArrayDoublePtr weights, bool positive) -> ProxL1wDouble
        __init__(ProxL1wDouble self, double strength, SArrayDoublePtr weights, ulong start, ulong end, bool positive) -> ProxL1wDouble
        """
        this = _prox.new_ProxL1wDouble(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def set_weights(self, weights: 'SArrayDoublePtr') -> "void":
        """set_weights(ProxL1wDouble self, SArrayDoublePtr weights)"""
        return _prox.ProxL1wDouble_set_weights(self, weights)


    def compare(self, that: 'ProxL1wDouble') -> "bool":
        """compare(ProxL1wDouble self, ProxL1wDouble that) -> bool"""
        return _prox.ProxL1wDouble_compare(self, that)


    def __getstate__(self): return ProxL1wDoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxL1wDoubleDeserialize(self, s)

    __swig_destroy__ = _prox.delete_ProxL1wDouble
    __del__ = lambda self: None
ProxL1wDouble_swigregister = _prox.ProxL1wDouble_swigregister
ProxL1wDouble_swigregister(ProxL1wDouble)


def ProxL1wDoubleDeserialize(ptr: 'ProxL1wDouble', hex: 'std::string const &') -> "void":
    """ProxL1wDoubleDeserialize(ProxL1wDouble ptr, std::string const & hex)"""
    return _prox.ProxL1wDoubleDeserialize(ptr, hex)

def ProxL1wDoubleSerialize(ptr: 'ProxL1wDouble') -> "std::string":
    """ProxL1wDoubleSerialize(ProxL1wDouble ptr) -> std::string"""
    return _prox.ProxL1wDoubleSerialize(ptr)
class ProxL1wFloat(TProxSeparableFloat):
    """Proxy of C++ ProxL1wFloat class"""
    __swig_setmethods__ = {}
    for _s in [TProxSeparableFloat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProxL1wFloat, name, value)
    __swig_getmethods__ = {}
    for _s in [TProxSeparableFloat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProxL1wFloat, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ProxL1wFloat self) -> ProxL1wFloat
        __init__(ProxL1wFloat self, float strength, SArrayFloatPtr weights, bool positive) -> ProxL1wFloat
        __init__(ProxL1wFloat self, float strength, SArrayFloatPtr weights, ulong start, ulong end, bool positive) -> ProxL1wFloat
        """
        this = _prox.new_ProxL1wFloat(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def set_weights(self, weights: 'SArrayFloatPtr') -> "void":
        """set_weights(ProxL1wFloat self, SArrayFloatPtr weights)"""
        return _prox.ProxL1wFloat_set_weights(self, weights)


    def compare(self, that: 'ProxL1wFloat') -> "bool":
        """compare(ProxL1wFloat self, ProxL1wFloat that) -> bool"""
        return _prox.ProxL1wFloat_compare(self, that)


    def __getstate__(self): return ProxL1wFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxL1wFloatDeserialize(self, s)

    __swig_destroy__ = _prox.delete_ProxL1wFloat
    __del__ = lambda self: None
ProxL1wFloat_swigregister = _prox.ProxL1wFloat_swigregister
ProxL1wFloat_swigregister(ProxL1wFloat)


def ProxL1wFloatDeserialize(ptr: 'ProxL1wFloat', hex: 'std::string const &') -> "void":
    """ProxL1wFloatDeserialize(ProxL1wFloat ptr, std::string const & hex)"""
    return _prox.ProxL1wFloatDeserialize(ptr, hex)

def ProxL1wFloatSerialize(ptr: 'ProxL1wFloat') -> "std::string":
    """ProxL1wFloatSerialize(ProxL1wFloat ptr) -> std::string"""
    return _prox.ProxL1wFloatSerialize(ptr)
class ProxTVDouble(Prox):
    """Proxy of C++ TProxTV<(double,double)> class"""
    __swig_setmethods__ = {}
    for _s in [Prox]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProxTVDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [Prox]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProxTVDouble, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProxTV<(double,double)> self) -> ProxTVDouble
        __init__(TProxTV<(double,double)> self, double strength, bool positive) -> ProxTVDouble
        __init__(TProxTV<(double,double)> self, double strength, unsigned long start, unsigned long end, bool positive) -> ProxTVDouble
        """
        this = _prox.new_ProxTVDouble(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def compare(self, that: 'ProxTVDouble') -> "bool":
        """compare(ProxTVDouble self, ProxTVDouble that) -> bool"""
        return _prox.ProxTVDouble_compare(self, that)


    def __getstate__(self): return ProxTVDoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxTVDoubleDeserialize(self, s)

    __swig_destroy__ = _prox.delete_ProxTVDouble
    __del__ = lambda self: None
ProxTVDouble_swigregister = _prox.ProxTVDouble_swigregister
ProxTVDouble_swigregister(ProxTVDouble)


def ProxTVDoubleDeserialize(ptr: 'ProxTVDouble', hex: 'std::string const &') -> "void":
    """ProxTVDoubleDeserialize(ProxTVDouble ptr, std::string const & hex)"""
    return _prox.ProxTVDoubleDeserialize(ptr, hex)

def ProxTVDoubleSerialize(ptr: 'ProxTVDouble') -> "std::string":
    """ProxTVDoubleSerialize(ProxTVDouble ptr) -> std::string"""
    return _prox.ProxTVDoubleSerialize(ptr)
class ProxTVFloat(ProxFloat):
    """Proxy of C++ TProxTV<(float,float)> class"""
    __swig_setmethods__ = {}
    for _s in [ProxFloat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProxTVFloat, name, value)
    __swig_getmethods__ = {}
    for _s in [ProxFloat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProxTVFloat, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProxTV<(float,float)> self) -> ProxTVFloat
        __init__(TProxTV<(float,float)> self, float strength, bool positive) -> ProxTVFloat
        __init__(TProxTV<(float,float)> self, float strength, unsigned long start, unsigned long end, bool positive) -> ProxTVFloat
        """
        this = _prox.new_ProxTVFloat(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def compare(self, that: 'ProxTVFloat') -> "bool":
        """compare(ProxTVFloat self, ProxTVFloat that) -> bool"""
        return _prox.ProxTVFloat_compare(self, that)


    def __getstate__(self): return ProxTVFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxTVFloatDeserialize(self, s)

    __swig_destroy__ = _prox.delete_ProxTVFloat
    __del__ = lambda self: None
ProxTVFloat_swigregister = _prox.ProxTVFloat_swigregister
ProxTVFloat_swigregister(ProxTVFloat)


def ProxTVFloatDeserialize(ptr: 'ProxTVFloat', hex: 'std::string const &') -> "void":
    """ProxTVFloatDeserialize(ProxTVFloat ptr, std::string const & hex)"""
    return _prox.ProxTVFloatDeserialize(ptr, hex)

def ProxTVFloatSerialize(ptr: 'ProxTVFloat') -> "std::string":
    """ProxTVFloatSerialize(ProxTVFloat ptr) -> std::string"""
    return _prox.ProxTVFloatSerialize(ptr)
class ProxElasticNetDouble(TProxSeparableDouble):
    """Proxy of C++ TProxElasticNet<(double,double)> class"""
    __swig_setmethods__ = {}
    for _s in [TProxSeparableDouble]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProxElasticNetDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [TProxSeparableDouble]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProxElasticNetDouble, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProxElasticNet<(double,double)> self) -> ProxElasticNetDouble
        __init__(TProxElasticNet<(double,double)> self, double strength, double ratio, bool positive) -> ProxElasticNetDouble
        __init__(TProxElasticNet<(double,double)> self, double strength, double ratio, ulong start, ulong end, bool positive) -> ProxElasticNetDouble
        """
        this = _prox.new_ProxElasticNetDouble(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_ratio(self) -> "double":
        """get_ratio(ProxElasticNetDouble self) -> double"""
        return _prox.ProxElasticNetDouble_get_ratio(self)


    def set_ratio(self, ratio: 'double') -> "void":
        """set_ratio(ProxElasticNetDouble self, double ratio)"""
        return _prox.ProxElasticNetDouble_set_ratio(self, ratio)


    def compare(self, that: 'ProxElasticNetDouble') -> "bool":
        """compare(ProxElasticNetDouble self, ProxElasticNetDouble that) -> bool"""
        return _prox.ProxElasticNetDouble_compare(self, that)


    def __getstate__(self): return ProxElasticNetDoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxElasticNetDoubleDeserialize(self, s)

    __swig_destroy__ = _prox.delete_ProxElasticNetDouble
    __del__ = lambda self: None
ProxElasticNetDouble_swigregister = _prox.ProxElasticNetDouble_swigregister
ProxElasticNetDouble_swigregister(ProxElasticNetDouble)


def ProxElasticNetDoubleDeserialize(ptr: 'ProxElasticNetDouble', hex: 'std::string const &') -> "void":
    """ProxElasticNetDoubleDeserialize(ProxElasticNetDouble ptr, std::string const & hex)"""
    return _prox.ProxElasticNetDoubleDeserialize(ptr, hex)

def ProxElasticNetDoubleSerialize(ptr: 'ProxElasticNetDouble') -> "std::string":
    """ProxElasticNetDoubleSerialize(ProxElasticNetDouble ptr) -> std::string"""
    return _prox.ProxElasticNetDoubleSerialize(ptr)
class ProxElasticNetFloat(TProxSeparableFloat):
    """Proxy of C++ TProxElasticNet<(float,float)> class"""
    __swig_setmethods__ = {}
    for _s in [TProxSeparableFloat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProxElasticNetFloat, name, value)
    __swig_getmethods__ = {}
    for _s in [TProxSeparableFloat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProxElasticNetFloat, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProxElasticNet<(float,float)> self) -> ProxElasticNetFloat
        __init__(TProxElasticNet<(float,float)> self, float strength, float ratio, bool positive) -> ProxElasticNetFloat
        __init__(TProxElasticNet<(float,float)> self, float strength, float ratio, ulong start, ulong end, bool positive) -> ProxElasticNetFloat
        """
        this = _prox.new_ProxElasticNetFloat(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_ratio(self) -> "float":
        """get_ratio(ProxElasticNetFloat self) -> float"""
        return _prox.ProxElasticNetFloat_get_ratio(self)


    def set_ratio(self, ratio: 'float') -> "void":
        """set_ratio(ProxElasticNetFloat self, float ratio)"""
        return _prox.ProxElasticNetFloat_set_ratio(self, ratio)


    def compare(self, that: 'ProxElasticNetFloat') -> "bool":
        """compare(ProxElasticNetFloat self, ProxElasticNetFloat that) -> bool"""
        return _prox.ProxElasticNetFloat_compare(self, that)


    def __getstate__(self): return ProxElasticNetFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxElasticNetFloatDeserialize(self, s)

    __swig_destroy__ = _prox.delete_ProxElasticNetFloat
    __del__ = lambda self: None
ProxElasticNetFloat_swigregister = _prox.ProxElasticNetFloat_swigregister
ProxElasticNetFloat_swigregister(ProxElasticNetFloat)


def ProxElasticNetFloatDeserialize(ptr: 'ProxElasticNetFloat', hex: 'std::string const &') -> "void":
    """ProxElasticNetFloatDeserialize(ProxElasticNetFloat ptr, std::string const & hex)"""
    return _prox.ProxElasticNetFloatDeserialize(ptr, hex)

def ProxElasticNetFloatSerialize(ptr: 'ProxElasticNetFloat') -> "std::string":
    """ProxElasticNetFloatSerialize(ProxElasticNetFloat ptr) -> std::string"""
    return _prox.ProxElasticNetFloatSerialize(ptr)
class ProxElasticNetAtomicDouble(TProxSeparableAtomicDouble):
    """Proxy of C++ TProxElasticNet<(double,std::atomic<(double)>)> class"""
    __swig_setmethods__ = {}
    for _s in [TProxSeparableAtomicDouble]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProxElasticNetAtomicDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [TProxSeparableAtomicDouble]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProxElasticNetAtomicDouble, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProxElasticNet<(double,std::atomic<(double)>)> self) -> ProxElasticNetAtomicDouble
        __init__(TProxElasticNet<(double,std::atomic<(double)>)> self, double strength, double ratio, bool positive) -> ProxElasticNetAtomicDouble
        __init__(TProxElasticNet<(double,std::atomic<(double)>)> self, double strength, double ratio, ulong start, ulong end, bool positive) -> ProxElasticNetAtomicDouble
        """
        this = _prox.new_ProxElasticNetAtomicDouble(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_ratio(self) -> "double":
        """get_ratio(ProxElasticNetAtomicDouble self) -> double"""
        return _prox.ProxElasticNetAtomicDouble_get_ratio(self)


    def set_ratio(self, ratio: 'double') -> "void":
        """set_ratio(ProxElasticNetAtomicDouble self, double ratio)"""
        return _prox.ProxElasticNetAtomicDouble_set_ratio(self, ratio)


    def compare(self, that: 'ProxElasticNetAtomicDouble') -> "bool":
        """compare(ProxElasticNetAtomicDouble self, ProxElasticNetAtomicDouble that) -> bool"""
        return _prox.ProxElasticNetAtomicDouble_compare(self, that)

    __swig_destroy__ = _prox.delete_ProxElasticNetAtomicDouble
    __del__ = lambda self: None
ProxElasticNetAtomicDouble_swigregister = _prox.ProxElasticNetAtomicDouble_swigregister
ProxElasticNetAtomicDouble_swigregister(ProxElasticNetAtomicDouble)

class ProxElasticNetAtomicFloat(TProxSeparableAtomicFloat):
    """Proxy of C++ TProxElasticNet<(float,std::atomic<(float)>)> class"""
    __swig_setmethods__ = {}
    for _s in [TProxSeparableAtomicFloat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProxElasticNetAtomicFloat, name, value)
    __swig_getmethods__ = {}
    for _s in [TProxSeparableAtomicFloat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProxElasticNetAtomicFloat, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProxElasticNet<(float,std::atomic<(float)>)> self) -> ProxElasticNetAtomicFloat
        __init__(TProxElasticNet<(float,std::atomic<(float)>)> self, float strength, float ratio, bool positive) -> ProxElasticNetAtomicFloat
        __init__(TProxElasticNet<(float,std::atomic<(float)>)> self, float strength, float ratio, ulong start, ulong end, bool positive) -> ProxElasticNetAtomicFloat
        """
        this = _prox.new_ProxElasticNetAtomicFloat(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_ratio(self) -> "float":
        """get_ratio(ProxElasticNetAtomicFloat self) -> float"""
        return _prox.ProxElasticNetAtomicFloat_get_ratio(self)


    def set_ratio(self, ratio: 'float') -> "void":
        """set_ratio(ProxElasticNetAtomicFloat self, float ratio)"""
        return _prox.ProxElasticNetAtomicFloat_set_ratio(self, ratio)


    def compare(self, that: 'ProxElasticNetAtomicFloat') -> "bool":
        """compare(ProxElasticNetAtomicFloat self, ProxElasticNetAtomicFloat that) -> bool"""
        return _prox.ProxElasticNetAtomicFloat_compare(self, that)

    __swig_destroy__ = _prox.delete_ProxElasticNetAtomicFloat
    __del__ = lambda self: None
ProxElasticNetAtomicFloat_swigregister = _prox.ProxElasticNetAtomicFloat_swigregister
ProxElasticNetAtomicFloat_swigregister(ProxElasticNetAtomicFloat)

class ProxSlopeDouble(Prox):
    """Proxy of C++ TProxSlope<(double,double)> class"""
    __swig_setmethods__ = {}
    for _s in [Prox]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProxSlopeDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [Prox]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProxSlopeDouble, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProxSlope<(double,double)> self) -> ProxSlopeDouble
        __init__(TProxSlope<(double,double)> self, double arg2, double fdr, bool positive) -> ProxSlopeDouble
        __init__(TProxSlope<(double,double)> self, double arg2, double fdr, unsigned long start, unsigned long end, bool positive) -> ProxSlopeDouble
        """
        this = _prox.new_ProxSlopeDouble(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_false_discovery_rate(self) -> "double":
        """get_false_discovery_rate(ProxSlopeDouble self) -> double"""
        return _prox.ProxSlopeDouble_get_false_discovery_rate(self)


    def set_false_discovery_rate(self, fdr: 'double') -> "void":
        """set_false_discovery_rate(ProxSlopeDouble self, double fdr)"""
        return _prox.ProxSlopeDouble_set_false_discovery_rate(self, fdr)


    def get_weight_i(self, i: 'unsigned long') -> "double":
        """get_weight_i(ProxSlopeDouble self, unsigned long i) -> double"""
        return _prox.ProxSlopeDouble_get_weight_i(self, i)


    def compare(self, that: 'ProxSlopeDouble') -> "bool":
        """compare(ProxSlopeDouble self, ProxSlopeDouble that) -> bool"""
        return _prox.ProxSlopeDouble_compare(self, that)


    def __getstate__(self): return ProxSlopeDoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxSlopeDoubleDeserialize(self, s)

    __swig_destroy__ = _prox.delete_ProxSlopeDouble
    __del__ = lambda self: None
ProxSlopeDouble_swigregister = _prox.ProxSlopeDouble_swigregister
ProxSlopeDouble_swigregister(ProxSlopeDouble)


def ProxSlopeDoubleDeserialize(ptr: 'ProxSlopeDouble', hex: 'std::string const &') -> "void":
    """ProxSlopeDoubleDeserialize(ProxSlopeDouble ptr, std::string const & hex)"""
    return _prox.ProxSlopeDoubleDeserialize(ptr, hex)

def ProxSlopeDoubleSerialize(ptr: 'ProxSlopeDouble') -> "std::string":
    """ProxSlopeDoubleSerialize(ProxSlopeDouble ptr) -> std::string"""
    return _prox.ProxSlopeDoubleSerialize(ptr)
class ProxSlopeFloat(ProxFloat):
    """Proxy of C++ TProxSlope<(float,float)> class"""
    __swig_setmethods__ = {}
    for _s in [ProxFloat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProxSlopeFloat, name, value)
    __swig_getmethods__ = {}
    for _s in [ProxFloat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProxSlopeFloat, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProxSlope<(float,float)> self) -> ProxSlopeFloat
        __init__(TProxSlope<(float,float)> self, float arg2, float fdr, bool positive) -> ProxSlopeFloat
        __init__(TProxSlope<(float,float)> self, float arg2, float fdr, unsigned long start, unsigned long end, bool positive) -> ProxSlopeFloat
        """
        this = _prox.new_ProxSlopeFloat(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_false_discovery_rate(self) -> "float":
        """get_false_discovery_rate(ProxSlopeFloat self) -> float"""
        return _prox.ProxSlopeFloat_get_false_discovery_rate(self)


    def set_false_discovery_rate(self, fdr: 'float') -> "void":
        """set_false_discovery_rate(ProxSlopeFloat self, float fdr)"""
        return _prox.ProxSlopeFloat_set_false_discovery_rate(self, fdr)


    def get_weight_i(self, i: 'unsigned long') -> "float":
        """get_weight_i(ProxSlopeFloat self, unsigned long i) -> float"""
        return _prox.ProxSlopeFloat_get_weight_i(self, i)


    def compare(self, that: 'ProxSlopeFloat') -> "bool":
        """compare(ProxSlopeFloat self, ProxSlopeFloat that) -> bool"""
        return _prox.ProxSlopeFloat_compare(self, that)


    def __getstate__(self): return ProxSlopeFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxSlopeFloatDeserialize(self, s)

    __swig_destroy__ = _prox.delete_ProxSlopeFloat
    __del__ = lambda self: None
ProxSlopeFloat_swigregister = _prox.ProxSlopeFloat_swigregister
ProxSlopeFloat_swigregister(ProxSlopeFloat)


def ProxSlopeFloatDeserialize(ptr: 'ProxSlopeFloat', hex: 'std::string const &') -> "void":
    """ProxSlopeFloatDeserialize(ProxSlopeFloat ptr, std::string const & hex)"""
    return _prox.ProxSlopeFloatDeserialize(ptr, hex)

def ProxSlopeFloatSerialize(ptr: 'ProxSlopeFloat') -> "std::string":
    """ProxSlopeFloatSerialize(ProxSlopeFloat ptr) -> std::string"""
    return _prox.ProxSlopeFloatSerialize(ptr)
class ProxDoublePtrVector(_object):
    """Proxy of C++ std::vector<(ProxDoublePtr)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProxDoublePtrVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ProxDoublePtrVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(ProxDoublePtrVector self) -> SwigPyIterator"""
        return _prox.ProxDoublePtrVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(ProxDoublePtrVector self) -> bool"""
        return _prox.ProxDoublePtrVector___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(ProxDoublePtrVector self) -> bool"""
        return _prox.ProxDoublePtrVector___bool__(self)


    def __len__(self) -> "std::vector< std::shared_ptr< TProx< double,double > > >::size_type":
        """__len__(ProxDoublePtrVector self) -> std::vector< std::shared_ptr< TProx< double,double > > >::size_type"""
        return _prox.ProxDoublePtrVector___len__(self)


    def pop(self) -> "std::vector< std::shared_ptr< TProx< double,double > > >::value_type":
        """pop(ProxDoublePtrVector self) -> std::vector< std::shared_ptr< TProx< double,double > > >::value_type"""
        return _prox.ProxDoublePtrVector_pop(self)


    def __getslice__(self, i: 'std::vector< std::shared_ptr< TProx< double,double > > >::difference_type', j: 'std::vector< std::shared_ptr< TProx< double,double > > >::difference_type') -> "std::vector< std::shared_ptr< TProx< double,double > >,std::allocator< std::shared_ptr< TProx< double,double > > > > *":
        """__getslice__(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::difference_type i, std::vector< std::shared_ptr< TProx< double,double > > >::difference_type j) -> ProxDoublePtrVector"""
        return _prox.ProxDoublePtrVector___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::difference_type i, std::vector< std::shared_ptr< TProx< double,double > > >::difference_type j, ProxDoublePtrVector v)
        __setslice__(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::difference_type i, std::vector< std::shared_ptr< TProx< double,double > > >::difference_type j)
        """
        return _prox.ProxDoublePtrVector___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< std::shared_ptr< TProx< double,double > > >::difference_type', j: 'std::vector< std::shared_ptr< TProx< double,double > > >::difference_type') -> "void":
        """__delslice__(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::difference_type i, std::vector< std::shared_ptr< TProx< double,double > > >::difference_type j)"""
        return _prox.ProxDoublePtrVector___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::difference_type i)
        __delitem__(ProxDoublePtrVector self, PySliceObject * slice)
        """
        return _prox.ProxDoublePtrVector___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< std::shared_ptr< TProx< double,double > > >::value_type const &":
        """
        __getitem__(ProxDoublePtrVector self, PySliceObject * slice) -> ProxDoublePtrVector
        __getitem__(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::difference_type i) -> std::vector< std::shared_ptr< TProx< double,double > > >::value_type const &
        """
        return _prox.ProxDoublePtrVector___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(ProxDoublePtrVector self, PySliceObject * slice, ProxDoublePtrVector v)
        __setitem__(ProxDoublePtrVector self, PySliceObject * slice)
        __setitem__(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::difference_type i, std::vector< std::shared_ptr< TProx< double,double > > >::value_type const & x)
        """
        return _prox.ProxDoublePtrVector___setitem__(self, *args)


    def append(self, x: 'std::vector< std::shared_ptr< TProx< double,double > > >::value_type const &') -> "void":
        """append(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::value_type const & x)"""
        return _prox.ProxDoublePtrVector_append(self, x)


    def empty(self) -> "bool":
        """empty(ProxDoublePtrVector self) -> bool"""
        return _prox.ProxDoublePtrVector_empty(self)


    def size(self) -> "std::vector< std::shared_ptr< TProx< double,double > > >::size_type":
        """size(ProxDoublePtrVector self) -> std::vector< std::shared_ptr< TProx< double,double > > >::size_type"""
        return _prox.ProxDoublePtrVector_size(self)


    def clear(self) -> "void":
        """clear(ProxDoublePtrVector self)"""
        return _prox.ProxDoublePtrVector_clear(self)


    def swap(self, v: 'ProxDoublePtrVector') -> "void":
        """swap(ProxDoublePtrVector self, ProxDoublePtrVector v)"""
        return _prox.ProxDoublePtrVector_swap(self, v)


    def get_allocator(self) -> "std::vector< std::shared_ptr< TProx< double,double > > >::allocator_type":
        """get_allocator(ProxDoublePtrVector self) -> std::vector< std::shared_ptr< TProx< double,double > > >::allocator_type"""
        return _prox.ProxDoublePtrVector_get_allocator(self)


    def begin(self) -> "std::vector< std::shared_ptr< TProx< double,double > > >::iterator":
        """begin(ProxDoublePtrVector self) -> std::vector< std::shared_ptr< TProx< double,double > > >::iterator"""
        return _prox.ProxDoublePtrVector_begin(self)


    def end(self) -> "std::vector< std::shared_ptr< TProx< double,double > > >::iterator":
        """end(ProxDoublePtrVector self) -> std::vector< std::shared_ptr< TProx< double,double > > >::iterator"""
        return _prox.ProxDoublePtrVector_end(self)


    def rbegin(self) -> "std::vector< std::shared_ptr< TProx< double,double > > >::reverse_iterator":
        """rbegin(ProxDoublePtrVector self) -> std::vector< std::shared_ptr< TProx< double,double > > >::reverse_iterator"""
        return _prox.ProxDoublePtrVector_rbegin(self)


    def rend(self) -> "std::vector< std::shared_ptr< TProx< double,double > > >::reverse_iterator":
        """rend(ProxDoublePtrVector self) -> std::vector< std::shared_ptr< TProx< double,double > > >::reverse_iterator"""
        return _prox.ProxDoublePtrVector_rend(self)


    def pop_back(self) -> "void":
        """pop_back(ProxDoublePtrVector self)"""
        return _prox.ProxDoublePtrVector_pop_back(self)


    def erase(self, *args) -> "std::vector< std::shared_ptr< TProx< double,double > > >::iterator":
        """
        erase(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::iterator pos) -> std::vector< std::shared_ptr< TProx< double,double > > >::iterator
        erase(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::iterator first, std::vector< std::shared_ptr< TProx< double,double > > >::iterator last) -> std::vector< std::shared_ptr< TProx< double,double > > >::iterator
        """
        return _prox.ProxDoublePtrVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(ProxDoublePtr)> self) -> ProxDoublePtrVector
        __init__(std::vector<(ProxDoublePtr)> self, ProxDoublePtrVector arg2) -> ProxDoublePtrVector
        __init__(std::vector<(ProxDoublePtr)> self, std::vector< std::shared_ptr< TProx< double,double > > >::size_type size) -> ProxDoublePtrVector
        __init__(std::vector<(ProxDoublePtr)> self, std::vector< std::shared_ptr< TProx< double,double > > >::size_type size, std::vector< std::shared_ptr< TProx< double,double > > >::value_type const & value) -> ProxDoublePtrVector
        """
        this = _prox.new_ProxDoublePtrVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'std::vector< std::shared_ptr< TProx< double,double > > >::value_type const &') -> "void":
        """push_back(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::value_type const & x)"""
        return _prox.ProxDoublePtrVector_push_back(self, x)


    def front(self) -> "std::vector< std::shared_ptr< TProx< double,double > > >::value_type const &":
        """front(ProxDoublePtrVector self) -> std::vector< std::shared_ptr< TProx< double,double > > >::value_type const &"""
        return _prox.ProxDoublePtrVector_front(self)


    def back(self) -> "std::vector< std::shared_ptr< TProx< double,double > > >::value_type const &":
        """back(ProxDoublePtrVector self) -> std::vector< std::shared_ptr< TProx< double,double > > >::value_type const &"""
        return _prox.ProxDoublePtrVector_back(self)


    def assign(self, n: 'std::vector< std::shared_ptr< TProx< double,double > > >::size_type', x: 'std::vector< std::shared_ptr< TProx< double,double > > >::value_type const &') -> "void":
        """assign(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::size_type n, std::vector< std::shared_ptr< TProx< double,double > > >::value_type const & x)"""
        return _prox.ProxDoublePtrVector_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::size_type new_size)
        resize(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::size_type new_size, std::vector< std::shared_ptr< TProx< double,double > > >::value_type const & x)
        """
        return _prox.ProxDoublePtrVector_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::iterator pos, std::vector< std::shared_ptr< TProx< double,double > > >::value_type const & x) -> std::vector< std::shared_ptr< TProx< double,double > > >::iterator
        insert(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::iterator pos, std::vector< std::shared_ptr< TProx< double,double > > >::size_type n, std::vector< std::shared_ptr< TProx< double,double > > >::value_type const & x)
        """
        return _prox.ProxDoublePtrVector_insert(self, *args)


    def reserve(self, n: 'std::vector< std::shared_ptr< TProx< double,double > > >::size_type') -> "void":
        """reserve(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::size_type n)"""
        return _prox.ProxDoublePtrVector_reserve(self, n)


    def capacity(self) -> "std::vector< std::shared_ptr< TProx< double,double > > >::size_type":
        """capacity(ProxDoublePtrVector self) -> std::vector< std::shared_ptr< TProx< double,double > > >::size_type"""
        return _prox.ProxDoublePtrVector_capacity(self)

    __swig_destroy__ = _prox.delete_ProxDoublePtrVector
    __del__ = lambda self: None
ProxDoublePtrVector_swigregister = _prox.ProxDoublePtrVector_swigregister
ProxDoublePtrVector_swigregister(ProxDoublePtrVector)

class ProxFloatPtrVector(_object):
    """Proxy of C++ std::vector<(ProxFloatPtr)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProxFloatPtrVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ProxFloatPtrVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(ProxFloatPtrVector self) -> SwigPyIterator"""
        return _prox.ProxFloatPtrVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(ProxFloatPtrVector self) -> bool"""
        return _prox.ProxFloatPtrVector___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(ProxFloatPtrVector self) -> bool"""
        return _prox.ProxFloatPtrVector___bool__(self)


    def __len__(self) -> "std::vector< std::shared_ptr< TProx< float,float > > >::size_type":
        """__len__(ProxFloatPtrVector self) -> std::vector< std::shared_ptr< TProx< float,float > > >::size_type"""
        return _prox.ProxFloatPtrVector___len__(self)


    def pop(self) -> "std::vector< std::shared_ptr< TProx< float,float > > >::value_type":
        """pop(ProxFloatPtrVector self) -> std::vector< std::shared_ptr< TProx< float,float > > >::value_type"""
        return _prox.ProxFloatPtrVector_pop(self)


    def __getslice__(self, i: 'std::vector< std::shared_ptr< TProx< float,float > > >::difference_type', j: 'std::vector< std::shared_ptr< TProx< float,float > > >::difference_type') -> "std::vector< std::shared_ptr< TProx< float,float > >,std::allocator< std::shared_ptr< TProx< float,float > > > > *":
        """__getslice__(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::difference_type i, std::vector< std::shared_ptr< TProx< float,float > > >::difference_type j) -> ProxFloatPtrVector"""
        return _prox.ProxFloatPtrVector___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::difference_type i, std::vector< std::shared_ptr< TProx< float,float > > >::difference_type j, ProxFloatPtrVector v)
        __setslice__(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::difference_type i, std::vector< std::shared_ptr< TProx< float,float > > >::difference_type j)
        """
        return _prox.ProxFloatPtrVector___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< std::shared_ptr< TProx< float,float > > >::difference_type', j: 'std::vector< std::shared_ptr< TProx< float,float > > >::difference_type') -> "void":
        """__delslice__(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::difference_type i, std::vector< std::shared_ptr< TProx< float,float > > >::difference_type j)"""
        return _prox.ProxFloatPtrVector___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::difference_type i)
        __delitem__(ProxFloatPtrVector self, PySliceObject * slice)
        """
        return _prox.ProxFloatPtrVector___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< std::shared_ptr< TProx< float,float > > >::value_type const &":
        """
        __getitem__(ProxFloatPtrVector self, PySliceObject * slice) -> ProxFloatPtrVector
        __getitem__(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::difference_type i) -> std::vector< std::shared_ptr< TProx< float,float > > >::value_type const &
        """
        return _prox.ProxFloatPtrVector___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(ProxFloatPtrVector self, PySliceObject * slice, ProxFloatPtrVector v)
        __setitem__(ProxFloatPtrVector self, PySliceObject * slice)
        __setitem__(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::difference_type i, std::vector< std::shared_ptr< TProx< float,float > > >::value_type const & x)
        """
        return _prox.ProxFloatPtrVector___setitem__(self, *args)


    def append(self, x: 'std::vector< std::shared_ptr< TProx< float,float > > >::value_type const &') -> "void":
        """append(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::value_type const & x)"""
        return _prox.ProxFloatPtrVector_append(self, x)


    def empty(self) -> "bool":
        """empty(ProxFloatPtrVector self) -> bool"""
        return _prox.ProxFloatPtrVector_empty(self)


    def size(self) -> "std::vector< std::shared_ptr< TProx< float,float > > >::size_type":
        """size(ProxFloatPtrVector self) -> std::vector< std::shared_ptr< TProx< float,float > > >::size_type"""
        return _prox.ProxFloatPtrVector_size(self)


    def clear(self) -> "void":
        """clear(ProxFloatPtrVector self)"""
        return _prox.ProxFloatPtrVector_clear(self)


    def swap(self, v: 'ProxFloatPtrVector') -> "void":
        """swap(ProxFloatPtrVector self, ProxFloatPtrVector v)"""
        return _prox.ProxFloatPtrVector_swap(self, v)


    def get_allocator(self) -> "std::vector< std::shared_ptr< TProx< float,float > > >::allocator_type":
        """get_allocator(ProxFloatPtrVector self) -> std::vector< std::shared_ptr< TProx< float,float > > >::allocator_type"""
        return _prox.ProxFloatPtrVector_get_allocator(self)


    def begin(self) -> "std::vector< std::shared_ptr< TProx< float,float > > >::iterator":
        """begin(ProxFloatPtrVector self) -> std::vector< std::shared_ptr< TProx< float,float > > >::iterator"""
        return _prox.ProxFloatPtrVector_begin(self)


    def end(self) -> "std::vector< std::shared_ptr< TProx< float,float > > >::iterator":
        """end(ProxFloatPtrVector self) -> std::vector< std::shared_ptr< TProx< float,float > > >::iterator"""
        return _prox.ProxFloatPtrVector_end(self)


    def rbegin(self) -> "std::vector< std::shared_ptr< TProx< float,float > > >::reverse_iterator":
        """rbegin(ProxFloatPtrVector self) -> std::vector< std::shared_ptr< TProx< float,float > > >::reverse_iterator"""
        return _prox.ProxFloatPtrVector_rbegin(self)


    def rend(self) -> "std::vector< std::shared_ptr< TProx< float,float > > >::reverse_iterator":
        """rend(ProxFloatPtrVector self) -> std::vector< std::shared_ptr< TProx< float,float > > >::reverse_iterator"""
        return _prox.ProxFloatPtrVector_rend(self)


    def pop_back(self) -> "void":
        """pop_back(ProxFloatPtrVector self)"""
        return _prox.ProxFloatPtrVector_pop_back(self)


    def erase(self, *args) -> "std::vector< std::shared_ptr< TProx< float,float > > >::iterator":
        """
        erase(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::iterator pos) -> std::vector< std::shared_ptr< TProx< float,float > > >::iterator
        erase(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::iterator first, std::vector< std::shared_ptr< TProx< float,float > > >::iterator last) -> std::vector< std::shared_ptr< TProx< float,float > > >::iterator
        """
        return _prox.ProxFloatPtrVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(ProxFloatPtr)> self) -> ProxFloatPtrVector
        __init__(std::vector<(ProxFloatPtr)> self, ProxFloatPtrVector arg2) -> ProxFloatPtrVector
        __init__(std::vector<(ProxFloatPtr)> self, std::vector< std::shared_ptr< TProx< float,float > > >::size_type size) -> ProxFloatPtrVector
        __init__(std::vector<(ProxFloatPtr)> self, std::vector< std::shared_ptr< TProx< float,float > > >::size_type size, std::vector< std::shared_ptr< TProx< float,float > > >::value_type const & value) -> ProxFloatPtrVector
        """
        this = _prox.new_ProxFloatPtrVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'std::vector< std::shared_ptr< TProx< float,float > > >::value_type const &') -> "void":
        """push_back(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::value_type const & x)"""
        return _prox.ProxFloatPtrVector_push_back(self, x)


    def front(self) -> "std::vector< std::shared_ptr< TProx< float,float > > >::value_type const &":
        """front(ProxFloatPtrVector self) -> std::vector< std::shared_ptr< TProx< float,float > > >::value_type const &"""
        return _prox.ProxFloatPtrVector_front(self)


    def back(self) -> "std::vector< std::shared_ptr< TProx< float,float > > >::value_type const &":
        """back(ProxFloatPtrVector self) -> std::vector< std::shared_ptr< TProx< float,float > > >::value_type const &"""
        return _prox.ProxFloatPtrVector_back(self)


    def assign(self, n: 'std::vector< std::shared_ptr< TProx< float,float > > >::size_type', x: 'std::vector< std::shared_ptr< TProx< float,float > > >::value_type const &') -> "void":
        """assign(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::size_type n, std::vector< std::shared_ptr< TProx< float,float > > >::value_type const & x)"""
        return _prox.ProxFloatPtrVector_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::size_type new_size)
        resize(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::size_type new_size, std::vector< std::shared_ptr< TProx< float,float > > >::value_type const & x)
        """
        return _prox.ProxFloatPtrVector_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::iterator pos, std::vector< std::shared_ptr< TProx< float,float > > >::value_type const & x) -> std::vector< std::shared_ptr< TProx< float,float > > >::iterator
        insert(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::iterator pos, std::vector< std::shared_ptr< TProx< float,float > > >::size_type n, std::vector< std::shared_ptr< TProx< float,float > > >::value_type const & x)
        """
        return _prox.ProxFloatPtrVector_insert(self, *args)


    def reserve(self, n: 'std::vector< std::shared_ptr< TProx< float,float > > >::size_type') -> "void":
        """reserve(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::size_type n)"""
        return _prox.ProxFloatPtrVector_reserve(self, n)


    def capacity(self) -> "std::vector< std::shared_ptr< TProx< float,float > > >::size_type":
        """capacity(ProxFloatPtrVector self) -> std::vector< std::shared_ptr< TProx< float,float > > >::size_type"""
        return _prox.ProxFloatPtrVector_capacity(self)

    __swig_destroy__ = _prox.delete_ProxFloatPtrVector
    __del__ = lambda self: None
ProxFloatPtrVector_swigregister = _prox.ProxFloatPtrVector_swigregister
ProxFloatPtrVector_swigregister(ProxFloatPtrVector)

class ProxMultiDouble(Prox):
    """Proxy of C++ TProxMulti<(double,double)> class"""
    __swig_setmethods__ = {}
    for _s in [Prox]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProxMultiDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [Prox]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProxMultiDouble, name)
    __repr__ = _swig_repr

    def __init__(self, proxs: 'ProxDoublePtrVector'):
        """__init__(TProxMulti<(double,double)> self, ProxDoublePtrVector proxs) -> ProxMultiDouble"""
        this = _prox.new_ProxMultiDouble(proxs)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _prox.delete_ProxMultiDouble
    __del__ = lambda self: None
ProxMultiDouble_swigregister = _prox.ProxMultiDouble_swigregister
ProxMultiDouble_swigregister(ProxMultiDouble)

class ProxMultiFloat(ProxFloat):
    """Proxy of C++ TProxMulti<(float,float)> class"""
    __swig_setmethods__ = {}
    for _s in [ProxFloat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProxMultiFloat, name, value)
    __swig_getmethods__ = {}
    for _s in [ProxFloat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProxMultiFloat, name)
    __repr__ = _swig_repr

    def __init__(self, proxs: 'ProxFloatPtrVector'):
        """__init__(TProxMulti<(float,float)> self, ProxFloatPtrVector proxs) -> ProxMultiFloat"""
        this = _prox.new_ProxMultiFloat(proxs)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _prox.delete_ProxMultiFloat
    __del__ = lambda self: None
ProxMultiFloat_swigregister = _prox.ProxMultiFloat_swigregister
ProxMultiFloat_swigregister(ProxMultiFloat)

class ProxEqualityDouble(Prox):
    """Proxy of C++ TProxEquality<(double,double)> class"""
    __swig_setmethods__ = {}
    for _s in [Prox]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProxEqualityDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [Prox]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProxEqualityDouble, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProxEquality<(double,double)> self) -> ProxEqualityDouble
        __init__(TProxEquality<(double,double)> self, double strength, bool positive) -> ProxEqualityDouble
        __init__(TProxEquality<(double,double)> self, double strength, ulong start, ulong end, bool positive) -> ProxEqualityDouble
        """
        this = _prox.new_ProxEqualityDouble(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def compare(self, that: 'ProxEqualityDouble') -> "bool":
        """compare(ProxEqualityDouble self, ProxEqualityDouble that) -> bool"""
        return _prox.ProxEqualityDouble_compare(self, that)


    def __getstate__(self): return ProxEqualityDoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxEqualityDoubleDeserialize(self, s)

    __swig_destroy__ = _prox.delete_ProxEqualityDouble
    __del__ = lambda self: None
ProxEqualityDouble_swigregister = _prox.ProxEqualityDouble_swigregister
ProxEqualityDouble_swigregister(ProxEqualityDouble)


def ProxEqualityDoubleDeserialize(ptr: 'ProxEqualityDouble', hex: 'std::string const &') -> "void":
    """ProxEqualityDoubleDeserialize(ProxEqualityDouble ptr, std::string const & hex)"""
    return _prox.ProxEqualityDoubleDeserialize(ptr, hex)

def ProxEqualityDoubleSerialize(ptr: 'ProxEqualityDouble') -> "std::string":
    """ProxEqualityDoubleSerialize(ProxEqualityDouble ptr) -> std::string"""
    return _prox.ProxEqualityDoubleSerialize(ptr)
class ProxEqualityFloat(ProxFloat):
    """Proxy of C++ TProxEquality<(float,float)> class"""
    __swig_setmethods__ = {}
    for _s in [ProxFloat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProxEqualityFloat, name, value)
    __swig_getmethods__ = {}
    for _s in [ProxFloat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProxEqualityFloat, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProxEquality<(float,float)> self) -> ProxEqualityFloat
        __init__(TProxEquality<(float,float)> self, float strength, bool positive) -> ProxEqualityFloat
        __init__(TProxEquality<(float,float)> self, float strength, ulong start, ulong end, bool positive) -> ProxEqualityFloat
        """
        this = _prox.new_ProxEqualityFloat(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def compare(self, that: 'ProxEqualityFloat') -> "bool":
        """compare(ProxEqualityFloat self, ProxEqualityFloat that) -> bool"""
        return _prox.ProxEqualityFloat_compare(self, that)


    def __getstate__(self): return ProxEqualityFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxEqualityFloatDeserialize(self, s)

    __swig_destroy__ = _prox.delete_ProxEqualityFloat
    __del__ = lambda self: None
ProxEqualityFloat_swigregister = _prox.ProxEqualityFloat_swigregister
ProxEqualityFloat_swigregister(ProxEqualityFloat)


def ProxEqualityFloatDeserialize(ptr: 'ProxEqualityFloat', hex: 'std::string const &') -> "void":
    """ProxEqualityFloatDeserialize(ProxEqualityFloat ptr, std::string const & hex)"""
    return _prox.ProxEqualityFloatDeserialize(ptr, hex)

def ProxEqualityFloatSerialize(ptr: 'ProxEqualityFloat') -> "std::string":
    """ProxEqualityFloatSerialize(ProxEqualityFloat ptr) -> std::string"""
    return _prox.ProxEqualityFloatSerialize(ptr)
class ProxWithGroupsDouble(Prox):
    """Proxy of C++ TProxWithGroups<(double,double)> class"""
    __swig_setmethods__ = {}
    for _s in [Prox]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProxWithGroupsDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [Prox]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProxWithGroupsDouble, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProxWithGroups<(double,double)> self, double strength, SArrayULongPtr blocks_start, SArrayULongPtr blocks_length, bool positive) -> ProxWithGroupsDouble
        __init__(TProxWithGroups<(double,double)> self, double strength, SArrayULongPtr blocks_start, SArrayULongPtr blocks_length, ulong start, ulong end, bool positive) -> ProxWithGroupsDouble
        """
        this = _prox.new_ProxWithGroupsDouble(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _prox.delete_ProxWithGroupsDouble
    __del__ = lambda self: None
ProxWithGroupsDouble_swigregister = _prox.ProxWithGroupsDouble_swigregister
ProxWithGroupsDouble_swigregister(ProxWithGroupsDouble)

class ProxWithGroupsFloat(ProxFloat):
    """Proxy of C++ TProxWithGroups<(float,float)> class"""
    __swig_setmethods__ = {}
    for _s in [ProxFloat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProxWithGroupsFloat, name, value)
    __swig_getmethods__ = {}
    for _s in [ProxFloat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProxWithGroupsFloat, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProxWithGroups<(float,float)> self, float strength, SArrayULongPtr blocks_start, SArrayULongPtr blocks_length, bool positive) -> ProxWithGroupsFloat
        __init__(TProxWithGroups<(float,float)> self, float strength, SArrayULongPtr blocks_start, SArrayULongPtr blocks_length, ulong start, ulong end, bool positive) -> ProxWithGroupsFloat
        """
        this = _prox.new_ProxWithGroupsFloat(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _prox.delete_ProxWithGroupsFloat
    __del__ = lambda self: None
ProxWithGroupsFloat_swigregister = _prox.ProxWithGroupsFloat_swigregister
ProxWithGroupsFloat_swigregister(ProxWithGroupsFloat)

class ProxBinarsityDouble(ProxWithGroupsDouble):
    """Proxy of C++ TProxBinarsity<(double,double)> class"""
    __swig_setmethods__ = {}
    for _s in [ProxWithGroupsDouble]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProxBinarsityDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [ProxWithGroupsDouble]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProxBinarsityDouble, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProxBinarsity<(double,double)> self) -> ProxBinarsityDouble
        __init__(TProxBinarsity<(double,double)> self, double strength, SArrayULongPtr blocks_start, SArrayULongPtr blocks_length, bool positive) -> ProxBinarsityDouble
        __init__(TProxBinarsity<(double,double)> self, double strength, SArrayULongPtr blocks_start, SArrayULongPtr blocks_length, ulong start, ulong end, bool positive) -> ProxBinarsityDouble
        """
        this = _prox.new_ProxBinarsityDouble(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def set_positive(self, positive: 'bool') -> "void":
        """set_positive(ProxBinarsityDouble self, bool positive)"""
        return _prox.ProxBinarsityDouble_set_positive(self, positive)


    def set_blocks_start(self, blocks_start: 'SArrayULongPtr') -> "void":
        """set_blocks_start(ProxBinarsityDouble self, SArrayULongPtr blocks_start)"""
        return _prox.ProxBinarsityDouble_set_blocks_start(self, blocks_start)


    def set_blocks_length(self, blocks_length: 'SArrayULongPtr') -> "void":
        """set_blocks_length(ProxBinarsityDouble self, SArrayULongPtr blocks_length)"""
        return _prox.ProxBinarsityDouble_set_blocks_length(self, blocks_length)


    def compare(self, that: 'ProxBinarsityDouble') -> "bool":
        """compare(ProxBinarsityDouble self, ProxBinarsityDouble that) -> bool"""
        return _prox.ProxBinarsityDouble_compare(self, that)


    def __getstate__(self): return ProxBinarsityDoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxBinarsityDoubleDeserialize(self, s)

    __swig_destroy__ = _prox.delete_ProxBinarsityDouble
    __del__ = lambda self: None
ProxBinarsityDouble_swigregister = _prox.ProxBinarsityDouble_swigregister
ProxBinarsityDouble_swigregister(ProxBinarsityDouble)


def ProxBinarsityDoubleDeserialize(ptr: 'ProxBinarsityDouble', hex: 'std::string const &') -> "void":
    """ProxBinarsityDoubleDeserialize(ProxBinarsityDouble ptr, std::string const & hex)"""
    return _prox.ProxBinarsityDoubleDeserialize(ptr, hex)

def ProxBinarsityDoubleSerialize(ptr: 'ProxBinarsityDouble') -> "std::string":
    """ProxBinarsityDoubleSerialize(ProxBinarsityDouble ptr) -> std::string"""
    return _prox.ProxBinarsityDoubleSerialize(ptr)
class ProxBinarsityFloat(ProxWithGroupsFloat):
    """Proxy of C++ TProxBinarsity<(float,float)> class"""
    __swig_setmethods__ = {}
    for _s in [ProxWithGroupsFloat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProxBinarsityFloat, name, value)
    __swig_getmethods__ = {}
    for _s in [ProxWithGroupsFloat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProxBinarsityFloat, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProxBinarsity<(float,float)> self) -> ProxBinarsityFloat
        __init__(TProxBinarsity<(float,float)> self, float strength, SArrayULongPtr blocks_start, SArrayULongPtr blocks_length, bool positive) -> ProxBinarsityFloat
        __init__(TProxBinarsity<(float,float)> self, float strength, SArrayULongPtr blocks_start, SArrayULongPtr blocks_length, ulong start, ulong end, bool positive) -> ProxBinarsityFloat
        """
        this = _prox.new_ProxBinarsityFloat(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def set_positive(self, positive: 'bool') -> "void":
        """set_positive(ProxBinarsityFloat self, bool positive)"""
        return _prox.ProxBinarsityFloat_set_positive(self, positive)


    def set_blocks_start(self, blocks_start: 'SArrayULongPtr') -> "void":
        """set_blocks_start(ProxBinarsityFloat self, SArrayULongPtr blocks_start)"""
        return _prox.ProxBinarsityFloat_set_blocks_start(self, blocks_start)


    def set_blocks_length(self, blocks_length: 'SArrayULongPtr') -> "void":
        """set_blocks_length(ProxBinarsityFloat self, SArrayULongPtr blocks_length)"""
        return _prox.ProxBinarsityFloat_set_blocks_length(self, blocks_length)


    def compare(self, that: 'ProxBinarsityFloat') -> "bool":
        """compare(ProxBinarsityFloat self, ProxBinarsityFloat that) -> bool"""
        return _prox.ProxBinarsityFloat_compare(self, that)


    def __getstate__(self): return ProxBinarsityFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxBinarsityFloatDeserialize(self, s)

    __swig_destroy__ = _prox.delete_ProxBinarsityFloat
    __del__ = lambda self: None
ProxBinarsityFloat_swigregister = _prox.ProxBinarsityFloat_swigregister
ProxBinarsityFloat_swigregister(ProxBinarsityFloat)


def ProxBinarsityFloatDeserialize(ptr: 'ProxBinarsityFloat', hex: 'std::string const &') -> "void":
    """ProxBinarsityFloatDeserialize(ProxBinarsityFloat ptr, std::string const & hex)"""
    return _prox.ProxBinarsityFloatDeserialize(ptr, hex)

def ProxBinarsityFloatSerialize(ptr: 'ProxBinarsityFloat') -> "std::string":
    """ProxBinarsityFloatSerialize(ProxBinarsityFloat ptr) -> std::string"""
    return _prox.ProxBinarsityFloatSerialize(ptr)
class ProxGroupL1Double(ProxWithGroupsDouble):
    """Proxy of C++ TProxGroupL1<(double,double)> class"""
    __swig_setmethods__ = {}
    for _s in [ProxWithGroupsDouble]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProxGroupL1Double, name, value)
    __swig_getmethods__ = {}
    for _s in [ProxWithGroupsDouble]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProxGroupL1Double, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProxGroupL1<(double,double)> self) -> ProxGroupL1Double
        __init__(TProxGroupL1<(double,double)> self, double strength, SArrayULongPtr blocks_start, SArrayULongPtr blocks_length, bool positive) -> ProxGroupL1Double
        __init__(TProxGroupL1<(double,double)> self, double strength, SArrayULongPtr blocks_start, SArrayULongPtr blocks_length, ulong start, ulong end, bool positive) -> ProxGroupL1Double
        """
        this = _prox.new_ProxGroupL1Double(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def set_positive(self, positive: 'bool') -> "void":
        """set_positive(ProxGroupL1Double self, bool positive)"""
        return _prox.ProxGroupL1Double_set_positive(self, positive)


    def set_blocks_start(self, blocks_start: 'SArrayULongPtr') -> "void":
        """set_blocks_start(ProxGroupL1Double self, SArrayULongPtr blocks_start)"""
        return _prox.ProxGroupL1Double_set_blocks_start(self, blocks_start)


    def set_blocks_length(self, blocks_length: 'SArrayULongPtr') -> "void":
        """set_blocks_length(ProxGroupL1Double self, SArrayULongPtr blocks_length)"""
        return _prox.ProxGroupL1Double_set_blocks_length(self, blocks_length)


    def compare(self, that: 'ProxGroupL1Double') -> "bool":
        """compare(ProxGroupL1Double self, ProxGroupL1Double that) -> bool"""
        return _prox.ProxGroupL1Double_compare(self, that)


    def __getstate__(self): return ProxGroupL1DoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxGroupL1DoubleDeserialize(self, s)

    __swig_destroy__ = _prox.delete_ProxGroupL1Double
    __del__ = lambda self: None
ProxGroupL1Double_swigregister = _prox.ProxGroupL1Double_swigregister
ProxGroupL1Double_swigregister(ProxGroupL1Double)


def ProxGroupL1DoubleDeserialize(ptr: 'ProxGroupL1Double', hex: 'std::string const &') -> "void":
    """ProxGroupL1DoubleDeserialize(ProxGroupL1Double ptr, std::string const & hex)"""
    return _prox.ProxGroupL1DoubleDeserialize(ptr, hex)

def ProxGroupL1DoubleSerialize(ptr: 'ProxGroupL1Double') -> "std::string":
    """ProxGroupL1DoubleSerialize(ProxGroupL1Double ptr) -> std::string"""
    return _prox.ProxGroupL1DoubleSerialize(ptr)
class ProxGroupL1Float(ProxWithGroupsFloat):
    """Proxy of C++ TProxGroupL1<(float,float)> class"""
    __swig_setmethods__ = {}
    for _s in [ProxWithGroupsFloat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProxGroupL1Float, name, value)
    __swig_getmethods__ = {}
    for _s in [ProxWithGroupsFloat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProxGroupL1Float, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProxGroupL1<(float,float)> self) -> ProxGroupL1Float
        __init__(TProxGroupL1<(float,float)> self, float strength, SArrayULongPtr blocks_start, SArrayULongPtr blocks_length, bool positive) -> ProxGroupL1Float
        __init__(TProxGroupL1<(float,float)> self, float strength, SArrayULongPtr blocks_start, SArrayULongPtr blocks_length, ulong start, ulong end, bool positive) -> ProxGroupL1Float
        """
        this = _prox.new_ProxGroupL1Float(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def set_positive(self, positive: 'bool') -> "void":
        """set_positive(ProxGroupL1Float self, bool positive)"""
        return _prox.ProxGroupL1Float_set_positive(self, positive)


    def set_blocks_start(self, blocks_start: 'SArrayULongPtr') -> "void":
        """set_blocks_start(ProxGroupL1Float self, SArrayULongPtr blocks_start)"""
        return _prox.ProxGroupL1Float_set_blocks_start(self, blocks_start)


    def set_blocks_length(self, blocks_length: 'SArrayULongPtr') -> "void":
        """set_blocks_length(ProxGroupL1Float self, SArrayULongPtr blocks_length)"""
        return _prox.ProxGroupL1Float_set_blocks_length(self, blocks_length)


    def compare(self, that: 'ProxGroupL1Float') -> "bool":
        """compare(ProxGroupL1Float self, ProxGroupL1Float that) -> bool"""
        return _prox.ProxGroupL1Float_compare(self, that)


    def __getstate__(self): return ProxGroupL1FloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxGroupL1FloatDeserialize(self, s)

    __swig_destroy__ = _prox.delete_ProxGroupL1Float
    __del__ = lambda self: None
ProxGroupL1Float_swigregister = _prox.ProxGroupL1Float_swigregister
ProxGroupL1Float_swigregister(ProxGroupL1Float)


def ProxGroupL1FloatDeserialize(ptr: 'ProxGroupL1Float', hex: 'std::string const &') -> "void":
    """ProxGroupL1FloatDeserialize(ProxGroupL1Float ptr, std::string const & hex)"""
    return _prox.ProxGroupL1FloatDeserialize(ptr, hex)

def ProxGroupL1FloatSerialize(ptr: 'ProxGroupL1Float') -> "std::string":
    """ProxGroupL1FloatSerialize(ProxGroupL1Float ptr) -> std::string"""
    return _prox.ProxGroupL1FloatSerialize(ptr)
# This file is compatible with both classic and new-style classes.


