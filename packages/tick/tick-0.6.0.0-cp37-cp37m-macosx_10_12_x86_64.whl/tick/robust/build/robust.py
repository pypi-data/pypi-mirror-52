# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_robust', [dirname(__file__)])
        except ImportError:
            import _robust
            return _robust
        if fp is not None:
            try:
                _mod = imp.load_module('_robust', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _robust = swig_import_helper()
    del swig_import_helper
else:
    import _robust
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def to_hex(bytes: 'std::string const &') -> "std::string":
    """to_hex(std::string const & bytes) -> std::string"""
    return _robust.to_hex(bytes)

def to_bytes(hex: 'std::string const &') -> "std::string":
    """to_bytes(std::string const & hex) -> std::string"""
    return _robust.to_bytes(hex)

_robust.SHARED_PTR_DISOWN_swigconstant(_robust)
SHARED_PTR_DISOWN = _robust.SHARED_PTR_DISOWN
import tick.base
import tick.array.build.array
class Model(_object):
    """Proxy of C++ TModel<(double,double)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Model, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Model, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(TModel<(double,double)> self) -> Model"""
        this = _robust.new_Model()
        try:
            self.this.append(this)
        except:
            self.this = this

    def grad(self, coeffs: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
        """grad(Model self, ArrayDouble const & coeffs, ArrayDouble & out)"""
        return _robust.Model_grad(self, coeffs, out)


    def loss(self, coeffs: 'ArrayDouble const &') -> "double":
        """loss(Model self, ArrayDouble const & coeffs) -> double"""
        return _robust.Model_loss(self, coeffs)


    def get_epoch_size(self) -> "unsigned long":
        """get_epoch_size(Model self) -> unsigned long"""
        return _robust.Model_get_epoch_size(self)


    def is_sparse(self) -> "bool":
        """is_sparse(Model self) -> bool"""
        return _robust.Model_is_sparse(self)

    __swig_destroy__ = _robust.delete_Model
    __del__ = lambda self: None
Model_swigregister = _robust.Model_swigregister
Model_swigregister(Model)

class ModelDouble(_object):
    """Proxy of C++ TModel<(double,double)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModelDouble, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(TModel<(double,double)> self) -> ModelDouble"""
        this = _robust.new_ModelDouble()
        try:
            self.this.append(this)
        except:
            self.this = this

    def grad(self, coeffs: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
        """grad(ModelDouble self, ArrayDouble const & coeffs, ArrayDouble & out)"""
        return _robust.ModelDouble_grad(self, coeffs, out)


    def loss(self, coeffs: 'ArrayDouble const &') -> "double":
        """loss(ModelDouble self, ArrayDouble const & coeffs) -> double"""
        return _robust.ModelDouble_loss(self, coeffs)


    def get_epoch_size(self) -> "unsigned long":
        """get_epoch_size(ModelDouble self) -> unsigned long"""
        return _robust.ModelDouble_get_epoch_size(self)


    def is_sparse(self) -> "bool":
        """is_sparse(ModelDouble self) -> bool"""
        return _robust.ModelDouble_is_sparse(self)

    __swig_destroy__ = _robust.delete_ModelDouble
    __del__ = lambda self: None
ModelDouble_swigregister = _robust.ModelDouble_swigregister
ModelDouble_swigregister(ModelDouble)

class ModelFloat(_object):
    """Proxy of C++ TModel<(float,float)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModelFloat, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(TModel<(float,float)> self) -> ModelFloat"""
        this = _robust.new_ModelFloat()
        try:
            self.this.append(this)
        except:
            self.this = this

    def grad(self, coeffs: 'ArrayFloat const &', out: 'ArrayFloat &') -> "void":
        """grad(ModelFloat self, ArrayFloat const & coeffs, ArrayFloat & out)"""
        return _robust.ModelFloat_grad(self, coeffs, out)


    def loss(self, coeffs: 'ArrayFloat const &') -> "double":
        """loss(ModelFloat self, ArrayFloat const & coeffs) -> double"""
        return _robust.ModelFloat_loss(self, coeffs)


    def get_epoch_size(self) -> "unsigned long":
        """get_epoch_size(ModelFloat self) -> unsigned long"""
        return _robust.ModelFloat_get_epoch_size(self)


    def is_sparse(self) -> "bool":
        """is_sparse(ModelFloat self) -> bool"""
        return _robust.ModelFloat_is_sparse(self)

    __swig_destroy__ = _robust.delete_ModelFloat
    __del__ = lambda self: None
ModelFloat_swigregister = _robust.ModelFloat_swigregister
ModelFloat_swigregister(ModelFloat)

class ModelAtomicDouble(_object):
    """Proxy of C++ TModel<(double,std::atomic<(double)>)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelAtomicDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModelAtomicDouble, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(TModel<(double,std::atomic<(double)>)> self) -> ModelAtomicDouble"""
        this = _robust.new_ModelAtomicDouble()
        try:
            self.this.append(this)
        except:
            self.this = this

    def grad(self, coeffs: 'ArrayAtomicDouble const &', out: 'ArrayDouble &') -> "void":
        """grad(ModelAtomicDouble self, ArrayAtomicDouble const & coeffs, ArrayDouble & out)"""
        return _robust.ModelAtomicDouble_grad(self, coeffs, out)


    def loss(self, coeffs: 'ArrayAtomicDouble const &') -> "double":
        """loss(ModelAtomicDouble self, ArrayAtomicDouble const & coeffs) -> double"""
        return _robust.ModelAtomicDouble_loss(self, coeffs)


    def get_epoch_size(self) -> "unsigned long":
        """get_epoch_size(ModelAtomicDouble self) -> unsigned long"""
        return _robust.ModelAtomicDouble_get_epoch_size(self)


    def is_sparse(self) -> "bool":
        """is_sparse(ModelAtomicDouble self) -> bool"""
        return _robust.ModelAtomicDouble_is_sparse(self)

    __swig_destroy__ = _robust.delete_ModelAtomicDouble
    __del__ = lambda self: None
ModelAtomicDouble_swigregister = _robust.ModelAtomicDouble_swigregister
ModelAtomicDouble_swigregister(ModelAtomicDouble)

class ModelAtomicFloat(_object):
    """Proxy of C++ TModel<(float,std::atomic<(float)>)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelAtomicFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModelAtomicFloat, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(TModel<(float,std::atomic<(float)>)> self) -> ModelAtomicFloat"""
        this = _robust.new_ModelAtomicFloat()
        try:
            self.this.append(this)
        except:
            self.this = this

    def grad(self, coeffs: 'Array< std::atomic< float > > const &', out: 'ArrayFloat &') -> "void":
        """grad(ModelAtomicFloat self, Array< std::atomic< float > > const & coeffs, ArrayFloat & out)"""
        return _robust.ModelAtomicFloat_grad(self, coeffs, out)


    def loss(self, coeffs: 'Array< std::atomic< float > > const &') -> "float":
        """loss(ModelAtomicFloat self, Array< std::atomic< float > > const & coeffs) -> float"""
        return _robust.ModelAtomicFloat_loss(self, coeffs)


    def get_epoch_size(self) -> "unsigned long":
        """get_epoch_size(ModelAtomicFloat self) -> unsigned long"""
        return _robust.ModelAtomicFloat_get_epoch_size(self)


    def is_sparse(self) -> "bool":
        """is_sparse(ModelAtomicFloat self) -> bool"""
        return _robust.ModelAtomicFloat_is_sparse(self)

    __swig_destroy__ = _robust.delete_ModelAtomicFloat
    __del__ = lambda self: None
ModelAtomicFloat_swigregister = _robust.ModelAtomicFloat_swigregister
ModelAtomicFloat_swigregister(ModelAtomicFloat)

class ModelLabelsFeaturesDouble(Model):
    """Proxy of C++ TModelLabelsFeatures<(double,double)> class"""
    __swig_setmethods__ = {}
    for _s in [Model]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelLabelsFeaturesDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [Model]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelLabelsFeaturesDouble, name)
    __repr__ = _swig_repr

    def __init__(self, features: 'std::shared_ptr< BaseArray2d< double > > const', labels: 'std::shared_ptr< SArray< double > > const'):
        """__init__(TModelLabelsFeatures<(double,double)> self, std::shared_ptr< BaseArray2d< double > > const features, std::shared_ptr< SArray< double > > const labels) -> ModelLabelsFeaturesDouble"""
        this = _robust.new_ModelLabelsFeaturesDouble(features, labels)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_n_samples(self) -> "unsigned long":
        """get_n_samples(ModelLabelsFeaturesDouble self) -> unsigned long"""
        return _robust.ModelLabelsFeaturesDouble_get_n_samples(self)


    def get_n_features(self) -> "unsigned long":
        """get_n_features(ModelLabelsFeaturesDouble self) -> unsigned long"""
        return _robust.ModelLabelsFeaturesDouble_get_n_features(self)

    __swig_destroy__ = _robust.delete_ModelLabelsFeaturesDouble
    __del__ = lambda self: None
ModelLabelsFeaturesDouble_swigregister = _robust.ModelLabelsFeaturesDouble_swigregister
ModelLabelsFeaturesDouble_swigregister(ModelLabelsFeaturesDouble)

class ModelLabelsFeaturesFloat(ModelFloat):
    """Proxy of C++ TModelLabelsFeatures<(float,float)> class"""
    __swig_setmethods__ = {}
    for _s in [ModelFloat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelLabelsFeaturesFloat, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelFloat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelLabelsFeaturesFloat, name)
    __repr__ = _swig_repr

    def __init__(self, features: 'std::shared_ptr< BaseArray2d< float > > const', labels: 'std::shared_ptr< SArray< float > > const'):
        """__init__(TModelLabelsFeatures<(float,float)> self, std::shared_ptr< BaseArray2d< float > > const features, std::shared_ptr< SArray< float > > const labels) -> ModelLabelsFeaturesFloat"""
        this = _robust.new_ModelLabelsFeaturesFloat(features, labels)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_n_samples(self) -> "unsigned long":
        """get_n_samples(ModelLabelsFeaturesFloat self) -> unsigned long"""
        return _robust.ModelLabelsFeaturesFloat_get_n_samples(self)


    def get_n_features(self) -> "unsigned long":
        """get_n_features(ModelLabelsFeaturesFloat self) -> unsigned long"""
        return _robust.ModelLabelsFeaturesFloat_get_n_features(self)

    __swig_destroy__ = _robust.delete_ModelLabelsFeaturesFloat
    __del__ = lambda self: None
ModelLabelsFeaturesFloat_swigregister = _robust.ModelLabelsFeaturesFloat_swigregister
ModelLabelsFeaturesFloat_swigregister(ModelLabelsFeaturesFloat)

class ModelLabelsFeaturesAtomicDouble(ModelAtomicDouble):
    """Proxy of C++ TModelLabelsFeatures<(double,std::atomic<(double)>)> class"""
    __swig_setmethods__ = {}
    for _s in [ModelAtomicDouble]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelLabelsFeaturesAtomicDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelAtomicDouble]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelLabelsFeaturesAtomicDouble, name)
    __repr__ = _swig_repr

    def __init__(self, features: 'std::shared_ptr< BaseArray2d< double > > const', labels: 'std::shared_ptr< SArray< double > > const'):
        """__init__(TModelLabelsFeatures<(double,std::atomic<(double)>)> self, std::shared_ptr< BaseArray2d< double > > const features, std::shared_ptr< SArray< double > > const labels) -> ModelLabelsFeaturesAtomicDouble"""
        this = _robust.new_ModelLabelsFeaturesAtomicDouble(features, labels)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_n_samples(self) -> "unsigned long":
        """get_n_samples(ModelLabelsFeaturesAtomicDouble self) -> unsigned long"""
        return _robust.ModelLabelsFeaturesAtomicDouble_get_n_samples(self)


    def get_n_features(self) -> "unsigned long":
        """get_n_features(ModelLabelsFeaturesAtomicDouble self) -> unsigned long"""
        return _robust.ModelLabelsFeaturesAtomicDouble_get_n_features(self)

    __swig_destroy__ = _robust.delete_ModelLabelsFeaturesAtomicDouble
    __del__ = lambda self: None
ModelLabelsFeaturesAtomicDouble_swigregister = _robust.ModelLabelsFeaturesAtomicDouble_swigregister
ModelLabelsFeaturesAtomicDouble_swigregister(ModelLabelsFeaturesAtomicDouble)

class ModelLabelsFeaturesAtomicFloat(ModelAtomicFloat):
    """Proxy of C++ TModelLabelsFeatures<(float,std::atomic<(float)>)> class"""
    __swig_setmethods__ = {}
    for _s in [ModelAtomicFloat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelLabelsFeaturesAtomicFloat, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelAtomicFloat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelLabelsFeaturesAtomicFloat, name)
    __repr__ = _swig_repr

    def __init__(self, features: 'std::shared_ptr< BaseArray2d< float > > const', labels: 'std::shared_ptr< SArray< float > > const'):
        """__init__(TModelLabelsFeatures<(float,std::atomic<(float)>)> self, std::shared_ptr< BaseArray2d< float > > const features, std::shared_ptr< SArray< float > > const labels) -> ModelLabelsFeaturesAtomicFloat"""
        this = _robust.new_ModelLabelsFeaturesAtomicFloat(features, labels)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_n_samples(self) -> "unsigned long":
        """get_n_samples(ModelLabelsFeaturesAtomicFloat self) -> unsigned long"""
        return _robust.ModelLabelsFeaturesAtomicFloat_get_n_samples(self)


    def get_n_features(self) -> "unsigned long":
        """get_n_features(ModelLabelsFeaturesAtomicFloat self) -> unsigned long"""
        return _robust.ModelLabelsFeaturesAtomicFloat_get_n_features(self)

    __swig_destroy__ = _robust.delete_ModelLabelsFeaturesAtomicFloat
    __del__ = lambda self: None
ModelLabelsFeaturesAtomicFloat_swigregister = _robust.ModelLabelsFeaturesAtomicFloat_swigregister
ModelLabelsFeaturesAtomicFloat_swigregister(ModelLabelsFeaturesAtomicFloat)

class ModelLipschitz(Model):
    """Proxy of C++ TModelLipschitz<(double,double)> class"""
    __swig_setmethods__ = {}
    for _s in [Model]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelLipschitz, name, value)
    __swig_getmethods__ = {}
    for _s in [Model]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelLipschitz, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(TModelLipschitz<(double,double)> self) -> ModelLipschitz"""
        this = _robust.new_ModelLipschitz()
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_lip_max(self) -> "double":
        """get_lip_max(ModelLipschitz self) -> double"""
        return _robust.ModelLipschitz_get_lip_max(self)


    def get_lip_mean(self) -> "double":
        """get_lip_mean(ModelLipschitz self) -> double"""
        return _robust.ModelLipschitz_get_lip_mean(self)

    __swig_destroy__ = _robust.delete_ModelLipschitz
    __del__ = lambda self: None
ModelLipschitz_swigregister = _robust.ModelLipschitz_swigregister
ModelLipschitz_swigregister(ModelLipschitz)

class ModelLipschitzDouble(Model):
    """Proxy of C++ TModelLipschitz<(double,double)> class"""
    __swig_setmethods__ = {}
    for _s in [Model]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelLipschitzDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [Model]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelLipschitzDouble, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(TModelLipschitz<(double,double)> self) -> ModelLipschitzDouble"""
        this = _robust.new_ModelLipschitzDouble()
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_lip_max(self) -> "double":
        """get_lip_max(ModelLipschitzDouble self) -> double"""
        return _robust.ModelLipschitzDouble_get_lip_max(self)


    def get_lip_mean(self) -> "double":
        """get_lip_mean(ModelLipschitzDouble self) -> double"""
        return _robust.ModelLipschitzDouble_get_lip_mean(self)

    __swig_destroy__ = _robust.delete_ModelLipschitzDouble
    __del__ = lambda self: None
ModelLipschitzDouble_swigregister = _robust.ModelLipschitzDouble_swigregister
ModelLipschitzDouble_swigregister(ModelLipschitzDouble)

class ModelLipschitzFloat(ModelFloat):
    """Proxy of C++ TModelLipschitz<(float,float)> class"""
    __swig_setmethods__ = {}
    for _s in [ModelFloat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelLipschitzFloat, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelFloat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelLipschitzFloat, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(TModelLipschitz<(float,float)> self) -> ModelLipschitzFloat"""
        this = _robust.new_ModelLipschitzFloat()
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_lip_max(self) -> "float":
        """get_lip_max(ModelLipschitzFloat self) -> float"""
        return _robust.ModelLipschitzFloat_get_lip_max(self)


    def get_lip_mean(self) -> "float":
        """get_lip_mean(ModelLipschitzFloat self) -> float"""
        return _robust.ModelLipschitzFloat_get_lip_mean(self)

    __swig_destroy__ = _robust.delete_ModelLipschitzFloat
    __del__ = lambda self: None
ModelLipschitzFloat_swigregister = _robust.ModelLipschitzFloat_swigregister
ModelLipschitzFloat_swigregister(ModelLipschitzFloat)

class ModelLipschitzAtomicDouble(ModelAtomicDouble):
    """Proxy of C++ TModelLipschitz<(double,std::atomic<(double)>)> class"""
    __swig_setmethods__ = {}
    for _s in [ModelAtomicDouble]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelLipschitzAtomicDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelAtomicDouble]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelLipschitzAtomicDouble, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(TModelLipschitz<(double,std::atomic<(double)>)> self) -> ModelLipschitzAtomicDouble"""
        this = _robust.new_ModelLipschitzAtomicDouble()
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_lip_max(self) -> "double":
        """get_lip_max(ModelLipschitzAtomicDouble self) -> double"""
        return _robust.ModelLipschitzAtomicDouble_get_lip_max(self)


    def get_lip_mean(self) -> "double":
        """get_lip_mean(ModelLipschitzAtomicDouble self) -> double"""
        return _robust.ModelLipschitzAtomicDouble_get_lip_mean(self)

    __swig_destroy__ = _robust.delete_ModelLipschitzAtomicDouble
    __del__ = lambda self: None
ModelLipschitzAtomicDouble_swigregister = _robust.ModelLipschitzAtomicDouble_swigregister
ModelLipschitzAtomicDouble_swigregister(ModelLipschitzAtomicDouble)

class ModelLipschitzAtomicFloat(ModelAtomicFloat):
    """Proxy of C++ TModelLipschitz<(float,std::atomic<(float)>)> class"""
    __swig_setmethods__ = {}
    for _s in [ModelAtomicFloat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelLipschitzAtomicFloat, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelAtomicFloat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelLipschitzAtomicFloat, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(TModelLipschitz<(float,std::atomic<(float)>)> self) -> ModelLipschitzAtomicFloat"""
        this = _robust.new_ModelLipschitzAtomicFloat()
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_lip_max(self) -> "float":
        """get_lip_max(ModelLipschitzAtomicFloat self) -> float"""
        return _robust.ModelLipschitzAtomicFloat_get_lip_max(self)


    def get_lip_mean(self) -> "float":
        """get_lip_mean(ModelLipschitzAtomicFloat self) -> float"""
        return _robust.ModelLipschitzAtomicFloat_get_lip_mean(self)

    __swig_destroy__ = _robust.delete_ModelLipschitzAtomicFloat
    __del__ = lambda self: None
ModelLipschitzAtomicFloat_swigregister = _robust.ModelLipschitzAtomicFloat_swigregister
ModelLipschitzAtomicFloat_swigregister(ModelLipschitzAtomicFloat)

class ModelGeneralizedLinearDouble(ModelLabelsFeaturesDouble):
    """Proxy of C++ TModelGeneralizedLinear<(double,double)> class"""
    __swig_setmethods__ = {}
    for _s in [ModelLabelsFeaturesDouble]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelGeneralizedLinearDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelLabelsFeaturesDouble]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelGeneralizedLinearDouble, name)
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', labels: 'SArrayDoublePtr const', fit_intercept: 'bool const', n_threads: 'int const'=1):
        """
        __init__(TModelGeneralizedLinear<(double,double)> self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelGeneralizedLinearDouble
        __init__(TModelGeneralizedLinear<(double,double)> self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept) -> ModelGeneralizedLinearDouble
        """
        this = _robust.new_ModelGeneralizedLinearDouble(features, labels, fit_intercept, n_threads)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_n_coeffs(self) -> "unsigned long":
        """get_n_coeffs(ModelGeneralizedLinearDouble self) -> unsigned long"""
        return _robust.ModelGeneralizedLinearDouble_get_n_coeffs(self)


    def set_fit_intercept(self, fit_intercept: 'bool') -> "void":
        """set_fit_intercept(ModelGeneralizedLinearDouble self, bool fit_intercept)"""
        return _robust.ModelGeneralizedLinearDouble_set_fit_intercept(self, fit_intercept)


    def sdca_primal_dual_relation(self, l_l2sq: 'double const', dual_vector: 'ArrayDouble const &', out_primal_vector: 'ArrayDouble &') -> "void":
        """sdca_primal_dual_relation(ModelGeneralizedLinearDouble self, double const l_l2sq, ArrayDouble const & dual_vector, ArrayDouble & out_primal_vector)"""
        return _robust.ModelGeneralizedLinearDouble_sdca_primal_dual_relation(self, l_l2sq, dual_vector, out_primal_vector)

    __swig_destroy__ = _robust.delete_ModelGeneralizedLinearDouble
    __del__ = lambda self: None
ModelGeneralizedLinearDouble_swigregister = _robust.ModelGeneralizedLinearDouble_swigregister
ModelGeneralizedLinearDouble_swigregister(ModelGeneralizedLinearDouble)

class ModelGeneralizedLinearFloat(ModelLabelsFeaturesFloat):
    """Proxy of C++ TModelGeneralizedLinear<(float,float)> class"""
    __swig_setmethods__ = {}
    for _s in [ModelLabelsFeaturesFloat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelGeneralizedLinearFloat, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelLabelsFeaturesFloat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelGeneralizedLinearFloat, name)
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayFloat2dPtr const', labels: 'SArrayFloatPtr const', fit_intercept: 'bool const', n_threads: 'int const'=1):
        """
        __init__(TModelGeneralizedLinear<(float,float)> self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelGeneralizedLinearFloat
        __init__(TModelGeneralizedLinear<(float,float)> self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept) -> ModelGeneralizedLinearFloat
        """
        this = _robust.new_ModelGeneralizedLinearFloat(features, labels, fit_intercept, n_threads)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_n_coeffs(self) -> "unsigned long":
        """get_n_coeffs(ModelGeneralizedLinearFloat self) -> unsigned long"""
        return _robust.ModelGeneralizedLinearFloat_get_n_coeffs(self)


    def set_fit_intercept(self, fit_intercept: 'bool') -> "void":
        """set_fit_intercept(ModelGeneralizedLinearFloat self, bool fit_intercept)"""
        return _robust.ModelGeneralizedLinearFloat_set_fit_intercept(self, fit_intercept)


    def sdca_primal_dual_relation(self, l_l2sq: 'float const', dual_vector: 'ArrayFloat const &', out_primal_vector: 'ArrayFloat &') -> "void":
        """sdca_primal_dual_relation(ModelGeneralizedLinearFloat self, float const l_l2sq, ArrayFloat const & dual_vector, ArrayFloat & out_primal_vector)"""
        return _robust.ModelGeneralizedLinearFloat_sdca_primal_dual_relation(self, l_l2sq, dual_vector, out_primal_vector)

    __swig_destroy__ = _robust.delete_ModelGeneralizedLinearFloat
    __del__ = lambda self: None
ModelGeneralizedLinearFloat_swigregister = _robust.ModelGeneralizedLinearFloat_swigregister
ModelGeneralizedLinearFloat_swigregister(ModelGeneralizedLinearFloat)

class ModelGeneralizedLinearAtomicDouble(ModelLabelsFeaturesAtomicDouble):
    """Proxy of C++ TModelGeneralizedLinear<(double,std::atomic<(double)>)> class"""
    __swig_setmethods__ = {}
    for _s in [ModelLabelsFeaturesAtomicDouble]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelGeneralizedLinearAtomicDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelLabelsFeaturesAtomicDouble]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelGeneralizedLinearAtomicDouble, name)
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', labels: 'SArrayDoublePtr const', fit_intercept: 'bool const', n_threads: 'int const'=1):
        """
        __init__(TModelGeneralizedLinear<(double,std::atomic<(double)>)> self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelGeneralizedLinearAtomicDouble
        __init__(TModelGeneralizedLinear<(double,std::atomic<(double)>)> self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept) -> ModelGeneralizedLinearAtomicDouble
        """
        this = _robust.new_ModelGeneralizedLinearAtomicDouble(features, labels, fit_intercept, n_threads)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_n_coeffs(self) -> "unsigned long":
        """get_n_coeffs(ModelGeneralizedLinearAtomicDouble self) -> unsigned long"""
        return _robust.ModelGeneralizedLinearAtomicDouble_get_n_coeffs(self)


    def set_fit_intercept(self, fit_intercept: 'bool') -> "void":
        """set_fit_intercept(ModelGeneralizedLinearAtomicDouble self, bool fit_intercept)"""
        return _robust.ModelGeneralizedLinearAtomicDouble_set_fit_intercept(self, fit_intercept)


    def sdca_primal_dual_relation(self, l_l2sq: 'double const', dual_vector: 'ArrayDouble const &', out_primal_vector: 'ArrayDouble &') -> "void":
        """sdca_primal_dual_relation(ModelGeneralizedLinearAtomicDouble self, double const l_l2sq, ArrayDouble const & dual_vector, ArrayDouble & out_primal_vector)"""
        return _robust.ModelGeneralizedLinearAtomicDouble_sdca_primal_dual_relation(self, l_l2sq, dual_vector, out_primal_vector)

    __swig_destroy__ = _robust.delete_ModelGeneralizedLinearAtomicDouble
    __del__ = lambda self: None
ModelGeneralizedLinearAtomicDouble_swigregister = _robust.ModelGeneralizedLinearAtomicDouble_swigregister
ModelGeneralizedLinearAtomicDouble_swigregister(ModelGeneralizedLinearAtomicDouble)

class ModelGeneralizedLinearAtomicFloat(ModelLabelsFeaturesAtomicFloat):
    """Proxy of C++ TModelGeneralizedLinear<(float,std::atomic<(float)>)> class"""
    __swig_setmethods__ = {}
    for _s in [ModelLabelsFeaturesAtomicFloat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelGeneralizedLinearAtomicFloat, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelLabelsFeaturesAtomicFloat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelGeneralizedLinearAtomicFloat, name)
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayFloat2dPtr const', labels: 'SArrayFloatPtr const', fit_intercept: 'bool const', n_threads: 'int const'=1):
        """
        __init__(TModelGeneralizedLinear<(float,std::atomic<(float)>)> self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelGeneralizedLinearAtomicFloat
        __init__(TModelGeneralizedLinear<(float,std::atomic<(float)>)> self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept) -> ModelGeneralizedLinearAtomicFloat
        """
        this = _robust.new_ModelGeneralizedLinearAtomicFloat(features, labels, fit_intercept, n_threads)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_n_coeffs(self) -> "unsigned long":
        """get_n_coeffs(ModelGeneralizedLinearAtomicFloat self) -> unsigned long"""
        return _robust.ModelGeneralizedLinearAtomicFloat_get_n_coeffs(self)


    def set_fit_intercept(self, fit_intercept: 'bool') -> "void":
        """set_fit_intercept(ModelGeneralizedLinearAtomicFloat self, bool fit_intercept)"""
        return _robust.ModelGeneralizedLinearAtomicFloat_set_fit_intercept(self, fit_intercept)


    def sdca_primal_dual_relation(self, l_l2sq: 'float const', dual_vector: 'ArrayFloat const &', out_primal_vector: 'ArrayFloat &') -> "void":
        """sdca_primal_dual_relation(ModelGeneralizedLinearAtomicFloat self, float const l_l2sq, ArrayFloat const & dual_vector, ArrayFloat & out_primal_vector)"""
        return _robust.ModelGeneralizedLinearAtomicFloat_sdca_primal_dual_relation(self, l_l2sq, dual_vector, out_primal_vector)

    __swig_destroy__ = _robust.delete_ModelGeneralizedLinearAtomicFloat
    __del__ = lambda self: None
ModelGeneralizedLinearAtomicFloat_swigregister = _robust.ModelGeneralizedLinearAtomicFloat_swigregister
ModelGeneralizedLinearAtomicFloat_swigregister(ModelGeneralizedLinearAtomicFloat)

class ModelHingeDouble(ModelGeneralizedLinearDouble):
    """Proxy of C++ ModelHingeDouble class"""
    __swig_setmethods__ = {}
    for _s in [ModelGeneralizedLinearDouble]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelHingeDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelGeneralizedLinearDouble]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelHingeDouble, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ModelHingeDouble self) -> ModelHingeDouble
        __init__(ModelHingeDouble self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelHingeDouble
        __init__(ModelHingeDouble self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept) -> ModelHingeDouble
        """
        this = _robust.new_ModelHingeDouble(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def compare(self, that: 'ModelHingeDouble') -> "bool":
        """compare(ModelHingeDouble self, ModelHingeDouble that) -> bool"""
        return _robust.ModelHingeDouble_compare(self, that)


    def __getstate__(self): return ModelHingeDoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelHingeDoubleDeserialize(self, s)

    __swig_destroy__ = _robust.delete_ModelHingeDouble
    __del__ = lambda self: None
ModelHingeDouble_swigregister = _robust.ModelHingeDouble_swigregister
ModelHingeDouble_swigregister(ModelHingeDouble)


def ModelHingeDoubleDeserialize(ptr: 'ModelHingeDouble', hex: 'std::string const &') -> "void":
    """ModelHingeDoubleDeserialize(ModelHingeDouble ptr, std::string const & hex)"""
    return _robust.ModelHingeDoubleDeserialize(ptr, hex)

def ModelHingeDoubleSerialize(ptr: 'ModelHingeDouble') -> "std::string":
    """ModelHingeDoubleSerialize(ModelHingeDouble ptr) -> std::string"""
    return _robust.ModelHingeDoubleSerialize(ptr)
class ModelHingeFloat(ModelGeneralizedLinearFloat):
    """Proxy of C++ ModelHingeFloat class"""
    __swig_setmethods__ = {}
    for _s in [ModelGeneralizedLinearFloat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelHingeFloat, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelGeneralizedLinearFloat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelHingeFloat, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ModelHingeFloat self) -> ModelHingeFloat
        __init__(ModelHingeFloat self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelHingeFloat
        __init__(ModelHingeFloat self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept) -> ModelHingeFloat
        """
        this = _robust.new_ModelHingeFloat(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def compare(self, that: 'ModelHingeFloat') -> "bool":
        """compare(ModelHingeFloat self, ModelHingeFloat that) -> bool"""
        return _robust.ModelHingeFloat_compare(self, that)


    def __getstate__(self): return ModelHingeFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelHingeFloatDeserialize(self, s)

    __swig_destroy__ = _robust.delete_ModelHingeFloat
    __del__ = lambda self: None
ModelHingeFloat_swigregister = _robust.ModelHingeFloat_swigregister
ModelHingeFloat_swigregister(ModelHingeFloat)


def ModelHingeFloatDeserialize(ptr: 'ModelHingeFloat', hex: 'std::string const &') -> "void":
    """ModelHingeFloatDeserialize(ModelHingeFloat ptr, std::string const & hex)"""
    return _robust.ModelHingeFloatDeserialize(ptr, hex)

def ModelHingeFloatSerialize(ptr: 'ModelHingeFloat') -> "std::string":
    """ModelHingeFloatSerialize(ModelHingeFloat ptr) -> std::string"""
    return _robust.ModelHingeFloatSerialize(ptr)
class ModelQuadraticHingeDouble(ModelGeneralizedLinearDouble, ModelLipschitz):
    """Proxy of C++ ModelQuadraticHingeDouble class"""
    __swig_setmethods__ = {}
    for _s in [ModelGeneralizedLinearDouble, ModelLipschitz]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelQuadraticHingeDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelGeneralizedLinearDouble, ModelLipschitz]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelQuadraticHingeDouble, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ModelQuadraticHingeDouble self) -> ModelQuadraticHingeDouble
        __init__(ModelQuadraticHingeDouble self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelQuadraticHingeDouble
        __init__(ModelQuadraticHingeDouble self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept) -> ModelQuadraticHingeDouble
        """
        this = _robust.new_ModelQuadraticHingeDouble(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def compare(self, that: 'ModelQuadraticHingeDouble') -> "bool":
        """compare(ModelQuadraticHingeDouble self, ModelQuadraticHingeDouble that) -> bool"""
        return _robust.ModelQuadraticHingeDouble_compare(self, that)


    def __getstate__(self): return ModelQuadraticHingeDoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelQuadraticHingeDoubleDeserialize(self, s)

    __swig_destroy__ = _robust.delete_ModelQuadraticHingeDouble
    __del__ = lambda self: None
ModelQuadraticHingeDouble_swigregister = _robust.ModelQuadraticHingeDouble_swigregister
ModelQuadraticHingeDouble_swigregister(ModelQuadraticHingeDouble)


def ModelQuadraticHingeDoubleDeserialize(ptr: 'ModelQuadraticHingeDouble', hex: 'std::string const &') -> "void":
    """ModelQuadraticHingeDoubleDeserialize(ModelQuadraticHingeDouble ptr, std::string const & hex)"""
    return _robust.ModelQuadraticHingeDoubleDeserialize(ptr, hex)

def ModelQuadraticHingeDoubleSerialize(ptr: 'ModelQuadraticHingeDouble') -> "std::string":
    """ModelQuadraticHingeDoubleSerialize(ModelQuadraticHingeDouble ptr) -> std::string"""
    return _robust.ModelQuadraticHingeDoubleSerialize(ptr)
class ModelQuadraticHingeFloat(ModelGeneralizedLinearFloat, ModelLipschitzFloat):
    """Proxy of C++ ModelQuadraticHingeFloat class"""
    __swig_setmethods__ = {}
    for _s in [ModelGeneralizedLinearFloat, ModelLipschitzFloat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelQuadraticHingeFloat, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelGeneralizedLinearFloat, ModelLipschitzFloat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelQuadraticHingeFloat, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ModelQuadraticHingeFloat self) -> ModelQuadraticHingeFloat
        __init__(ModelQuadraticHingeFloat self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelQuadraticHingeFloat
        __init__(ModelQuadraticHingeFloat self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept) -> ModelQuadraticHingeFloat
        """
        this = _robust.new_ModelQuadraticHingeFloat(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def compare(self, that: 'ModelQuadraticHingeFloat') -> "bool":
        """compare(ModelQuadraticHingeFloat self, ModelQuadraticHingeFloat that) -> bool"""
        return _robust.ModelQuadraticHingeFloat_compare(self, that)


    def __getstate__(self): return ModelQuadraticHingeFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelQuadraticHingeFloatDeserialize(self, s)

    __swig_destroy__ = _robust.delete_ModelQuadraticHingeFloat
    __del__ = lambda self: None
ModelQuadraticHingeFloat_swigregister = _robust.ModelQuadraticHingeFloat_swigregister
ModelQuadraticHingeFloat_swigregister(ModelQuadraticHingeFloat)


def ModelQuadraticHingeFloatDeserialize(ptr: 'ModelQuadraticHingeFloat', hex: 'std::string const &') -> "void":
    """ModelQuadraticHingeFloatDeserialize(ModelQuadraticHingeFloat ptr, std::string const & hex)"""
    return _robust.ModelQuadraticHingeFloatDeserialize(ptr, hex)

def ModelQuadraticHingeFloatSerialize(ptr: 'ModelQuadraticHingeFloat') -> "std::string":
    """ModelQuadraticHingeFloatSerialize(ModelQuadraticHingeFloat ptr) -> std::string"""
    return _robust.ModelQuadraticHingeFloatSerialize(ptr)
class ModelSmoothedHingeDouble(ModelGeneralizedLinearDouble, ModelLipschitz):
    """Proxy of C++ ModelSmoothedHingeDouble class"""
    __swig_setmethods__ = {}
    for _s in [ModelGeneralizedLinearDouble, ModelLipschitz]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelSmoothedHingeDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelGeneralizedLinearDouble, ModelLipschitz]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelSmoothedHingeDouble, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ModelSmoothedHingeDouble self) -> ModelSmoothedHingeDouble
        __init__(ModelSmoothedHingeDouble self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, double const smoothness=1, int const n_threads=1) -> ModelSmoothedHingeDouble
        __init__(ModelSmoothedHingeDouble self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, double const smoothness=1) -> ModelSmoothedHingeDouble
        __init__(ModelSmoothedHingeDouble self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept) -> ModelSmoothedHingeDouble
        """
        this = _robust.new_ModelSmoothedHingeDouble(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_smoothness(self) -> "double":
        """get_smoothness(ModelSmoothedHingeDouble self) -> double"""
        return _robust.ModelSmoothedHingeDouble_get_smoothness(self)


    def set_smoothness(self, smoothness: 'double') -> "void":
        """set_smoothness(ModelSmoothedHingeDouble self, double smoothness)"""
        return _robust.ModelSmoothedHingeDouble_set_smoothness(self, smoothness)


    def compare(self, that: 'ModelSmoothedHingeDouble') -> "bool":
        """compare(ModelSmoothedHingeDouble self, ModelSmoothedHingeDouble that) -> bool"""
        return _robust.ModelSmoothedHingeDouble_compare(self, that)


    def __getstate__(self): return ModelSmoothedHingeDoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelSmoothedHingeDoubleDeserialize(self, s)

    __swig_destroy__ = _robust.delete_ModelSmoothedHingeDouble
    __del__ = lambda self: None
ModelSmoothedHingeDouble_swigregister = _robust.ModelSmoothedHingeDouble_swigregister
ModelSmoothedHingeDouble_swigregister(ModelSmoothedHingeDouble)


def ModelSmoothedHingeDoubleDeserialize(ptr: 'ModelSmoothedHingeDouble', hex: 'std::string const &') -> "void":
    """ModelSmoothedHingeDoubleDeserialize(ModelSmoothedHingeDouble ptr, std::string const & hex)"""
    return _robust.ModelSmoothedHingeDoubleDeserialize(ptr, hex)

def ModelSmoothedHingeDoubleSerialize(ptr: 'ModelSmoothedHingeDouble') -> "std::string":
    """ModelSmoothedHingeDoubleSerialize(ModelSmoothedHingeDouble ptr) -> std::string"""
    return _robust.ModelSmoothedHingeDoubleSerialize(ptr)
class ModelSmoothedHingeFloat(ModelGeneralizedLinearFloat, ModelLipschitzFloat):
    """Proxy of C++ ModelSmoothedHingeFloat class"""
    __swig_setmethods__ = {}
    for _s in [ModelGeneralizedLinearFloat, ModelLipschitzFloat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelSmoothedHingeFloat, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelGeneralizedLinearFloat, ModelLipschitzFloat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelSmoothedHingeFloat, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ModelSmoothedHingeFloat self) -> ModelSmoothedHingeFloat
        __init__(ModelSmoothedHingeFloat self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept, float const smoothness=1, int const n_threads=1) -> ModelSmoothedHingeFloat
        __init__(ModelSmoothedHingeFloat self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept, float const smoothness=1) -> ModelSmoothedHingeFloat
        __init__(ModelSmoothedHingeFloat self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept) -> ModelSmoothedHingeFloat
        """
        this = _robust.new_ModelSmoothedHingeFloat(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_smoothness(self) -> "float":
        """get_smoothness(ModelSmoothedHingeFloat self) -> float"""
        return _robust.ModelSmoothedHingeFloat_get_smoothness(self)


    def set_smoothness(self, smoothness: 'float') -> "void":
        """set_smoothness(ModelSmoothedHingeFloat self, float smoothness)"""
        return _robust.ModelSmoothedHingeFloat_set_smoothness(self, smoothness)


    def compare(self, that: 'ModelSmoothedHingeFloat') -> "bool":
        """compare(ModelSmoothedHingeFloat self, ModelSmoothedHingeFloat that) -> bool"""
        return _robust.ModelSmoothedHingeFloat_compare(self, that)


    def __getstate__(self): return ModelSmoothedHingeFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelSmoothedHingeFloatDeserialize(self, s)

    __swig_destroy__ = _robust.delete_ModelSmoothedHingeFloat
    __del__ = lambda self: None
ModelSmoothedHingeFloat_swigregister = _robust.ModelSmoothedHingeFloat_swigregister
ModelSmoothedHingeFloat_swigregister(ModelSmoothedHingeFloat)


def ModelSmoothedHingeFloatDeserialize(ptr: 'ModelSmoothedHingeFloat', hex: 'std::string const &') -> "void":
    """ModelSmoothedHingeFloatDeserialize(ModelSmoothedHingeFloat ptr, std::string const & hex)"""
    return _robust.ModelSmoothedHingeFloatDeserialize(ptr, hex)

def ModelSmoothedHingeFloatSerialize(ptr: 'ModelSmoothedHingeFloat') -> "std::string":
    """ModelSmoothedHingeFloatSerialize(ModelSmoothedHingeFloat ptr) -> std::string"""
    return _robust.ModelSmoothedHingeFloatSerialize(ptr)
class ModelLinRegDouble(ModelGeneralizedLinearDouble, ModelLipschitz):
    """Proxy of C++ ModelLinRegDouble class"""
    __swig_setmethods__ = {}
    for _s in [ModelGeneralizedLinearDouble, ModelLipschitz]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelLinRegDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelGeneralizedLinearDouble, ModelLipschitz]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelLinRegDouble, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ModelLinRegDouble self) -> ModelLinRegDouble
        __init__(ModelLinRegDouble self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelLinRegDouble
        __init__(ModelLinRegDouble self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept) -> ModelLinRegDouble
        """
        this = _robust.new_ModelLinRegDouble(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def compare(self, that: 'ModelLinRegDouble') -> "bool":
        """compare(ModelLinRegDouble self, ModelLinRegDouble that) -> bool"""
        return _robust.ModelLinRegDouble_compare(self, that)


    def __getstate__(self): return ModelLinRegDoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelLinRegDoubleDeserialize(self, s)

    __swig_destroy__ = _robust.delete_ModelLinRegDouble
    __del__ = lambda self: None
ModelLinRegDouble_swigregister = _robust.ModelLinRegDouble_swigregister
ModelLinRegDouble_swigregister(ModelLinRegDouble)


def ModelLinRegDoubleDeserialize(ptr: 'ModelLinRegDouble', hex: 'std::string const &') -> "void":
    """ModelLinRegDoubleDeserialize(ModelLinRegDouble ptr, std::string const & hex)"""
    return _robust.ModelLinRegDoubleDeserialize(ptr, hex)

def ModelLinRegDoubleSerialize(ptr: 'ModelLinRegDouble') -> "std::string":
    """ModelLinRegDoubleSerialize(ModelLinRegDouble ptr) -> std::string"""
    return _robust.ModelLinRegDoubleSerialize(ptr)
class ModelLinRegFloat(ModelGeneralizedLinearFloat, ModelLipschitzFloat):
    """Proxy of C++ ModelLinRegFloat class"""
    __swig_setmethods__ = {}
    for _s in [ModelGeneralizedLinearFloat, ModelLipschitzFloat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelLinRegFloat, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelGeneralizedLinearFloat, ModelLipschitzFloat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelLinRegFloat, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ModelLinRegFloat self) -> ModelLinRegFloat
        __init__(ModelLinRegFloat self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelLinRegFloat
        __init__(ModelLinRegFloat self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept) -> ModelLinRegFloat
        """
        this = _robust.new_ModelLinRegFloat(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def compare(self, that: 'ModelLinRegFloat') -> "bool":
        """compare(ModelLinRegFloat self, ModelLinRegFloat that) -> bool"""
        return _robust.ModelLinRegFloat_compare(self, that)


    def __getstate__(self): return ModelLinRegFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelLinRegFloatDeserialize(self, s)

    __swig_destroy__ = _robust.delete_ModelLinRegFloat
    __del__ = lambda self: None
ModelLinRegFloat_swigregister = _robust.ModelLinRegFloat_swigregister
ModelLinRegFloat_swigregister(ModelLinRegFloat)


def ModelLinRegFloatDeserialize(ptr: 'ModelLinRegFloat', hex: 'std::string const &') -> "void":
    """ModelLinRegFloatDeserialize(ModelLinRegFloat ptr, std::string const & hex)"""
    return _robust.ModelLinRegFloatDeserialize(ptr, hex)

def ModelLinRegFloatSerialize(ptr: 'ModelLinRegFloat') -> "std::string":
    """ModelLinRegFloatSerialize(ModelLinRegFloat ptr) -> std::string"""
    return _robust.ModelLinRegFloatSerialize(ptr)
class ModelLogRegDouble(ModelGeneralizedLinearDouble, ModelLipschitz):
    """Proxy of C++ ModelLogRegDouble class"""
    __swig_setmethods__ = {}
    for _s in [ModelGeneralizedLinearDouble, ModelLipschitz]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelLogRegDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelGeneralizedLinearDouble, ModelLipschitz]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelLogRegDouble, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ModelLogRegDouble self) -> ModelLogRegDouble
        __init__(ModelLogRegDouble self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads) -> ModelLogRegDouble
        """
        this = _robust.new_ModelLogRegDouble(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def compare(self, that: 'ModelLogRegDouble') -> "bool":
        """compare(ModelLogRegDouble self, ModelLogRegDouble that) -> bool"""
        return _robust.ModelLogRegDouble_compare(self, that)


    def sigmoid(x: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
        """sigmoid(ArrayDouble const & x, ArrayDouble & out)"""
        return _robust.ModelLogRegDouble_sigmoid(x, out)

    if _newclass:
        sigmoid = staticmethod(sigmoid)
    __swig_getmethods__["sigmoid"] = lambda x: sigmoid

    def logistic(x: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
        """logistic(ArrayDouble const & x, ArrayDouble & out)"""
        return _robust.ModelLogRegDouble_logistic(x, out)

    if _newclass:
        logistic = staticmethod(logistic)
    __swig_getmethods__["logistic"] = lambda x: logistic

    def __getstate__(self): return ModelLogRegDoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelLogRegDoubleDeserialize(self, s)

    __swig_destroy__ = _robust.delete_ModelLogRegDouble
    __del__ = lambda self: None
ModelLogRegDouble_swigregister = _robust.ModelLogRegDouble_swigregister
ModelLogRegDouble_swigregister(ModelLogRegDouble)

def ModelLogRegDouble_sigmoid(x: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
    """ModelLogRegDouble_sigmoid(ArrayDouble const & x, ArrayDouble & out)"""
    return _robust.ModelLogRegDouble_sigmoid(x, out)

def ModelLogRegDouble_logistic(x: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
    """ModelLogRegDouble_logistic(ArrayDouble const & x, ArrayDouble & out)"""
    return _robust.ModelLogRegDouble_logistic(x, out)


def ModelLogRegDoubleDeserialize(ptr: 'ModelLogRegDouble', hex: 'std::string const &') -> "void":
    """ModelLogRegDoubleDeserialize(ModelLogRegDouble ptr, std::string const & hex)"""
    return _robust.ModelLogRegDoubleDeserialize(ptr, hex)

def ModelLogRegDoubleSerialize(ptr: 'ModelLogRegDouble') -> "std::string":
    """ModelLogRegDoubleSerialize(ModelLogRegDouble ptr) -> std::string"""
    return _robust.ModelLogRegDoubleSerialize(ptr)
class ModelLogRegFloat(ModelGeneralizedLinearFloat, ModelLipschitzFloat):
    """Proxy of C++ ModelLogRegFloat class"""
    __swig_setmethods__ = {}
    for _s in [ModelGeneralizedLinearFloat, ModelLipschitzFloat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelLogRegFloat, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelGeneralizedLinearFloat, ModelLipschitzFloat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelLogRegFloat, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ModelLogRegFloat self) -> ModelLogRegFloat
        __init__(ModelLogRegFloat self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelLogRegFloat
        __init__(ModelLogRegFloat self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept) -> ModelLogRegFloat
        """
        this = _robust.new_ModelLogRegFloat(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def compare(self, that: 'ModelLogRegFloat') -> "bool":
        """compare(ModelLogRegFloat self, ModelLogRegFloat that) -> bool"""
        return _robust.ModelLogRegFloat_compare(self, that)


    def sigmoid(x: 'Array< float > const &', out: 'Array< float > &') -> "void":
        """sigmoid(Array< float > const & x, Array< float > & out)"""
        return _robust.ModelLogRegFloat_sigmoid(x, out)

    if _newclass:
        sigmoid = staticmethod(sigmoid)
    __swig_getmethods__["sigmoid"] = lambda x: sigmoid

    def logistic(x: 'Array< float > const &', out: 'Array< float > &') -> "void":
        """logistic(Array< float > const & x, Array< float > & out)"""
        return _robust.ModelLogRegFloat_logistic(x, out)

    if _newclass:
        logistic = staticmethod(logistic)
    __swig_getmethods__["logistic"] = lambda x: logistic

    def __getstate__(self): return ModelLogRegFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelLogRegFloatDeserialize(self, s)

    __swig_destroy__ = _robust.delete_ModelLogRegFloat
    __del__ = lambda self: None
ModelLogRegFloat_swigregister = _robust.ModelLogRegFloat_swigregister
ModelLogRegFloat_swigregister(ModelLogRegFloat)

def ModelLogRegFloat_sigmoid(x: 'Array< float > const &', out: 'Array< float > &') -> "void":
    """ModelLogRegFloat_sigmoid(Array< float > const & x, Array< float > & out)"""
    return _robust.ModelLogRegFloat_sigmoid(x, out)

def ModelLogRegFloat_logistic(x: 'Array< float > const &', out: 'Array< float > &') -> "void":
    """ModelLogRegFloat_logistic(Array< float > const & x, Array< float > & out)"""
    return _robust.ModelLogRegFloat_logistic(x, out)


def ModelLogRegFloatDeserialize(ptr: 'ModelLogRegFloat', hex: 'std::string const &') -> "void":
    """ModelLogRegFloatDeserialize(ModelLogRegFloat ptr, std::string const & hex)"""
    return _robust.ModelLogRegFloatDeserialize(ptr, hex)

def ModelLogRegFloatSerialize(ptr: 'ModelLogRegFloat') -> "std::string":
    """ModelLogRegFloatSerialize(ModelLogRegFloat ptr) -> std::string"""
    return _robust.ModelLogRegFloatSerialize(ptr)
class ModelLogRegAtomicDouble(ModelGeneralizedLinearAtomicDouble, ModelLipschitzAtomicDouble):
    """Proxy of C++ ModelLogRegAtomicDouble class"""
    __swig_setmethods__ = {}
    for _s in [ModelGeneralizedLinearAtomicDouble, ModelLipschitzAtomicDouble]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelLogRegAtomicDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelGeneralizedLinearAtomicDouble, ModelLipschitzAtomicDouble]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelLogRegAtomicDouble, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ModelLogRegAtomicDouble self) -> ModelLogRegAtomicDouble
        __init__(ModelLogRegAtomicDouble self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads) -> ModelLogRegAtomicDouble
        """
        this = _robust.new_ModelLogRegAtomicDouble(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def compare(self, that: 'TModelLogReg< double,std::atomic< double > > const &') -> "bool":
        """compare(ModelLogRegAtomicDouble self, TModelLogReg< double,std::atomic< double > > const & that) -> bool"""
        return _robust.ModelLogRegAtomicDouble_compare(self, that)


    def sigmoid(x: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
        """sigmoid(ArrayDouble const & x, ArrayDouble & out)"""
        return _robust.ModelLogRegAtomicDouble_sigmoid(x, out)

    if _newclass:
        sigmoid = staticmethod(sigmoid)
    __swig_getmethods__["sigmoid"] = lambda x: sigmoid

    def logistic(x: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
        """logistic(ArrayDouble const & x, ArrayDouble & out)"""
        return _robust.ModelLogRegAtomicDouble_logistic(x, out)

    if _newclass:
        logistic = staticmethod(logistic)
    __swig_getmethods__["logistic"] = lambda x: logistic
    __swig_destroy__ = _robust.delete_ModelLogRegAtomicDouble
    __del__ = lambda self: None
ModelLogRegAtomicDouble_swigregister = _robust.ModelLogRegAtomicDouble_swigregister
ModelLogRegAtomicDouble_swigregister(ModelLogRegAtomicDouble)

def ModelLogRegAtomicDouble_sigmoid(x: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
    """ModelLogRegAtomicDouble_sigmoid(ArrayDouble const & x, ArrayDouble & out)"""
    return _robust.ModelLogRegAtomicDouble_sigmoid(x, out)

def ModelLogRegAtomicDouble_logistic(x: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
    """ModelLogRegAtomicDouble_logistic(ArrayDouble const & x, ArrayDouble & out)"""
    return _robust.ModelLogRegAtomicDouble_logistic(x, out)

class ModelLogRegAtomicFloat(ModelGeneralizedLinearAtomicFloat, ModelLipschitzAtomicFloat):
    """Proxy of C++ TModelLogReg<(float,std::atomic<(float)>)> class"""
    __swig_setmethods__ = {}
    for _s in [ModelGeneralizedLinearAtomicFloat, ModelLipschitzAtomicFloat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelLogRegAtomicFloat, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelGeneralizedLinearAtomicFloat, ModelLipschitzAtomicFloat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelLogRegAtomicFloat, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TModelLogReg<(float,std::atomic<(float)>)> self) -> ModelLogRegAtomicFloat
        __init__(TModelLogReg<(float,std::atomic<(float)>)> self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept, int const n_threads) -> ModelLogRegAtomicFloat
        """
        this = _robust.new_ModelLogRegAtomicFloat(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def compare(self, that: 'ModelLogRegAtomicFloat') -> "bool":
        """compare(ModelLogRegAtomicFloat self, ModelLogRegAtomicFloat that) -> bool"""
        return _robust.ModelLogRegAtomicFloat_compare(self, that)


    def sigmoid(x: 'Array< float > const &', out: 'Array< float > &') -> "void":
        """sigmoid(Array< float > const & x, Array< float > & out)"""
        return _robust.ModelLogRegAtomicFloat_sigmoid(x, out)

    if _newclass:
        sigmoid = staticmethod(sigmoid)
    __swig_getmethods__["sigmoid"] = lambda x: sigmoid

    def logistic(x: 'Array< float > const &', out: 'Array< float > &') -> "void":
        """logistic(Array< float > const & x, Array< float > & out)"""
        return _robust.ModelLogRegAtomicFloat_logistic(x, out)

    if _newclass:
        logistic = staticmethod(logistic)
    __swig_getmethods__["logistic"] = lambda x: logistic
    __swig_destroy__ = _robust.delete_ModelLogRegAtomicFloat
    __del__ = lambda self: None
ModelLogRegAtomicFloat_swigregister = _robust.ModelLogRegAtomicFloat_swigregister
ModelLogRegAtomicFloat_swigregister(ModelLogRegAtomicFloat)

def ModelLogRegAtomicFloat_sigmoid(x: 'Array< float > const &', out: 'Array< float > &') -> "void":
    """ModelLogRegAtomicFloat_sigmoid(Array< float > const & x, Array< float > & out)"""
    return _robust.ModelLogRegAtomicFloat_sigmoid(x, out)

def ModelLogRegAtomicFloat_logistic(x: 'Array< float > const &', out: 'Array< float > &') -> "void":
    """ModelLogRegAtomicFloat_logistic(Array< float > const & x, Array< float > & out)"""
    return _robust.ModelLogRegAtomicFloat_logistic(x, out)


_robust.LinkType_identity_swigconstant(_robust)
LinkType_identity = _robust.LinkType_identity

_robust.LinkType_exponential_swigconstant(_robust)
LinkType_exponential = _robust.LinkType_exponential
class ModelPoisRegDouble(ModelGeneralizedLinearDouble):
    """Proxy of C++ ModelPoisRegDouble class"""
    __swig_setmethods__ = {}
    for _s in [ModelGeneralizedLinearDouble]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelPoisRegDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelGeneralizedLinearDouble]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelPoisRegDouble, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ModelPoisRegDouble self) -> ModelPoisRegDouble
        __init__(ModelPoisRegDouble self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, LinkType const link_type, bool const fit_intercept, int const n_threads=1) -> ModelPoisRegDouble
        __init__(ModelPoisRegDouble self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, LinkType const link_type, bool const fit_intercept) -> ModelPoisRegDouble
        """
        this = _robust.new_ModelPoisRegDouble(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def compare(self, that: 'ModelPoisRegDouble') -> "bool":
        """compare(ModelPoisRegDouble self, ModelPoisRegDouble that) -> bool"""
        return _robust.ModelPoisRegDouble_compare(self, that)


    def __getstate__(self): return ModelPoisRegDoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelPoisRegDoubleDeserialize(self, s)

    __swig_destroy__ = _robust.delete_ModelPoisRegDouble
    __del__ = lambda self: None
ModelPoisRegDouble_swigregister = _robust.ModelPoisRegDouble_swigregister
ModelPoisRegDouble_swigregister(ModelPoisRegDouble)


def ModelPoisRegDoubleDeserialize(ptr: 'ModelPoisRegDouble', hex: 'std::string const &') -> "void":
    """ModelPoisRegDoubleDeserialize(ModelPoisRegDouble ptr, std::string const & hex)"""
    return _robust.ModelPoisRegDoubleDeserialize(ptr, hex)

def ModelPoisRegDoubleSerialize(ptr: 'ModelPoisRegDouble') -> "std::string":
    """ModelPoisRegDoubleSerialize(ModelPoisRegDouble ptr) -> std::string"""
    return _robust.ModelPoisRegDoubleSerialize(ptr)
class ModelPoisRegFloat(ModelGeneralizedLinearFloat):
    """Proxy of C++ ModelPoisRegFloat class"""
    __swig_setmethods__ = {}
    for _s in [ModelGeneralizedLinearFloat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelPoisRegFloat, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelGeneralizedLinearFloat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelPoisRegFloat, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ModelPoisRegFloat self) -> ModelPoisRegFloat
        __init__(ModelPoisRegFloat self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, LinkType const link_type, bool const fit_intercept, int const n_threads=1) -> ModelPoisRegFloat
        __init__(ModelPoisRegFloat self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, LinkType const link_type, bool const fit_intercept) -> ModelPoisRegFloat
        """
        this = _robust.new_ModelPoisRegFloat(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def compare(self, that: 'ModelPoisRegFloat') -> "bool":
        """compare(ModelPoisRegFloat self, ModelPoisRegFloat that) -> bool"""
        return _robust.ModelPoisRegFloat_compare(self, that)


    def __getstate__(self): return ModelPoisRegFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelPoisRegFloatDeserialize(self, s)

    __swig_destroy__ = _robust.delete_ModelPoisRegFloat
    __del__ = lambda self: None
ModelPoisRegFloat_swigregister = _robust.ModelPoisRegFloat_swigregister
ModelPoisRegFloat_swigregister(ModelPoisRegFloat)


def ModelPoisRegFloatDeserialize(ptr: 'ModelPoisRegFloat', hex: 'std::string const &') -> "void":
    """ModelPoisRegFloatDeserialize(ModelPoisRegFloat ptr, std::string const & hex)"""
    return _robust.ModelPoisRegFloatDeserialize(ptr, hex)

def ModelPoisRegFloatSerialize(ptr: 'ModelPoisRegFloat') -> "std::string":
    """ModelPoisRegFloatSerialize(ModelPoisRegFloat ptr) -> std::string"""
    return _robust.ModelPoisRegFloatSerialize(ptr)
class ModelEpsilonInsensitiveDouble(ModelGeneralizedLinearDouble):
    """Proxy of C++ ModelEpsilonInsensitiveDouble class"""
    __swig_setmethods__ = {}
    for _s in [ModelGeneralizedLinearDouble]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelEpsilonInsensitiveDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelGeneralizedLinearDouble]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelEpsilonInsensitiveDouble, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ModelEpsilonInsensitiveDouble self) -> ModelEpsilonInsensitiveDouble
        __init__(ModelEpsilonInsensitiveDouble self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, double const threshold, int const n_threads=1) -> ModelEpsilonInsensitiveDouble
        __init__(ModelEpsilonInsensitiveDouble self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, double const threshold) -> ModelEpsilonInsensitiveDouble
        """
        this = _robust.new_ModelEpsilonInsensitiveDouble(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_threshold(self) -> "double":
        """get_threshold(ModelEpsilonInsensitiveDouble self) -> double"""
        return _robust.ModelEpsilonInsensitiveDouble_get_threshold(self)


    def set_threshold(self, threshold: 'double const') -> "void":
        """set_threshold(ModelEpsilonInsensitiveDouble self, double const threshold)"""
        return _robust.ModelEpsilonInsensitiveDouble_set_threshold(self, threshold)


    def compare(self, that: 'ModelEpsilonInsensitiveDouble') -> "bool":
        """compare(ModelEpsilonInsensitiveDouble self, ModelEpsilonInsensitiveDouble that) -> bool"""
        return _robust.ModelEpsilonInsensitiveDouble_compare(self, that)


    def __getstate__(self): return ModelEpsilonInsensitiveDoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelEpsilonInsensitiveDoubleDeserialize(self, s)

    __swig_destroy__ = _robust.delete_ModelEpsilonInsensitiveDouble
    __del__ = lambda self: None
ModelEpsilonInsensitiveDouble_swigregister = _robust.ModelEpsilonInsensitiveDouble_swigregister
ModelEpsilonInsensitiveDouble_swigregister(ModelEpsilonInsensitiveDouble)


def ModelEpsilonInsensitiveDoubleDeserialize(ptr: 'ModelEpsilonInsensitiveDouble', hex: 'std::string const &') -> "void":
    """ModelEpsilonInsensitiveDoubleDeserialize(ModelEpsilonInsensitiveDouble ptr, std::string const & hex)"""
    return _robust.ModelEpsilonInsensitiveDoubleDeserialize(ptr, hex)

def ModelEpsilonInsensitiveDoubleSerialize(ptr: 'ModelEpsilonInsensitiveDouble') -> "std::string":
    """ModelEpsilonInsensitiveDoubleSerialize(ModelEpsilonInsensitiveDouble ptr) -> std::string"""
    return _robust.ModelEpsilonInsensitiveDoubleSerialize(ptr)
class ModelEpsilonInsensitiveFloat(ModelGeneralizedLinearFloat):
    """Proxy of C++ ModelEpsilonInsensitiveFloat class"""
    __swig_setmethods__ = {}
    for _s in [ModelGeneralizedLinearFloat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelEpsilonInsensitiveFloat, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelGeneralizedLinearFloat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelEpsilonInsensitiveFloat, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ModelEpsilonInsensitiveFloat self) -> ModelEpsilonInsensitiveFloat
        __init__(ModelEpsilonInsensitiveFloat self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept, float const threshold, int const n_threads=1) -> ModelEpsilonInsensitiveFloat
        __init__(ModelEpsilonInsensitiveFloat self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept, float const threshold) -> ModelEpsilonInsensitiveFloat
        """
        this = _robust.new_ModelEpsilonInsensitiveFloat(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_threshold(self) -> "float":
        """get_threshold(ModelEpsilonInsensitiveFloat self) -> float"""
        return _robust.ModelEpsilonInsensitiveFloat_get_threshold(self)


    def set_threshold(self, threshold: 'float const') -> "void":
        """set_threshold(ModelEpsilonInsensitiveFloat self, float const threshold)"""
        return _robust.ModelEpsilonInsensitiveFloat_set_threshold(self, threshold)


    def compare(self, that: 'ModelEpsilonInsensitiveFloat') -> "bool":
        """compare(ModelEpsilonInsensitiveFloat self, ModelEpsilonInsensitiveFloat that) -> bool"""
        return _robust.ModelEpsilonInsensitiveFloat_compare(self, that)


    def __getstate__(self): return ModelEpsilonInsensitiveFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelEpsilonInsensitiveFloatDeserialize(self, s)

    __swig_destroy__ = _robust.delete_ModelEpsilonInsensitiveFloat
    __del__ = lambda self: None
ModelEpsilonInsensitiveFloat_swigregister = _robust.ModelEpsilonInsensitiveFloat_swigregister
ModelEpsilonInsensitiveFloat_swigregister(ModelEpsilonInsensitiveFloat)


def ModelEpsilonInsensitiveFloatDeserialize(ptr: 'ModelEpsilonInsensitiveFloat', hex: 'std::string const &') -> "void":
    """ModelEpsilonInsensitiveFloatDeserialize(ModelEpsilonInsensitiveFloat ptr, std::string const & hex)"""
    return _robust.ModelEpsilonInsensitiveFloatDeserialize(ptr, hex)

def ModelEpsilonInsensitiveFloatSerialize(ptr: 'ModelEpsilonInsensitiveFloat') -> "std::string":
    """ModelEpsilonInsensitiveFloatSerialize(ModelEpsilonInsensitiveFloat ptr) -> std::string"""
    return _robust.ModelEpsilonInsensitiveFloatSerialize(ptr)
class ModelHuberDouble(ModelGeneralizedLinearDouble, ModelLipschitz):
    """Proxy of C++ ModelHuberDouble class"""
    __swig_setmethods__ = {}
    for _s in [ModelGeneralizedLinearDouble, ModelLipschitz]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelHuberDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelGeneralizedLinearDouble, ModelLipschitz]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelHuberDouble, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ModelHuberDouble self) -> ModelHuberDouble
        __init__(ModelHuberDouble self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, double const threshold, int const n_threads=1) -> ModelHuberDouble
        __init__(ModelHuberDouble self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, double const threshold) -> ModelHuberDouble
        """
        this = _robust.new_ModelHuberDouble(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_threshold(self) -> "double":
        """get_threshold(ModelHuberDouble self) -> double"""
        return _robust.ModelHuberDouble_get_threshold(self)


    def set_threshold(self, threshold: 'double const') -> "void":
        """set_threshold(ModelHuberDouble self, double const threshold)"""
        return _robust.ModelHuberDouble_set_threshold(self, threshold)


    def compare(self, that: 'ModelHuberDouble') -> "bool":
        """compare(ModelHuberDouble self, ModelHuberDouble that) -> bool"""
        return _robust.ModelHuberDouble_compare(self, that)


    def __getstate__(self): return ModelHuberDoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelHuberDoubleDeserialize(self, s)

    __swig_destroy__ = _robust.delete_ModelHuberDouble
    __del__ = lambda self: None
ModelHuberDouble_swigregister = _robust.ModelHuberDouble_swigregister
ModelHuberDouble_swigregister(ModelHuberDouble)


def ModelHuberDoubleDeserialize(ptr: 'ModelHuberDouble', hex: 'std::string const &') -> "void":
    """ModelHuberDoubleDeserialize(ModelHuberDouble ptr, std::string const & hex)"""
    return _robust.ModelHuberDoubleDeserialize(ptr, hex)

def ModelHuberDoubleSerialize(ptr: 'ModelHuberDouble') -> "std::string":
    """ModelHuberDoubleSerialize(ModelHuberDouble ptr) -> std::string"""
    return _robust.ModelHuberDoubleSerialize(ptr)
class ModelHuberFloat(ModelGeneralizedLinearFloat, ModelLipschitzFloat):
    """Proxy of C++ ModelHuberFloat class"""
    __swig_setmethods__ = {}
    for _s in [ModelGeneralizedLinearFloat, ModelLipschitzFloat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelHuberFloat, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelGeneralizedLinearFloat, ModelLipschitzFloat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelHuberFloat, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ModelHuberFloat self) -> ModelHuberFloat
        __init__(ModelHuberFloat self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept, float const threshold, int const n_threads=1) -> ModelHuberFloat
        __init__(ModelHuberFloat self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept, float const threshold) -> ModelHuberFloat
        """
        this = _robust.new_ModelHuberFloat(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_threshold(self) -> "float":
        """get_threshold(ModelHuberFloat self) -> float"""
        return _robust.ModelHuberFloat_get_threshold(self)


    def set_threshold(self, threshold: 'float const') -> "void":
        """set_threshold(ModelHuberFloat self, float const threshold)"""
        return _robust.ModelHuberFloat_set_threshold(self, threshold)


    def compare(self, that: 'ModelHuberFloat') -> "bool":
        """compare(ModelHuberFloat self, ModelHuberFloat that) -> bool"""
        return _robust.ModelHuberFloat_compare(self, that)


    def __getstate__(self): return ModelHuberFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelHuberFloatDeserialize(self, s)

    __swig_destroy__ = _robust.delete_ModelHuberFloat
    __del__ = lambda self: None
ModelHuberFloat_swigregister = _robust.ModelHuberFloat_swigregister
ModelHuberFloat_swigregister(ModelHuberFloat)


def ModelHuberFloatDeserialize(ptr: 'ModelHuberFloat', hex: 'std::string const &') -> "void":
    """ModelHuberFloatDeserialize(ModelHuberFloat ptr, std::string const & hex)"""
    return _robust.ModelHuberFloatDeserialize(ptr, hex)

def ModelHuberFloatSerialize(ptr: 'ModelHuberFloat') -> "std::string":
    """ModelHuberFloatSerialize(ModelHuberFloat ptr) -> std::string"""
    return _robust.ModelHuberFloatSerialize(ptr)
class ModelModifiedHuberDouble(ModelGeneralizedLinearDouble, ModelLipschitz):
    """Proxy of C++ ModelModifiedHuberDouble class"""
    __swig_setmethods__ = {}
    for _s in [ModelGeneralizedLinearDouble, ModelLipschitz]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelModifiedHuberDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelGeneralizedLinearDouble, ModelLipschitz]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelModifiedHuberDouble, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ModelModifiedHuberDouble self) -> ModelModifiedHuberDouble
        __init__(ModelModifiedHuberDouble self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelModifiedHuberDouble
        __init__(ModelModifiedHuberDouble self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept) -> ModelModifiedHuberDouble
        """
        this = _robust.new_ModelModifiedHuberDouble(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def compare(self, that: 'ModelModifiedHuberDouble') -> "bool":
        """compare(ModelModifiedHuberDouble self, ModelModifiedHuberDouble that) -> bool"""
        return _robust.ModelModifiedHuberDouble_compare(self, that)


    def __getstate__(self): return ModelModifiedHuberDoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelModifiedHuberDoubleDeserialize(self, s)

    __swig_destroy__ = _robust.delete_ModelModifiedHuberDouble
    __del__ = lambda self: None
ModelModifiedHuberDouble_swigregister = _robust.ModelModifiedHuberDouble_swigregister
ModelModifiedHuberDouble_swigregister(ModelModifiedHuberDouble)


def ModelModifiedHuberDoubleDeserialize(ptr: 'ModelModifiedHuberDouble', hex: 'std::string const &') -> "void":
    """ModelModifiedHuberDoubleDeserialize(ModelModifiedHuberDouble ptr, std::string const & hex)"""
    return _robust.ModelModifiedHuberDoubleDeserialize(ptr, hex)

def ModelModifiedHuberDoubleSerialize(ptr: 'ModelModifiedHuberDouble') -> "std::string":
    """ModelModifiedHuberDoubleSerialize(ModelModifiedHuberDouble ptr) -> std::string"""
    return _robust.ModelModifiedHuberDoubleSerialize(ptr)
class ModelModifiedHuberFloat(ModelGeneralizedLinearFloat, ModelLipschitzFloat):
    """Proxy of C++ ModelModifiedHuberFloat class"""
    __swig_setmethods__ = {}
    for _s in [ModelGeneralizedLinearFloat, ModelLipschitzFloat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelModifiedHuberFloat, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelGeneralizedLinearFloat, ModelLipschitzFloat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelModifiedHuberFloat, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ModelModifiedHuberFloat self) -> ModelModifiedHuberFloat
        __init__(ModelModifiedHuberFloat self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelModifiedHuberFloat
        __init__(ModelModifiedHuberFloat self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept) -> ModelModifiedHuberFloat
        """
        this = _robust.new_ModelModifiedHuberFloat(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def compare(self, that: 'ModelModifiedHuberFloat') -> "bool":
        """compare(ModelModifiedHuberFloat self, ModelModifiedHuberFloat that) -> bool"""
        return _robust.ModelModifiedHuberFloat_compare(self, that)


    def __getstate__(self): return ModelModifiedHuberFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelModifiedHuberFloatDeserialize(self, s)

    __swig_destroy__ = _robust.delete_ModelModifiedHuberFloat
    __del__ = lambda self: None
ModelModifiedHuberFloat_swigregister = _robust.ModelModifiedHuberFloat_swigregister
ModelModifiedHuberFloat_swigregister(ModelModifiedHuberFloat)


def ModelModifiedHuberFloatDeserialize(ptr: 'ModelModifiedHuberFloat', hex: 'std::string const &') -> "void":
    """ModelModifiedHuberFloatDeserialize(ModelModifiedHuberFloat ptr, std::string const & hex)"""
    return _robust.ModelModifiedHuberFloatDeserialize(ptr, hex)

def ModelModifiedHuberFloatSerialize(ptr: 'ModelModifiedHuberFloat') -> "std::string":
    """ModelModifiedHuberFloatSerialize(ModelModifiedHuberFloat ptr) -> std::string"""
    return _robust.ModelModifiedHuberFloatSerialize(ptr)
class ModelAbsoluteRegressionDouble(ModelGeneralizedLinearDouble):
    """Proxy of C++ ModelAbsoluteRegressionDouble class"""
    __swig_setmethods__ = {}
    for _s in [ModelGeneralizedLinearDouble]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelAbsoluteRegressionDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelGeneralizedLinearDouble]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelAbsoluteRegressionDouble, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ModelAbsoluteRegressionDouble self) -> ModelAbsoluteRegressionDouble
        __init__(ModelAbsoluteRegressionDouble self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelAbsoluteRegressionDouble
        __init__(ModelAbsoluteRegressionDouble self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept) -> ModelAbsoluteRegressionDouble
        """
        this = _robust.new_ModelAbsoluteRegressionDouble(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def compare(self, that: 'ModelAbsoluteRegressionDouble') -> "bool":
        """compare(ModelAbsoluteRegressionDouble self, ModelAbsoluteRegressionDouble that) -> bool"""
        return _robust.ModelAbsoluteRegressionDouble_compare(self, that)


    def __getstate__(self): return ModelAbsoluteRegressionDoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelAbsoluteRegressionDoubleDeserialize(self, s)

    __swig_destroy__ = _robust.delete_ModelAbsoluteRegressionDouble
    __del__ = lambda self: None
ModelAbsoluteRegressionDouble_swigregister = _robust.ModelAbsoluteRegressionDouble_swigregister
ModelAbsoluteRegressionDouble_swigregister(ModelAbsoluteRegressionDouble)


def ModelAbsoluteRegressionDoubleDeserialize(ptr: 'ModelAbsoluteRegressionDouble', hex: 'std::string const &') -> "void":
    """ModelAbsoluteRegressionDoubleDeserialize(ModelAbsoluteRegressionDouble ptr, std::string const & hex)"""
    return _robust.ModelAbsoluteRegressionDoubleDeserialize(ptr, hex)

def ModelAbsoluteRegressionDoubleSerialize(ptr: 'ModelAbsoluteRegressionDouble') -> "std::string":
    """ModelAbsoluteRegressionDoubleSerialize(ModelAbsoluteRegressionDouble ptr) -> std::string"""
    return _robust.ModelAbsoluteRegressionDoubleSerialize(ptr)
class ModelAbsoluteRegressionFloat(ModelGeneralizedLinearFloat):
    """Proxy of C++ ModelAbsoluteRegressionFloat class"""
    __swig_setmethods__ = {}
    for _s in [ModelGeneralizedLinearFloat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelAbsoluteRegressionFloat, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelGeneralizedLinearFloat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelAbsoluteRegressionFloat, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ModelAbsoluteRegressionFloat self) -> ModelAbsoluteRegressionFloat
        __init__(ModelAbsoluteRegressionFloat self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelAbsoluteRegressionFloat
        __init__(ModelAbsoluteRegressionFloat self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept) -> ModelAbsoluteRegressionFloat
        """
        this = _robust.new_ModelAbsoluteRegressionFloat(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def compare(self, that: 'ModelAbsoluteRegressionFloat') -> "bool":
        """compare(ModelAbsoluteRegressionFloat self, ModelAbsoluteRegressionFloat that) -> bool"""
        return _robust.ModelAbsoluteRegressionFloat_compare(self, that)


    def __getstate__(self): return ModelAbsoluteRegressionFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelAbsoluteRegressionFloatDeserialize(self, s)

    __swig_destroy__ = _robust.delete_ModelAbsoluteRegressionFloat
    __del__ = lambda self: None
ModelAbsoluteRegressionFloat_swigregister = _robust.ModelAbsoluteRegressionFloat_swigregister
ModelAbsoluteRegressionFloat_swigregister(ModelAbsoluteRegressionFloat)


def ModelAbsoluteRegressionFloatDeserialize(ptr: 'ModelAbsoluteRegressionFloat', hex: 'std::string const &') -> "void":
    """ModelAbsoluteRegressionFloatDeserialize(ModelAbsoluteRegressionFloat ptr, std::string const & hex)"""
    return _robust.ModelAbsoluteRegressionFloatDeserialize(ptr, hex)

def ModelAbsoluteRegressionFloatSerialize(ptr: 'ModelAbsoluteRegressionFloat') -> "std::string":
    """ModelAbsoluteRegressionFloatSerialize(ModelAbsoluteRegressionFloat ptr) -> std::string"""
    return _robust.ModelAbsoluteRegressionFloatSerialize(ptr)
class ModelGeneralizedLinearWithInterceptsDouble(ModelGeneralizedLinearDouble):
    """Proxy of C++ ModelGeneralizedLinearWithInterceptsDouble class"""
    __swig_setmethods__ = {}
    for _s in [ModelGeneralizedLinearDouble]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelGeneralizedLinearWithInterceptsDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelGeneralizedLinearDouble]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelGeneralizedLinearWithInterceptsDouble, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ModelGeneralizedLinearWithInterceptsDouble self) -> ModelGeneralizedLinearWithInterceptsDouble
        __init__(ModelGeneralizedLinearWithInterceptsDouble self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelGeneralizedLinearWithInterceptsDouble
        __init__(ModelGeneralizedLinearWithInterceptsDouble self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept) -> ModelGeneralizedLinearWithInterceptsDouble
        """
        this = _robust.new_ModelGeneralizedLinearWithInterceptsDouble(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def compare(self, that: 'ModelGeneralizedLinearWithInterceptsDouble') -> "bool":
        """compare(ModelGeneralizedLinearWithInterceptsDouble self, ModelGeneralizedLinearWithInterceptsDouble that) -> bool"""
        return _robust.ModelGeneralizedLinearWithInterceptsDouble_compare(self, that)


    def __getstate__(self): return ModelGeneralizedLinearWithInterceptsDoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelGeneralizedLinearWithInterceptsDoubleDeserialize(self, s)

    __swig_destroy__ = _robust.delete_ModelGeneralizedLinearWithInterceptsDouble
    __del__ = lambda self: None
ModelGeneralizedLinearWithInterceptsDouble_swigregister = _robust.ModelGeneralizedLinearWithInterceptsDouble_swigregister
ModelGeneralizedLinearWithInterceptsDouble_swigregister(ModelGeneralizedLinearWithInterceptsDouble)


def ModelGeneralizedLinearWithInterceptsDoubleDeserialize(ptr: 'ModelGeneralizedLinearWithInterceptsDouble', hex: 'std::string const &') -> "void":
    """ModelGeneralizedLinearWithInterceptsDoubleDeserialize(ModelGeneralizedLinearWithInterceptsDouble ptr, std::string const & hex)"""
    return _robust.ModelGeneralizedLinearWithInterceptsDoubleDeserialize(ptr, hex)

def ModelGeneralizedLinearWithInterceptsDoubleSerialize(ptr: 'ModelGeneralizedLinearWithInterceptsDouble') -> "std::string":
    """ModelGeneralizedLinearWithInterceptsDoubleSerialize(ModelGeneralizedLinearWithInterceptsDouble ptr) -> std::string"""
    return _robust.ModelGeneralizedLinearWithInterceptsDoubleSerialize(ptr)
class ModelGeneralizedLinearWithInterceptsFloat(ModelGeneralizedLinearFloat):
    """Proxy of C++ ModelGeneralizedLinearWithInterceptsFloat class"""
    __swig_setmethods__ = {}
    for _s in [ModelGeneralizedLinearFloat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelGeneralizedLinearWithInterceptsFloat, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelGeneralizedLinearFloat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelGeneralizedLinearWithInterceptsFloat, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ModelGeneralizedLinearWithInterceptsFloat self) -> ModelGeneralizedLinearWithInterceptsFloat
        __init__(ModelGeneralizedLinearWithInterceptsFloat self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelGeneralizedLinearWithInterceptsFloat
        __init__(ModelGeneralizedLinearWithInterceptsFloat self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept) -> ModelGeneralizedLinearWithInterceptsFloat
        """
        this = _robust.new_ModelGeneralizedLinearWithInterceptsFloat(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def compare(self, that: 'ModelGeneralizedLinearWithInterceptsFloat') -> "bool":
        """compare(ModelGeneralizedLinearWithInterceptsFloat self, ModelGeneralizedLinearWithInterceptsFloat that) -> bool"""
        return _robust.ModelGeneralizedLinearWithInterceptsFloat_compare(self, that)


    def __getstate__(self): return ModelGeneralizedLinearWithInterceptsFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelGeneralizedLinearWithInterceptsFloatDeserialize(self, s)

    __swig_destroy__ = _robust.delete_ModelGeneralizedLinearWithInterceptsFloat
    __del__ = lambda self: None
ModelGeneralizedLinearWithInterceptsFloat_swigregister = _robust.ModelGeneralizedLinearWithInterceptsFloat_swigregister
ModelGeneralizedLinearWithInterceptsFloat_swigregister(ModelGeneralizedLinearWithInterceptsFloat)


def ModelGeneralizedLinearWithInterceptsFloatDeserialize(ptr: 'ModelGeneralizedLinearWithInterceptsFloat', hex: 'std::string const &') -> "void":
    """ModelGeneralizedLinearWithInterceptsFloatDeserialize(ModelGeneralizedLinearWithInterceptsFloat ptr, std::string const & hex)"""
    return _robust.ModelGeneralizedLinearWithInterceptsFloatDeserialize(ptr, hex)

def ModelGeneralizedLinearWithInterceptsFloatSerialize(ptr: 'ModelGeneralizedLinearWithInterceptsFloat') -> "std::string":
    """ModelGeneralizedLinearWithInterceptsFloatSerialize(ModelGeneralizedLinearWithInterceptsFloat ptr) -> std::string"""
    return _robust.ModelGeneralizedLinearWithInterceptsFloatSerialize(ptr)
class ModelLinRegWithInterceptsDouble(ModelGeneralizedLinearWithInterceptsDouble, ModelLinRegDouble):
    """Proxy of C++ ModelLinRegWithInterceptsDouble class"""
    __swig_setmethods__ = {}
    for _s in [ModelGeneralizedLinearWithInterceptsDouble, ModelLinRegDouble]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelLinRegWithInterceptsDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelGeneralizedLinearWithInterceptsDouble, ModelLinRegDouble]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelLinRegWithInterceptsDouble, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ModelLinRegWithInterceptsDouble self) -> ModelLinRegWithInterceptsDouble
        __init__(ModelLinRegWithInterceptsDouble self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelLinRegWithInterceptsDouble
        __init__(ModelLinRegWithInterceptsDouble self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept) -> ModelLinRegWithInterceptsDouble
        """
        this = _robust.new_ModelLinRegWithInterceptsDouble(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def compare(self, that: 'ModelLinRegWithInterceptsDouble') -> "bool":
        """compare(ModelLinRegWithInterceptsDouble self, ModelLinRegWithInterceptsDouble that) -> bool"""
        return _robust.ModelLinRegWithInterceptsDouble_compare(self, that)


    def __getstate__(self): return ModelLinRegWithInterceptsDoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelLinRegWithInterceptsDoubleDeserialize(self, s)

    __swig_destroy__ = _robust.delete_ModelLinRegWithInterceptsDouble
    __del__ = lambda self: None
ModelLinRegWithInterceptsDouble_swigregister = _robust.ModelLinRegWithInterceptsDouble_swigregister
ModelLinRegWithInterceptsDouble_swigregister(ModelLinRegWithInterceptsDouble)


def ModelLinRegWithInterceptsDoubleDeserialize(ptr: 'ModelLinRegWithInterceptsDouble', hex: 'std::string const &') -> "void":
    """ModelLinRegWithInterceptsDoubleDeserialize(ModelLinRegWithInterceptsDouble ptr, std::string const & hex)"""
    return _robust.ModelLinRegWithInterceptsDoubleDeserialize(ptr, hex)

def ModelLinRegWithInterceptsDoubleSerialize(ptr: 'ModelLinRegWithInterceptsDouble') -> "std::string":
    """ModelLinRegWithInterceptsDoubleSerialize(ModelLinRegWithInterceptsDouble ptr) -> std::string"""
    return _robust.ModelLinRegWithInterceptsDoubleSerialize(ptr)
class ModelLinRegWithInterceptsFloat(ModelGeneralizedLinearWithInterceptsFloat, ModelLinRegFloat):
    """Proxy of C++ ModelLinRegWithInterceptsFloat class"""
    __swig_setmethods__ = {}
    for _s in [ModelGeneralizedLinearWithInterceptsFloat, ModelLinRegFloat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelLinRegWithInterceptsFloat, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelGeneralizedLinearWithInterceptsFloat, ModelLinRegFloat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelLinRegWithInterceptsFloat, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ModelLinRegWithInterceptsFloat self) -> ModelLinRegWithInterceptsFloat
        __init__(ModelLinRegWithInterceptsFloat self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelLinRegWithInterceptsFloat
        __init__(ModelLinRegWithInterceptsFloat self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept) -> ModelLinRegWithInterceptsFloat
        """
        this = _robust.new_ModelLinRegWithInterceptsFloat(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def compare(self, that: 'ModelLinRegWithInterceptsFloat') -> "bool":
        """compare(ModelLinRegWithInterceptsFloat self, ModelLinRegWithInterceptsFloat that) -> bool"""
        return _robust.ModelLinRegWithInterceptsFloat_compare(self, that)


    def __getstate__(self): return ModelLinRegWithInterceptsFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelLinRegWithInterceptsFloatDeserialize(self, s)

    __swig_destroy__ = _robust.delete_ModelLinRegWithInterceptsFloat
    __del__ = lambda self: None
ModelLinRegWithInterceptsFloat_swigregister = _robust.ModelLinRegWithInterceptsFloat_swigregister
ModelLinRegWithInterceptsFloat_swigregister(ModelLinRegWithInterceptsFloat)


def ModelLinRegWithInterceptsFloatDeserialize(ptr: 'ModelLinRegWithInterceptsFloat', hex: 'std::string const &') -> "void":
    """ModelLinRegWithInterceptsFloatDeserialize(ModelLinRegWithInterceptsFloat ptr, std::string const & hex)"""
    return _robust.ModelLinRegWithInterceptsFloatDeserialize(ptr, hex)

def ModelLinRegWithInterceptsFloatSerialize(ptr: 'ModelLinRegWithInterceptsFloat') -> "std::string":
    """ModelLinRegWithInterceptsFloatSerialize(ModelLinRegWithInterceptsFloat ptr) -> std::string"""
    return _robust.ModelLinRegWithInterceptsFloatSerialize(ptr)
# This file is compatible with both classic and new-style classes.


