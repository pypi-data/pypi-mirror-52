# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_base_model', [dirname(__file__)])
        except ImportError:
            import _base_model
            return _base_model
        if fp is not None:
            try:
                _mod = imp.load_module('_base_model', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _base_model = swig_import_helper()
    del swig_import_helper
else:
    import _base_model
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def to_hex(bytes: 'std::string const &') -> "std::string":
    """to_hex(std::string const & bytes) -> std::string"""
    return _base_model.to_hex(bytes)

def to_bytes(hex: 'std::string const &') -> "std::string":
    """to_bytes(std::string const & hex) -> std::string"""
    return _base_model.to_bytes(hex)

_base_model.SHARED_PTR_DISOWN_swigconstant(_base_model)
SHARED_PTR_DISOWN = _base_model.SHARED_PTR_DISOWN
import tick.base
import tick.array.build.array
class Model(_object):
    """Proxy of C++ TModel<(double,double)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Model, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Model, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(TModel<(double,double)> self) -> Model"""
        this = _base_model.new_Model()
        try:
            self.this.append(this)
        except:
            self.this = this

    def grad(self, coeffs: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
        """grad(Model self, ArrayDouble const & coeffs, ArrayDouble & out)"""
        return _base_model.Model_grad(self, coeffs, out)


    def loss(self, coeffs: 'ArrayDouble const &') -> "double":
        """loss(Model self, ArrayDouble const & coeffs) -> double"""
        return _base_model.Model_loss(self, coeffs)


    def get_epoch_size(self) -> "unsigned long":
        """get_epoch_size(Model self) -> unsigned long"""
        return _base_model.Model_get_epoch_size(self)


    def is_sparse(self) -> "bool":
        """is_sparse(Model self) -> bool"""
        return _base_model.Model_is_sparse(self)

    __swig_destroy__ = _base_model.delete_Model
    __del__ = lambda self: None
Model_swigregister = _base_model.Model_swigregister
Model_swigregister(Model)

class ModelDouble(_object):
    """Proxy of C++ TModel<(double,double)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModelDouble, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(TModel<(double,double)> self) -> ModelDouble"""
        this = _base_model.new_ModelDouble()
        try:
            self.this.append(this)
        except:
            self.this = this

    def grad(self, coeffs: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
        """grad(ModelDouble self, ArrayDouble const & coeffs, ArrayDouble & out)"""
        return _base_model.ModelDouble_grad(self, coeffs, out)


    def loss(self, coeffs: 'ArrayDouble const &') -> "double":
        """loss(ModelDouble self, ArrayDouble const & coeffs) -> double"""
        return _base_model.ModelDouble_loss(self, coeffs)


    def get_epoch_size(self) -> "unsigned long":
        """get_epoch_size(ModelDouble self) -> unsigned long"""
        return _base_model.ModelDouble_get_epoch_size(self)


    def is_sparse(self) -> "bool":
        """is_sparse(ModelDouble self) -> bool"""
        return _base_model.ModelDouble_is_sparse(self)

    __swig_destroy__ = _base_model.delete_ModelDouble
    __del__ = lambda self: None
ModelDouble_swigregister = _base_model.ModelDouble_swigregister
ModelDouble_swigregister(ModelDouble)

class ModelFloat(_object):
    """Proxy of C++ TModel<(float,float)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModelFloat, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(TModel<(float,float)> self) -> ModelFloat"""
        this = _base_model.new_ModelFloat()
        try:
            self.this.append(this)
        except:
            self.this = this

    def grad(self, coeffs: 'ArrayFloat const &', out: 'ArrayFloat &') -> "void":
        """grad(ModelFloat self, ArrayFloat const & coeffs, ArrayFloat & out)"""
        return _base_model.ModelFloat_grad(self, coeffs, out)


    def loss(self, coeffs: 'ArrayFloat const &') -> "double":
        """loss(ModelFloat self, ArrayFloat const & coeffs) -> double"""
        return _base_model.ModelFloat_loss(self, coeffs)


    def get_epoch_size(self) -> "unsigned long":
        """get_epoch_size(ModelFloat self) -> unsigned long"""
        return _base_model.ModelFloat_get_epoch_size(self)


    def is_sparse(self) -> "bool":
        """is_sparse(ModelFloat self) -> bool"""
        return _base_model.ModelFloat_is_sparse(self)

    __swig_destroy__ = _base_model.delete_ModelFloat
    __del__ = lambda self: None
ModelFloat_swigregister = _base_model.ModelFloat_swigregister
ModelFloat_swigregister(ModelFloat)

class ModelAtomicDouble(_object):
    """Proxy of C++ TModel<(double,std::atomic<(double)>)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelAtomicDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModelAtomicDouble, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(TModel<(double,std::atomic<(double)>)> self) -> ModelAtomicDouble"""
        this = _base_model.new_ModelAtomicDouble()
        try:
            self.this.append(this)
        except:
            self.this = this

    def grad(self, coeffs: 'ArrayAtomicDouble const &', out: 'ArrayDouble &') -> "void":
        """grad(ModelAtomicDouble self, ArrayAtomicDouble const & coeffs, ArrayDouble & out)"""
        return _base_model.ModelAtomicDouble_grad(self, coeffs, out)


    def loss(self, coeffs: 'ArrayAtomicDouble const &') -> "double":
        """loss(ModelAtomicDouble self, ArrayAtomicDouble const & coeffs) -> double"""
        return _base_model.ModelAtomicDouble_loss(self, coeffs)


    def get_epoch_size(self) -> "unsigned long":
        """get_epoch_size(ModelAtomicDouble self) -> unsigned long"""
        return _base_model.ModelAtomicDouble_get_epoch_size(self)


    def is_sparse(self) -> "bool":
        """is_sparse(ModelAtomicDouble self) -> bool"""
        return _base_model.ModelAtomicDouble_is_sparse(self)

    __swig_destroy__ = _base_model.delete_ModelAtomicDouble
    __del__ = lambda self: None
ModelAtomicDouble_swigregister = _base_model.ModelAtomicDouble_swigregister
ModelAtomicDouble_swigregister(ModelAtomicDouble)

class ModelAtomicFloat(_object):
    """Proxy of C++ TModel<(float,std::atomic<(float)>)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelAtomicFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModelAtomicFloat, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(TModel<(float,std::atomic<(float)>)> self) -> ModelAtomicFloat"""
        this = _base_model.new_ModelAtomicFloat()
        try:
            self.this.append(this)
        except:
            self.this = this

    def grad(self, coeffs: 'Array< std::atomic< float > > const &', out: 'ArrayFloat &') -> "void":
        """grad(ModelAtomicFloat self, Array< std::atomic< float > > const & coeffs, ArrayFloat & out)"""
        return _base_model.ModelAtomicFloat_grad(self, coeffs, out)


    def loss(self, coeffs: 'Array< std::atomic< float > > const &') -> "float":
        """loss(ModelAtomicFloat self, Array< std::atomic< float > > const & coeffs) -> float"""
        return _base_model.ModelAtomicFloat_loss(self, coeffs)


    def get_epoch_size(self) -> "unsigned long":
        """get_epoch_size(ModelAtomicFloat self) -> unsigned long"""
        return _base_model.ModelAtomicFloat_get_epoch_size(self)


    def is_sparse(self) -> "bool":
        """is_sparse(ModelAtomicFloat self) -> bool"""
        return _base_model.ModelAtomicFloat_is_sparse(self)

    __swig_destroy__ = _base_model.delete_ModelAtomicFloat
    __del__ = lambda self: None
ModelAtomicFloat_swigregister = _base_model.ModelAtomicFloat_swigregister
ModelAtomicFloat_swigregister(ModelAtomicFloat)

class ModelLabelsFeaturesDouble(Model):
    """Proxy of C++ TModelLabelsFeatures<(double,double)> class"""
    __swig_setmethods__ = {}
    for _s in [Model]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelLabelsFeaturesDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [Model]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelLabelsFeaturesDouble, name)
    __repr__ = _swig_repr

    def __init__(self, features: 'std::shared_ptr< BaseArray2d< double > > const', labels: 'std::shared_ptr< SArray< double > > const'):
        """__init__(TModelLabelsFeatures<(double,double)> self, std::shared_ptr< BaseArray2d< double > > const features, std::shared_ptr< SArray< double > > const labels) -> ModelLabelsFeaturesDouble"""
        this = _base_model.new_ModelLabelsFeaturesDouble(features, labels)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_n_samples(self) -> "unsigned long":
        """get_n_samples(ModelLabelsFeaturesDouble self) -> unsigned long"""
        return _base_model.ModelLabelsFeaturesDouble_get_n_samples(self)


    def get_n_features(self) -> "unsigned long":
        """get_n_features(ModelLabelsFeaturesDouble self) -> unsigned long"""
        return _base_model.ModelLabelsFeaturesDouble_get_n_features(self)

    __swig_destroy__ = _base_model.delete_ModelLabelsFeaturesDouble
    __del__ = lambda self: None
ModelLabelsFeaturesDouble_swigregister = _base_model.ModelLabelsFeaturesDouble_swigregister
ModelLabelsFeaturesDouble_swigregister(ModelLabelsFeaturesDouble)

class ModelLabelsFeaturesFloat(ModelFloat):
    """Proxy of C++ TModelLabelsFeatures<(float,float)> class"""
    __swig_setmethods__ = {}
    for _s in [ModelFloat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelLabelsFeaturesFloat, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelFloat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelLabelsFeaturesFloat, name)
    __repr__ = _swig_repr

    def __init__(self, features: 'std::shared_ptr< BaseArray2d< float > > const', labels: 'std::shared_ptr< SArray< float > > const'):
        """__init__(TModelLabelsFeatures<(float,float)> self, std::shared_ptr< BaseArray2d< float > > const features, std::shared_ptr< SArray< float > > const labels) -> ModelLabelsFeaturesFloat"""
        this = _base_model.new_ModelLabelsFeaturesFloat(features, labels)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_n_samples(self) -> "unsigned long":
        """get_n_samples(ModelLabelsFeaturesFloat self) -> unsigned long"""
        return _base_model.ModelLabelsFeaturesFloat_get_n_samples(self)


    def get_n_features(self) -> "unsigned long":
        """get_n_features(ModelLabelsFeaturesFloat self) -> unsigned long"""
        return _base_model.ModelLabelsFeaturesFloat_get_n_features(self)

    __swig_destroy__ = _base_model.delete_ModelLabelsFeaturesFloat
    __del__ = lambda self: None
ModelLabelsFeaturesFloat_swigregister = _base_model.ModelLabelsFeaturesFloat_swigregister
ModelLabelsFeaturesFloat_swigregister(ModelLabelsFeaturesFloat)

class ModelLabelsFeaturesAtomicDouble(ModelAtomicDouble):
    """Proxy of C++ TModelLabelsFeatures<(double,std::atomic<(double)>)> class"""
    __swig_setmethods__ = {}
    for _s in [ModelAtomicDouble]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelLabelsFeaturesAtomicDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelAtomicDouble]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelLabelsFeaturesAtomicDouble, name)
    __repr__ = _swig_repr

    def __init__(self, features: 'std::shared_ptr< BaseArray2d< double > > const', labels: 'std::shared_ptr< SArray< double > > const'):
        """__init__(TModelLabelsFeatures<(double,std::atomic<(double)>)> self, std::shared_ptr< BaseArray2d< double > > const features, std::shared_ptr< SArray< double > > const labels) -> ModelLabelsFeaturesAtomicDouble"""
        this = _base_model.new_ModelLabelsFeaturesAtomicDouble(features, labels)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_n_samples(self) -> "unsigned long":
        """get_n_samples(ModelLabelsFeaturesAtomicDouble self) -> unsigned long"""
        return _base_model.ModelLabelsFeaturesAtomicDouble_get_n_samples(self)


    def get_n_features(self) -> "unsigned long":
        """get_n_features(ModelLabelsFeaturesAtomicDouble self) -> unsigned long"""
        return _base_model.ModelLabelsFeaturesAtomicDouble_get_n_features(self)

    __swig_destroy__ = _base_model.delete_ModelLabelsFeaturesAtomicDouble
    __del__ = lambda self: None
ModelLabelsFeaturesAtomicDouble_swigregister = _base_model.ModelLabelsFeaturesAtomicDouble_swigregister
ModelLabelsFeaturesAtomicDouble_swigregister(ModelLabelsFeaturesAtomicDouble)

class ModelLabelsFeaturesAtomicFloat(ModelAtomicFloat):
    """Proxy of C++ TModelLabelsFeatures<(float,std::atomic<(float)>)> class"""
    __swig_setmethods__ = {}
    for _s in [ModelAtomicFloat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelLabelsFeaturesAtomicFloat, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelAtomicFloat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelLabelsFeaturesAtomicFloat, name)
    __repr__ = _swig_repr

    def __init__(self, features: 'std::shared_ptr< BaseArray2d< float > > const', labels: 'std::shared_ptr< SArray< float > > const'):
        """__init__(TModelLabelsFeatures<(float,std::atomic<(float)>)> self, std::shared_ptr< BaseArray2d< float > > const features, std::shared_ptr< SArray< float > > const labels) -> ModelLabelsFeaturesAtomicFloat"""
        this = _base_model.new_ModelLabelsFeaturesAtomicFloat(features, labels)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_n_samples(self) -> "unsigned long":
        """get_n_samples(ModelLabelsFeaturesAtomicFloat self) -> unsigned long"""
        return _base_model.ModelLabelsFeaturesAtomicFloat_get_n_samples(self)


    def get_n_features(self) -> "unsigned long":
        """get_n_features(ModelLabelsFeaturesAtomicFloat self) -> unsigned long"""
        return _base_model.ModelLabelsFeaturesAtomicFloat_get_n_features(self)

    __swig_destroy__ = _base_model.delete_ModelLabelsFeaturesAtomicFloat
    __del__ = lambda self: None
ModelLabelsFeaturesAtomicFloat_swigregister = _base_model.ModelLabelsFeaturesAtomicFloat_swigregister
ModelLabelsFeaturesAtomicFloat_swigregister(ModelLabelsFeaturesAtomicFloat)

class ModelLipschitz(Model):
    """Proxy of C++ TModelLipschitz<(double,double)> class"""
    __swig_setmethods__ = {}
    for _s in [Model]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelLipschitz, name, value)
    __swig_getmethods__ = {}
    for _s in [Model]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelLipschitz, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(TModelLipschitz<(double,double)> self) -> ModelLipschitz"""
        this = _base_model.new_ModelLipschitz()
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_lip_max(self) -> "double":
        """get_lip_max(ModelLipschitz self) -> double"""
        return _base_model.ModelLipschitz_get_lip_max(self)


    def get_lip_mean(self) -> "double":
        """get_lip_mean(ModelLipschitz self) -> double"""
        return _base_model.ModelLipschitz_get_lip_mean(self)

    __swig_destroy__ = _base_model.delete_ModelLipschitz
    __del__ = lambda self: None
ModelLipschitz_swigregister = _base_model.ModelLipschitz_swigregister
ModelLipschitz_swigregister(ModelLipschitz)

class ModelLipschitzDouble(Model):
    """Proxy of C++ TModelLipschitz<(double,double)> class"""
    __swig_setmethods__ = {}
    for _s in [Model]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelLipschitzDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [Model]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelLipschitzDouble, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(TModelLipschitz<(double,double)> self) -> ModelLipschitzDouble"""
        this = _base_model.new_ModelLipschitzDouble()
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_lip_max(self) -> "double":
        """get_lip_max(ModelLipschitzDouble self) -> double"""
        return _base_model.ModelLipschitzDouble_get_lip_max(self)


    def get_lip_mean(self) -> "double":
        """get_lip_mean(ModelLipschitzDouble self) -> double"""
        return _base_model.ModelLipschitzDouble_get_lip_mean(self)

    __swig_destroy__ = _base_model.delete_ModelLipschitzDouble
    __del__ = lambda self: None
ModelLipschitzDouble_swigregister = _base_model.ModelLipschitzDouble_swigregister
ModelLipschitzDouble_swigregister(ModelLipschitzDouble)

class ModelLipschitzFloat(ModelFloat):
    """Proxy of C++ TModelLipschitz<(float,float)> class"""
    __swig_setmethods__ = {}
    for _s in [ModelFloat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelLipschitzFloat, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelFloat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelLipschitzFloat, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(TModelLipschitz<(float,float)> self) -> ModelLipschitzFloat"""
        this = _base_model.new_ModelLipschitzFloat()
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_lip_max(self) -> "float":
        """get_lip_max(ModelLipschitzFloat self) -> float"""
        return _base_model.ModelLipschitzFloat_get_lip_max(self)


    def get_lip_mean(self) -> "float":
        """get_lip_mean(ModelLipschitzFloat self) -> float"""
        return _base_model.ModelLipschitzFloat_get_lip_mean(self)

    __swig_destroy__ = _base_model.delete_ModelLipschitzFloat
    __del__ = lambda self: None
ModelLipschitzFloat_swigregister = _base_model.ModelLipschitzFloat_swigregister
ModelLipschitzFloat_swigregister(ModelLipschitzFloat)

class ModelLipschitzAtomicDouble(ModelAtomicDouble):
    """Proxy of C++ TModelLipschitz<(double,std::atomic<(double)>)> class"""
    __swig_setmethods__ = {}
    for _s in [ModelAtomicDouble]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelLipschitzAtomicDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelAtomicDouble]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelLipschitzAtomicDouble, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(TModelLipschitz<(double,std::atomic<(double)>)> self) -> ModelLipschitzAtomicDouble"""
        this = _base_model.new_ModelLipschitzAtomicDouble()
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_lip_max(self) -> "double":
        """get_lip_max(ModelLipschitzAtomicDouble self) -> double"""
        return _base_model.ModelLipschitzAtomicDouble_get_lip_max(self)


    def get_lip_mean(self) -> "double":
        """get_lip_mean(ModelLipschitzAtomicDouble self) -> double"""
        return _base_model.ModelLipschitzAtomicDouble_get_lip_mean(self)

    __swig_destroy__ = _base_model.delete_ModelLipschitzAtomicDouble
    __del__ = lambda self: None
ModelLipschitzAtomicDouble_swigregister = _base_model.ModelLipschitzAtomicDouble_swigregister
ModelLipschitzAtomicDouble_swigregister(ModelLipschitzAtomicDouble)

class ModelLipschitzAtomicFloat(ModelAtomicFloat):
    """Proxy of C++ TModelLipschitz<(float,std::atomic<(float)>)> class"""
    __swig_setmethods__ = {}
    for _s in [ModelAtomicFloat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelLipschitzAtomicFloat, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelAtomicFloat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelLipschitzAtomicFloat, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(TModelLipschitz<(float,std::atomic<(float)>)> self) -> ModelLipschitzAtomicFloat"""
        this = _base_model.new_ModelLipschitzAtomicFloat()
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_lip_max(self) -> "float":
        """get_lip_max(ModelLipschitzAtomicFloat self) -> float"""
        return _base_model.ModelLipschitzAtomicFloat_get_lip_max(self)


    def get_lip_mean(self) -> "float":
        """get_lip_mean(ModelLipschitzAtomicFloat self) -> float"""
        return _base_model.ModelLipschitzAtomicFloat_get_lip_mean(self)

    __swig_destroy__ = _base_model.delete_ModelLipschitzAtomicFloat
    __del__ = lambda self: None
ModelLipschitzAtomicFloat_swigregister = _base_model.ModelLipschitzAtomicFloat_swigregister
ModelLipschitzAtomicFloat_swigregister(ModelLipschitzAtomicFloat)

class ModelGeneralizedLinearDouble(ModelLabelsFeaturesDouble):
    """Proxy of C++ TModelGeneralizedLinear<(double,double)> class"""
    __swig_setmethods__ = {}
    for _s in [ModelLabelsFeaturesDouble]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelGeneralizedLinearDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelLabelsFeaturesDouble]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelGeneralizedLinearDouble, name)
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', labels: 'SArrayDoublePtr const', fit_intercept: 'bool const', n_threads: 'int const'=1):
        """
        __init__(TModelGeneralizedLinear<(double,double)> self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelGeneralizedLinearDouble
        __init__(TModelGeneralizedLinear<(double,double)> self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept) -> ModelGeneralizedLinearDouble
        """
        this = _base_model.new_ModelGeneralizedLinearDouble(features, labels, fit_intercept, n_threads)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_n_coeffs(self) -> "unsigned long":
        """get_n_coeffs(ModelGeneralizedLinearDouble self) -> unsigned long"""
        return _base_model.ModelGeneralizedLinearDouble_get_n_coeffs(self)


    def set_fit_intercept(self, fit_intercept: 'bool') -> "void":
        """set_fit_intercept(ModelGeneralizedLinearDouble self, bool fit_intercept)"""
        return _base_model.ModelGeneralizedLinearDouble_set_fit_intercept(self, fit_intercept)


    def sdca_primal_dual_relation(self, l_l2sq: 'double const', dual_vector: 'ArrayDouble const &', out_primal_vector: 'ArrayDouble &') -> "void":
        """sdca_primal_dual_relation(ModelGeneralizedLinearDouble self, double const l_l2sq, ArrayDouble const & dual_vector, ArrayDouble & out_primal_vector)"""
        return _base_model.ModelGeneralizedLinearDouble_sdca_primal_dual_relation(self, l_l2sq, dual_vector, out_primal_vector)

    __swig_destroy__ = _base_model.delete_ModelGeneralizedLinearDouble
    __del__ = lambda self: None
ModelGeneralizedLinearDouble_swigregister = _base_model.ModelGeneralizedLinearDouble_swigregister
ModelGeneralizedLinearDouble_swigregister(ModelGeneralizedLinearDouble)

class ModelGeneralizedLinearFloat(ModelLabelsFeaturesFloat):
    """Proxy of C++ TModelGeneralizedLinear<(float,float)> class"""
    __swig_setmethods__ = {}
    for _s in [ModelLabelsFeaturesFloat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelGeneralizedLinearFloat, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelLabelsFeaturesFloat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelGeneralizedLinearFloat, name)
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayFloat2dPtr const', labels: 'SArrayFloatPtr const', fit_intercept: 'bool const', n_threads: 'int const'=1):
        """
        __init__(TModelGeneralizedLinear<(float,float)> self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelGeneralizedLinearFloat
        __init__(TModelGeneralizedLinear<(float,float)> self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept) -> ModelGeneralizedLinearFloat
        """
        this = _base_model.new_ModelGeneralizedLinearFloat(features, labels, fit_intercept, n_threads)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_n_coeffs(self) -> "unsigned long":
        """get_n_coeffs(ModelGeneralizedLinearFloat self) -> unsigned long"""
        return _base_model.ModelGeneralizedLinearFloat_get_n_coeffs(self)


    def set_fit_intercept(self, fit_intercept: 'bool') -> "void":
        """set_fit_intercept(ModelGeneralizedLinearFloat self, bool fit_intercept)"""
        return _base_model.ModelGeneralizedLinearFloat_set_fit_intercept(self, fit_intercept)


    def sdca_primal_dual_relation(self, l_l2sq: 'float const', dual_vector: 'ArrayFloat const &', out_primal_vector: 'ArrayFloat &') -> "void":
        """sdca_primal_dual_relation(ModelGeneralizedLinearFloat self, float const l_l2sq, ArrayFloat const & dual_vector, ArrayFloat & out_primal_vector)"""
        return _base_model.ModelGeneralizedLinearFloat_sdca_primal_dual_relation(self, l_l2sq, dual_vector, out_primal_vector)

    __swig_destroy__ = _base_model.delete_ModelGeneralizedLinearFloat
    __del__ = lambda self: None
ModelGeneralizedLinearFloat_swigregister = _base_model.ModelGeneralizedLinearFloat_swigregister
ModelGeneralizedLinearFloat_swigregister(ModelGeneralizedLinearFloat)

class ModelGeneralizedLinearAtomicDouble(ModelLabelsFeaturesAtomicDouble):
    """Proxy of C++ TModelGeneralizedLinear<(double,std::atomic<(double)>)> class"""
    __swig_setmethods__ = {}
    for _s in [ModelLabelsFeaturesAtomicDouble]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelGeneralizedLinearAtomicDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelLabelsFeaturesAtomicDouble]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelGeneralizedLinearAtomicDouble, name)
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', labels: 'SArrayDoublePtr const', fit_intercept: 'bool const', n_threads: 'int const'=1):
        """
        __init__(TModelGeneralizedLinear<(double,std::atomic<(double)>)> self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelGeneralizedLinearAtomicDouble
        __init__(TModelGeneralizedLinear<(double,std::atomic<(double)>)> self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept) -> ModelGeneralizedLinearAtomicDouble
        """
        this = _base_model.new_ModelGeneralizedLinearAtomicDouble(features, labels, fit_intercept, n_threads)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_n_coeffs(self) -> "unsigned long":
        """get_n_coeffs(ModelGeneralizedLinearAtomicDouble self) -> unsigned long"""
        return _base_model.ModelGeneralizedLinearAtomicDouble_get_n_coeffs(self)


    def set_fit_intercept(self, fit_intercept: 'bool') -> "void":
        """set_fit_intercept(ModelGeneralizedLinearAtomicDouble self, bool fit_intercept)"""
        return _base_model.ModelGeneralizedLinearAtomicDouble_set_fit_intercept(self, fit_intercept)


    def sdca_primal_dual_relation(self, l_l2sq: 'double const', dual_vector: 'ArrayDouble const &', out_primal_vector: 'ArrayDouble &') -> "void":
        """sdca_primal_dual_relation(ModelGeneralizedLinearAtomicDouble self, double const l_l2sq, ArrayDouble const & dual_vector, ArrayDouble & out_primal_vector)"""
        return _base_model.ModelGeneralizedLinearAtomicDouble_sdca_primal_dual_relation(self, l_l2sq, dual_vector, out_primal_vector)

    __swig_destroy__ = _base_model.delete_ModelGeneralizedLinearAtomicDouble
    __del__ = lambda self: None
ModelGeneralizedLinearAtomicDouble_swigregister = _base_model.ModelGeneralizedLinearAtomicDouble_swigregister
ModelGeneralizedLinearAtomicDouble_swigregister(ModelGeneralizedLinearAtomicDouble)

class ModelGeneralizedLinearAtomicFloat(ModelLabelsFeaturesAtomicFloat):
    """Proxy of C++ TModelGeneralizedLinear<(float,std::atomic<(float)>)> class"""
    __swig_setmethods__ = {}
    for _s in [ModelLabelsFeaturesAtomicFloat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelGeneralizedLinearAtomicFloat, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelLabelsFeaturesAtomicFloat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelGeneralizedLinearAtomicFloat, name)
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayFloat2dPtr const', labels: 'SArrayFloatPtr const', fit_intercept: 'bool const', n_threads: 'int const'=1):
        """
        __init__(TModelGeneralizedLinear<(float,std::atomic<(float)>)> self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelGeneralizedLinearAtomicFloat
        __init__(TModelGeneralizedLinear<(float,std::atomic<(float)>)> self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept) -> ModelGeneralizedLinearAtomicFloat
        """
        this = _base_model.new_ModelGeneralizedLinearAtomicFloat(features, labels, fit_intercept, n_threads)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_n_coeffs(self) -> "unsigned long":
        """get_n_coeffs(ModelGeneralizedLinearAtomicFloat self) -> unsigned long"""
        return _base_model.ModelGeneralizedLinearAtomicFloat_get_n_coeffs(self)


    def set_fit_intercept(self, fit_intercept: 'bool') -> "void":
        """set_fit_intercept(ModelGeneralizedLinearAtomicFloat self, bool fit_intercept)"""
        return _base_model.ModelGeneralizedLinearAtomicFloat_set_fit_intercept(self, fit_intercept)


    def sdca_primal_dual_relation(self, l_l2sq: 'float const', dual_vector: 'ArrayFloat const &', out_primal_vector: 'ArrayFloat &') -> "void":
        """sdca_primal_dual_relation(ModelGeneralizedLinearAtomicFloat self, float const l_l2sq, ArrayFloat const & dual_vector, ArrayFloat & out_primal_vector)"""
        return _base_model.ModelGeneralizedLinearAtomicFloat_sdca_primal_dual_relation(self, l_l2sq, dual_vector, out_primal_vector)

    __swig_destroy__ = _base_model.delete_ModelGeneralizedLinearAtomicFloat
    __del__ = lambda self: None
ModelGeneralizedLinearAtomicFloat_swigregister = _base_model.ModelGeneralizedLinearAtomicFloat_swigregister
ModelGeneralizedLinearAtomicFloat_swigregister(ModelGeneralizedLinearAtomicFloat)

# This file is compatible with both classic and new-style classes.


