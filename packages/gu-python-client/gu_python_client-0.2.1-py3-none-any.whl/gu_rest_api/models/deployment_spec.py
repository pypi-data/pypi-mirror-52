# coding: utf-8

"""
    Golem unlimited low level hub API

    API description in Markdown.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DeploymentSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'env_type': 'EnvType',
        'image': 'DeploymentSpecImage',
        'name': 'str',
        'tags': 'list[str]',
        'options': 'object'
    }

    attribute_map = {
        'env_type': 'envType',
        'image': 'image',
        'name': 'name',
        'tags': 'tags',
        'options': 'options'
    }

    def __init__(self, env_type=None, image=None, name=None, tags=None, options=None):  # noqa: E501
        """DeploymentSpec - a model defined in OpenAPI"""  # noqa: E501

        self._env_type = None
        self._image = None
        self._name = None
        self._tags = None
        self._options = None
        self.discriminator = None

        if env_type is not None:
            self.env_type = env_type
        if image is not None:
            self.image = image
        if name is not None:
            self.name = name
        if tags is not None:
            self.tags = tags
        if options is not None:
            self.options = options

    @property
    def env_type(self):
        """Gets the env_type of this DeploymentSpec.  # noqa: E501


        :return: The env_type of this DeploymentSpec.  # noqa: E501
        :rtype: EnvType
        """
        return self._env_type

    @env_type.setter
    def env_type(self, env_type):
        """Sets the env_type of this DeploymentSpec.


        :param env_type: The env_type of this DeploymentSpec.  # noqa: E501
        :type: EnvType
        """

        self._env_type = env_type

    @property
    def image(self):
        """Gets the image of this DeploymentSpec.  # noqa: E501


        :return: The image of this DeploymentSpec.  # noqa: E501
        :rtype: DeploymentSpecImage
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this DeploymentSpec.


        :param image: The image of this DeploymentSpec.  # noqa: E501
        :type: DeploymentSpecImage
        """

        self._image = image

    @property
    def name(self):
        """Gets the name of this DeploymentSpec.  # noqa: E501

        human readable name  # noqa: E501

        :return: The name of this DeploymentSpec.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DeploymentSpec.

        human readable name  # noqa: E501

        :param name: The name of this DeploymentSpec.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def tags(self):
        """Gets the tags of this DeploymentSpec.  # noqa: E501

        deployment tags  # noqa: E501

        :return: The tags of this DeploymentSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this DeploymentSpec.

        deployment tags  # noqa: E501

        :param tags: The tags of this DeploymentSpec.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def options(self):
        """Gets the options of this DeploymentSpec.  # noqa: E501


        :return: The options of this DeploymentSpec.  # noqa: E501
        :rtype: object
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this DeploymentSpec.


        :param options: The options of this DeploymentSpec.  # noqa: E501
        :type: object
        """

        self._options = options

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeploymentSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
