# coding: utf-8

"""
    Golem unlimited low level hub API

    API description in Markdown.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class HubInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'node_id': 'str',
        'version': 'str',
        'build': 'BuildInfo',
        'caps': 'list[str]'
    }

    attribute_map = {
        'node_id': 'nodeId',
        'version': 'version',
        'build': 'build',
        'caps': 'caps'
    }

    def __init__(self, node_id='0x875f272d3b9e7b55a5784a131a60bf3d7a42c73c', version='0.2.1', build=None, caps=None):  # noqa: E501
        """HubInfo - a model defined in OpenAPI"""  # noqa: E501

        self._node_id = None
        self._version = None
        self._build = None
        self._caps = None
        self.discriminator = None

        if node_id is not None:
            self.node_id = node_id
        if version is not None:
            self.version = version
        if build is not None:
            self.build = build
        if caps is not None:
            self.caps = caps

    @property
    def node_id(self):
        """Gets the node_id of this HubInfo.  # noqa: E501

        node public key hash in ethereum format  # noqa: E501

        :return: The node_id of this HubInfo.  # noqa: E501
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this HubInfo.

        node public key hash in ethereum format  # noqa: E501

        :param node_id: The node_id of this HubInfo.  # noqa: E501
        :type: str
        """

        self._node_id = node_id

    @property
    def version(self):
        """Gets the version of this HubInfo.  # noqa: E501

        semver of hub.  # noqa: E501

        :return: The version of this HubInfo.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this HubInfo.

        semver of hub.  # noqa: E501

        :param version: The version of this HubInfo.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def build(self):
        """Gets the build of this HubInfo.  # noqa: E501


        :return: The build of this HubInfo.  # noqa: E501
        :rtype: BuildInfo
        """
        return self._build

    @build.setter
    def build(self, build):
        """Sets the build of this HubInfo.


        :param build: The build of this HubInfo.  # noqa: E501
        :type: BuildInfo
        """

        self._build = build

    @property
    def caps(self):
        """Gets the caps of this HubInfo.  # noqa: E501

        hub protocol capabilities  # noqa: E501

        :return: The caps of this HubInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._caps

    @caps.setter
    def caps(self, caps):
        """Sets the caps of this HubInfo.

        hub protocol capabilities  # noqa: E501

        :param caps: The caps of this HubInfo.  # noqa: E501
        :type: list[str]
        """

        self._caps = caps

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HubInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
