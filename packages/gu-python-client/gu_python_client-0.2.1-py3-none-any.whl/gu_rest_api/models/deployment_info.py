# coding: utf-8

"""
    Golem unlimited low level hub API

    API description in Markdown.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DeploymentInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'status': 'DeploymentStatus',
        'tags': 'list[str]',
        'note': 'str',
        'processes': 'dict(str, object)'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'status': 'status',
        'tags': 'tags',
        'note': 'note',
        'processes': 'processes'
    }

    def __init__(self, id=None, name=None, status=None, tags=None, note=None, processes=None):  # noqa: E501
        """DeploymentInfo - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._name = None
        self._status = None
        self._tags = None
        self._note = None
        self._processes = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if status is not None:
            self.status = status
        if tags is not None:
            self.tags = tags
        if note is not None:
            self.note = note
        if processes is not None:
            self.processes = processes

    @property
    def id(self):
        """Gets the id of this DeploymentInfo.  # noqa: E501


        :return: The id of this DeploymentInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeploymentInfo.


        :param id: The id of this DeploymentInfo.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this DeploymentInfo.  # noqa: E501


        :return: The name of this DeploymentInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DeploymentInfo.


        :param name: The name of this DeploymentInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this DeploymentInfo.  # noqa: E501


        :return: The status of this DeploymentInfo.  # noqa: E501
        :rtype: DeploymentStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DeploymentInfo.


        :param status: The status of this DeploymentInfo.  # noqa: E501
        :type: DeploymentStatus
        """

        self._status = status

    @property
    def tags(self):
        """Gets the tags of this DeploymentInfo.  # noqa: E501


        :return: The tags of this DeploymentInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this DeploymentInfo.


        :param tags: The tags of this DeploymentInfo.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def note(self):
        """Gets the note of this DeploymentInfo.  # noqa: E501


        :return: The note of this DeploymentInfo.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this DeploymentInfo.


        :param note: The note of this DeploymentInfo.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def processes(self):
        """Gets the processes of this DeploymentInfo.  # noqa: E501


        :return: The processes of this DeploymentInfo.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._processes

    @processes.setter
    def processes(self, processes):
        """Sets the processes of this DeploymentInfo.


        :param processes: The processes of this DeploymentInfo.  # noqa: E501
        :type: dict(str, object)
        """

        self._processes = processes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeploymentInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
