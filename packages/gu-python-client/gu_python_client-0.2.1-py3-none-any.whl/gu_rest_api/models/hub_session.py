# coding: utf-8

"""
    Golem unlimited low level hub API

    API description in Markdown.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class HubSession(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'created': 'datetime',
        'expires': 'datetime',
        'allocation': 'str',
        'name': 'str',
        'tags': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'created': 'created',
        'expires': 'expires',
        'allocation': 'allocation',
        'name': 'name',
        'tags': 'tags'
    }

    def __init__(self, id='47f1dc88-0282-4ac3-f765-02b303e8c278', created=None, expires=None, allocation=None, name=None, tags=None):  # noqa: E501
        """HubSession - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._created = None
        self._expires = None
        self._allocation = None
        self._name = None
        self._tags = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if created is not None:
            self.created = created
        if expires is not None:
            self.expires = expires
        if allocation is not None:
            self.allocation = allocation
        if name is not None:
            self.name = name
        if tags is not None:
            self.tags = tags

    @property
    def id(self):
        """Gets the id of this HubSession.  # noqa: E501

        Uniqe HUB Session identifier  # noqa: E501

        :return: The id of this HubSession.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HubSession.

        Uniqe HUB Session identifier  # noqa: E501

        :param id: The id of this HubSession.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def created(self):
        """Gets the created of this HubSession.  # noqa: E501

        Session creation timestamp  # noqa: E501

        :return: The created of this HubSession.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this HubSession.

        Session creation timestamp  # noqa: E501

        :param created: The created of this HubSession.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def expires(self):
        """Gets the expires of this HubSession.  # noqa: E501


        :return: The expires of this HubSession.  # noqa: E501
        :rtype: datetime
        """
        return self._expires

    @expires.setter
    def expires(self, expires):
        """Sets the expires of this HubSession.


        :param expires: The expires of this HubSession.  # noqa: E501
        :type: datetime
        """

        self._expires = expires

    @property
    def allocation(self):
        """Gets the allocation of this HubSession.  # noqa: E501

        resource allocation mode  # noqa: E501

        :return: The allocation of this HubSession.  # noqa: E501
        :rtype: str
        """
        return self._allocation

    @allocation.setter
    def allocation(self, allocation):
        """Sets the allocation of this HubSession.

        resource allocation mode  # noqa: E501

        :param allocation: The allocation of this HubSession.  # noqa: E501
        :type: str
        """
        allowed_values = ["manual", "auto"]  # noqa: E501
        if allocation not in allowed_values:
            raise ValueError(
                "Invalid value for `allocation` ({0}), must be one of {1}"  # noqa: E501
                .format(allocation, allowed_values)
            )

        self._allocation = allocation

    @property
    def name(self):
        """Gets the name of this HubSession.  # noqa: E501

        optional human readable name  # noqa: E501

        :return: The name of this HubSession.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this HubSession.

        optional human readable name  # noqa: E501

        :param name: The name of this HubSession.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def tags(self):
        """Gets the tags of this HubSession.  # noqa: E501


        :return: The tags of this HubSession.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this HubSession.


        :param tags: The tags of this HubSession.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HubSession):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
