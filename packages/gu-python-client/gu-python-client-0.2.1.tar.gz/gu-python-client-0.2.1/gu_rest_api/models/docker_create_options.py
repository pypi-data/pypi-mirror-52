# coding: utf-8

"""
    Golem unlimited low level hub API

    API description in Markdown.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DockerCreateOptions(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'volumes': 'list[VolumeDef]',
        'cmd': 'list[str]',
        'net': 'DockerNetDef'
    }

    attribute_map = {
        'volumes': 'volumes',
        'cmd': 'cmd',
        'net': 'net'
    }

    def __init__(self, volumes=None, cmd=None, net=None):  # noqa: E501
        """DockerCreateOptions - a model defined in OpenAPI"""  # noqa: E501

        self._volumes = None
        self._cmd = None
        self._net = None
        self.discriminator = None

        if volumes is not None:
            self.volumes = volumes
        if cmd is not None:
            self.cmd = cmd
        if net is not None:
            self.net = net

    @property
    def volumes(self):
        """Gets the volumes of this DockerCreateOptions.  # noqa: E501


        :return: The volumes of this DockerCreateOptions.  # noqa: E501
        :rtype: list[VolumeDef]
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """Sets the volumes of this DockerCreateOptions.


        :param volumes: The volumes of this DockerCreateOptions.  # noqa: E501
        :type: list[VolumeDef]
        """

        self._volumes = volumes

    @property
    def cmd(self):
        """Gets the cmd of this DockerCreateOptions.  # noqa: E501


        :return: The cmd of this DockerCreateOptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._cmd

    @cmd.setter
    def cmd(self, cmd):
        """Sets the cmd of this DockerCreateOptions.


        :param cmd: The cmd of this DockerCreateOptions.  # noqa: E501
        :type: list[str]
        """

        self._cmd = cmd

    @property
    def net(self):
        """Gets the net of this DockerCreateOptions.  # noqa: E501


        :return: The net of this DockerCreateOptions.  # noqa: E501
        :rtype: DockerNetDef
        """
        return self._net

    @net.setter
    def net(self, net):
        """Sets the net of this DockerCreateOptions.


        :param net: The net of this DockerCreateOptions.  # noqa: E501
        :type: DockerNetDef
        """

        self._net = net

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DockerCreateOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
