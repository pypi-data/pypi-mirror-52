# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_odroid_wiringpi')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_odroid_wiringpi')
    _odroid_wiringpi = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_odroid_wiringpi', [dirname(__file__)])
        except ImportError:
            import _odroid_wiringpi
            return _odroid_wiringpi
        try:
            _mod = imp.load_module('_odroid_wiringpi', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _odroid_wiringpi = swig_import_helper()
    del swig_import_helper
else:
    import _odroid_wiringpi
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def wiringPiISR(pin, mode, PyFunc):
    return _odroid_wiringpi.wiringPiISR(pin, mode, PyFunc)
wiringPiISR = _odroid_wiringpi.wiringPiISR

def wiringPiFindNode(pin):
    return _odroid_wiringpi.wiringPiFindNode(pin)
wiringPiFindNode = _odroid_wiringpi.wiringPiFindNode

def wiringPiNewNode(pinBase, numPins):
    return _odroid_wiringpi.wiringPiNewNode(pinBase, numPins)
wiringPiNewNode = _odroid_wiringpi.wiringPiNewNode

def wiringPiFailure(fatal, message):
    return _odroid_wiringpi.wiringPiFailure(fatal, message)
wiringPiFailure = _odroid_wiringpi.wiringPiFailure

def msg(type, message):
    return _odroid_wiringpi.msg(type, message)
msg = _odroid_wiringpi.msg

def moduleLoaded(arg1):
    return _odroid_wiringpi.moduleLoaded(arg1)
moduleLoaded = _odroid_wiringpi.moduleLoaded

def setupCheck(fName):
    return _odroid_wiringpi.setupCheck(fName)
setupCheck = _odroid_wiringpi.setupCheck

def usingGpioMemCheck(what):
    return _odroid_wiringpi.usingGpioMemCheck(what)
usingGpioMemCheck = _odroid_wiringpi.usingGpioMemCheck

def setUsingGpioMem(value):
    return _odroid_wiringpi.setUsingGpioMem(value)
setUsingGpioMem = _odroid_wiringpi.setUsingGpioMem

def wiringPiVersion(major, minor):
    return _odroid_wiringpi.wiringPiVersion(major, minor)
wiringPiVersion = _odroid_wiringpi.wiringPiVersion

def wiringPiSetup():
    return _odroid_wiringpi.wiringPiSetup()
wiringPiSetup = _odroid_wiringpi.wiringPiSetup

def wiringPiSetupSys():
    return _odroid_wiringpi.wiringPiSetupSys()
wiringPiSetupSys = _odroid_wiringpi.wiringPiSetupSys

def wiringPiSetupGpio():
    return _odroid_wiringpi.wiringPiSetupGpio()
wiringPiSetupGpio = _odroid_wiringpi.wiringPiSetupGpio

def wiringPiSetupPhys():
    return _odroid_wiringpi.wiringPiSetupPhys()
wiringPiSetupPhys = _odroid_wiringpi.wiringPiSetupPhys

def setPadDrive(pin, value):
    return _odroid_wiringpi.setPadDrive(pin, value)
setPadDrive = _odroid_wiringpi.setPadDrive

def getPadDrive(pin):
    return _odroid_wiringpi.getPadDrive(pin)
getPadDrive = _odroid_wiringpi.getPadDrive

def getAlt(pin):
    return _odroid_wiringpi.getAlt(pin)
getAlt = _odroid_wiringpi.getAlt

def getPUPD(pin):
    return _odroid_wiringpi.getPUPD(pin)
getPUPD = _odroid_wiringpi.getPUPD

def pinMode(pin, mode):
    return _odroid_wiringpi.pinMode(pin, mode)
pinMode = _odroid_wiringpi.pinMode

def pullUpDnControl(pin, pud):
    return _odroid_wiringpi.pullUpDnControl(pin, pud)
pullUpDnControl = _odroid_wiringpi.pullUpDnControl

def digitalRead(pin):
    return _odroid_wiringpi.digitalRead(pin)
digitalRead = _odroid_wiringpi.digitalRead

def digitalWrite(pin, value):
    return _odroid_wiringpi.digitalWrite(pin, value)
digitalWrite = _odroid_wiringpi.digitalWrite

def digitalReadByte():
    return _odroid_wiringpi.digitalReadByte()
digitalReadByte = _odroid_wiringpi.digitalReadByte

def pwmWrite(pin, value):
    return _odroid_wiringpi.pwmWrite(pin, value)
pwmWrite = _odroid_wiringpi.pwmWrite

def analogRead(pin):
    return _odroid_wiringpi.analogRead(pin)
analogRead = _odroid_wiringpi.analogRead

def pwmSetMode(mode):
    return _odroid_wiringpi.pwmSetMode(mode)
pwmSetMode = _odroid_wiringpi.pwmSetMode

def pwmSetRange(range):
    return _odroid_wiringpi.pwmSetRange(range)
pwmSetRange = _odroid_wiringpi.pwmSetRange

def pwmSetClock(divisor):
    return _odroid_wiringpi.pwmSetClock(divisor)
pwmSetClock = _odroid_wiringpi.pwmSetClock

def piGpioLayout():
    return _odroid_wiringpi.piGpioLayout()
piGpioLayout = _odroid_wiringpi.piGpioLayout

def piBoardRev():
    return _odroid_wiringpi.piBoardRev()
piBoardRev = _odroid_wiringpi.piBoardRev

def piBoardId(model, rev, mem, maker, warranty):
    return _odroid_wiringpi.piBoardId(model, rev, mem, maker, warranty)
piBoardId = _odroid_wiringpi.piBoardId

def wpiPinToGpio(wpiPin):
    return _odroid_wiringpi.wpiPinToGpio(wpiPin)
wpiPinToGpio = _odroid_wiringpi.wpiPinToGpio

def physPinToGpio(physPin):
    return _odroid_wiringpi.physPinToGpio(physPin)
physPinToGpio = _odroid_wiringpi.physPinToGpio

def pinModeAlt(pin, mode):
    return _odroid_wiringpi.pinModeAlt(pin, mode)
pinModeAlt = _odroid_wiringpi.pinModeAlt

def analogWrite(pin, value):
    return _odroid_wiringpi.analogWrite(pin, value)
analogWrite = _odroid_wiringpi.analogWrite

def pwmToneWrite(pin, freq):
    return _odroid_wiringpi.pwmToneWrite(pin, freq)
pwmToneWrite = _odroid_wiringpi.pwmToneWrite

def gpioClockSet(pin, freq):
    return _odroid_wiringpi.gpioClockSet(pin, freq)
gpioClockSet = _odroid_wiringpi.gpioClockSet

def digitalReadByte2():
    return _odroid_wiringpi.digitalReadByte2()
digitalReadByte2 = _odroid_wiringpi.digitalReadByte2

def digitalWriteByte(*args):
    return _odroid_wiringpi.digitalWriteByte(*args)
digitalWriteByte = _odroid_wiringpi.digitalWriteByte

def digitalWriteByte2(value):
    return _odroid_wiringpi.digitalWriteByte2(value)
digitalWriteByte2 = _odroid_wiringpi.digitalWriteByte2

def waitForInterrupt(pin, mS):
    return _odroid_wiringpi.waitForInterrupt(pin, mS)
waitForInterrupt = _odroid_wiringpi.waitForInterrupt

def wiringPiISRCancel(pin):
    return _odroid_wiringpi.wiringPiISRCancel(pin)
wiringPiISRCancel = _odroid_wiringpi.wiringPiISRCancel

def piThreadCreate(fn):
    return _odroid_wiringpi.piThreadCreate(fn)
piThreadCreate = _odroid_wiringpi.piThreadCreate

def piLock(key):
    return _odroid_wiringpi.piLock(key)
piLock = _odroid_wiringpi.piLock

def piUnlock(key):
    return _odroid_wiringpi.piUnlock(key)
piUnlock = _odroid_wiringpi.piUnlock

def piHiPri(pri):
    return _odroid_wiringpi.piHiPri(pri)
piHiPri = _odroid_wiringpi.piHiPri

def delay(howLong):
    return _odroid_wiringpi.delay(howLong)
delay = _odroid_wiringpi.delay

def delayMicroseconds(howLong):
    return _odroid_wiringpi.delayMicroseconds(howLong)
delayMicroseconds = _odroid_wiringpi.delayMicroseconds

def millis():
    return _odroid_wiringpi.millis()
millis = _odroid_wiringpi.millis

def micros():
    return _odroid_wiringpi.micros()
micros = _odroid_wiringpi.micros

def wiringPiI2CRead(fd):
    return _odroid_wiringpi.wiringPiI2CRead(fd)
wiringPiI2CRead = _odroid_wiringpi.wiringPiI2CRead

def wiringPiI2CReadReg8(fd, reg):
    return _odroid_wiringpi.wiringPiI2CReadReg8(fd, reg)
wiringPiI2CReadReg8 = _odroid_wiringpi.wiringPiI2CReadReg8

def wiringPiI2CReadReg16(fd, reg):
    return _odroid_wiringpi.wiringPiI2CReadReg16(fd, reg)
wiringPiI2CReadReg16 = _odroid_wiringpi.wiringPiI2CReadReg16

def wiringPiI2CReadBlock(fd, reg, buff, size):
    return _odroid_wiringpi.wiringPiI2CReadBlock(fd, reg, buff, size)
wiringPiI2CReadBlock = _odroid_wiringpi.wiringPiI2CReadBlock

def wiringPiI2CWrite(fd, data):
    return _odroid_wiringpi.wiringPiI2CWrite(fd, data)
wiringPiI2CWrite = _odroid_wiringpi.wiringPiI2CWrite

def wiringPiI2CWriteReg8(fd, reg, data):
    return _odroid_wiringpi.wiringPiI2CWriteReg8(fd, reg, data)
wiringPiI2CWriteReg8 = _odroid_wiringpi.wiringPiI2CWriteReg8

def wiringPiI2CWriteReg16(fd, reg, data):
    return _odroid_wiringpi.wiringPiI2CWriteReg16(fd, reg, data)
wiringPiI2CWriteReg16 = _odroid_wiringpi.wiringPiI2CWriteReg16

def wiringPiI2CWriteBlock(fd, reg, buff, size):
    return _odroid_wiringpi.wiringPiI2CWriteBlock(fd, reg, buff, size)
wiringPiI2CWriteBlock = _odroid_wiringpi.wiringPiI2CWriteBlock

def wiringPiI2CSetupInterface(device, devId):
    return _odroid_wiringpi.wiringPiI2CSetupInterface(device, devId)
wiringPiI2CSetupInterface = _odroid_wiringpi.wiringPiI2CSetupInterface

def wiringPiI2CSetup(devId):
    return _odroid_wiringpi.wiringPiI2CSetup(devId)
wiringPiI2CSetup = _odroid_wiringpi.wiringPiI2CSetup

def wiringPiSPIGetFd(channel):
    return _odroid_wiringpi.wiringPiSPIGetFd(channel)
wiringPiSPIGetFd = _odroid_wiringpi.wiringPiSPIGetFd

def wiringPiSPIDataRW(channel, data):
    return _odroid_wiringpi.wiringPiSPIDataRW(channel, data)
wiringPiSPIDataRW = _odroid_wiringpi.wiringPiSPIDataRW

def wiringPiSPISetupInterface(device, channel, speed, mode):
    return _odroid_wiringpi.wiringPiSPISetupInterface(device, channel, speed, mode)
wiringPiSPISetupInterface = _odroid_wiringpi.wiringPiSPISetupInterface

def wiringPiSPISetupMode(channel, speed, mode):
    return _odroid_wiringpi.wiringPiSPISetupMode(channel, speed, mode)
wiringPiSPISetupMode = _odroid_wiringpi.wiringPiSPISetupMode

def wiringPiSPISetup(channel, speed):
    return _odroid_wiringpi.wiringPiSPISetup(channel, speed)
wiringPiSPISetup = _odroid_wiringpi.wiringPiSPISetup

def serialOpen(device, baud):
    return _odroid_wiringpi.serialOpen(device, baud)
serialOpen = _odroid_wiringpi.serialOpen

def serialClose(fd):
    return _odroid_wiringpi.serialClose(fd)
serialClose = _odroid_wiringpi.serialClose

def serialFlush(fd):
    return _odroid_wiringpi.serialFlush(fd)
serialFlush = _odroid_wiringpi.serialFlush

def serialPutchar(fd, c):
    return _odroid_wiringpi.serialPutchar(fd, c)
serialPutchar = _odroid_wiringpi.serialPutchar

def serialPuts(fd, s):
    return _odroid_wiringpi.serialPuts(fd, s)
serialPuts = _odroid_wiringpi.serialPuts

def serialPrintf(fd, message):
    return _odroid_wiringpi.serialPrintf(fd, message)
serialPrintf = _odroid_wiringpi.serialPrintf

def serialDataAvail(fd):
    return _odroid_wiringpi.serialDataAvail(fd)
serialDataAvail = _odroid_wiringpi.serialDataAvail

def serialGetchar(fd):
    return _odroid_wiringpi.serialGetchar(fd)
serialGetchar = _odroid_wiringpi.serialGetchar

def shiftIn(dPin, cPin, order):
    return _odroid_wiringpi.shiftIn(dPin, cPin, order)
shiftIn = _odroid_wiringpi.shiftIn

def shiftOut(dPin, cPin, order, val):
    return _odroid_wiringpi.shiftOut(dPin, cPin, order, val)
shiftOut = _odroid_wiringpi.shiftOut

def drcSetupSerial(pinBase, numPins, device, baud):
    return _odroid_wiringpi.drcSetupSerial(pinBase, numPins, device, baud)
drcSetupSerial = _odroid_wiringpi.drcSetupSerial

def ads1115Setup(pinBase, i2cAddress):
    return _odroid_wiringpi.ads1115Setup(pinBase, i2cAddress)
ads1115Setup = _odroid_wiringpi.ads1115Setup

def max31855Setup(pinBase, spiChannel):
    return _odroid_wiringpi.max31855Setup(pinBase, spiChannel)
max31855Setup = _odroid_wiringpi.max31855Setup

def max5322Setup(pinBase, spiChannel):
    return _odroid_wiringpi.max5322Setup(pinBase, spiChannel)
max5322Setup = _odroid_wiringpi.max5322Setup

def mcp23008Setup(pinBase, i2cAddress):
    return _odroid_wiringpi.mcp23008Setup(pinBase, i2cAddress)
mcp23008Setup = _odroid_wiringpi.mcp23008Setup

def mcp23016Setup(pinBase, i2cAddress):
    return _odroid_wiringpi.mcp23016Setup(pinBase, i2cAddress)
mcp23016Setup = _odroid_wiringpi.mcp23016Setup

def mcp23017Setup(pinBase, i2cAddress):
    return _odroid_wiringpi.mcp23017Setup(pinBase, i2cAddress)
mcp23017Setup = _odroid_wiringpi.mcp23017Setup

def mcp23s08Setup(pinBase, spiPort, devId):
    return _odroid_wiringpi.mcp23s08Setup(pinBase, spiPort, devId)
mcp23s08Setup = _odroid_wiringpi.mcp23s08Setup

def mcp23s17Setup(pinBase, spiPort, devId):
    return _odroid_wiringpi.mcp23s17Setup(pinBase, spiPort, devId)
mcp23s17Setup = _odroid_wiringpi.mcp23s17Setup

def mcp3002Setup(pinBase, spiChannel):
    return _odroid_wiringpi.mcp3002Setup(pinBase, spiChannel)
mcp3002Setup = _odroid_wiringpi.mcp3002Setup

def mcp3004Setup(pinBase, spiChannel):
    return _odroid_wiringpi.mcp3004Setup(pinBase, spiChannel)
mcp3004Setup = _odroid_wiringpi.mcp3004Setup

def mcp3422Setup(pinBase, i2cAddress, sampleRate, gain):
    return _odroid_wiringpi.mcp3422Setup(pinBase, i2cAddress, sampleRate, gain)
mcp3422Setup = _odroid_wiringpi.mcp3422Setup

def mcp4802Setup(pinBase, spiChannel):
    return _odroid_wiringpi.mcp4802Setup(pinBase, spiChannel)
mcp4802Setup = _odroid_wiringpi.mcp4802Setup

def pcf8574Setup(pinBase, i2cAddress):
    return _odroid_wiringpi.pcf8574Setup(pinBase, i2cAddress)
pcf8574Setup = _odroid_wiringpi.pcf8574Setup

def pcf8591Setup(pinBase, i2cAddress):
    return _odroid_wiringpi.pcf8591Setup(pinBase, i2cAddress)
pcf8591Setup = _odroid_wiringpi.pcf8591Setup

def sn3218Setup(pinBase):
    return _odroid_wiringpi.sn3218Setup(pinBase)
sn3218Setup = _odroid_wiringpi.sn3218Setup

def softPwmCreate(pin, value, range):
    return _odroid_wiringpi.softPwmCreate(pin, value, range)
softPwmCreate = _odroid_wiringpi.softPwmCreate

def softPwmWrite(pin, value):
    return _odroid_wiringpi.softPwmWrite(pin, value)
softPwmWrite = _odroid_wiringpi.softPwmWrite

def softPwmStop(pin):
    return _odroid_wiringpi.softPwmStop(pin)
softPwmStop = _odroid_wiringpi.softPwmStop

def softServoWrite(pin, value):
    return _odroid_wiringpi.softServoWrite(pin, value)
softServoWrite = _odroid_wiringpi.softServoWrite

def softServoSetup(p0, p1, p2, p3, p4, p5, p6, p7):
    return _odroid_wiringpi.softServoSetup(p0, p1, p2, p3, p4, p5, p6, p7)
softServoSetup = _odroid_wiringpi.softServoSetup

def softToneCreate(pin):
    return _odroid_wiringpi.softToneCreate(pin)
softToneCreate = _odroid_wiringpi.softToneCreate

def softToneStop(pin):
    return _odroid_wiringpi.softToneStop(pin)
softToneStop = _odroid_wiringpi.softToneStop

def softToneWrite(pin, freq):
    return _odroid_wiringpi.softToneWrite(pin, freq)
softToneWrite = _odroid_wiringpi.softToneWrite

def sr595Setup(pinBase, numPins, dataPin, clockPin, latchPin):
    return _odroid_wiringpi.sr595Setup(pinBase, numPins, dataPin, clockPin, latchPin)
sr595Setup = _odroid_wiringpi.sr595Setup

def bmp180Setup(pinBase):
    return _odroid_wiringpi.bmp180Setup(pinBase)
bmp180Setup = _odroid_wiringpi.bmp180Setup

def drcSetupNet(pinBase, numPins, ipAddress, port, password):
    return _odroid_wiringpi.drcSetupNet(pinBase, numPins, ipAddress, port, password)
drcSetupNet = _odroid_wiringpi.drcSetupNet

def ds18b20Setup(pinBase, serialNum):
    return _odroid_wiringpi.ds18b20Setup(pinBase, serialNum)
ds18b20Setup = _odroid_wiringpi.ds18b20Setup

def htu21dSetup(pinBase):
    return _odroid_wiringpi.htu21dSetup(pinBase)
htu21dSetup = _odroid_wiringpi.htu21dSetup

def pseudoPinsSetup(pinBase):
    return _odroid_wiringpi.pseudoPinsSetup(pinBase)
pseudoPinsSetup = _odroid_wiringpi.pseudoPinsSetup

def loadWPiExtension(progName, extensionData, verbose):
    return _odroid_wiringpi.loadWPiExtension(progName, extensionData, verbose)
loadWPiExtension = _odroid_wiringpi.loadWPiExtension

def ds1302rtcRead(reg):
    return _odroid_wiringpi.ds1302rtcRead(reg)
ds1302rtcRead = _odroid_wiringpi.ds1302rtcRead

def ds1302rtcWrite(reg, data):
    return _odroid_wiringpi.ds1302rtcWrite(reg, data)
ds1302rtcWrite = _odroid_wiringpi.ds1302rtcWrite

def ds1302ramRead(addr):
    return _odroid_wiringpi.ds1302ramRead(addr)
ds1302ramRead = _odroid_wiringpi.ds1302ramRead

def ds1302ramWrite(addr, data):
    return _odroid_wiringpi.ds1302ramWrite(addr, data)
ds1302ramWrite = _odroid_wiringpi.ds1302ramWrite

def ds1302clockRead(clockData):
    return _odroid_wiringpi.ds1302clockRead(clockData)
ds1302clockRead = _odroid_wiringpi.ds1302clockRead

def ds1302clockWrite(clockData):
    return _odroid_wiringpi.ds1302clockWrite(clockData)
ds1302clockWrite = _odroid_wiringpi.ds1302clockWrite

def ds1302trickleCharge(diodes, resistors):
    return _odroid_wiringpi.ds1302trickleCharge(diodes, resistors)
ds1302trickleCharge = _odroid_wiringpi.ds1302trickleCharge

def ds1302setup(clockPin, dataPin, csPin):
    return _odroid_wiringpi.ds1302setup(clockPin, dataPin, csPin)
ds1302setup = _odroid_wiringpi.ds1302setup

def gertboardAnalogWrite(chan, value):
    return _odroid_wiringpi.gertboardAnalogWrite(chan, value)
gertboardAnalogWrite = _odroid_wiringpi.gertboardAnalogWrite

def gertboardAnalogRead(chan):
    return _odroid_wiringpi.gertboardAnalogRead(chan)
gertboardAnalogRead = _odroid_wiringpi.gertboardAnalogRead

def gertboardSPISetup():
    return _odroid_wiringpi.gertboardSPISetup()
gertboardSPISetup = _odroid_wiringpi.gertboardSPISetup

def gertboardAnalogSetup(pinBase):
    return _odroid_wiringpi.gertboardAnalogSetup(pinBase)
gertboardAnalogSetup = _odroid_wiringpi.gertboardAnalogSetup

def lcd128x64setOrigin(x, y):
    return _odroid_wiringpi.lcd128x64setOrigin(x, y)
lcd128x64setOrigin = _odroid_wiringpi.lcd128x64setOrigin

def lcd128x64setOrientation(orientation):
    return _odroid_wiringpi.lcd128x64setOrientation(orientation)
lcd128x64setOrientation = _odroid_wiringpi.lcd128x64setOrientation

def lcd128x64orientCoordinates(x, y):
    return _odroid_wiringpi.lcd128x64orientCoordinates(x, y)
lcd128x64orientCoordinates = _odroid_wiringpi.lcd128x64orientCoordinates

def lcd128x64getScreenSize(x, y):
    return _odroid_wiringpi.lcd128x64getScreenSize(x, y)
lcd128x64getScreenSize = _odroid_wiringpi.lcd128x64getScreenSize

def lcd128x64point(x, y, colour):
    return _odroid_wiringpi.lcd128x64point(x, y, colour)
lcd128x64point = _odroid_wiringpi.lcd128x64point

def lcd128x64line(x0, y0, x1, y1, colour):
    return _odroid_wiringpi.lcd128x64line(x0, y0, x1, y1, colour)
lcd128x64line = _odroid_wiringpi.lcd128x64line

def lcd128x64lineTo(x, y, colour):
    return _odroid_wiringpi.lcd128x64lineTo(x, y, colour)
lcd128x64lineTo = _odroid_wiringpi.lcd128x64lineTo

def lcd128x64rectangle(x1, y1, x2, y2, colour, filled):
    return _odroid_wiringpi.lcd128x64rectangle(x1, y1, x2, y2, colour, filled)
lcd128x64rectangle = _odroid_wiringpi.lcd128x64rectangle

def lcd128x64circle(x, y, r, colour, filled):
    return _odroid_wiringpi.lcd128x64circle(x, y, r, colour, filled)
lcd128x64circle = _odroid_wiringpi.lcd128x64circle

def lcd128x64ellipse(cx, cy, xRadius, yRadius, colour, filled):
    return _odroid_wiringpi.lcd128x64ellipse(cx, cy, xRadius, yRadius, colour, filled)
lcd128x64ellipse = _odroid_wiringpi.lcd128x64ellipse

def lcd128x64putchar(x, y, c, bgCol, fgCol):
    return _odroid_wiringpi.lcd128x64putchar(x, y, c, bgCol, fgCol)
lcd128x64putchar = _odroid_wiringpi.lcd128x64putchar

def lcd128x64puts(x, y, str, bgCol, fgCol):
    return _odroid_wiringpi.lcd128x64puts(x, y, str, bgCol, fgCol)
lcd128x64puts = _odroid_wiringpi.lcd128x64puts

def lcd128x64update():
    return _odroid_wiringpi.lcd128x64update()
lcd128x64update = _odroid_wiringpi.lcd128x64update

def lcd128x64clear(colour):
    return _odroid_wiringpi.lcd128x64clear(colour)
lcd128x64clear = _odroid_wiringpi.lcd128x64clear

def lcd128x64setup():
    return _odroid_wiringpi.lcd128x64setup()
lcd128x64setup = _odroid_wiringpi.lcd128x64setup

def lcdHome(fd):
    return _odroid_wiringpi.lcdHome(fd)
lcdHome = _odroid_wiringpi.lcdHome

def lcdClear(fd):
    return _odroid_wiringpi.lcdClear(fd)
lcdClear = _odroid_wiringpi.lcdClear

def lcdDisplay(fd, state):
    return _odroid_wiringpi.lcdDisplay(fd, state)
lcdDisplay = _odroid_wiringpi.lcdDisplay

def lcdCursor(fd, state):
    return _odroid_wiringpi.lcdCursor(fd, state)
lcdCursor = _odroid_wiringpi.lcdCursor

def lcdCursorBlink(fd, state):
    return _odroid_wiringpi.lcdCursorBlink(fd, state)
lcdCursorBlink = _odroid_wiringpi.lcdCursorBlink

def lcdSendCommand(fd, command):
    return _odroid_wiringpi.lcdSendCommand(fd, command)
lcdSendCommand = _odroid_wiringpi.lcdSendCommand

def lcdPosition(fd, x, y):
    return _odroid_wiringpi.lcdPosition(fd, x, y)
lcdPosition = _odroid_wiringpi.lcdPosition

def lcdCharDef(fd, index, data):
    return _odroid_wiringpi.lcdCharDef(fd, index, data)
lcdCharDef = _odroid_wiringpi.lcdCharDef

def lcdPutchar(fd, data):
    return _odroid_wiringpi.lcdPutchar(fd, data)
lcdPutchar = _odroid_wiringpi.lcdPutchar

def lcdPuts(fd, string):
    return _odroid_wiringpi.lcdPuts(fd, string)
lcdPuts = _odroid_wiringpi.lcdPuts

def lcdPrintf(fd, message):
    return _odroid_wiringpi.lcdPrintf(fd, message)
lcdPrintf = _odroid_wiringpi.lcdPrintf

def lcdInit(rows, cols, bits, rs, strb, d0, d1, d2, d3, d4, d5, d6, d7):
    return _odroid_wiringpi.lcdInit(rows, cols, bits, rs, strb, d0, d1, d2, d3, d4, d5, d6, d7)
lcdInit = _odroid_wiringpi.lcdInit

def maxDetectRead(pin, buffer):
    return _odroid_wiringpi.maxDetectRead(pin, buffer)
maxDetectRead = _odroid_wiringpi.maxDetectRead

def readRHT03(pin, temp, rh):
    return _odroid_wiringpi.readRHT03(pin, temp, rh)
readRHT03 = _odroid_wiringpi.readRHT03

def piGlow1(leg, ring, intensity):
    return _odroid_wiringpi.piGlow1(leg, ring, intensity)
piGlow1 = _odroid_wiringpi.piGlow1

def piGlowLeg(leg, intensity):
    return _odroid_wiringpi.piGlowLeg(leg, intensity)
piGlowLeg = _odroid_wiringpi.piGlowLeg

def piGlowRing(ring, intensity):
    return _odroid_wiringpi.piGlowRing(ring, intensity)
piGlowRing = _odroid_wiringpi.piGlowRing

def piGlowSetup(clear):
    return _odroid_wiringpi.piGlowSetup(clear)
piGlowSetup = _odroid_wiringpi.piGlowSetup

def setupNesJoystick(dPin, cPin, lPin):
    return _odroid_wiringpi.setupNesJoystick(dPin, cPin, lPin)
setupNesJoystick = _odroid_wiringpi.setupNesJoystick

def readNesJoystick(joystick):
    return _odroid_wiringpi.readNesJoystick(joystick)
readNesJoystick = _odroid_wiringpi.readNesJoystick

def scrollPhatPoint(x, y, colour):
    return _odroid_wiringpi.scrollPhatPoint(x, y, colour)
scrollPhatPoint = _odroid_wiringpi.scrollPhatPoint

def scrollPhatLine(x0, y0, x1, y1, colour):
    return _odroid_wiringpi.scrollPhatLine(x0, y0, x1, y1, colour)
scrollPhatLine = _odroid_wiringpi.scrollPhatLine

def scrollPhatLineTo(x, y, colour):
    return _odroid_wiringpi.scrollPhatLineTo(x, y, colour)
scrollPhatLineTo = _odroid_wiringpi.scrollPhatLineTo

def scrollPhatRectangle(x1, y1, x2, y2, colour, filled):
    return _odroid_wiringpi.scrollPhatRectangle(x1, y1, x2, y2, colour, filled)
scrollPhatRectangle = _odroid_wiringpi.scrollPhatRectangle

def scrollPhatUpdate():
    return _odroid_wiringpi.scrollPhatUpdate()
scrollPhatUpdate = _odroid_wiringpi.scrollPhatUpdate

def scrollPhatClear():
    return _odroid_wiringpi.scrollPhatClear()
scrollPhatClear = _odroid_wiringpi.scrollPhatClear

def scrollPhatPutchar(c):
    return _odroid_wiringpi.scrollPhatPutchar(c)
scrollPhatPutchar = _odroid_wiringpi.scrollPhatPutchar

def scrollPhatPuts(str):
    return _odroid_wiringpi.scrollPhatPuts(str)
scrollPhatPuts = _odroid_wiringpi.scrollPhatPuts

def scrollPhatPrintf(message):
    return _odroid_wiringpi.scrollPhatPrintf(message)
scrollPhatPrintf = _odroid_wiringpi.scrollPhatPrintf

def scrollPhatPrintSpeed(cps10):
    return _odroid_wiringpi.scrollPhatPrintSpeed(cps10)
scrollPhatPrintSpeed = _odroid_wiringpi.scrollPhatPrintSpeed

def scrollPhatIntensity(percent):
    return _odroid_wiringpi.scrollPhatIntensity(percent)
scrollPhatIntensity = _odroid_wiringpi.scrollPhatIntensity

def scrollPhatSetup():
    return _odroid_wiringpi.scrollPhatSetup()
scrollPhatSetup = _odroid_wiringpi.scrollPhatSetup

def piFaceSetup(pinBase):
    return _odroid_wiringpi.piFaceSetup(pinBase)
piFaceSetup = _odroid_wiringpi.piFaceSetup

# wiringPi modes

WPI_MODE_PINS = 0;
WPI_MODE_GPIO = 1;
WPI_MODE_GPIO_SYS = 2;
WPI_MODE_PHYS = 3;
WPI_MODE_PIFACE = 4;
WPI_MODE_UNINITIALISED = -1;

# Pin modes

INPUT = 0;
OUTPUT = 1;
INPUT_PULLUP = 2;
INPUT_PULLDOWN = 3;
PWM_OUTPUT = 4;
GPIO_CLOCK = 5;
SOFT_PWM_OUTPUT = 6;
SOFT_TONE_OUTPUT = 7;
PWM_TONE_OUTPUT = 8;

LOW = 0;
HIGH = 1;

# Pull up/down/none

PUD_OFF = 0;
PUD_DOWN = 1;
PUD_UP = 2;

# PWM

PWM_MODE_MS = 0;
PWM_MODE_BAL = 1;

# Interrupt levels

INT_EDGE_SETUP = 0;
INT_EDGE_FALLING = 1;
INT_EDGE_RISING = 2;
INT_EDGE_BOTH = 3;

# Shifting (from wiringShift.h)

LSBFIRST = 0;
MSBFIRST = 1;



class nes(object):
  def setupNesJoystick(self,*args):
    return setupNesJoystick(*args)
  def readNesJoystick(self,*args):
    return readNesJoystick(*args)

class Serial(object):
  device = '/dev/ttyAMA0'
  baud = 9600
  serial_id = 0
  def printf(self,*args):
    return serialPrintf(self.serial_id,*args)
  def dataAvail(self,*args):
    return serialDataAvail(self.serial_id,*args)
  def getchar(self,*args):
    return serialGetchar(self.serial_id,*args)
  def putchar(self,*args):
    return serialPutchar(self.serial_id,*args)
  def puts(self,*args):
    return serialPuts(self.serial_id,*args)
  def __init__(self,device,baud):
    self.device = device
    self.baud = baud
    self.serial_id = serialOpen(self.device,self.baud)
  def __del__(self):
    serialClose(self.serial_id)

class I2C(object):
  def setupInterface(self,*args):
  	return wiringPiI2CSetupInterface(*args)
  def setup(self,*args):
    return wiringPiI2CSetup(*args)
  def read(self,*args):
    return wiringPiI2CRead(*args)
  def readReg8(self,*args):
    return wiringPiI2CReadReg8(*args)
  def readReg16(self,*args):
    return wiringPiI2CReadReg16(*args)
  def readBlock(self,*args):
    return wiringPiI2CReadBlock(*args)
  def write(self,*args):
    return wiringPiI2CWrite(*args)
  def writeReg8(self,*args):
    return wiringPiI2CWriteReg8(*args)
  def writeReg16(self,*args):
    return wiringPiI2CWriteReg16(*args)
  def writeBlock(self,*args):
    return wiringPiI2CWriteBlock(*args)

class GPIO(object):
  WPI_MODE_PINS = 0
  WPI_MODE_GPIO = 1
  WPI_MODE_GPIO_SYS = 2
  WPI_MODE_PHYS = 3
  WPI_MODE_PIFACE = 4
  WPI_MODE_UNINITIALISED = -1

  INPUT = 0
  OUTPUT = 1
  PWM_OUTPUT = 2
  GPIO_CLOCK = 3

  LOW = 0
  HIGH = 1

  PUD_OFF = 0
  PUD_DOWN = 1
  PUD_UP = 2

  PWM_MODE_MS = 0
  PWM_MODE_BAL = 1

  INT_EDGE_SETUP = 0
  INT_EDGE_FALLING = 1
  INT_EDGE_RISING = 2
  INT_EDGE_BOTH = 3

  LSBFIRST = 0
  MSBFIRST = 1

  MODE = 0
  def __init__(self,pinmode=0):
    self.MODE=pinmode
    if pinmode==self.WPI_MODE_PINS:
      wiringPiSetup()
    if pinmode==self.WPI_MODE_GPIO:
      wiringPiSetupGpio()
    if pinmode==self.WPI_MODE_GPIO_SYS:
      wiringPiSetupSys()
    if pinmode==self.WPI_MODE_PHYS:
      wiringPiSetupPhys()
    if pinmode==self.WPI_MODE_PIFACE:
      wiringPiSetupPiFace()

  def delay(self,*args):
    delay(*args)
  def delayMicroseconds(self,*args):
    delayMicroseconds(*args)
  def millis(self):
    return millis()
  def micros(self):
    return micros()

  def piHiPri(self,*args):
    return piHiPri(*args)

  def piBoardRev(self):
    return piBoardRev()
  def wpiPinToGpio(self,*args):
    return wpiPinToGpio(*args)
  def getAlt(self,*args):
    return getAlt(*args)
  def digitalWriteByte(self,*args):
    return digitalWriteByte(*args)

  def setPadDrive(self,*args):
    return setPadDrive(*args)
  def getPadDrive(self,*args):
    return getPadDrive(*args)
  def getPUPD(self,*args):
    return getPUPD(*args)

  def pwmSetMode(self,*args):
    pwmSetMode(*args)
  def pwmSetRange(self,*args):
    pwmSetRange(*args)
  def pwmSetClock(self,*args):
    pwmSetClock(*args)
  def gpioClockSet(self,*args):
    gpioClockSet(*args)
  def pwmWrite(self,*args):
    pwmWrite(*args)

  def pinMode(self,*args):
    pinMode(*args)

  def digitalWrite(self,*args):
    digitalWrite(*args)
  def digitalRead(self,*args):
    return digitalRead(*args)
  def digitalWriteByte(self,*args):
    digitalWriteByte(*args)

  def analogWrite(self,*args):
    analogWrite(*args)
  def analogRead(self,*args):
    return analogRead(*args)

  def shiftOut(self,*args):
    shiftOut(*args)
  def shiftIn(self,*args):
    return shiftIn(*args)

  def pullUpDnControl(self,*args):
    return pullUpDnControl(*args)

  def waitForInterrupt(self,*args):
    return waitForInterrupt(*args)
  def wiringPiISR(self,*args):
    return wiringPiISR(*args)

  def softPwmCreate(self,*args):
    return softPwmCreate(*args)
  def softPwmWrite(self,*args):
    return softPwmWrite(*args)

  def softToneCreate(self,*args):
    return softToneCreate(*args)
  def softToneWrite(self,*args):
    return softToneWrite(*args)

  def lcdHome(self,*args):
    return lcdHome(self,*args)
  def lcdCLear(self,*args):
    return lcdClear(self,*args)
  def lcdSendCommand(self,*args):
    return lcdSendCommand(self,*args)
  def lcdPosition(self,*args):
    return lcdPosition(self,*args)
  def lcdPutchar(self,*args):
    return lcdPutchar(self,*args)
  def lcdPuts(self,*args):
    return lcdPuts(self,*args)
  def lcdPrintf(self,*args):
    return lcdPrintf(self,*args)
  def lcdInit(self,*args):
    return lcdInit(self,*args)
  def piGlowSetup(self,*args):
    return piGlowSetup(self,*args)
  def piGlow1(self,*args):
    return piGlow1(self,*args)
  def piGlowLeg(self,*args):
    return piGlowLeg(self,*args)
  def piGlowRing(self,*args):
    return piGlowRing(self,*args)

# This file is compatible with both classic and new-style classes.


