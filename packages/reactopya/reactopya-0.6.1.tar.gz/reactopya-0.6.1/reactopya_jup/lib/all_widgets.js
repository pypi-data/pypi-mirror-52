////////////////////////////////////////////////////////////////////
// This file is automatically generated
// Do not edit manually
////////////////////////////////////////////////////////////////////

var widgets = require('@jupyter-widgets/base');
var _ = require('lodash');
const version = require('../package.json').version;

class ReactopyaWidgetModel extends widgets.DOMWidgetModel {
    initialize(attributes, options) {
        super.initialize(attributes, options);
        let that = this;
        
        this.listenTo(this, 'msg:custom', _.bind(this.handleMessage, this));
        this.javaScriptPythonStateModel = new JavaScriptPythonStateModel();
        this.javaScriptPythonStateModel.onJavaScriptStateChanged(function(state) {
            that.send({
                name: 'setJavaScriptState',
                child_indices: [],
                state: state
            });
        });
        this.on('change:_children', function() {
            that.initialize_children();
        });
    }
    initialize_children() {
        this.children = JSON.parse(JSON.stringify((this.get('_children') || {}).children || []));
        this.add_jsp_models_to_children(this.children, []);
    }
    add_jsp_models_to_children(children, child_indices) {
        let that = this;
        for (let i in children) {
            (function(ich) {
                let ch = children[ich];
                let child_indices2 = JSON.parse(JSON.stringify(child_indices));
                child_indices2.push(+ich);
                ch.props = ch.props || {};
                ch.props.javaScriptPythonStateModel = new JavaScriptPythonStateModel();
                ch.props.javaScriptPythonStateModel.onJavaScriptStateChanged(function(state) {
                    that.send({
                        name: 'setJavaScriptState',
                        child_indices: child_indices2,
                        state: state
                    });
                })
                that.add_jsp_models_to_children(ch.children || [], child_indices2);
            })(i);
        }
    }
    handleMessage(content) {
        const name = content.name;
        if (name == 'setPythonState') {
            let state = content.state;
            let child_indices = content.child_indices || [];
            if (child_indices.length === 0) {
                this.javaScriptPythonStateModel.setPythonState(state);    
            }
            else {
                let ptr = this;
                for (let ind of child_indices) {
                    ptr = ptr.children[ind];
                }
                ptr.props.javaScriptPythonStateModel.setPythonState(state);
            }
        }
        else {
            console.error(`Unregognized message in Model: ${name}`);
        }
    }
    defaults() {
        return _.extend(widgets.DOMWidgetModel.prototype.defaults(), {
            _model_name : 'ReactopyaWidgetModel',
            _view_name : 'ReactopyaWidgetView',
            _model_module : 'reactopya_jup',
            _view_module : 'reactopya_jup',
            _model_module_version : version,
            _view_module_version : version,

            _project_name: 'unknown',
            _type: 'unknown',
            _props: {},
            _children: {}
        });
    }
}

// Custom View. Renders the widget model.
class ReactopyaWidgetView extends widgets.DOMWidgetView {
    initialize(parameters) {
        super.initialize(parameters);
    }
    render() {
        this.div=document.createElement('div');
        this.el.appendChild(this.div);

        const project_name = this.model.get('_project_name');
        const type = this.model.get('_type');
        let props = this.model.get('_props');
        let key = this.model.get('_key')
        
        props.javaScriptPythonStateModel = this.model.javaScriptPythonStateModel;
        
        window.reactopya.widgets[project_name][type].render(this.div, this.model.children, props, key || undefined);
    }
}

class JavaScriptPythonStateModel {
    constructor() {
        this._pythonStateStringified = {};
        this._javaScriptStateStringified = {};
        this._pythonStateChangedHandlers = [];
        this._javaScriptStateChangedHandlers = [];
    }
    setPythonState(state) {
        this._setStateHelper(state, this._pythonStateStringified, this._pythonStateChangedHandlers);
    }
    setJavaScriptState(state) {
        this._setStateHelper(state, this._javaScriptStateStringified, this._javaScriptStateChangedHandlers);
    }
    onPythonStateChanged(handler) {
        this._pythonStateChangedHandlers.push(handler);
    }
    onJavaScriptStateChanged(handler) {
        this._javaScriptStateChangedHandlers.push(handler);
    }
    _setStateHelper(state, existingStateStringified, handlers) {
        let changedState = {};
        let somethingChanged = false;
        for (let key in state) {
            let val = state[key];
            let valstr = JSON.stringify(val);
            if (valstr !== existingStateStringified[key]) {
                existingStateStringified[key] = val;
                changedState[key] = JSON.parse(valstr);
                somethingChanged = true;
            }
        }
        if (somethingChanged) {
            for (let handler of handlers) {
                handler(changedState);
            }
        }
    }
}

module.exports = {
    ReactopyaWidgetModel: ReactopyaWidgetModel,
    ReactopyaWidgetView: ReactopyaWidgetView
};