# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import hawking_proto.hawking_pb2 as hawking__pb2


class IndexStub(object):
  """Interface for service to index documents.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Post = channel.unary_unary(
        '/hawking.Index/Post',
        request_serializer=hawking__pb2.IndexRequest.SerializeToString,
        response_deserializer=hawking__pb2.IndexResponse.FromString,
        )


class IndexServicer(object):
  """Interface for service to index documents.
  """

  def Post(self, request, context):
    """option (google.api.http) = {
    post: "/v1/post"
    body: "*"
    };
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_IndexServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Post': grpc.unary_unary_rpc_method_handler(
          servicer.Post,
          request_deserializer=hawking__pb2.IndexRequest.FromString,
          response_serializer=hawking__pb2.IndexResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'hawking.Index', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class QueueStub(object):
  """Interface for queue service.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Poll = channel.unary_stream(
        '/hawking.Queue/Poll',
        request_serializer=hawking__pb2.PollRequest.SerializeToString,
        response_deserializer=hawking__pb2.PollResponse.FromString,
        )


class QueueServicer(object):
  """Interface for queue service.
  """

  def Poll(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_QueueServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Poll': grpc.unary_stream_rpc_method_handler(
          servicer.Poll,
          request_deserializer=hawking__pb2.PollRequest.FromString,
          response_serializer=hawking__pb2.PollResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'hawking.Queue', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class ExtractorStub(object):
  """Service interface to extract features/embeddings from text
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Parse = channel.unary_unary(
        '/hawking.Extractor/Parse',
        request_serializer=hawking__pb2.ExtractorRequest.SerializeToString,
        response_deserializer=hawking__pb2.ExtractorResponse.FromString,
        )


class ExtractorServicer(object):
  """Service interface to extract features/embeddings from text
  """

  def Parse(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ExtractorServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Parse': grpc.unary_unary_rpc_method_handler(
          servicer.Parse,
          request_deserializer=hawking__pb2.ExtractorRequest.FromString,
          response_serializer=hawking__pb2.ExtractorResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'hawking.Extractor', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class SearchStub(object):
  """Interface for service to search documents.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Get = channel.unary_unary(
        '/hawking.Search/Get',
        request_serializer=hawking__pb2.SearchRequest.SerializeToString,
        response_deserializer=hawking__pb2.SearchResponse.FromString,
        )


class SearchServicer(object):
  """Interface for service to search documents.
  """

  def Get(self, request, context):
    """option (google.api.http) = {
    get: "/v1/search"
    body: "*"
    };
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_SearchServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Get': grpc.unary_unary_rpc_method_handler(
          servicer.Get,
          request_deserializer=hawking__pb2.SearchRequest.FromString,
          response_serializer=hawking__pb2.SearchResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'hawking.Search', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class CaptionStub(object):
  """Interface for service to generate snippet.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Get = channel.unary_unary(
        '/hawking.Caption/Get',
        request_serializer=hawking__pb2.SnippetRequest.SerializeToString,
        response_deserializer=hawking__pb2.SnippetResponse.FromString,
        )


class CaptionServicer(object):
  """Interface for service to generate snippet.
  """

  def Get(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_CaptionServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Get': grpc.unary_unary_rpc_method_handler(
          servicer.Get,
          request_deserializer=hawking__pb2.SnippetRequest.FromString,
          response_serializer=hawking__pb2.SnippetResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'hawking.Caption', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class StoreStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Put = channel.unary_unary(
        '/hawking.Store/Put',
        request_serializer=hawking__pb2.StorePutRequest.SerializeToString,
        response_deserializer=hawking__pb2.StorePutResponse.FromString,
        )
    self.Get = channel.unary_unary(
        '/hawking.Store/Get',
        request_serializer=hawking__pb2.StoreGetRequest.SerializeToString,
        response_deserializer=hawking__pb2.StoreGetResponse.FromString,
        )


class StoreServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Put(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Get(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_StoreServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Put': grpc.unary_unary_rpc_method_handler(
          servicer.Put,
          request_deserializer=hawking__pb2.StorePutRequest.FromString,
          response_serializer=hawking__pb2.StorePutResponse.SerializeToString,
      ),
      'Get': grpc.unary_unary_rpc_method_handler(
          servicer.Get,
          request_deserializer=hawking__pb2.StoreGetRequest.FromString,
          response_serializer=hawking__pb2.StoreGetResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'hawking.Store', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
