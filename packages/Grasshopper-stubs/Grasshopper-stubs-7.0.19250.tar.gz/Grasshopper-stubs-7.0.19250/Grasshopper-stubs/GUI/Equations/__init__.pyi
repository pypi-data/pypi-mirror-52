from typing import Tuple, Set, Iterable, List


class IGH_EquationFragment:
    @property
    def Pivot(self) -> PointF: ...
    @Pivot.setter
    def Pivot(self, Value: PointF) -> None: ...
    @property
    def Size(self) -> SizeF: ...
    @property
    def Bounds(self) -> RectangleF: ...
    @property
    def Icon(self) -> Bitmap: ...
    @property
    def Name(self) -> str: ...
    @property
    def Description(self) -> str: ...
    def Layout(self, font: Font) -> bool: ...
    def Position(self, location: PointF) -> bool: ...
    def ToExpression(self) -> str: ...
    def Render(self, graphics: Graphics, font: Font, colour: Color) -> None: ...


class GH_EquationFragment:
    @property
    def Icon(self) -> Bitmap: ...
    @property
    def Name(self) -> str: ...
    @property
    def Description(self) -> str: ...
    @property
    def Pivot(self) -> PointF: ...
    @Pivot.setter
    def Pivot(self, Value: PointF) -> None: ...
    @property
    def Size(self) -> SizeF: ...
    @property
    def Bounds(self) -> RectangleF: ...
    def Layout(self, font: Font) -> bool: ...
    def Position(self, location: PointF) -> bool: ...
    def Render(self, graphics: Graphics, font: Font, colour: Color) -> None: ...
    def ToExpression(self) -> str: ...


class GH_TextFragment(GH_EquationFragment):
    def __init__(self): ...
    @property
    def Name(self) -> str: ...
    @property
    def Description(self) -> str: ...
    @property
    def Text(self) -> str: ...
    @Text.setter
    def Text(self, Value: str) -> None: ...
    def Layout(self, font: Font) -> bool: ...
    def Position(self, location: PointF) -> bool: ...
    def Render(self, graphics: Graphics, font: Font, colour: Color) -> None: ...
    def ToExpression(self) -> str: ...


class GH_SequenceFragment(GH_EquationFragment):
    def __init__(self): ...
    @property
    def Name(self) -> str: ...
    @property
    def Description(self) -> str: ...
    @property
    def Fragments(self) -> List: ...
    def Layout(self, font: Font) -> bool: ...
    def Position(self, location: PointF) -> bool: ...
    def Render(self, graphics: Graphics, font: Font, colour: Color) -> None: ...
    def ToExpression(self) -> str: ...
