from typing import Tuple, Set, Iterable, List


class GH_TimeLine(GH_DoubleBufferedPanel):
    def __init__(self): ...
    def add_FileSelected(self, obj: FileSelectedEventHandler) -> None: ...
    def remove_FileSelected(self, obj: FileSelectedEventHandler) -> None: ...
    @overload
    def SetupTimeline(self) -> None: ...
    @overload
    def SetupTimeline(self, entries: Iterable[GH_MRU_Entry]) -> None: ...
    @property
    def ActiveEntry(self) -> GH_FileEntry: ...
    @ActiveEntry.setter
    def ActiveEntry(self, Value: GH_FileEntry) -> None: ...
    @property
    def Offset(self) -> int: ...


class GH_TimeSpan:
    def __init__(self, owner: GH_TimeLine): ...
    @property
    def SpanStart(self) -> DateTime: ...
    @SpanStart.setter
    def SpanStart(self, Value: DateTime) -> None: ...
    @property
    def SpanEnd(self) -> DateTime: ...
    @SpanEnd.setter
    def SpanEnd(self, Value: DateTime) -> None: ...
    @property
    def SpanText(self) -> str: ...
    @SpanText.setter
    def SpanText(self, Value: str) -> None: ...
    @property
    def Bounds(self) -> Rectangle: ...
    @Bounds.setter
    def Bounds(self, Value: Rectangle) -> None: ...
    @property
    def Entries(self) -> List: ...
    def ContainsDate(self, d: DateTime) -> bool: ...
    def Layout(self, y: int, width: int) -> None: ...
    def LayoutWidth(self, width: int) -> None: ...
    def PaintSpan(self, graphics: Graphics) -> None: ...


class GH_FileResolveState:
    Unresolved = 0
    Invalid = 1
    Valid = 2


class GH_FileEntry:
    def __init__(self, owner: GH_TimeLine, path: str, date: DateTime, name: str): ...
    @property
    def FilePath(self) -> str: ...
    @property
    def FileDate(self) -> DateTime: ...
    @property
    def FileName(self) -> str: ...
    @property
    def Icon(self) -> Bitmap: ...
    @property
    def ResolvedState(self) -> GH_FileResolveState: ...
    @property
    def Bounds(self) -> Rectangle: ...
    @Bounds.setter
    def Bounds(self, Value: Rectangle) -> None: ...
    def LayoutWidth(self, width: int) -> None: ...
    def ResolveFileState(self) -> None: ...
    def PaintEntry(self, graphics: Graphics) -> None: ...
    def CompareTo(self, other: GH_FileEntry) -> int: ...


class GH_MRU_Entry:
    def __init__(self, new_date: DateTime, new_path: str): ...
    @property
    def FileDate(self) -> DateTime: ...
    @FileDate.setter
    def FileDate(self, Value: DateTime) -> None: ...
    @property
    def FilePath(self) -> str: ...
    @FilePath.setter
    def FilePath(self, Value: str) -> None: ...
    @property
    def FileName(self) -> str: ...
    @FileName.setter
    def FileName(self, Value: str) -> None: ...
    def CompareTo(self, other: GH_MRU_Entry) -> int: ...


class GH_MRU_Server:
    def __init__(self): ...
    def WriteList(self) -> None: ...
    def ReadList(self) -> None: ...
    def Clear(self) -> None: ...
    def ClearMissingRecords(self) -> None: ...
    @property
    def Records(self) -> List: ...
    @property
    def RecordCount(self) -> int: ...
    def AppendRecentFileRecord(self, new_date: DateTime, new_path: str) -> None: ...
    @property
    def VisibleRecords() -> int: ...
    @VisibleRecords.setter
    def VisibleRecords(Value: int) -> None: ...
    def add_VisibleRecordCountChanged(obj: VisibleRecordCountChangedEventHandler) -> None: ...
    def remove_VisibleRecordCountChanged(obj: VisibleRecordCountChangedEventHandler) -> None: ...
    def add_MRURecordCountChanged(obj: MRURecordCountChangedEventHandler) -> None: ...
    def remove_MRURecordCountChanged(obj: MRURecordCountChangedEventHandler) -> None: ...


class FileSelectedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: GH_TimeLine, path: str, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: GH_TimeLine, path: str) -> None: ...


class VisibleRecordCountChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, newCount: int, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, newCount: int) -> None: ...


class MRURecordCountChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, server: GH_MRU_Server, count: int, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, server: GH_MRU_Server, count: int) -> None: ...
