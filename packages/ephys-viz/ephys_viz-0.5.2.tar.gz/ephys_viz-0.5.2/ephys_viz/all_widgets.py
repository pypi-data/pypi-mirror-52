####################################################################
# This file is automatically generated
# Do not edit manually
####################################################################

import base64
import os
from .reactopyacolabwidget import ReactopyaColabWidget
from .reactopyaelectronwidget import ReactopyaElectronWidget
from .init import _get_init_info

from .widgets import PlaceField as PlaceFieldOrig
from .widgets import Accordion as AccordionOrig
from .widgets import Autocorrelograms as AutocorrelogramsOrig
from .widgets import NWBView as NWBViewOrig
from .widgets import VBox as VBoxOrig
from .widgets import NWBBrowser as NWBBrowserOrig
from .widgets import HBox as HBoxOrig
from .widgets import ElectrodeGeometry as ElectrodeGeometryOrig
from .widgets import Surface3d as Surface3dOrig
from .widgets import TimeseriesView as TimeseriesViewOrig
from .widgets import SpikeForestAnalysis as SpikeForestAnalysisOrig
from .widgets import Tabs as TabsOrig
from .widgets import CorticalSurface as CorticalSurfaceOrig



class PlaceField:
    """Jupyter widget for PlaceField"""

    def __init__(self, *args, **kwargs):
        super().__init__()
        self._props = dict(**kwargs)
        self._children = list(args)
        self._component = PlaceFieldOrig()
        self._component.on_python_state_changed(
            lambda state: self._handle_python_state_changed(state, []))
        self._connect_children(self._children, [])
        self._reactopya_widget = None
        self._javascript_state = dict()  # for snapshot
        self._python_state = dict()  # for snapshot
        self._component.init_jupyter()

    def _connect_children(self, children, child_indices):
        for i, ch in enumerate(children):
            self._connect_child(ch, child_indices + [i])
            self._connect_children(ch._children, child_indices + [i])

    def _connect_child(self, child, child_indices):
        child._component.on_python_state_changed(
            lambda state: self._handle_python_state_changed(state, child_indices))

    def _handle_python_state_changed(self, state, child_indices):
        ptr = self
        for ind in child_indices:
            ptr = ptr._children[ind]
        for key, val in state.items():
            ptr._python_state[key] = val  # for snapshot
        if self._reactopya_widget:
            self._reactopya_widget.set_python_state(state, child_indices)

    def _handle_javascript_state_changed(self, state, child_indices):
        ptr = self
        for ind in child_indices:
            ptr = ptr._children[ind]
        for key, val in state.items():
            ptr._javascript_state[key] = val  # for snapshot
        ptr._component._handle_javascript_state_changed(state)

    def _serialize(self, include_javascript_state=False, include_python_state=False, include_bundle_fname=False):
        obj = dict(
            project_name='ephys_viz',
            type='PlaceField',
            children=[
                ch._serialize(include_javascript_state=include_javascript_state,
                              include_python_state=include_python_state, include_bundle_fname=include_bundle_fname)
                for ch in self._children
            ],
            props=_json_serialize(self._props)
        )
        if include_javascript_state:
            obj['javascript_state'] = _json_serialize(self._javascript_state)
        if include_python_state:
            obj['python_state'] = _json_serialize(self._python_state)
        if include_bundle_fname:
            dirname = os.path.dirname(os.path.realpath(__file__))
            obj['bundle_fname'] = os.path.join(dirname, 'dist', 'bundle.js')

        return obj

    def _reactopya_widget(self):
        return self._reactopya_widget

    def show(self):
        init_info = _get_init_info()
        if init_info['mode'] == 'jupyter':
            from reactopya_jup import ReactopyaWidget as ReactopyaJupyterWidget
            RW = ReactopyaJupyterWidget
        elif init_info['mode'] == 'colab':
            RW = ReactopyaColabWidget
        elif init_info['mode'] == 'electron':
            RW = ReactopyaElectronWidget
        self._reactopya_widget = RW(
            project_name='ephys_viz',
            type='PlaceField',
            children=[
                ch._serialize()
                for ch in self._children
            ],
            props=self._props
        )
        if init_info['mode'] == 'colab':
            self._reactopya_widget._set_bundle_js(
                init_info['bundle_js'], store_bundle_in_notebook=init_info['store_bundle_in_notebook'])
        elif init_info['mode'] == 'electron':
            self._reactopya_widget._set_bundle_fname(init_info['bundle_fname'])
            self._reactopya_widget._set_electron_src(init_info['electron_src'])
        self._reactopya_widget.on_javascript_state_changed(
            self._handle_javascript_state_changed)

        self._reactopya_widget.show()

    def export_snapshot(self, output_fname, *, format):
        import simplejson
        if format is not 'html':
            raise Exception('Unsupported format: {}'.format(format))
        serialized_widget = self._serialize(
            include_javascript_state=True, include_python_state=True, include_bundle_fname=True)
        project_names = _get_all_project_names(serialized_widget)
        project_bundle_fnames = _get_project_bundle_fnames(serialized_widget)
        snapshot = dict(
            serialized_widget=serialized_widget,
            project_names=project_names,
            project_bundles=[_read_text_file(
                project_bundle_fnames[project_name]) for project_name in project_names]
        )

        html = '''
<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8" />

    <!-- Disable caching by browser -->
    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">
    <meta http-equiv="Pragma" content="no-cache">
    <meta http-equiv="Expires" content="0">

    <title></title>

    <style>
        body {
            font-family: sans-serif;
            margin: 0;
            padding: 0;
        }

        #root {
            height: 100vh;
            width: 100vw;

            display: flex;
            flex-direction: column;
            overflow: auto;

            /* background: #b8c1c3; */
        }
        .main-container-column {
            display: flex;
            flex-direction: column;
            height: calc(100vh - 180px);
        }
    </style>
</head>

<body>
    <script type="text/javascript">

        var snapshot = get_snapshot_json_b64();
        snapshot = JSON.parse(atob(snapshot));
        for (let js of snapshot.project_bundles) {
            eval(js);
        }
        window.snapshot=snapshot;

        var sw = snapshot.serialized_widget;
        set_init_state_on_props(sw);

        window.reactopya.disable_python_backend = true;

        var div = document.createElement('div');
        div.id = 'root';
        document.body.appendChild(div);
        window.reactopya.widgets[sw.project_name][sw.type].render(div, sw.children, sw.props, sw.key || '');

        function set_init_state_on_props(serialized_widget) {
            let init_state = {};
            for (let key in serialized_widget.javascript_state) {
                init_state[key] = serialized_widget.javascript_state[key];
            }
            for (let key in serialized_widget.python_state) {
                init_state[key] = serialized_widget.python_state[key];
            }
            serialized_widget.props.reactopya_init_state = init_state;
            for (let child of serialized_widget.children) {
                set_init_state_on_props(child);
            }
        }

        function get_snapshot_json_b64() {
            return "[snapshot_json_b64]";
        }

    </script>
</body>

</html>
        '''
        html = html.replace('[snapshot_json_b64]', base64.b64encode(simplejson.dumps(snapshot, ignore_nan=True).encode('utf-8')).decode())
        with open(output_fname, 'w') as f:
            f.write(html)


class Accordion:
    """Jupyter widget for Accordion"""

    def __init__(self, *args, **kwargs):
        super().__init__()
        self._props = dict(**kwargs)
        self._children = list(args)
        self._component = AccordionOrig()
        self._component.on_python_state_changed(
            lambda state: self._handle_python_state_changed(state, []))
        self._connect_children(self._children, [])
        self._reactopya_widget = None
        self._javascript_state = dict()  # for snapshot
        self._python_state = dict()  # for snapshot
        self._component.init_jupyter()

    def _connect_children(self, children, child_indices):
        for i, ch in enumerate(children):
            self._connect_child(ch, child_indices + [i])
            self._connect_children(ch._children, child_indices + [i])

    def _connect_child(self, child, child_indices):
        child._component.on_python_state_changed(
            lambda state: self._handle_python_state_changed(state, child_indices))

    def _handle_python_state_changed(self, state, child_indices):
        ptr = self
        for ind in child_indices:
            ptr = ptr._children[ind]
        for key, val in state.items():
            ptr._python_state[key] = val  # for snapshot
        if self._reactopya_widget:
            self._reactopya_widget.set_python_state(state, child_indices)

    def _handle_javascript_state_changed(self, state, child_indices):
        ptr = self
        for ind in child_indices:
            ptr = ptr._children[ind]
        for key, val in state.items():
            ptr._javascript_state[key] = val  # for snapshot
        ptr._component._handle_javascript_state_changed(state)

    def _serialize(self, include_javascript_state=False, include_python_state=False, include_bundle_fname=False):
        obj = dict(
            project_name='ephys_viz',
            type='Accordion',
            children=[
                ch._serialize(include_javascript_state=include_javascript_state,
                              include_python_state=include_python_state, include_bundle_fname=include_bundle_fname)
                for ch in self._children
            ],
            props=_json_serialize(self._props)
        )
        if include_javascript_state:
            obj['javascript_state'] = _json_serialize(self._javascript_state)
        if include_python_state:
            obj['python_state'] = _json_serialize(self._python_state)
        if include_bundle_fname:
            dirname = os.path.dirname(os.path.realpath(__file__))
            obj['bundle_fname'] = os.path.join(dirname, 'dist', 'bundle.js')

        return obj

    def _reactopya_widget(self):
        return self._reactopya_widget

    def show(self):
        init_info = _get_init_info()
        if init_info['mode'] == 'jupyter':
            from reactopya_jup import ReactopyaWidget as ReactopyaJupyterWidget
            RW = ReactopyaJupyterWidget
        elif init_info['mode'] == 'colab':
            RW = ReactopyaColabWidget
        elif init_info['mode'] == 'electron':
            RW = ReactopyaElectronWidget
        self._reactopya_widget = RW(
            project_name='ephys_viz',
            type='Accordion',
            children=[
                ch._serialize()
                for ch in self._children
            ],
            props=self._props
        )
        if init_info['mode'] == 'colab':
            self._reactopya_widget._set_bundle_js(
                init_info['bundle_js'], store_bundle_in_notebook=init_info['store_bundle_in_notebook'])
        elif init_info['mode'] == 'electron':
            self._reactopya_widget._set_bundle_fname(init_info['bundle_fname'])
            self._reactopya_widget._set_electron_src(init_info['electron_src'])
        self._reactopya_widget.on_javascript_state_changed(
            self._handle_javascript_state_changed)

        self._reactopya_widget.show()

    def export_snapshot(self, output_fname, *, format):
        import simplejson
        if format is not 'html':
            raise Exception('Unsupported format: {}'.format(format))
        serialized_widget = self._serialize(
            include_javascript_state=True, include_python_state=True, include_bundle_fname=True)
        project_names = _get_all_project_names(serialized_widget)
        project_bundle_fnames = _get_project_bundle_fnames(serialized_widget)
        snapshot = dict(
            serialized_widget=serialized_widget,
            project_names=project_names,
            project_bundles=[_read_text_file(
                project_bundle_fnames[project_name]) for project_name in project_names]
        )

        html = '''
<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8" />

    <!-- Disable caching by browser -->
    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">
    <meta http-equiv="Pragma" content="no-cache">
    <meta http-equiv="Expires" content="0">

    <title></title>

    <style>
        body {
            font-family: sans-serif;
            margin: 0;
            padding: 0;
        }

        #root {
            height: 100vh;
            width: 100vw;

            display: flex;
            flex-direction: column;
            overflow: auto;

            /* background: #b8c1c3; */
        }
        .main-container-column {
            display: flex;
            flex-direction: column;
            height: calc(100vh - 180px);
        }
    </style>
</head>

<body>
    <script type="text/javascript">

        var snapshot = get_snapshot_json_b64();
        snapshot = JSON.parse(atob(snapshot));
        for (let js of snapshot.project_bundles) {
            eval(js);
        }
        window.snapshot=snapshot;

        var sw = snapshot.serialized_widget;
        set_init_state_on_props(sw);

        window.reactopya.disable_python_backend = true;

        var div = document.createElement('div');
        div.id = 'root';
        document.body.appendChild(div);
        window.reactopya.widgets[sw.project_name][sw.type].render(div, sw.children, sw.props, sw.key || '');

        function set_init_state_on_props(serialized_widget) {
            let init_state = {};
            for (let key in serialized_widget.javascript_state) {
                init_state[key] = serialized_widget.javascript_state[key];
            }
            for (let key in serialized_widget.python_state) {
                init_state[key] = serialized_widget.python_state[key];
            }
            serialized_widget.props.reactopya_init_state = init_state;
            for (let child of serialized_widget.children) {
                set_init_state_on_props(child);
            }
        }

        function get_snapshot_json_b64() {
            return "[snapshot_json_b64]";
        }

    </script>
</body>

</html>
        '''
        html = html.replace('[snapshot_json_b64]', base64.b64encode(simplejson.dumps(snapshot, ignore_nan=True).encode('utf-8')).decode())
        with open(output_fname, 'w') as f:
            f.write(html)


class Autocorrelograms:
    """Jupyter widget for Autocorrelograms"""

    def __init__(self, *args, **kwargs):
        super().__init__()
        self._props = dict(**kwargs)
        self._children = list(args)
        self._component = AutocorrelogramsOrig()
        self._component.on_python_state_changed(
            lambda state: self._handle_python_state_changed(state, []))
        self._connect_children(self._children, [])
        self._reactopya_widget = None
        self._javascript_state = dict()  # for snapshot
        self._python_state = dict()  # for snapshot
        self._component.init_jupyter()

    def _connect_children(self, children, child_indices):
        for i, ch in enumerate(children):
            self._connect_child(ch, child_indices + [i])
            self._connect_children(ch._children, child_indices + [i])

    def _connect_child(self, child, child_indices):
        child._component.on_python_state_changed(
            lambda state: self._handle_python_state_changed(state, child_indices))

    def _handle_python_state_changed(self, state, child_indices):
        ptr = self
        for ind in child_indices:
            ptr = ptr._children[ind]
        for key, val in state.items():
            ptr._python_state[key] = val  # for snapshot
        if self._reactopya_widget:
            self._reactopya_widget.set_python_state(state, child_indices)

    def _handle_javascript_state_changed(self, state, child_indices):
        ptr = self
        for ind in child_indices:
            ptr = ptr._children[ind]
        for key, val in state.items():
            ptr._javascript_state[key] = val  # for snapshot
        ptr._component._handle_javascript_state_changed(state)

    def _serialize(self, include_javascript_state=False, include_python_state=False, include_bundle_fname=False):
        obj = dict(
            project_name='ephys_viz',
            type='Autocorrelograms',
            children=[
                ch._serialize(include_javascript_state=include_javascript_state,
                              include_python_state=include_python_state, include_bundle_fname=include_bundle_fname)
                for ch in self._children
            ],
            props=_json_serialize(self._props)
        )
        if include_javascript_state:
            obj['javascript_state'] = _json_serialize(self._javascript_state)
        if include_python_state:
            obj['python_state'] = _json_serialize(self._python_state)
        if include_bundle_fname:
            dirname = os.path.dirname(os.path.realpath(__file__))
            obj['bundle_fname'] = os.path.join(dirname, 'dist', 'bundle.js')

        return obj

    def _reactopya_widget(self):
        return self._reactopya_widget

    def show(self):
        init_info = _get_init_info()
        if init_info['mode'] == 'jupyter':
            from reactopya_jup import ReactopyaWidget as ReactopyaJupyterWidget
            RW = ReactopyaJupyterWidget
        elif init_info['mode'] == 'colab':
            RW = ReactopyaColabWidget
        elif init_info['mode'] == 'electron':
            RW = ReactopyaElectronWidget
        self._reactopya_widget = RW(
            project_name='ephys_viz',
            type='Autocorrelograms',
            children=[
                ch._serialize()
                for ch in self._children
            ],
            props=self._props
        )
        if init_info['mode'] == 'colab':
            self._reactopya_widget._set_bundle_js(
                init_info['bundle_js'], store_bundle_in_notebook=init_info['store_bundle_in_notebook'])
        elif init_info['mode'] == 'electron':
            self._reactopya_widget._set_bundle_fname(init_info['bundle_fname'])
            self._reactopya_widget._set_electron_src(init_info['electron_src'])
        self._reactopya_widget.on_javascript_state_changed(
            self._handle_javascript_state_changed)

        self._reactopya_widget.show()

    def export_snapshot(self, output_fname, *, format):
        import simplejson
        if format is not 'html':
            raise Exception('Unsupported format: {}'.format(format))
        serialized_widget = self._serialize(
            include_javascript_state=True, include_python_state=True, include_bundle_fname=True)
        project_names = _get_all_project_names(serialized_widget)
        project_bundle_fnames = _get_project_bundle_fnames(serialized_widget)
        snapshot = dict(
            serialized_widget=serialized_widget,
            project_names=project_names,
            project_bundles=[_read_text_file(
                project_bundle_fnames[project_name]) for project_name in project_names]
        )

        html = '''
<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8" />

    <!-- Disable caching by browser -->
    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">
    <meta http-equiv="Pragma" content="no-cache">
    <meta http-equiv="Expires" content="0">

    <title></title>

    <style>
        body {
            font-family: sans-serif;
            margin: 0;
            padding: 0;
        }

        #root {
            height: 100vh;
            width: 100vw;

            display: flex;
            flex-direction: column;
            overflow: auto;

            /* background: #b8c1c3; */
        }
        .main-container-column {
            display: flex;
            flex-direction: column;
            height: calc(100vh - 180px);
        }
    </style>
</head>

<body>
    <script type="text/javascript">

        var snapshot = get_snapshot_json_b64();
        snapshot = JSON.parse(atob(snapshot));
        for (let js of snapshot.project_bundles) {
            eval(js);
        }
        window.snapshot=snapshot;

        var sw = snapshot.serialized_widget;
        set_init_state_on_props(sw);

        window.reactopya.disable_python_backend = true;

        var div = document.createElement('div');
        div.id = 'root';
        document.body.appendChild(div);
        window.reactopya.widgets[sw.project_name][sw.type].render(div, sw.children, sw.props, sw.key || '');

        function set_init_state_on_props(serialized_widget) {
            let init_state = {};
            for (let key in serialized_widget.javascript_state) {
                init_state[key] = serialized_widget.javascript_state[key];
            }
            for (let key in serialized_widget.python_state) {
                init_state[key] = serialized_widget.python_state[key];
            }
            serialized_widget.props.reactopya_init_state = init_state;
            for (let child of serialized_widget.children) {
                set_init_state_on_props(child);
            }
        }

        function get_snapshot_json_b64() {
            return "[snapshot_json_b64]";
        }

    </script>
</body>

</html>
        '''
        html = html.replace('[snapshot_json_b64]', base64.b64encode(simplejson.dumps(snapshot, ignore_nan=True).encode('utf-8')).decode())
        with open(output_fname, 'w') as f:
            f.write(html)


class NWBView:
    """Jupyter widget for NWBView"""

    def __init__(self, *args, **kwargs):
        super().__init__()
        self._props = dict(**kwargs)
        self._children = list(args)
        self._component = NWBViewOrig()
        self._component.on_python_state_changed(
            lambda state: self._handle_python_state_changed(state, []))
        self._connect_children(self._children, [])
        self._reactopya_widget = None
        self._javascript_state = dict()  # for snapshot
        self._python_state = dict()  # for snapshot
        self._component.init_jupyter()

    def _connect_children(self, children, child_indices):
        for i, ch in enumerate(children):
            self._connect_child(ch, child_indices + [i])
            self._connect_children(ch._children, child_indices + [i])

    def _connect_child(self, child, child_indices):
        child._component.on_python_state_changed(
            lambda state: self._handle_python_state_changed(state, child_indices))

    def _handle_python_state_changed(self, state, child_indices):
        ptr = self
        for ind in child_indices:
            ptr = ptr._children[ind]
        for key, val in state.items():
            ptr._python_state[key] = val  # for snapshot
        if self._reactopya_widget:
            self._reactopya_widget.set_python_state(state, child_indices)

    def _handle_javascript_state_changed(self, state, child_indices):
        ptr = self
        for ind in child_indices:
            ptr = ptr._children[ind]
        for key, val in state.items():
            ptr._javascript_state[key] = val  # for snapshot
        ptr._component._handle_javascript_state_changed(state)

    def _serialize(self, include_javascript_state=False, include_python_state=False, include_bundle_fname=False):
        obj = dict(
            project_name='ephys_viz',
            type='NWBView',
            children=[
                ch._serialize(include_javascript_state=include_javascript_state,
                              include_python_state=include_python_state, include_bundle_fname=include_bundle_fname)
                for ch in self._children
            ],
            props=_json_serialize(self._props)
        )
        if include_javascript_state:
            obj['javascript_state'] = _json_serialize(self._javascript_state)
        if include_python_state:
            obj['python_state'] = _json_serialize(self._python_state)
        if include_bundle_fname:
            dirname = os.path.dirname(os.path.realpath(__file__))
            obj['bundle_fname'] = os.path.join(dirname, 'dist', 'bundle.js')

        return obj

    def _reactopya_widget(self):
        return self._reactopya_widget

    def show(self):
        init_info = _get_init_info()
        if init_info['mode'] == 'jupyter':
            from reactopya_jup import ReactopyaWidget as ReactopyaJupyterWidget
            RW = ReactopyaJupyterWidget
        elif init_info['mode'] == 'colab':
            RW = ReactopyaColabWidget
        elif init_info['mode'] == 'electron':
            RW = ReactopyaElectronWidget
        self._reactopya_widget = RW(
            project_name='ephys_viz',
            type='NWBView',
            children=[
                ch._serialize()
                for ch in self._children
            ],
            props=self._props
        )
        if init_info['mode'] == 'colab':
            self._reactopya_widget._set_bundle_js(
                init_info['bundle_js'], store_bundle_in_notebook=init_info['store_bundle_in_notebook'])
        elif init_info['mode'] == 'electron':
            self._reactopya_widget._set_bundle_fname(init_info['bundle_fname'])
            self._reactopya_widget._set_electron_src(init_info['electron_src'])
        self._reactopya_widget.on_javascript_state_changed(
            self._handle_javascript_state_changed)

        self._reactopya_widget.show()

    def export_snapshot(self, output_fname, *, format):
        import simplejson
        if format is not 'html':
            raise Exception('Unsupported format: {}'.format(format))
        serialized_widget = self._serialize(
            include_javascript_state=True, include_python_state=True, include_bundle_fname=True)
        project_names = _get_all_project_names(serialized_widget)
        project_bundle_fnames = _get_project_bundle_fnames(serialized_widget)
        snapshot = dict(
            serialized_widget=serialized_widget,
            project_names=project_names,
            project_bundles=[_read_text_file(
                project_bundle_fnames[project_name]) for project_name in project_names]
        )

        html = '''
<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8" />

    <!-- Disable caching by browser -->
    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">
    <meta http-equiv="Pragma" content="no-cache">
    <meta http-equiv="Expires" content="0">

    <title></title>

    <style>
        body {
            font-family: sans-serif;
            margin: 0;
            padding: 0;
        }

        #root {
            height: 100vh;
            width: 100vw;

            display: flex;
            flex-direction: column;
            overflow: auto;

            /* background: #b8c1c3; */
        }
        .main-container-column {
            display: flex;
            flex-direction: column;
            height: calc(100vh - 180px);
        }
    </style>
</head>

<body>
    <script type="text/javascript">

        var snapshot = get_snapshot_json_b64();
        snapshot = JSON.parse(atob(snapshot));
        for (let js of snapshot.project_bundles) {
            eval(js);
        }
        window.snapshot=snapshot;

        var sw = snapshot.serialized_widget;
        set_init_state_on_props(sw);

        window.reactopya.disable_python_backend = true;

        var div = document.createElement('div');
        div.id = 'root';
        document.body.appendChild(div);
        window.reactopya.widgets[sw.project_name][sw.type].render(div, sw.children, sw.props, sw.key || '');

        function set_init_state_on_props(serialized_widget) {
            let init_state = {};
            for (let key in serialized_widget.javascript_state) {
                init_state[key] = serialized_widget.javascript_state[key];
            }
            for (let key in serialized_widget.python_state) {
                init_state[key] = serialized_widget.python_state[key];
            }
            serialized_widget.props.reactopya_init_state = init_state;
            for (let child of serialized_widget.children) {
                set_init_state_on_props(child);
            }
        }

        function get_snapshot_json_b64() {
            return "[snapshot_json_b64]";
        }

    </script>
</body>

</html>
        '''
        html = html.replace('[snapshot_json_b64]', base64.b64encode(simplejson.dumps(snapshot, ignore_nan=True).encode('utf-8')).decode())
        with open(output_fname, 'w') as f:
            f.write(html)


class VBox:
    """Jupyter widget for VBox"""

    def __init__(self, *args, **kwargs):
        super().__init__()
        self._props = dict(**kwargs)
        self._children = list(args)
        self._component = VBoxOrig()
        self._component.on_python_state_changed(
            lambda state: self._handle_python_state_changed(state, []))
        self._connect_children(self._children, [])
        self._reactopya_widget = None
        self._javascript_state = dict()  # for snapshot
        self._python_state = dict()  # for snapshot
        self._component.init_jupyter()

    def _connect_children(self, children, child_indices):
        for i, ch in enumerate(children):
            self._connect_child(ch, child_indices + [i])
            self._connect_children(ch._children, child_indices + [i])

    def _connect_child(self, child, child_indices):
        child._component.on_python_state_changed(
            lambda state: self._handle_python_state_changed(state, child_indices))

    def _handle_python_state_changed(self, state, child_indices):
        ptr = self
        for ind in child_indices:
            ptr = ptr._children[ind]
        for key, val in state.items():
            ptr._python_state[key] = val  # for snapshot
        if self._reactopya_widget:
            self._reactopya_widget.set_python_state(state, child_indices)

    def _handle_javascript_state_changed(self, state, child_indices):
        ptr = self
        for ind in child_indices:
            ptr = ptr._children[ind]
        for key, val in state.items():
            ptr._javascript_state[key] = val  # for snapshot
        ptr._component._handle_javascript_state_changed(state)

    def _serialize(self, include_javascript_state=False, include_python_state=False, include_bundle_fname=False):
        obj = dict(
            project_name='ephys_viz',
            type='VBox',
            children=[
                ch._serialize(include_javascript_state=include_javascript_state,
                              include_python_state=include_python_state, include_bundle_fname=include_bundle_fname)
                for ch in self._children
            ],
            props=_json_serialize(self._props)
        )
        if include_javascript_state:
            obj['javascript_state'] = _json_serialize(self._javascript_state)
        if include_python_state:
            obj['python_state'] = _json_serialize(self._python_state)
        if include_bundle_fname:
            dirname = os.path.dirname(os.path.realpath(__file__))
            obj['bundle_fname'] = os.path.join(dirname, 'dist', 'bundle.js')

        return obj

    def _reactopya_widget(self):
        return self._reactopya_widget

    def show(self):
        init_info = _get_init_info()
        if init_info['mode'] == 'jupyter':
            from reactopya_jup import ReactopyaWidget as ReactopyaJupyterWidget
            RW = ReactopyaJupyterWidget
        elif init_info['mode'] == 'colab':
            RW = ReactopyaColabWidget
        elif init_info['mode'] == 'electron':
            RW = ReactopyaElectronWidget
        self._reactopya_widget = RW(
            project_name='ephys_viz',
            type='VBox',
            children=[
                ch._serialize()
                for ch in self._children
            ],
            props=self._props
        )
        if init_info['mode'] == 'colab':
            self._reactopya_widget._set_bundle_js(
                init_info['bundle_js'], store_bundle_in_notebook=init_info['store_bundle_in_notebook'])
        elif init_info['mode'] == 'electron':
            self._reactopya_widget._set_bundle_fname(init_info['bundle_fname'])
            self._reactopya_widget._set_electron_src(init_info['electron_src'])
        self._reactopya_widget.on_javascript_state_changed(
            self._handle_javascript_state_changed)

        self._reactopya_widget.show()

    def export_snapshot(self, output_fname, *, format):
        import simplejson
        if format is not 'html':
            raise Exception('Unsupported format: {}'.format(format))
        serialized_widget = self._serialize(
            include_javascript_state=True, include_python_state=True, include_bundle_fname=True)
        project_names = _get_all_project_names(serialized_widget)
        project_bundle_fnames = _get_project_bundle_fnames(serialized_widget)
        snapshot = dict(
            serialized_widget=serialized_widget,
            project_names=project_names,
            project_bundles=[_read_text_file(
                project_bundle_fnames[project_name]) for project_name in project_names]
        )

        html = '''
<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8" />

    <!-- Disable caching by browser -->
    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">
    <meta http-equiv="Pragma" content="no-cache">
    <meta http-equiv="Expires" content="0">

    <title></title>

    <style>
        body {
            font-family: sans-serif;
            margin: 0;
            padding: 0;
        }

        #root {
            height: 100vh;
            width: 100vw;

            display: flex;
            flex-direction: column;
            overflow: auto;

            /* background: #b8c1c3; */
        }
        .main-container-column {
            display: flex;
            flex-direction: column;
            height: calc(100vh - 180px);
        }
    </style>
</head>

<body>
    <script type="text/javascript">

        var snapshot = get_snapshot_json_b64();
        snapshot = JSON.parse(atob(snapshot));
        for (let js of snapshot.project_bundles) {
            eval(js);
        }
        window.snapshot=snapshot;

        var sw = snapshot.serialized_widget;
        set_init_state_on_props(sw);

        window.reactopya.disable_python_backend = true;

        var div = document.createElement('div');
        div.id = 'root';
        document.body.appendChild(div);
        window.reactopya.widgets[sw.project_name][sw.type].render(div, sw.children, sw.props, sw.key || '');

        function set_init_state_on_props(serialized_widget) {
            let init_state = {};
            for (let key in serialized_widget.javascript_state) {
                init_state[key] = serialized_widget.javascript_state[key];
            }
            for (let key in serialized_widget.python_state) {
                init_state[key] = serialized_widget.python_state[key];
            }
            serialized_widget.props.reactopya_init_state = init_state;
            for (let child of serialized_widget.children) {
                set_init_state_on_props(child);
            }
        }

        function get_snapshot_json_b64() {
            return "[snapshot_json_b64]";
        }

    </script>
</body>

</html>
        '''
        html = html.replace('[snapshot_json_b64]', base64.b64encode(simplejson.dumps(snapshot, ignore_nan=True).encode('utf-8')).decode())
        with open(output_fname, 'w') as f:
            f.write(html)


class NWBBrowser:
    """Jupyter widget for NWBBrowser"""

    def __init__(self, *args, **kwargs):
        super().__init__()
        self._props = dict(**kwargs)
        self._children = list(args)
        self._component = NWBBrowserOrig()
        self._component.on_python_state_changed(
            lambda state: self._handle_python_state_changed(state, []))
        self._connect_children(self._children, [])
        self._reactopya_widget = None
        self._javascript_state = dict()  # for snapshot
        self._python_state = dict()  # for snapshot
        self._component.init_jupyter()

    def _connect_children(self, children, child_indices):
        for i, ch in enumerate(children):
            self._connect_child(ch, child_indices + [i])
            self._connect_children(ch._children, child_indices + [i])

    def _connect_child(self, child, child_indices):
        child._component.on_python_state_changed(
            lambda state: self._handle_python_state_changed(state, child_indices))

    def _handle_python_state_changed(self, state, child_indices):
        ptr = self
        for ind in child_indices:
            ptr = ptr._children[ind]
        for key, val in state.items():
            ptr._python_state[key] = val  # for snapshot
        if self._reactopya_widget:
            self._reactopya_widget.set_python_state(state, child_indices)

    def _handle_javascript_state_changed(self, state, child_indices):
        ptr = self
        for ind in child_indices:
            ptr = ptr._children[ind]
        for key, val in state.items():
            ptr._javascript_state[key] = val  # for snapshot
        ptr._component._handle_javascript_state_changed(state)

    def _serialize(self, include_javascript_state=False, include_python_state=False, include_bundle_fname=False):
        obj = dict(
            project_name='ephys_viz',
            type='NWBBrowser',
            children=[
                ch._serialize(include_javascript_state=include_javascript_state,
                              include_python_state=include_python_state, include_bundle_fname=include_bundle_fname)
                for ch in self._children
            ],
            props=_json_serialize(self._props)
        )
        if include_javascript_state:
            obj['javascript_state'] = _json_serialize(self._javascript_state)
        if include_python_state:
            obj['python_state'] = _json_serialize(self._python_state)
        if include_bundle_fname:
            dirname = os.path.dirname(os.path.realpath(__file__))
            obj['bundle_fname'] = os.path.join(dirname, 'dist', 'bundle.js')

        return obj

    def _reactopya_widget(self):
        return self._reactopya_widget

    def show(self):
        init_info = _get_init_info()
        if init_info['mode'] == 'jupyter':
            from reactopya_jup import ReactopyaWidget as ReactopyaJupyterWidget
            RW = ReactopyaJupyterWidget
        elif init_info['mode'] == 'colab':
            RW = ReactopyaColabWidget
        elif init_info['mode'] == 'electron':
            RW = ReactopyaElectronWidget
        self._reactopya_widget = RW(
            project_name='ephys_viz',
            type='NWBBrowser',
            children=[
                ch._serialize()
                for ch in self._children
            ],
            props=self._props
        )
        if init_info['mode'] == 'colab':
            self._reactopya_widget._set_bundle_js(
                init_info['bundle_js'], store_bundle_in_notebook=init_info['store_bundle_in_notebook'])
        elif init_info['mode'] == 'electron':
            self._reactopya_widget._set_bundle_fname(init_info['bundle_fname'])
            self._reactopya_widget._set_electron_src(init_info['electron_src'])
        self._reactopya_widget.on_javascript_state_changed(
            self._handle_javascript_state_changed)

        self._reactopya_widget.show()

    def export_snapshot(self, output_fname, *, format):
        import simplejson
        if format is not 'html':
            raise Exception('Unsupported format: {}'.format(format))
        serialized_widget = self._serialize(
            include_javascript_state=True, include_python_state=True, include_bundle_fname=True)
        project_names = _get_all_project_names(serialized_widget)
        project_bundle_fnames = _get_project_bundle_fnames(serialized_widget)
        snapshot = dict(
            serialized_widget=serialized_widget,
            project_names=project_names,
            project_bundles=[_read_text_file(
                project_bundle_fnames[project_name]) for project_name in project_names]
        )

        html = '''
<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8" />

    <!-- Disable caching by browser -->
    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">
    <meta http-equiv="Pragma" content="no-cache">
    <meta http-equiv="Expires" content="0">

    <title></title>

    <style>
        body {
            font-family: sans-serif;
            margin: 0;
            padding: 0;
        }

        #root {
            height: 100vh;
            width: 100vw;

            display: flex;
            flex-direction: column;
            overflow: auto;

            /* background: #b8c1c3; */
        }
        .main-container-column {
            display: flex;
            flex-direction: column;
            height: calc(100vh - 180px);
        }
    </style>
</head>

<body>
    <script type="text/javascript">

        var snapshot = get_snapshot_json_b64();
        snapshot = JSON.parse(atob(snapshot));
        for (let js of snapshot.project_bundles) {
            eval(js);
        }
        window.snapshot=snapshot;

        var sw = snapshot.serialized_widget;
        set_init_state_on_props(sw);

        window.reactopya.disable_python_backend = true;

        var div = document.createElement('div');
        div.id = 'root';
        document.body.appendChild(div);
        window.reactopya.widgets[sw.project_name][sw.type].render(div, sw.children, sw.props, sw.key || '');

        function set_init_state_on_props(serialized_widget) {
            let init_state = {};
            for (let key in serialized_widget.javascript_state) {
                init_state[key] = serialized_widget.javascript_state[key];
            }
            for (let key in serialized_widget.python_state) {
                init_state[key] = serialized_widget.python_state[key];
            }
            serialized_widget.props.reactopya_init_state = init_state;
            for (let child of serialized_widget.children) {
                set_init_state_on_props(child);
            }
        }

        function get_snapshot_json_b64() {
            return "[snapshot_json_b64]";
        }

    </script>
</body>

</html>
        '''
        html = html.replace('[snapshot_json_b64]', base64.b64encode(simplejson.dumps(snapshot, ignore_nan=True).encode('utf-8')).decode())
        with open(output_fname, 'w') as f:
            f.write(html)


class HBox:
    """Jupyter widget for HBox"""

    def __init__(self, *args, **kwargs):
        super().__init__()
        self._props = dict(**kwargs)
        self._children = list(args)
        self._component = HBoxOrig()
        self._component.on_python_state_changed(
            lambda state: self._handle_python_state_changed(state, []))
        self._connect_children(self._children, [])
        self._reactopya_widget = None
        self._javascript_state = dict()  # for snapshot
        self._python_state = dict()  # for snapshot
        self._component.init_jupyter()

    def _connect_children(self, children, child_indices):
        for i, ch in enumerate(children):
            self._connect_child(ch, child_indices + [i])
            self._connect_children(ch._children, child_indices + [i])

    def _connect_child(self, child, child_indices):
        child._component.on_python_state_changed(
            lambda state: self._handle_python_state_changed(state, child_indices))

    def _handle_python_state_changed(self, state, child_indices):
        ptr = self
        for ind in child_indices:
            ptr = ptr._children[ind]
        for key, val in state.items():
            ptr._python_state[key] = val  # for snapshot
        if self._reactopya_widget:
            self._reactopya_widget.set_python_state(state, child_indices)

    def _handle_javascript_state_changed(self, state, child_indices):
        ptr = self
        for ind in child_indices:
            ptr = ptr._children[ind]
        for key, val in state.items():
            ptr._javascript_state[key] = val  # for snapshot
        ptr._component._handle_javascript_state_changed(state)

    def _serialize(self, include_javascript_state=False, include_python_state=False, include_bundle_fname=False):
        obj = dict(
            project_name='ephys_viz',
            type='HBox',
            children=[
                ch._serialize(include_javascript_state=include_javascript_state,
                              include_python_state=include_python_state, include_bundle_fname=include_bundle_fname)
                for ch in self._children
            ],
            props=_json_serialize(self._props)
        )
        if include_javascript_state:
            obj['javascript_state'] = _json_serialize(self._javascript_state)
        if include_python_state:
            obj['python_state'] = _json_serialize(self._python_state)
        if include_bundle_fname:
            dirname = os.path.dirname(os.path.realpath(__file__))
            obj['bundle_fname'] = os.path.join(dirname, 'dist', 'bundle.js')

        return obj

    def _reactopya_widget(self):
        return self._reactopya_widget

    def show(self):
        init_info = _get_init_info()
        if init_info['mode'] == 'jupyter':
            from reactopya_jup import ReactopyaWidget as ReactopyaJupyterWidget
            RW = ReactopyaJupyterWidget
        elif init_info['mode'] == 'colab':
            RW = ReactopyaColabWidget
        elif init_info['mode'] == 'electron':
            RW = ReactopyaElectronWidget
        self._reactopya_widget = RW(
            project_name='ephys_viz',
            type='HBox',
            children=[
                ch._serialize()
                for ch in self._children
            ],
            props=self._props
        )
        if init_info['mode'] == 'colab':
            self._reactopya_widget._set_bundle_js(
                init_info['bundle_js'], store_bundle_in_notebook=init_info['store_bundle_in_notebook'])
        elif init_info['mode'] == 'electron':
            self._reactopya_widget._set_bundle_fname(init_info['bundle_fname'])
            self._reactopya_widget._set_electron_src(init_info['electron_src'])
        self._reactopya_widget.on_javascript_state_changed(
            self._handle_javascript_state_changed)

        self._reactopya_widget.show()

    def export_snapshot(self, output_fname, *, format):
        import simplejson
        if format is not 'html':
            raise Exception('Unsupported format: {}'.format(format))
        serialized_widget = self._serialize(
            include_javascript_state=True, include_python_state=True, include_bundle_fname=True)
        project_names = _get_all_project_names(serialized_widget)
        project_bundle_fnames = _get_project_bundle_fnames(serialized_widget)
        snapshot = dict(
            serialized_widget=serialized_widget,
            project_names=project_names,
            project_bundles=[_read_text_file(
                project_bundle_fnames[project_name]) for project_name in project_names]
        )

        html = '''
<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8" />

    <!-- Disable caching by browser -->
    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">
    <meta http-equiv="Pragma" content="no-cache">
    <meta http-equiv="Expires" content="0">

    <title></title>

    <style>
        body {
            font-family: sans-serif;
            margin: 0;
            padding: 0;
        }

        #root {
            height: 100vh;
            width: 100vw;

            display: flex;
            flex-direction: column;
            overflow: auto;

            /* background: #b8c1c3; */
        }
        .main-container-column {
            display: flex;
            flex-direction: column;
            height: calc(100vh - 180px);
        }
    </style>
</head>

<body>
    <script type="text/javascript">

        var snapshot = get_snapshot_json_b64();
        snapshot = JSON.parse(atob(snapshot));
        for (let js of snapshot.project_bundles) {
            eval(js);
        }
        window.snapshot=snapshot;

        var sw = snapshot.serialized_widget;
        set_init_state_on_props(sw);

        window.reactopya.disable_python_backend = true;

        var div = document.createElement('div');
        div.id = 'root';
        document.body.appendChild(div);
        window.reactopya.widgets[sw.project_name][sw.type].render(div, sw.children, sw.props, sw.key || '');

        function set_init_state_on_props(serialized_widget) {
            let init_state = {};
            for (let key in serialized_widget.javascript_state) {
                init_state[key] = serialized_widget.javascript_state[key];
            }
            for (let key in serialized_widget.python_state) {
                init_state[key] = serialized_widget.python_state[key];
            }
            serialized_widget.props.reactopya_init_state = init_state;
            for (let child of serialized_widget.children) {
                set_init_state_on_props(child);
            }
        }

        function get_snapshot_json_b64() {
            return "[snapshot_json_b64]";
        }

    </script>
</body>

</html>
        '''
        html = html.replace('[snapshot_json_b64]', base64.b64encode(simplejson.dumps(snapshot, ignore_nan=True).encode('utf-8')).decode())
        with open(output_fname, 'w') as f:
            f.write(html)


class ElectrodeGeometry:
    """Jupyter widget for ElectrodeGeometry"""

    def __init__(self, *args, **kwargs):
        super().__init__()
        self._props = dict(**kwargs)
        self._children = list(args)
        self._component = ElectrodeGeometryOrig()
        self._component.on_python_state_changed(
            lambda state: self._handle_python_state_changed(state, []))
        self._connect_children(self._children, [])
        self._reactopya_widget = None
        self._javascript_state = dict()  # for snapshot
        self._python_state = dict()  # for snapshot
        self._component.init_jupyter()

    def _connect_children(self, children, child_indices):
        for i, ch in enumerate(children):
            self._connect_child(ch, child_indices + [i])
            self._connect_children(ch._children, child_indices + [i])

    def _connect_child(self, child, child_indices):
        child._component.on_python_state_changed(
            lambda state: self._handle_python_state_changed(state, child_indices))

    def _handle_python_state_changed(self, state, child_indices):
        ptr = self
        for ind in child_indices:
            ptr = ptr._children[ind]
        for key, val in state.items():
            ptr._python_state[key] = val  # for snapshot
        if self._reactopya_widget:
            self._reactopya_widget.set_python_state(state, child_indices)

    def _handle_javascript_state_changed(self, state, child_indices):
        ptr = self
        for ind in child_indices:
            ptr = ptr._children[ind]
        for key, val in state.items():
            ptr._javascript_state[key] = val  # for snapshot
        ptr._component._handle_javascript_state_changed(state)

    def _serialize(self, include_javascript_state=False, include_python_state=False, include_bundle_fname=False):
        obj = dict(
            project_name='ephys_viz',
            type='ElectrodeGeometry',
            children=[
                ch._serialize(include_javascript_state=include_javascript_state,
                              include_python_state=include_python_state, include_bundle_fname=include_bundle_fname)
                for ch in self._children
            ],
            props=_json_serialize(self._props)
        )
        if include_javascript_state:
            obj['javascript_state'] = _json_serialize(self._javascript_state)
        if include_python_state:
            obj['python_state'] = _json_serialize(self._python_state)
        if include_bundle_fname:
            dirname = os.path.dirname(os.path.realpath(__file__))
            obj['bundle_fname'] = os.path.join(dirname, 'dist', 'bundle.js')

        return obj

    def _reactopya_widget(self):
        return self._reactopya_widget

    def show(self):
        init_info = _get_init_info()
        if init_info['mode'] == 'jupyter':
            from reactopya_jup import ReactopyaWidget as ReactopyaJupyterWidget
            RW = ReactopyaJupyterWidget
        elif init_info['mode'] == 'colab':
            RW = ReactopyaColabWidget
        elif init_info['mode'] == 'electron':
            RW = ReactopyaElectronWidget
        self._reactopya_widget = RW(
            project_name='ephys_viz',
            type='ElectrodeGeometry',
            children=[
                ch._serialize()
                for ch in self._children
            ],
            props=self._props
        )
        if init_info['mode'] == 'colab':
            self._reactopya_widget._set_bundle_js(
                init_info['bundle_js'], store_bundle_in_notebook=init_info['store_bundle_in_notebook'])
        elif init_info['mode'] == 'electron':
            self._reactopya_widget._set_bundle_fname(init_info['bundle_fname'])
            self._reactopya_widget._set_electron_src(init_info['electron_src'])
        self._reactopya_widget.on_javascript_state_changed(
            self._handle_javascript_state_changed)

        self._reactopya_widget.show()

    def export_snapshot(self, output_fname, *, format):
        import simplejson
        if format is not 'html':
            raise Exception('Unsupported format: {}'.format(format))
        serialized_widget = self._serialize(
            include_javascript_state=True, include_python_state=True, include_bundle_fname=True)
        project_names = _get_all_project_names(serialized_widget)
        project_bundle_fnames = _get_project_bundle_fnames(serialized_widget)
        snapshot = dict(
            serialized_widget=serialized_widget,
            project_names=project_names,
            project_bundles=[_read_text_file(
                project_bundle_fnames[project_name]) for project_name in project_names]
        )

        html = '''
<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8" />

    <!-- Disable caching by browser -->
    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">
    <meta http-equiv="Pragma" content="no-cache">
    <meta http-equiv="Expires" content="0">

    <title></title>

    <style>
        body {
            font-family: sans-serif;
            margin: 0;
            padding: 0;
        }

        #root {
            height: 100vh;
            width: 100vw;

            display: flex;
            flex-direction: column;
            overflow: auto;

            /* background: #b8c1c3; */
        }
        .main-container-column {
            display: flex;
            flex-direction: column;
            height: calc(100vh - 180px);
        }
    </style>
</head>

<body>
    <script type="text/javascript">

        var snapshot = get_snapshot_json_b64();
        snapshot = JSON.parse(atob(snapshot));
        for (let js of snapshot.project_bundles) {
            eval(js);
        }
        window.snapshot=snapshot;

        var sw = snapshot.serialized_widget;
        set_init_state_on_props(sw);

        window.reactopya.disable_python_backend = true;

        var div = document.createElement('div');
        div.id = 'root';
        document.body.appendChild(div);
        window.reactopya.widgets[sw.project_name][sw.type].render(div, sw.children, sw.props, sw.key || '');

        function set_init_state_on_props(serialized_widget) {
            let init_state = {};
            for (let key in serialized_widget.javascript_state) {
                init_state[key] = serialized_widget.javascript_state[key];
            }
            for (let key in serialized_widget.python_state) {
                init_state[key] = serialized_widget.python_state[key];
            }
            serialized_widget.props.reactopya_init_state = init_state;
            for (let child of serialized_widget.children) {
                set_init_state_on_props(child);
            }
        }

        function get_snapshot_json_b64() {
            return "[snapshot_json_b64]";
        }

    </script>
</body>

</html>
        '''
        html = html.replace('[snapshot_json_b64]', base64.b64encode(simplejson.dumps(snapshot, ignore_nan=True).encode('utf-8')).decode())
        with open(output_fname, 'w') as f:
            f.write(html)


class Surface3d:
    """Jupyter widget for Surface3d"""

    def __init__(self, *args, **kwargs):
        super().__init__()
        self._props = dict(**kwargs)
        self._children = list(args)
        self._component = Surface3dOrig()
        self._component.on_python_state_changed(
            lambda state: self._handle_python_state_changed(state, []))
        self._connect_children(self._children, [])
        self._reactopya_widget = None
        self._javascript_state = dict()  # for snapshot
        self._python_state = dict()  # for snapshot
        self._component.init_jupyter()

    def _connect_children(self, children, child_indices):
        for i, ch in enumerate(children):
            self._connect_child(ch, child_indices + [i])
            self._connect_children(ch._children, child_indices + [i])

    def _connect_child(self, child, child_indices):
        child._component.on_python_state_changed(
            lambda state: self._handle_python_state_changed(state, child_indices))

    def _handle_python_state_changed(self, state, child_indices):
        ptr = self
        for ind in child_indices:
            ptr = ptr._children[ind]
        for key, val in state.items():
            ptr._python_state[key] = val  # for snapshot
        if self._reactopya_widget:
            self._reactopya_widget.set_python_state(state, child_indices)

    def _handle_javascript_state_changed(self, state, child_indices):
        ptr = self
        for ind in child_indices:
            ptr = ptr._children[ind]
        for key, val in state.items():
            ptr._javascript_state[key] = val  # for snapshot
        ptr._component._handle_javascript_state_changed(state)

    def _serialize(self, include_javascript_state=False, include_python_state=False, include_bundle_fname=False):
        obj = dict(
            project_name='ephys_viz',
            type='Surface3d',
            children=[
                ch._serialize(include_javascript_state=include_javascript_state,
                              include_python_state=include_python_state, include_bundle_fname=include_bundle_fname)
                for ch in self._children
            ],
            props=_json_serialize(self._props)
        )
        if include_javascript_state:
            obj['javascript_state'] = _json_serialize(self._javascript_state)
        if include_python_state:
            obj['python_state'] = _json_serialize(self._python_state)
        if include_bundle_fname:
            dirname = os.path.dirname(os.path.realpath(__file__))
            obj['bundle_fname'] = os.path.join(dirname, 'dist', 'bundle.js')

        return obj

    def _reactopya_widget(self):
        return self._reactopya_widget

    def show(self):
        init_info = _get_init_info()
        if init_info['mode'] == 'jupyter':
            from reactopya_jup import ReactopyaWidget as ReactopyaJupyterWidget
            RW = ReactopyaJupyterWidget
        elif init_info['mode'] == 'colab':
            RW = ReactopyaColabWidget
        elif init_info['mode'] == 'electron':
            RW = ReactopyaElectronWidget
        self._reactopya_widget = RW(
            project_name='ephys_viz',
            type='Surface3d',
            children=[
                ch._serialize()
                for ch in self._children
            ],
            props=self._props
        )
        if init_info['mode'] == 'colab':
            self._reactopya_widget._set_bundle_js(
                init_info['bundle_js'], store_bundle_in_notebook=init_info['store_bundle_in_notebook'])
        elif init_info['mode'] == 'electron':
            self._reactopya_widget._set_bundle_fname(init_info['bundle_fname'])
            self._reactopya_widget._set_electron_src(init_info['electron_src'])
        self._reactopya_widget.on_javascript_state_changed(
            self._handle_javascript_state_changed)

        self._reactopya_widget.show()

    def export_snapshot(self, output_fname, *, format):
        import simplejson
        if format is not 'html':
            raise Exception('Unsupported format: {}'.format(format))
        serialized_widget = self._serialize(
            include_javascript_state=True, include_python_state=True, include_bundle_fname=True)
        project_names = _get_all_project_names(serialized_widget)
        project_bundle_fnames = _get_project_bundle_fnames(serialized_widget)
        snapshot = dict(
            serialized_widget=serialized_widget,
            project_names=project_names,
            project_bundles=[_read_text_file(
                project_bundle_fnames[project_name]) for project_name in project_names]
        )

        html = '''
<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8" />

    <!-- Disable caching by browser -->
    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">
    <meta http-equiv="Pragma" content="no-cache">
    <meta http-equiv="Expires" content="0">

    <title></title>

    <style>
        body {
            font-family: sans-serif;
            margin: 0;
            padding: 0;
        }

        #root {
            height: 100vh;
            width: 100vw;

            display: flex;
            flex-direction: column;
            overflow: auto;

            /* background: #b8c1c3; */
        }
        .main-container-column {
            display: flex;
            flex-direction: column;
            height: calc(100vh - 180px);
        }
    </style>
</head>

<body>
    <script type="text/javascript">

        var snapshot = get_snapshot_json_b64();
        snapshot = JSON.parse(atob(snapshot));
        for (let js of snapshot.project_bundles) {
            eval(js);
        }
        window.snapshot=snapshot;

        var sw = snapshot.serialized_widget;
        set_init_state_on_props(sw);

        window.reactopya.disable_python_backend = true;

        var div = document.createElement('div');
        div.id = 'root';
        document.body.appendChild(div);
        window.reactopya.widgets[sw.project_name][sw.type].render(div, sw.children, sw.props, sw.key || '');

        function set_init_state_on_props(serialized_widget) {
            let init_state = {};
            for (let key in serialized_widget.javascript_state) {
                init_state[key] = serialized_widget.javascript_state[key];
            }
            for (let key in serialized_widget.python_state) {
                init_state[key] = serialized_widget.python_state[key];
            }
            serialized_widget.props.reactopya_init_state = init_state;
            for (let child of serialized_widget.children) {
                set_init_state_on_props(child);
            }
        }

        function get_snapshot_json_b64() {
            return "[snapshot_json_b64]";
        }

    </script>
</body>

</html>
        '''
        html = html.replace('[snapshot_json_b64]', base64.b64encode(simplejson.dumps(snapshot, ignore_nan=True).encode('utf-8')).decode())
        with open(output_fname, 'w') as f:
            f.write(html)


class TimeseriesView:
    """Jupyter widget for TimeseriesView"""

    def __init__(self, *args, **kwargs):
        super().__init__()
        self._props = dict(**kwargs)
        self._children = list(args)
        self._component = TimeseriesViewOrig()
        self._component.on_python_state_changed(
            lambda state: self._handle_python_state_changed(state, []))
        self._connect_children(self._children, [])
        self._reactopya_widget = None
        self._javascript_state = dict()  # for snapshot
        self._python_state = dict()  # for snapshot
        self._component.init_jupyter()

    def _connect_children(self, children, child_indices):
        for i, ch in enumerate(children):
            self._connect_child(ch, child_indices + [i])
            self._connect_children(ch._children, child_indices + [i])

    def _connect_child(self, child, child_indices):
        child._component.on_python_state_changed(
            lambda state: self._handle_python_state_changed(state, child_indices))

    def _handle_python_state_changed(self, state, child_indices):
        ptr = self
        for ind in child_indices:
            ptr = ptr._children[ind]
        for key, val in state.items():
            ptr._python_state[key] = val  # for snapshot
        if self._reactopya_widget:
            self._reactopya_widget.set_python_state(state, child_indices)

    def _handle_javascript_state_changed(self, state, child_indices):
        ptr = self
        for ind in child_indices:
            ptr = ptr._children[ind]
        for key, val in state.items():
            ptr._javascript_state[key] = val  # for snapshot
        ptr._component._handle_javascript_state_changed(state)

    def _serialize(self, include_javascript_state=False, include_python_state=False, include_bundle_fname=False):
        obj = dict(
            project_name='ephys_viz',
            type='TimeseriesView',
            children=[
                ch._serialize(include_javascript_state=include_javascript_state,
                              include_python_state=include_python_state, include_bundle_fname=include_bundle_fname)
                for ch in self._children
            ],
            props=_json_serialize(self._props)
        )
        if include_javascript_state:
            obj['javascript_state'] = _json_serialize(self._javascript_state)
        if include_python_state:
            obj['python_state'] = _json_serialize(self._python_state)
        if include_bundle_fname:
            dirname = os.path.dirname(os.path.realpath(__file__))
            obj['bundle_fname'] = os.path.join(dirname, 'dist', 'bundle.js')

        return obj

    def _reactopya_widget(self):
        return self._reactopya_widget

    def show(self):
        init_info = _get_init_info()
        if init_info['mode'] == 'jupyter':
            from reactopya_jup import ReactopyaWidget as ReactopyaJupyterWidget
            RW = ReactopyaJupyterWidget
        elif init_info['mode'] == 'colab':
            RW = ReactopyaColabWidget
        elif init_info['mode'] == 'electron':
            RW = ReactopyaElectronWidget
        self._reactopya_widget = RW(
            project_name='ephys_viz',
            type='TimeseriesView',
            children=[
                ch._serialize()
                for ch in self._children
            ],
            props=self._props
        )
        if init_info['mode'] == 'colab':
            self._reactopya_widget._set_bundle_js(
                init_info['bundle_js'], store_bundle_in_notebook=init_info['store_bundle_in_notebook'])
        elif init_info['mode'] == 'electron':
            self._reactopya_widget._set_bundle_fname(init_info['bundle_fname'])
            self._reactopya_widget._set_electron_src(init_info['electron_src'])
        self._reactopya_widget.on_javascript_state_changed(
            self._handle_javascript_state_changed)

        self._reactopya_widget.show()

    def export_snapshot(self, output_fname, *, format):
        import simplejson
        if format is not 'html':
            raise Exception('Unsupported format: {}'.format(format))
        serialized_widget = self._serialize(
            include_javascript_state=True, include_python_state=True, include_bundle_fname=True)
        project_names = _get_all_project_names(serialized_widget)
        project_bundle_fnames = _get_project_bundle_fnames(serialized_widget)
        snapshot = dict(
            serialized_widget=serialized_widget,
            project_names=project_names,
            project_bundles=[_read_text_file(
                project_bundle_fnames[project_name]) for project_name in project_names]
        )

        html = '''
<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8" />

    <!-- Disable caching by browser -->
    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">
    <meta http-equiv="Pragma" content="no-cache">
    <meta http-equiv="Expires" content="0">

    <title></title>

    <style>
        body {
            font-family: sans-serif;
            margin: 0;
            padding: 0;
        }

        #root {
            height: 100vh;
            width: 100vw;

            display: flex;
            flex-direction: column;
            overflow: auto;

            /* background: #b8c1c3; */
        }
        .main-container-column {
            display: flex;
            flex-direction: column;
            height: calc(100vh - 180px);
        }
    </style>
</head>

<body>
    <script type="text/javascript">

        var snapshot = get_snapshot_json_b64();
        snapshot = JSON.parse(atob(snapshot));
        for (let js of snapshot.project_bundles) {
            eval(js);
        }
        window.snapshot=snapshot;

        var sw = snapshot.serialized_widget;
        set_init_state_on_props(sw);

        window.reactopya.disable_python_backend = true;

        var div = document.createElement('div');
        div.id = 'root';
        document.body.appendChild(div);
        window.reactopya.widgets[sw.project_name][sw.type].render(div, sw.children, sw.props, sw.key || '');

        function set_init_state_on_props(serialized_widget) {
            let init_state = {};
            for (let key in serialized_widget.javascript_state) {
                init_state[key] = serialized_widget.javascript_state[key];
            }
            for (let key in serialized_widget.python_state) {
                init_state[key] = serialized_widget.python_state[key];
            }
            serialized_widget.props.reactopya_init_state = init_state;
            for (let child of serialized_widget.children) {
                set_init_state_on_props(child);
            }
        }

        function get_snapshot_json_b64() {
            return "[snapshot_json_b64]";
        }

    </script>
</body>

</html>
        '''
        html = html.replace('[snapshot_json_b64]', base64.b64encode(simplejson.dumps(snapshot, ignore_nan=True).encode('utf-8')).decode())
        with open(output_fname, 'w') as f:
            f.write(html)


class SpikeForestAnalysis:
    """Jupyter widget for SpikeForestAnalysis"""

    def __init__(self, *args, **kwargs):
        super().__init__()
        self._props = dict(**kwargs)
        self._children = list(args)
        self._component = SpikeForestAnalysisOrig()
        self._component.on_python_state_changed(
            lambda state: self._handle_python_state_changed(state, []))
        self._connect_children(self._children, [])
        self._reactopya_widget = None
        self._javascript_state = dict()  # for snapshot
        self._python_state = dict()  # for snapshot
        self._component.init_jupyter()

    def _connect_children(self, children, child_indices):
        for i, ch in enumerate(children):
            self._connect_child(ch, child_indices + [i])
            self._connect_children(ch._children, child_indices + [i])

    def _connect_child(self, child, child_indices):
        child._component.on_python_state_changed(
            lambda state: self._handle_python_state_changed(state, child_indices))

    def _handle_python_state_changed(self, state, child_indices):
        ptr = self
        for ind in child_indices:
            ptr = ptr._children[ind]
        for key, val in state.items():
            ptr._python_state[key] = val  # for snapshot
        if self._reactopya_widget:
            self._reactopya_widget.set_python_state(state, child_indices)

    def _handle_javascript_state_changed(self, state, child_indices):
        ptr = self
        for ind in child_indices:
            ptr = ptr._children[ind]
        for key, val in state.items():
            ptr._javascript_state[key] = val  # for snapshot
        ptr._component._handle_javascript_state_changed(state)

    def _serialize(self, include_javascript_state=False, include_python_state=False, include_bundle_fname=False):
        obj = dict(
            project_name='ephys_viz',
            type='SpikeForestAnalysis',
            children=[
                ch._serialize(include_javascript_state=include_javascript_state,
                              include_python_state=include_python_state, include_bundle_fname=include_bundle_fname)
                for ch in self._children
            ],
            props=_json_serialize(self._props)
        )
        if include_javascript_state:
            obj['javascript_state'] = _json_serialize(self._javascript_state)
        if include_python_state:
            obj['python_state'] = _json_serialize(self._python_state)
        if include_bundle_fname:
            dirname = os.path.dirname(os.path.realpath(__file__))
            obj['bundle_fname'] = os.path.join(dirname, 'dist', 'bundle.js')

        return obj

    def _reactopya_widget(self):
        return self._reactopya_widget

    def show(self):
        init_info = _get_init_info()
        if init_info['mode'] == 'jupyter':
            from reactopya_jup import ReactopyaWidget as ReactopyaJupyterWidget
            RW = ReactopyaJupyterWidget
        elif init_info['mode'] == 'colab':
            RW = ReactopyaColabWidget
        elif init_info['mode'] == 'electron':
            RW = ReactopyaElectronWidget
        self._reactopya_widget = RW(
            project_name='ephys_viz',
            type='SpikeForestAnalysis',
            children=[
                ch._serialize()
                for ch in self._children
            ],
            props=self._props
        )
        if init_info['mode'] == 'colab':
            self._reactopya_widget._set_bundle_js(
                init_info['bundle_js'], store_bundle_in_notebook=init_info['store_bundle_in_notebook'])
        elif init_info['mode'] == 'electron':
            self._reactopya_widget._set_bundle_fname(init_info['bundle_fname'])
            self._reactopya_widget._set_electron_src(init_info['electron_src'])
        self._reactopya_widget.on_javascript_state_changed(
            self._handle_javascript_state_changed)

        self._reactopya_widget.show()

    def export_snapshot(self, output_fname, *, format):
        import simplejson
        if format is not 'html':
            raise Exception('Unsupported format: {}'.format(format))
        serialized_widget = self._serialize(
            include_javascript_state=True, include_python_state=True, include_bundle_fname=True)
        project_names = _get_all_project_names(serialized_widget)
        project_bundle_fnames = _get_project_bundle_fnames(serialized_widget)
        snapshot = dict(
            serialized_widget=serialized_widget,
            project_names=project_names,
            project_bundles=[_read_text_file(
                project_bundle_fnames[project_name]) for project_name in project_names]
        )

        html = '''
<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8" />

    <!-- Disable caching by browser -->
    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">
    <meta http-equiv="Pragma" content="no-cache">
    <meta http-equiv="Expires" content="0">

    <title></title>

    <style>
        body {
            font-family: sans-serif;
            margin: 0;
            padding: 0;
        }

        #root {
            height: 100vh;
            width: 100vw;

            display: flex;
            flex-direction: column;
            overflow: auto;

            /* background: #b8c1c3; */
        }
        .main-container-column {
            display: flex;
            flex-direction: column;
            height: calc(100vh - 180px);
        }
    </style>
</head>

<body>
    <script type="text/javascript">

        var snapshot = get_snapshot_json_b64();
        snapshot = JSON.parse(atob(snapshot));
        for (let js of snapshot.project_bundles) {
            eval(js);
        }
        window.snapshot=snapshot;

        var sw = snapshot.serialized_widget;
        set_init_state_on_props(sw);

        window.reactopya.disable_python_backend = true;

        var div = document.createElement('div');
        div.id = 'root';
        document.body.appendChild(div);
        window.reactopya.widgets[sw.project_name][sw.type].render(div, sw.children, sw.props, sw.key || '');

        function set_init_state_on_props(serialized_widget) {
            let init_state = {};
            for (let key in serialized_widget.javascript_state) {
                init_state[key] = serialized_widget.javascript_state[key];
            }
            for (let key in serialized_widget.python_state) {
                init_state[key] = serialized_widget.python_state[key];
            }
            serialized_widget.props.reactopya_init_state = init_state;
            for (let child of serialized_widget.children) {
                set_init_state_on_props(child);
            }
        }

        function get_snapshot_json_b64() {
            return "[snapshot_json_b64]";
        }

    </script>
</body>

</html>
        '''
        html = html.replace('[snapshot_json_b64]', base64.b64encode(simplejson.dumps(snapshot, ignore_nan=True).encode('utf-8')).decode())
        with open(output_fname, 'w') as f:
            f.write(html)


class Tabs:
    """Jupyter widget for Tabs"""

    def __init__(self, *args, **kwargs):
        super().__init__()
        self._props = dict(**kwargs)
        self._children = list(args)
        self._component = TabsOrig()
        self._component.on_python_state_changed(
            lambda state: self._handle_python_state_changed(state, []))
        self._connect_children(self._children, [])
        self._reactopya_widget = None
        self._javascript_state = dict()  # for snapshot
        self._python_state = dict()  # for snapshot
        self._component.init_jupyter()

    def _connect_children(self, children, child_indices):
        for i, ch in enumerate(children):
            self._connect_child(ch, child_indices + [i])
            self._connect_children(ch._children, child_indices + [i])

    def _connect_child(self, child, child_indices):
        child._component.on_python_state_changed(
            lambda state: self._handle_python_state_changed(state, child_indices))

    def _handle_python_state_changed(self, state, child_indices):
        ptr = self
        for ind in child_indices:
            ptr = ptr._children[ind]
        for key, val in state.items():
            ptr._python_state[key] = val  # for snapshot
        if self._reactopya_widget:
            self._reactopya_widget.set_python_state(state, child_indices)

    def _handle_javascript_state_changed(self, state, child_indices):
        ptr = self
        for ind in child_indices:
            ptr = ptr._children[ind]
        for key, val in state.items():
            ptr._javascript_state[key] = val  # for snapshot
        ptr._component._handle_javascript_state_changed(state)

    def _serialize(self, include_javascript_state=False, include_python_state=False, include_bundle_fname=False):
        obj = dict(
            project_name='ephys_viz',
            type='Tabs',
            children=[
                ch._serialize(include_javascript_state=include_javascript_state,
                              include_python_state=include_python_state, include_bundle_fname=include_bundle_fname)
                for ch in self._children
            ],
            props=_json_serialize(self._props)
        )
        if include_javascript_state:
            obj['javascript_state'] = _json_serialize(self._javascript_state)
        if include_python_state:
            obj['python_state'] = _json_serialize(self._python_state)
        if include_bundle_fname:
            dirname = os.path.dirname(os.path.realpath(__file__))
            obj['bundle_fname'] = os.path.join(dirname, 'dist', 'bundle.js')

        return obj

    def _reactopya_widget(self):
        return self._reactopya_widget

    def show(self):
        init_info = _get_init_info()
        if init_info['mode'] == 'jupyter':
            from reactopya_jup import ReactopyaWidget as ReactopyaJupyterWidget
            RW = ReactopyaJupyterWidget
        elif init_info['mode'] == 'colab':
            RW = ReactopyaColabWidget
        elif init_info['mode'] == 'electron':
            RW = ReactopyaElectronWidget
        self._reactopya_widget = RW(
            project_name='ephys_viz',
            type='Tabs',
            children=[
                ch._serialize()
                for ch in self._children
            ],
            props=self._props
        )
        if init_info['mode'] == 'colab':
            self._reactopya_widget._set_bundle_js(
                init_info['bundle_js'], store_bundle_in_notebook=init_info['store_bundle_in_notebook'])
        elif init_info['mode'] == 'electron':
            self._reactopya_widget._set_bundle_fname(init_info['bundle_fname'])
            self._reactopya_widget._set_electron_src(init_info['electron_src'])
        self._reactopya_widget.on_javascript_state_changed(
            self._handle_javascript_state_changed)

        self._reactopya_widget.show()

    def export_snapshot(self, output_fname, *, format):
        import simplejson
        if format is not 'html':
            raise Exception('Unsupported format: {}'.format(format))
        serialized_widget = self._serialize(
            include_javascript_state=True, include_python_state=True, include_bundle_fname=True)
        project_names = _get_all_project_names(serialized_widget)
        project_bundle_fnames = _get_project_bundle_fnames(serialized_widget)
        snapshot = dict(
            serialized_widget=serialized_widget,
            project_names=project_names,
            project_bundles=[_read_text_file(
                project_bundle_fnames[project_name]) for project_name in project_names]
        )

        html = '''
<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8" />

    <!-- Disable caching by browser -->
    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">
    <meta http-equiv="Pragma" content="no-cache">
    <meta http-equiv="Expires" content="0">

    <title></title>

    <style>
        body {
            font-family: sans-serif;
            margin: 0;
            padding: 0;
        }

        #root {
            height: 100vh;
            width: 100vw;

            display: flex;
            flex-direction: column;
            overflow: auto;

            /* background: #b8c1c3; */
        }
        .main-container-column {
            display: flex;
            flex-direction: column;
            height: calc(100vh - 180px);
        }
    </style>
</head>

<body>
    <script type="text/javascript">

        var snapshot = get_snapshot_json_b64();
        snapshot = JSON.parse(atob(snapshot));
        for (let js of snapshot.project_bundles) {
            eval(js);
        }
        window.snapshot=snapshot;

        var sw = snapshot.serialized_widget;
        set_init_state_on_props(sw);

        window.reactopya.disable_python_backend = true;

        var div = document.createElement('div');
        div.id = 'root';
        document.body.appendChild(div);
        window.reactopya.widgets[sw.project_name][sw.type].render(div, sw.children, sw.props, sw.key || '');

        function set_init_state_on_props(serialized_widget) {
            let init_state = {};
            for (let key in serialized_widget.javascript_state) {
                init_state[key] = serialized_widget.javascript_state[key];
            }
            for (let key in serialized_widget.python_state) {
                init_state[key] = serialized_widget.python_state[key];
            }
            serialized_widget.props.reactopya_init_state = init_state;
            for (let child of serialized_widget.children) {
                set_init_state_on_props(child);
            }
        }

        function get_snapshot_json_b64() {
            return "[snapshot_json_b64]";
        }

    </script>
</body>

</html>
        '''
        html = html.replace('[snapshot_json_b64]', base64.b64encode(simplejson.dumps(snapshot, ignore_nan=True).encode('utf-8')).decode())
        with open(output_fname, 'w') as f:
            f.write(html)


class CorticalSurface:
    """Jupyter widget for CorticalSurface"""

    def __init__(self, *args, **kwargs):
        super().__init__()
        self._props = dict(**kwargs)
        self._children = list(args)
        self._component = CorticalSurfaceOrig()
        self._component.on_python_state_changed(
            lambda state: self._handle_python_state_changed(state, []))
        self._connect_children(self._children, [])
        self._reactopya_widget = None
        self._javascript_state = dict()  # for snapshot
        self._python_state = dict()  # for snapshot
        self._component.init_jupyter()

    def _connect_children(self, children, child_indices):
        for i, ch in enumerate(children):
            self._connect_child(ch, child_indices + [i])
            self._connect_children(ch._children, child_indices + [i])

    def _connect_child(self, child, child_indices):
        child._component.on_python_state_changed(
            lambda state: self._handle_python_state_changed(state, child_indices))

    def _handle_python_state_changed(self, state, child_indices):
        ptr = self
        for ind in child_indices:
            ptr = ptr._children[ind]
        for key, val in state.items():
            ptr._python_state[key] = val  # for snapshot
        if self._reactopya_widget:
            self._reactopya_widget.set_python_state(state, child_indices)

    def _handle_javascript_state_changed(self, state, child_indices):
        ptr = self
        for ind in child_indices:
            ptr = ptr._children[ind]
        for key, val in state.items():
            ptr._javascript_state[key] = val  # for snapshot
        ptr._component._handle_javascript_state_changed(state)

    def _serialize(self, include_javascript_state=False, include_python_state=False, include_bundle_fname=False):
        obj = dict(
            project_name='ephys_viz',
            type='CorticalSurface',
            children=[
                ch._serialize(include_javascript_state=include_javascript_state,
                              include_python_state=include_python_state, include_bundle_fname=include_bundle_fname)
                for ch in self._children
            ],
            props=_json_serialize(self._props)
        )
        if include_javascript_state:
            obj['javascript_state'] = _json_serialize(self._javascript_state)
        if include_python_state:
            obj['python_state'] = _json_serialize(self._python_state)
        if include_bundle_fname:
            dirname = os.path.dirname(os.path.realpath(__file__))
            obj['bundle_fname'] = os.path.join(dirname, 'dist', 'bundle.js')

        return obj

    def _reactopya_widget(self):
        return self._reactopya_widget

    def show(self):
        init_info = _get_init_info()
        if init_info['mode'] == 'jupyter':
            from reactopya_jup import ReactopyaWidget as ReactopyaJupyterWidget
            RW = ReactopyaJupyterWidget
        elif init_info['mode'] == 'colab':
            RW = ReactopyaColabWidget
        elif init_info['mode'] == 'electron':
            RW = ReactopyaElectronWidget
        self._reactopya_widget = RW(
            project_name='ephys_viz',
            type='CorticalSurface',
            children=[
                ch._serialize()
                for ch in self._children
            ],
            props=self._props
        )
        if init_info['mode'] == 'colab':
            self._reactopya_widget._set_bundle_js(
                init_info['bundle_js'], store_bundle_in_notebook=init_info['store_bundle_in_notebook'])
        elif init_info['mode'] == 'electron':
            self._reactopya_widget._set_bundle_fname(init_info['bundle_fname'])
            self._reactopya_widget._set_electron_src(init_info['electron_src'])
        self._reactopya_widget.on_javascript_state_changed(
            self._handle_javascript_state_changed)

        self._reactopya_widget.show()

    def export_snapshot(self, output_fname, *, format):
        import simplejson
        if format is not 'html':
            raise Exception('Unsupported format: {}'.format(format))
        serialized_widget = self._serialize(
            include_javascript_state=True, include_python_state=True, include_bundle_fname=True)
        project_names = _get_all_project_names(serialized_widget)
        project_bundle_fnames = _get_project_bundle_fnames(serialized_widget)
        snapshot = dict(
            serialized_widget=serialized_widget,
            project_names=project_names,
            project_bundles=[_read_text_file(
                project_bundle_fnames[project_name]) for project_name in project_names]
        )

        html = '''
<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8" />

    <!-- Disable caching by browser -->
    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">
    <meta http-equiv="Pragma" content="no-cache">
    <meta http-equiv="Expires" content="0">

    <title></title>

    <style>
        body {
            font-family: sans-serif;
            margin: 0;
            padding: 0;
        }

        #root {
            height: 100vh;
            width: 100vw;

            display: flex;
            flex-direction: column;
            overflow: auto;

            /* background: #b8c1c3; */
        }
        .main-container-column {
            display: flex;
            flex-direction: column;
            height: calc(100vh - 180px);
        }
    </style>
</head>

<body>
    <script type="text/javascript">

        var snapshot = get_snapshot_json_b64();
        snapshot = JSON.parse(atob(snapshot));
        for (let js of snapshot.project_bundles) {
            eval(js);
        }
        window.snapshot=snapshot;

        var sw = snapshot.serialized_widget;
        set_init_state_on_props(sw);

        window.reactopya.disable_python_backend = true;

        var div = document.createElement('div');
        div.id = 'root';
        document.body.appendChild(div);
        window.reactopya.widgets[sw.project_name][sw.type].render(div, sw.children, sw.props, sw.key || '');

        function set_init_state_on_props(serialized_widget) {
            let init_state = {};
            for (let key in serialized_widget.javascript_state) {
                init_state[key] = serialized_widget.javascript_state[key];
            }
            for (let key in serialized_widget.python_state) {
                init_state[key] = serialized_widget.python_state[key];
            }
            serialized_widget.props.reactopya_init_state = init_state;
            for (let child of serialized_widget.children) {
                set_init_state_on_props(child);
            }
        }

        function get_snapshot_json_b64() {
            return "[snapshot_json_b64]";
        }

    </script>
</body>

</html>
        '''
        html = html.replace('[snapshot_json_b64]', base64.b64encode(simplejson.dumps(snapshot, ignore_nan=True).encode('utf-8')).decode())
        with open(output_fname, 'w') as f:
            f.write(html)



def _get_all_project_names(serialized_widget):
    ret = []
    ret.append(serialized_widget['project_name'])
    for ch in serialized_widget.get('children', []):
        ret = ret + _get_all_project_names(ch)
    return list(set(ret))  # unique elements of array


def _get_project_bundle_fnames(serialized_widget):
    ret = dict()
    ret[serialized_widget['project_name']] = serialized_widget['bundle_fname']
    for ch in serialized_widget.get('children', []):
        a = _get_project_bundle_fnames(ch)
        for key, val in a.items():
            ret[key] = val
    return ret


def _read_text_file(fname):
    with open(fname, 'r') as f:
        return f.read()


def _listify_ndarray(x):
    if x.ndim == 1:
        if np.issubdtype(x.dtype, np.integer):
            return [int(val) for val in x]
        else:
            return [float(val) for val in x]
    elif x.ndim == 2:
        ret = []
        for j in range(x.shape[1]):
            ret.append(_listify_ndarray(x[:, j]))
        return ret
    elif x.ndim == 3:
        ret = []
        for j in range(x.shape[2]):
            ret.append(_listify_ndarray(x[:, :, j]))
        return ret
    elif x.ndim == 4:
        ret = []
        for j in range(x.shape[3]):
            ret.append(_listify_ndarray(x[:, :, :, j]))
        return ret
    else:
        raise Exception('Cannot listify ndarray with {} dims.'.format(x.ndim))


def _json_serialize(x):
    import numpy as np
    if isinstance(x, np.ndarray):
        return _listify_ndarray(x)
    elif isinstance(x, np.integer):
        return int(x)
    elif isinstance(x, np.floating):
        return float(x)
    elif type(x) == dict:
        ret = dict()
        for key, val in x.items():
            ret[key] = _json_serialize(val)
        return ret
    elif type(x) == list:
        ret = []
        for i, val in enumerate(x):
            ret.append(_json_serialize(val))
        return ret
    else:
        return x