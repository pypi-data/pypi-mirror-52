Metadata-Version: 2.1
Name: orbdetpy
Version: 0.2.2
Summary: Orbit determination routines for Python
Home-page: https://github.com/ut-astria/orbdetpy
Author: Shiva Iyer
Author-email: shiva.iyer@utexas.edu
License: UNKNOWN
Project-URL: Documentation, https://github.com/ut-astria/orbdetpy
Project-URL: Source, https://github.com/ut-astria/orbdetpy
Project-URL: Tracker, https://github.com/ut-astria/orbdetpy/issues
Keywords: orbit_determination utilities orbit space celestial_mechanics astrodynamics estimation satellite_tracking
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Environment :: Console
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: GNU General Public License (GPL)
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.3
Classifier: Programming Language :: Python :: 3.4
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Java
Classifier: Topic :: Scientific/Engineering
Classifier: Topic :: Scientific/Engineering :: Astronomy
Classifier: Topic :: Utilities
Description-Content-Type: text/markdown
Requires-Dist: Cython (>=0.29.11)
Requires-Dist: matplotlib (>=3.1.0)
Requires-Dist: numpy (>=1.16.4)
Requires-Dist: scipy (>=1.3.0)
Requires-Dist: pyjnius (>=1.2.0)
Requires-Dist: requests (>=2.22.0)

Introduction
------------

This is orbdetpy, a library of Python and Java routines for orbit
determination. It is a thin Python wrapper for our estimation tools
and Orekit, which are both written in Java. 

Features
--------

The force model for orbit propagation currently includes:

1. EGM96 gravity field up to degree and order 360.
2. Earth solid tides due to the influence of the Sun and Moon.
3. FES 2004 ocean tide model up to degree and order 100.
4. The NRL MSISE-00 and simple exponential models for atmospheric drag.
5. Solar radiation pressure.
6. Third body perturbations from the Sun and Moon.

The measurement model supports range, range-rate, angles, and inertial
Cartesian coordinates. Filtering is done using Orekit's Extended Kalman
Filter or our custom Unscented Kalman Filter. Dynamic Model Compensation
(DMC) can be used with either filter to estimate additional perturbing
acclerations that result from unmodeled dynamics, maneuvers etc.

You can either use your own measurements or simulate observations using
the `simulateMeasurements()` function.

Installation
------------

1. Install the Java Development Kit 8 (1.8) from
   <http://openjdk.java.net/install/index.html>. Set the JAVA_HOME
   environment variable to point to your JDK installation.
2. Install Python 3.6+ and run `pip install orbdetpy` to install orbdetpy 
   and other package dependencies from the Python Package Index (PyPI).
   If you wish to use the `develop` or other experimental branches from
   GitHub, `git clone` them and run `pip install -e .` from the top level
   `orbdetpy` folder.
3. Source code, example programs and data files can be downloaded from 
   <https://github.com/ut-astria/orbdetpy>.

The orbdetpy/lib folder contains JAR files for the following libraries,
which are imported by orbdetpy automatically.

1. <https://github.com/google/gson>
2. <https://hipparchus.org> 
3. <https://www.orekit.org>

Update the astrodynamics data in orbdetpy/data periodically by calling
the `update_data()` function in the `astrodata` module.

Examples
--------

The following example programs can be found in the 'examples' folder.
These examples use the Python wrapper interface but calling the
underlying Java implementation directly is straightforward.

1. `testsim.py` : Demonstrates the measurement simulator. Note that
   maneuvers can be incorporated into the force model during simulation.

2. `plotsim.py` : Plots the results of simulations created using testsim.py.

3. `testodet.py` : Demonstrates orbit determination in orbdetpy.

4. `plotodet.py` : Plots the results of fitting orbits using testodet.py.

5. `run_tests.py` : Run all the use cases under examples/data. Simulated
   measurements, orbit fits, differences between simulated truth versus
   estimates, and 3-sigma of estimated covariances will be written to
   output/ sub-folders.

orbdetpy uses JSON files to store settings, measurements and estimation
results. The files in examples/data show how to configure measurement
simulation and orbit determination using radar or telescope data. The
file docs/file_formats.md documents the structure of the JSON files.

The following are some typical use cases. It is assumed that the current
working directory is examples/data.

1. Simulate state vectors and radar measurements:

   `python ../testsim.py radar_sim_cfg.json sim_data.json`

   This will run the simulation configured in radar_sim_cfg.json and
   write simulated output to sim_data.json.

2. Plot simulation results:

   `python ../plotsim.py radar_sim_cfg.json sim_data.json`

   This will plot the simulated data generated in (1).

3. Run OD on simulated radar data:

   `python ../testodet.py radar_od_cfg.json sim_data.json od_output.json`

   This will run OD on the simulated radar data generated in (1)
   using the OD configuration in radar_od_cfg.json and write OD
   output to od_output.json.

4. Plot OD results:

   `python ../plotodet.py radar_od_cfg.json sim_data.json od_output.json`

   This will plot the OD results from (3).

Known Issues
------------

1. Java "Out of heap space" errors:

   The Java Virtual Machine with default settings may run out of heap
   space during long term simulations or orbit fits. The workaround
   is to add the following to the top of your Python code, before
   orbdetpy is imported. The value following "-Xmx" is the maximum
   heap size you wish to assign to Java; "G" stands for gigabytes.

   `import jnius_config`

   `jnius_config.add_options("-Xmx2G")`


