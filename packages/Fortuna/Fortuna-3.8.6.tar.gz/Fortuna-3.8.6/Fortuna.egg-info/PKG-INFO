Metadata-Version: 2.1
Name: Fortuna
Version: 3.8.6
Summary: Custom Random Value Generators
Home-page: https://www.patreon.com/brokencode
Author: Robert Sharp
Author-email: webmaster@sharpdesigndigital.com
License: Free for non-commercial use
Description: # Fortuna: A Collection of Random Value Generators for Python3
        Fortuna's main goal is to provide a quick and easy way to build custom random-value generators for your data.
        
        The core functionality of Fortuna is based on the Storm RNG Engine. While Storm is a high quality random engine, Fortuna is not appropriate for cryptography of any kind. Fortuna is meant for games, data science, A.I. and experimental programming, not security.
        
        ### Sister Projects:
        - RNG: Python3 API for the C++ Random Library. https://pypi.org/project/RNG/
        - Pyewacket: Drop-in replacement for the Python3 random module. https://pypi.org/project/Pyewacket/
        - MonkeyScope: Framework for testing non-deterministic generators. https://pypi.org/project/MonkeyScope/
        
        Support these and other random projects: https://www.patreon.com/brokencode
        
        ### Quick Install
        ``` 
        $ pip install Fortuna
        $ python3
        >>> import Fortuna ...
        ```
        
        ### Installation may require the following:
        - Python 3.7 or later with dev tools (setuptools, pip, etc.)
        - Cython: `pip install Cython`
        - Modern C++17 compiler and standard library for your platform.
        
        ---
        
        ### Table of Contents:
        - Numeric Limits
        - Project Terminology
        - Random Generators:
            - Value Generators
                - `RandomValue(Collection) -> Callable -> Value`
                - `TruffleShuffle(Collection) -> Callable -> Value`
                - `QuantumMonty(Collection) -> Callable -> Value`
                - `CumulativeWeightedChoice(Table) -> Callable -> Value`
                - `RelativeWeightedChoice(Table) -> Callable -> Value`
                - `FlexCat(Matrix) -> Callable -> Value`
            - Integer Generators
                - `random_below(Integer) -> Integer`
                - `random_int(Integer, Integer) -> Integer`
                - `random_range(Integer, Integer, Integer) -> Integer`
                - `d(Integer) -> Integer`
                - `dice(Integer, Integer) -> Integer`
                - `plus_or_minus(Integer) -> Integer`
                - `plus_or_minus_linear(Integer) -> Integer`
                - `plus_or_minus_gauss(Integer) -> Integer`
            - Index Generators: 
                - ZeroCool Specification: `f(N) -> [0, N)` or `f(-N) -> [-N, 0)`
                - `random_index(Integer) -> Integer`
                - `front_gauss(Integer) -> Integer`
                - `middle_gauss(Integer) -> Integer`
                - `back_gauss(Integer) -> Integer`
                - `quantum_gauss(Integer) -> Integer`
                - `front_poisson(Integer) -> Integer`
                - `middle_poisson(Integer) -> Integer`
                - `back_poisson(Integer) -> Integer`
                - `quantum_poisson(Integer) -> Integer`
                - `front_geometric(Integer) -> Integer`
                - `middle_geometric(Integer) -> Integer`
                - `back_geometric(Integer) -> Integer`
                - `quantum_geometric(Integer) -> Integer`
                - `quantum_monty(Integer) -> Integer`
            - Float Generators
                - `canonical() -> Float`
                - `random_float(Float, Float) -> Float`
                - `triangular(Float, Float, Float) -> Float`
            - Boolean Generator
                - `percent_true(Float) -> Boolean`
            - Inplace Shuffle
                - `shuffle(List) -> None`
        - Development Log
        - Test Suite Output
        - Legal Information
        
        
        #### Numeric Limits:
        - Integer: 64 bit signed integer.
            - Range: ±9223372036854775807, approximately ±9.2 billion billion
        - Float: 64 bit floating point.
            - Range: ±1.7976931348623157e+308
            - Epsilon Delta: 5e-324
        
        
        #### Project Terminology:
        - Value: Almost anything in Python can be a Value.
            - Expressions, Generators, and F-strings should be wrapped in a lambda for dynamic evaluation.
        - Callable: Any callable object, function, method or lambda.
        - Collection: A group of Values.
            - List, Tuple, Set, etc... Any object that can be converted into a list via `list(some_object)`.
            - Comprehensions that produce a Collection also qualify.
            - Fortuna classes that wrap a Collection can wrap a Collection, Sequence or generator.
            - Fortuna functions that take a Collection as input will always require a Sequence.
        - Sequence: An ordered Collection.
            - List, tuple or list comprehension.
            - A Sequence is an ordered Collection that can be indexed like a list, without conversion.
            - All Sequences are Collections but not all Collections are Sequences.
        - Pair: Collection of two Values.
        - Table: Collection of Pairs.
        - Matrix: Dictionary of Collections.
        - Inclusive Range.
            - `[1, 10] -> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10`
        - Exclusive Range.
            - `(0, 11) -> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10`
        - Partially Exclusive Range.
            - `[1, 11) -> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10`
            - `(0, 10] -> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10`
        - Automatic Flattening.
            - Works with: RandomValue, TruffleShuffle, QuantumMonty, WeightedChoice & FlexCat.
            - Lazy Evaluation. All Random Value Generator Classes in Fortuna will recursively call or "flatten" callable objects returned from the data at call time.
            - Mixing callable objects with un-callable objects is fully supported, but it can look a bit messy.
            - Nested callable objects are fully supported. Because `lambda(lambda) -> lambda` fixes everything for arbitrary values of 'because', 'fixes' and 'everything'.
            - To disable automatic flattening, pass the optional keyword argument `flat=False` to the constructor.
            - **Under development:** It will soon be possible to auto-flatten callable objects that require multiple arguments. RandomValue already supports this feature.
        ----
        
        ## Random Value Generators
        
        ### Fortuna.RandomValue
        `Fortuna.RandomValue(data: Collection, flat=True) -> Callable -> Value`
        - @param data :: Collection of Values.
        - @param flat :: Bool. Default: True. Option to automatically flatten callable values with lazy evaluation.
        - @return :: Callable Object. `Callable(*args, zero_cool=random_index, range_to=0, **kwargs) -> Value`
            - @param zero_cool :: Optional ZeroCool Method, kwarg only. Default = random_index().
            - @param range_to :: Optional Integer in range [-N, N] where N is the length of the Collection. 
                - Default = 0, kwarg only. Parameter for ZeroCool Method.
                - Negative values of range_to indicate ranging from the back of the Collection. 
            - @param *args, **kwargs :: Optional arguments used to flatten the return Value.
            - @return Value or Value(*args, **kwargs) if it's Callable.
        
        ```python
        from Fortuna import RandomValue, front_linear, back_linear
        
        # Data Setup
        random_apple = RandomValue(("Delicious", "Empire", "Granny Smith", "Honey Crisp", "Macintosh"))
        random_fruit = RandomValue((
            lambda: f"Apple, {random_apple()}",
            "Banana",
            "Cherry",
            "Grapes",
            "Orange",
        ))
        
        # Usage
        print(random_fruit())
        # prints a random fruit with the default flat uniform distribution
        
        print(random_fruit(zero_cool=back_linear))
        # prints a random fruit with a back_linear distribution
        
        print(random_fruit(range_to=3))
        # prints a random fruit of the first 3
        
        print(random_fruit(zero_cool=front_linear, range_to=-3))
        # prints a random fruit of the last 3 with a front_linear distribution of that range.
        ```
        
        
        ### TruffleShuffle
        `Fortuna.TruffleShuffle(data: Collection, flat=True) -> Callable -> Value`
        - Non-destructive, copies the data once.
        - @param data :: Collection of Values. Set recommended but not required.
        - @param flat :: Bool. Default: True. Option to automatically flatten callable values with lazy evaluation.
        - @return :: Callable
            - @return :: Random value from the list with a **Wide Uniform Distribution**. The average width of the output distribution will naturally scale up with the size of the set.
        
        **Wide Uniform Distribution**: *"Wide"* refers to the average distance between consecutive occurrences of the same value in the output sequence. The goal of this type of distribution is to keep the output sequence free of clumps or streaks of the same value, while maintaining randomness and uniform probability. This is not the same as a *flat uniform distribution*. The two distributions over time will be statistically similar for any given set, but the repetitiveness of the output sequence will be very different.
        
        #### TruffleShuffle, Basic Use
        ```python
        from Fortuna import TruffleShuffle
        
        # Data Setup
        list_of_values = { 1, 2, 3, 4, 5, 6 }
        truffle_shuffle = TruffleShuffle(list_of_values)
        
        # Usage
        print(truffle_shuffle())  # this will print one of the numbers 1-6, 
        # over time it will produce a wide distribution.
        ```
        
        #### RandomValue with Auto Flattening Callable Objects
        ```python
        from Fortuna import RandomValue
        
        
        auto_flat = RandomValue([lambda: 1, lambda: 2, lambda: 3])
        print(auto_flat())  # will print the value 1, 2 or 3.
        # Note: the lambda will not be called until call time and stays dynamic for the life of the object.
        
        auto_flat_with = RandomValue([lambda x: x, lambda x: x + 1, lambda x:  x + 2])
        print(auto_flat_with(2))  # will print the value 2, 3 or 4
        # Note: if this is called with no args it will simply return the lambda in an uncalled state.
        
        un_flat = RandomValue([lambda: 1, lambda: 2, lambda: 3], flat=False)
        print(un_flat()())  # will print the value 1, 2 or 3, 
        # mind the double-double parenthesis, they are required to manually unpack the lambdas
        
        auto_un_flat = RandomValue([lambda x: x, lambda x: x + 1, lambda x:  x + 2], flat=False)
        # Note: flat=False is not required here because the lambdas can not be called without input x satisfied.
        # It is still recommended to specify flat=False if non-flat output is intend.
        print(auto_un_flat()(1))  # will print the value 1, 2 or 3, mind the double-double parenthesis
        ```
        
        #### Mixing Static Objects with Callable Objects
        ```python
        from Fortuna import RandomValue
        
        
        """ With automatic flattening active, lambda() -> int can be treated as an int. """
        mixed_flat = RandomValue([1, 2, lambda: 3])
        print(mixed_flat())  # will print 1, 2 or 3
        
        mixed_un_flat = RandomValue([1, 2, lambda: 3], flat=False) # this pattern is not recommended.
        print(mixed_flat())  # will print 1, 2 or "Function <lambda at some_address>"
        # This pattern is not recommended because you wont know the nature of what you get back.
        # This is almost always not what you want, and it can give rise to messy logic in other areas of your code.
        ```
        
        #### Dynamic Strings
        To successfully express a dynamic string, and keep it dynamic, at least one level of indirection is required. Without an indirection the f-string would collapse into a static string too soon.
        
        ```python
        from Fortuna import RandomValue, d
        
        
        # d() is a simple dice function, d(n) -> [1, n] flat uniform distribution.
        dynamic_string = RandomValue((
            # while the probability of all A == all B == all C, individual probabilities of each possible string will differ based on the number of possible outputs of each category.
            lambda: f"A{d(2)}",  # -> A1 - A2, each are twice as likely as any particular B, and three times as likely as any C.
            lambda: f"B{d(4)}",  # -> B1 - B4, each are half as likely as any particular A, and 3/2 as likely as any C.
            lambda: f"C{d(6)}",  # -> C1 - C6, each are 1/3 as likely as any particular A and 2/3 as likely of any B.
        ))
        
        print(dynamic_string())  # prints a random dynamic string, flattened at call time.
        
        """
        >>> distribution_timer(dynamic_string)
        Output Analysis: RandomValue(collection)()
        Typical Timing: 875 ± 15 ns
        Distribution of 100000 Samples:
         A1: 16.657%
         A2: 16.777%
         B1: 8.408%
         B2: 8.266%
         B3: 8.334%
         B4: 8.203%
         C1: 5.635%
         C2: 5.641%
         C3: 5.468%
         C4: 5.537%
         C5: 5.528%
         C6: 5.546%
         """
        ```
        
        #### Nesting Dolls
        ```python
        from Fortuna import RandomValue
        
        # Data Setup
        nesting_dolls = RandomValue({
            RandomValue({"A", "B", "C", "D", "E"}),
            RandomValue({"F", "G", "H", "I", "J"}),
            RandomValue({"K", "L", "M", "N", "O"}),
            RandomValue({"P", "Q", "R", "S", "T"}),
            ...
        })
        
        # Usage
        print(nesting_dolls())  # prints one of the letters A-T
        ```
        
        ### QuantumMonty
        `Fortuna.QuantumMonty(data: Collection, flat=True) -> Callable -> Value`
        - @param data :: Collection of Values.
        - @param flat :: Bool. Default: True. Option to automatically flatten callable values with lazy evaluation.
        - @return :: Callable Object with Monty Methods for producing various distributions of the data.
            - @return :: Random value from the data. The instance will produce random values from the list using the selected distribution model or "monty". The default monty is the Quantum Monty Algorithm.
        
        ```python
        from Fortuna import QuantumMonty
        
        # Data Setup
        list_of_values = [1, 2, 3, 4, 5, 6]
        monty = QuantumMonty(list_of_values)
        
        # Usage
        print(monty())               # prints a random value from the list_of_values.
                                     # uses the default Quantum Monty Algorithm.
        
        print(monty.flat_uniform())  # prints a random value from the list_of_values.
                                     # uses the "flat_uniform" monty.
                                     # equivalent to random.choice(list_of_values).
        ```
        The QuantumMonty class represents a diverse collection of strategies for producing random values from a sequence where the output distribution is based on the method you choose. Generally speaking, each value in the sequence will have a probability that is based on its position in the sequence. For example: the "front" monty produces random values where the beginning of the sequence is geometrically more common than the back. Given enough samples the "front" monty will always converge to a 45 degree slope down for any list of unique values.
        
        There are three primary method families: linear, gaussian, and poisson. Each family has three base methods; 'front', 'middle', 'back', plus a 'quantum' method that incorporates all three base methods. The quantum algorithms for each family produce distributions by overlapping the probability waves of the other methods in their family. The Quantum Monty Algorithm incorporates all nine base methods.
        
        ```python
        import Fortuna
        
        # Data Setup
        monty = Fortuna.QuantumMonty(
            ["Alpha", "Beta", "Delta", "Eta", "Gamma", "Kappa", "Zeta"]
        )
        
        # Usage
        # Each of the following methods will return a random value from the sequence.
        # Each method has its own unique distribution model.
        """ Flat Base Case """
        monty.flat_uniform()        # Flat Uniform Distribution
        """ Geometric Positional """
        monty.front_linear()        # Linear Descending, Triangle
        monty.middle_linear()       # Linear Median Peak, Equilateral Triangle
        monty.back_linear()         # Linear Ascending, Triangle
        monty.quantum_linear()      # Linear Overlay, 3-way monty.
        """ Gaussian Positional """
        monty.front_gauss()         # Front Gamma
        monty.middle_gauss()        # Scaled Gaussian
        monty.back_gauss()          # Reversed Gamma
        monty.quantum_gauss()       # Gaussian Overlay, 3-way monty.
        """ Poisson Positional """
        monty.front_poisson()       # 1/4 Mean Poisson
        monty.middle_poisson()      # 1/2 Mean Poisson
        monty.back_poisson()        # 3/4 Mean Poisson
        monty.quantum_poisson()     # Poisson Overlay, 3-way monty.
        """ Quantum Monty Algorithm """
        monty()                     # Quantum Monty Algorithm, 9-way monty.
        monty.quantum_monty()       #  same as above
        ```
        
        ### Weighted Choice: Base Class
        Weighted Choice offers two strategies for selecting random values from a sequence where programmable rarity is desired. Both produce a custom distribution of values based on the weights of the values.
        
        The choice to use one strategy over the other is purely about which one suits you or your data best. Relative weights are easier to understand at a glance. However, many RPG Treasure Tables map rather nicely to a cumulative weighted strategy.
        
        #### Cumulative Weighted Choice
        `Fortuna.CumulativeWeightedChoice(weighted_table: Table, flat=True) -> Callable -> Value`
        - @param weighted_table :: Table of weighted pairs.
        - @param flat :: Bool. Default: True. Option to automatically flatten callable values with lazy evaluation.
        - @return :: Callable Instance
            - @return :: Random value from the weighted_table, distribution based on the weights of the values.
        
        _Note: Logic dictates Cumulative Weights must be unique!_
        
        ```python
        from Fortuna import CumulativeWeightedChoice
        
        # Data Setup
        cum_weighted_choice = CumulativeWeightedChoice((
            (7, "Apple"),
            (11, "Banana"),
            (13, "Cherry"),
            (23, "Grape"),
            (26, "Lime"),
            (30, "Orange"),  # same as relative weight 4 because 30 - 26 = 4
        ))
        # Usage
        print(cum_weighted_choice())  # prints a weighted random value
        ```
        
        #### Relative Weighted Choice
        `Fortuna.RelativeWeightedChoice(weighted_table: Table) -> Callable -> Value`
        - @param weighted_table :: Table of weighted pairs.
        - @param flat :: Bool. Default: True. Option to automatically flatten callable values with lazy evaluation.
        - @return :: Callable Instance
            - @return :: Random value from the weighted_table, distribution based on the weights of the values.
        
        ```python
        from Fortuna import RelativeWeightedChoice
        
        # Data
        population = ["Apple", "Banana", "Cherry", "Grape", "Lime", "Orange"]
        rel_weights = [7, 4, 2, 10, 3, 4]
        
        # Setup
        rel_weighted_choice = RelativeWeightedChoice(zip(rel_weights, population))
        
        # Usage
        print(rel_weighted_choice())  # prints a weighted random value
        ```
        
        ### FlexCat
        `Fortuna.FlexCat(dict_of_lists: Matrix, key_bias="front_linear", val_bias="truffle_shuffle", flat=True) -> Callable -> Value`
        - @param dict_of_lists :: Keyed Matrix of Value Sequences.
        - @parm key_bias :: String indicating the name of the algorithm to use for random key selection.
        - @parm val_bias :: String indicating the name of the algorithm to use for random value selection.
        - @param flat :: Bool. Default: True. Option to automatically flatten callable values with lazy evaluation.
        - @return :: Callable Instance
            - @param cat_key :: Optional String. Default is None. Key selection by name. If specified, this will override the key_bias for a single call.
            - @return :: Value. Returns a random value generated with val_bias from a random sequence generated with key_bias.
        
        FlexCat is like a two dimensional QuantumMonty, or a QuantumMonty of QuantumMontys.
        
        The constructor takes two optional keyword arguments to specify the algorithms to be used to make random selections. The algorithm specified for selecting a key need not be the same as the one for selecting values. An optional key may be provided at call time to bypass the random key selection. Keys passed in this way must exactly match a key in the Matrix.
        
        By default, FlexCat will use key_bias="front_linear" and val_bias="truffle_shuffle", this will make the top of the data structure geometrically more common than the bottom and it will truffle shuffle the sequence values. This config is known as TopCat, it produces a descending-step, micro-shuffled distribution sequence. Many other combinations are available.
        
        Algorithmic Options: _See QuantumMonty & TruffleShuffle for more details._
        - "front_linear", Linear Descending
        - "middle_linear", Linear Median Peak
        - "back_linear", Linear Ascending
        - "quantum_linear", Linear 3-way monty
        - "front_gauss", Gamma Descending
        - "middle_gauss", Scaled Gaussian
        - "back_gauss", Gamma Ascending
        - "quantum_gauss", Gaussian 3-way monty
        - "front_poisson", Front 1/3 Mean Poisson
        - "middle_poisson", Middle Mean Poisson
        - "back_poisson", Back 1/3 Mean Poisson
        - "quantum_poisson", Poisson 3-way monty
        - "quantum_monty", Quantum Monty Algorithm, 9-way monty
        - "flat_uniform", uniform flat distribution
        - "truffle_shuffle", TruffleShuffle, wide uniform distribution
        
        ```python
        from Fortuna import FlexCat, d
        
        
        #                           |- Collection Generator, does not require lambda.
        # Data                      |
        matrix_data = {#            $                         |- Dynamic Value Expression
            "Cat_A": (f"A{i}" for i in range(1, 6)),  #       |  Lazy, 1 of 4
            "Cat_B": ("B1", "B2", "B3", "B4", "B5"),  #       $
            "Cat_C": ("C1", "C2", "C3", f"C4.{d(2)}", lambda: f"C5.{d(4)}"),
        }#   $       $       $              $                        $
        #    |       |       |- Value       |                        |- Fair die method
        #    |       |                      |
        #    |       |- Collection          |- Static Value Expression
        #    |                              |  Eager, 1 or 2 permanently
        #    |- Collection Key, "cat_key"
        
        #                               |- Collection Algorithm     |- Value Algorithm
        # Setup                         $  y-axis                   $  x-axis
        flex_cat = FlexCat(matrix_data, key_bias="front_linear", val_bias="flat_uniform")
        #    $       $       $
        #    |       |       |- Dictionary of Collections
        #    |       |
        #    |       |- FlexCat Constructor
        #    |       
        #    |- Callable Random Value Generator
        
        # Usage
        flex_cat()  # returns a Value from the Matrix.
        flex_cat(cat_key="Cat_B")  # returns a Value specifically from the "Cat_B" Collection.
        ```
        
        ### Random Integer Generators
        `Fortuna.random_below(number: int) -> int`
        - @param number :: Any Integer
        - @return :: Returns a random integer in the range...
            - `random_below(number) -> [0, number)` for positive values.
            - `random_below(number) -> (number, 0]` for negative values.
            - `random_below(0) -> 0` Always returns zero when input is zero
        - Flat uniform distribution.
        
        
        `Fortuna.random_int(left_limit: int, right_limit: int) -> int`
        - @param left_limit :: Any Integer
        - @param right_limit :: Any Integer
        - @return :: Returns a random integer in the range [left_limit, right_limit]
            - `random_int(1, 10) -> [1, 10]`
            - `random_int(10, 1) -> [1, 10]` same as above.
            - `random_int(A, B)` Always returns A when A == B
        - Flat uniform distribution.
        
        
        `Fortuna.random_range(start: int, stop: int = 0, step: int = 1) -> int`
        - @param start :: Required starting point.
            - `random_range(0) -> [0]`
            - `random_range(10) -> [0, 10)` from 0 to 9. Same as `Fortuna.random_index(N)`
            - `random_range(-10) -> [-10, 0)` from -10 to -1. Same as `Fortuna.random_index(-N)`
        - @param stop :: Zero by default. Optional range bound. With at least two arguments, the order of the first two does not matter.
            - `random_range(0, 0) -> [0]`
            - `random_range(0, 10) -> [0, 10)` from 0 to 9.
            - `random_range(10, 0) -> [0, 10)` same as above.
        - @param step :: One by default. Optional step size.
            - `random_range(0, 0, 0) -> [0]`
            - `random_range(0, 10, 2) -> [0, 10) by 2` even numbers from 0 to 8.
            - The sign of the step parameter controls the phase of the output. Negative stepping will flip the inclusively.
            - `random_range(0, 10, -1) -> (0, 10]` starts at 10 and ranges down to 1.
            - `random_range(10, 0, -1) -> (0, 10]` same as above.
            - `random_range(10, 10, 0) -> [10]` a step size or range size of zero always returns the first parameter.
        - @return :: Returns a random integer in the range [A, B) by increments of C.
        - Flat uniform distribution.
        
        
        `Fortuna.d(sides: int) -> int`
        - Represents a single roll of a given size die.
        - @param sides :: Any Integer. Represents the size or number of sides, most commonly six.
        - @return :: Returns a random integer in the range [1, sides].
        - Flat uniform distribution.
        
        
        `Fortuna.dice(rolls: int, sides: int) -> int`
        - Represents the sum of multiple rolls of the same size die.
        - @param rolls :: Any Integer. Represents the number of times to roll the die.
        - @param sides :: Any Integer. Represents the die size or number of sides, most commonly six.
        - @return :: Returns a random integer in range [X, Y] where X = rolls and Y = rolls * sides.
        - Geometric distribution based on the number and size of the dice rolled.
        - Complexity scales primarily with the number of rolls, not the size of the dice.
        
        
        `Fortuna.plus_or_minus(number: int) -> int`
        - @param number :: Any Integer.
        - @return :: Returns a random integer in range [-number, number].
        - Flat uniform distribution.
        
        
        `Fortuna.plus_or_minus_linear(number: int) -> int`
        - @param number :: Any Integer.
        - @return :: Returns a random integer in range [-number, number].
        - Linear geometric, 45 degree triangle distribution centered on zero.
        
        
        `Fortuna.plus_or_minus_gauss(number: int) -> int`
        - @param number :: Any Integer.
        - @return :: Returns a random integer in range [-number, number].
        - Stretched gaussian distribution centered on zero.
        
        
        ### Random Index, ZeroCool Specification
        ZeroCool Methods are used to generate random Sequence indices.
        
        ZeroCool methods must have the following properties:
        - Any distribution model is acceptable.
        - The method or function must take exactly one Integer parameter N.
        - The method returns a random int in range `[0, N)` for positive values of N.
        - The method returns a random int in range `[N, 0)` for negative values of N.
        - This symmetry matches how python can index a list from the back for negative index values or from the front for positive index values.
        
        
        ```python
        from Fortuna import random_index
        
        
        some_list = [i for i in range(100)]
        
        print(some_list[random_index(10)])  # prints one of the first 10 items of some_list, [0, 9]
        print(some_list[random_index(-10)])  # prints one of the last 10 items of some_list, [90, 99]
        ```
        ### ZeroCool Methods
        - `Fortuna.random_index(size: int) -> int` Flat uniform distribution
        - `Fortuna.front_gauss(size: int) -> int` Gamma Distribution: Front Peak
        - `Fortuna.middle_gauss(size: int) -> int` Stretched Gaussian Distribution: Median Peak
        - `Fortuna.back_gauss(size: int) -> int` Gamma Distribution: Back Peak
        - `Fortuna.quantum_gauss(size: int) -> int` Quantum Gaussian: Three-way Monty
        - `Fortuna.front_poisson(size: int) -> int` Poisson Distribution: Front 1/3 Peak
        - `Fortuna.middle_poisson(size: int) -> int` Poisson Distribution: Middle Peak
        - `Fortuna.back_poisson(size: int) -> int` Poisson Distribution: Back 1/3 Peak
        - `Fortuna.quantum_poisson(size: int) -> int` Quantum Poisson: Three-way Monty
        - `Fortuna.front_geometric(size: int) -> int` Linear Geometric: 45 Degree Front Peak
        - `Fortuna.middle_geometric(size: int) -> int` Linear Geometric: 45 Degree Middle Peak
        - `Fortuna.back_geometric(size: int) -> int` Linear Geometric: 45 Degree Back Peak
        - `Fortuna.quantum_geometric(size: int) -> int` Quantum Geometric: Three-way Monty
        - `Fortuna.quantum_monty(size: int) -> int` Quantum Monty: Twelve-way Monty
        
        ```python
        from Fortuna import front_gauss, middle_gauss, back_gauss, quantum_gauss
        
        
        some_list = [i for i in range(100)]
        
        # Each of the following prints one of the first 10 items of some_list with the appropriate distribution
        print(some_list[front_gauss(10)])
        print(some_list[middle_gauss(10)])
        print(some_list[back_gauss(10)])
        print(some_list[quantum_gauss(10)])
        
        # Each of the following prints one of the last 10 items of some_list with the appropriate distribution
        print(some_list[front_gauss(-10)])  
        print(some_list[middle_gauss(-10)])  
        print(some_list[back_gauss(-10)])  
        print(some_list[quantum_gauss(-10)])
        ```
        
        ### Random Float Generators
        `Fortuna.canonical() -> float`
        - @return :: random float in range [0.0, 1.0), flat uniform.
        
        
        `Fortuna.random_float(a: Float, b: Float) -> Float`
        - @param a :: Float
        - @param b :: Float
        - @return :: random Float in range [a, b), flat uniform distribution.
        
        
        `Fortuna.triangular(low Float, high Float, mode Float) -> Float`
        - @param low :: Float, minimum output
        - @param high :: Float, maximum output
        - @param mode :: Float, most common output, mode must be in range `[low, high]`
        - @return :: random number in range `[low, high]` with a linear distribution about the mode.
        
        
        ### Random Truth Generator
        `Fortuna.percent_true(truth_factor: Float = 50.0) -> bool`
        - @param truth_factor :: The probability of True as a percentage. Default is 50 percent.
        - @return :: Produces True or False based on the truth_factor.
            - Always returns False if num is 0 or less
            - Always returns True if num is 100 or more.
        
        
        ### Shuffle Algorithms
        `Fortuna.shuffle(array: list) -> None`
        - Knuth B shuffle algorithm. Destructive, in-place shuffle.
        - @param array :: Must be a mutable list-like object.
        
        
        ## Fortuna Development Log
        ##### Fortuna 3.8.6
        - Attempting to make Fortuna compatible with Python Notebooks. 
        
        ##### Fortuna 3.8.5
        - Installer Config Update
        
        ##### Fortuna 3.8.4
        - Installer Config Update
        
        ##### Fortuna 3.8.3
        - Storm Update 3.2.0
        
        ##### Fortuna 3.8.2
        - More Typo Fix
        
        ##### Fortuna 3.8.1
        - Typo Fix
        
        ##### Fortuna 3.8.0
        - Major API Update, several utilities have been deprecated. See MonkeyScope for replacements.
            - distribution
            - distribution_timer
            - timer
        
        ##### Fortuna 3.7.7
        - Documentation Update
        
        ##### Fortuna 3.7.6
        - Install script update.
        
        ##### Fortuna 3.7.5 - internal
        - Storm 3.1.1 Update
        - Added triangular function.
        
        ##### Fortuna 3.7.4
        - Fixed: missing header in the project manifest, this may have caused building from source to fail.
        
        ##### Fortuna 3.7.3
        - Storm Update
        
        ##### Fortuna 3.7.2
        - Storm Update
        
        ##### Fortuna 3.7.1
        - Bug fixes
        
        ##### Fortuna 3.7.0 - internal
        - flatten_with() is now the default flattening algorithm for all Fortuna classes.
        
        ##### Fortuna 3.6.5
        - Documentation Update
        - RandomValue: New flatten-with-arguments functionality.
        
        ##### Fortuna 3.6.4
        - RandomValue added for testing
        
        ##### Fortuna 3.6.3
        - Developer Update
        
        ##### Fortuna 3.6.2
        - Installer Script Update
        
        ##### Fortuna 3.6.1
        - Documentation Update
        
        ##### Fortuna 3.6.0
        - Storm Update
        - Test Update
        - Bug fix for random_range(), negative stepping is now working as intended. This bug was introduced in 3.5.0.
        - Removed Features
            - lazy_cat(): use QuantumMonty class instead.
            - flex_cat(): use FlexCat class instead.
            - truffle_shuffle(): use TruffleShuffle class instead.
        
        ##### Fortuna 3.5.3 - internal
        - Features added for testing & development
            - ActiveChoice class
            - random_rotate() function
        
        ##### Fortuna 3.5.2
        - Documentation Updates
        
        ##### Fortuna 3.5.1
        - Test Update
        
        ##### Fortuna 3.5.0
        - Storm Update
        - Minor Bug Fix: Truffle Shuffle
        - Deprecated Features
            - lazy_cat(): use QuantumMonty class instead.
            - flex_cat(): use FlexCat class instead.
            - truffle_shuffle(): use TruffleShuffle class instead.
        
        ##### Fortuna 3.4.9
        - Test Update
        
        ##### Fortuna 3.4.8
        - Storm Update
        
        ##### Fortuna 3.4.7
        - Bug fix for analytic_continuation.
        
        ##### Fortuna 3.4.6
        - Docs Update
        
        ##### Fortuna 3.4.5
        - Docs Update
        - Range Tests Added, see extras folder.
        
        ##### Fortuna 3.4.4
        - ZeroCool Algorithm Bug Fixes
        - Typos Fixed
        
        ##### Fortuna 3.4.3
        - Docs Update
        
        ##### Fortuna 3.4.2
        - Typos Fixed
        
        ##### Fortuna 3.4.1
        - Major Bug Fix: random_index()
        
        ##### Fortuna 3.4.0 - internal
        - ZeroCool Poisson Algorithm Family Updated
        
        ##### Fortuna 3.3.8 - internal
        - Docs Update
        
        ##### Fortuna 3.3.7
        - Fixed Performance Bug: ZeroCool Linear Algorithm Family
        
        ##### Fortuna 3.3.6
        - Docs Update
        
        ##### Fortuna 3.3.5
        - ABI Updates
        - Bug Fixes
        
        ##### Fortuna 3.3.4
        - Examples Update
        
        ##### Fortuna 3.3.3
        - Test Suite Update
        
        ##### Fortuna 3.3.2 - internal
        - Documentation Update
        
        ##### Fortuna 3.3.1 - internal
        - Minor Bug Fix
        
        ##### Fortuna 3.3.0 - internal
        - Added `plus_or_minus_gauss(N: int) -> int` random int in range [-N, N] Stretched Gaussian Distribution
        
        ##### Fortuna 3.2.3
        - Small Typos Fixed
        
        ##### Fortuna 3.2.2
        - Documentation update.
        
        ##### Fortuna 3.2.1
        - Small Typo Fixed
        
        ##### Fortuna 3.2.0
        - API updates:
            - QunatumMonty.uniform -> QunatumMonty.flat_uniform
            - QunatumMonty.front -> QunatumMonty.front_linear
            - QunatumMonty.middle -> QunatumMonty.middle_linear
            - QunatumMonty.back -> QunatumMonty.back_linear
            - QunatumMonty.quantum -> QunatumMonty.quantum_linear
            - randindex -> random_index
            - randbelow -> random_below
            - randrange -> random_range
            - randint   -> random_int
        
        ##### Fortuna 3.1.0
        - `discrete()` has been removed, see Weighted Choice.
        - `lazy_cat()` added.
        - All ZeroCool methods have been raised to top level API, for use with lazy_cat()
        
        ##### Fortuna 3.0.1
        - minor typos.
        
        ##### Fortuna 3.0.0
        - Storm 2 Rebuild.
        
        ##### Fortuna 2.1.1
        - Small bug fixes.
        - Test updates.
        
        ##### Fortuna 2.1.0, Major Feature Update
        - Fortuna now includes the best of RNG and Pyewacket.
        
        ##### Fortuna 2.0.3
        - Bug fix.
        
        ##### Fortuna 2.0.2
        - Clarified some documentation.
        
        ##### Fortuna 2.0.1
        - Fixed some typos.
        
        ##### Fortuna 2.0.0b1-10
        - Total rebuild. New RNG Storm Engine.
        
        ##### Fortuna 1.26.7.1
        - README updated.
        
        ##### Fortuna 1.26.7
        - Small bug fix.
        
        ##### Fortuna 1.26.6
        - Updated README to reflect recent changes to the test script.
        
        ##### Fortuna 1.26.5
        - Fixed small bug in test script.
        
        ##### Fortuna 1.26.4
        - Updated documentation for clarity.
        - Fixed a minor typo in the test script.
        
        ##### Fortuna 1.26.3
        - Clean build.
        
        ##### Fortuna 1.26.2
        - Fixed some minor typos.
        
        ##### Fortuna 1.26.1
        - Release.
        
        ##### Fortuna 1.26.0 beta 2
        - Moved README and LICENSE files into fortuna_extras folder.
        
        ##### Fortuna 1.26.0 beta 1
        - Dynamic version scheme implemented.
        - The Fortuna Extension now requires the fortuna_extras package, previously it was optional.
        
        ##### Fortuna 1.25.4
        - Fixed some minor typos in the test script.
        
        ##### Fortuna 1.25.3
        - Since version 1.24 Fortuna requires Python 3.7 or higher. This patch corrects an issue where the setup script incorrectly reported requiring Python 3.6 or higher.
        
        ##### Fortuna 1.25.2
        - Updated test suite.
        - Major performance update for TruffleShuffle.
        - Minor performance update for QuantumMonty & FlexCat: cycle monty.
        
        ##### Fortuna 1.25.1
        - Important bug fix for TruffleShuffle, QuantumMonty and FlexCat.
        
        ##### Fortuna 1.25
        - Full 64bit support.
        - The Distribution & Performance Tests have been redesigned.
        - Bloat Control: Two experimental features have been removed.
            - RandomWalk
            - CatWalk
        - Bloat Control: Several utility functions have been removed from the top level API. These function remain in the Fortuna namespace for now, but may change in the future without warning.
            - stretch_bell, internal only.
            - min_max, not used anymore.
            - analytic_continuation, internal only.
            - flatten, internal only.
        
        ##### Fortuna 1.24.3
        - Low level refactoring, non-breaking patch.
        
        ##### Fortuna 1.24.2
        - Setup config updated to improve installation.
        
        ##### Fortuna 1.24.1
        - Low level patch to avoid potential ADL issue. All low level function calls are now qualified.
        
        ##### Fortuna 1.24
        - Documentation updated for even more clarity.
        - Bloat Control: Two naïve utility functions that are no longer used in the module have been removed.
            - n_samples -> use a list comprehension instead. `[f(x) for _ in range(n)]`
            - bind -> use a lambda instead. `lambda: f(x)`
        
        ##### Fortuna 1.23.7
        - Documentation updated for clarity.
        - Minor bug fixes.
        - TruffleShuffle has been redesigned slightly, it now uses a random rotate instead of swap.
        - Custom `__repr__` methods have been added to each class.
        
        ##### Fortuna 1.23.6
        - New method for QuantumMonty: quantum_not_monty - produces the upside down quantum_monty.
        - New bias option for FlexCat: not_monty.
        
        ##### Fortuna 1.23.5.1
        - Fixed some small typos.
        
        ##### Fortuna 1.23.5
        - Documentation updated for clarity.
        - All sequence wrappers can now accept generators as input.
        - Six new functions added:
            - random_float() -> float in range [0.0..1.0) exclusive, uniform flat distribution.
            - percent_true_float(num: float) -> bool, Like percent_true but with floating point precision.
            - plus_or_minus_linear_down(num: int) -> int in range [-num..num], upside down pyramid.
            - plus_or_minus_curve_down(num: int) -> int in range [-num..num], upside down bell curve.
            - mostly_not_middle(num: int) -> int in range [0..num], upside down pyramid.
            - mostly_not_center(num: int) -> int in range [0..num], upside down bell curve.
        - Two new methods for QuantumMonty:
            - mostly_not_middle
            - mostly_not_center
        - Two new bias options for FlexCat, either can be used to define x and/or y axis bias:
            - not_middle
            - not_center
        
        ##### Fortuna 1.23.4.2
        - Fixed some minor typos in the README.md file.
        
        ##### Fortuna 1.23.4.1
        - Fixed some minor typos in the test suite.
        
        ##### Fortuna 1.23.4
        - Fortuna is now Production/Stable!
        - Fortuna and Fortuna Pure now use the same test suite.
        
        ##### Fortuna 0.23.4, first release candidate.
        - RandomCycle, BlockCycle and TruffleShuffle have been refactored and combined into one class: TruffleShuffle.
        - QuantumMonty and FlexCat will now use the new TruffleShuffle for cycling.
        - Minor refactoring across the module.
        
        ##### Fortuna 0.23.3, internal
        - Function shuffle(arr: list) added.
        
        ##### Fortuna 0.23.2, internal
        - Simplified the plus_or_minus_curve(num: int) function, output will now always be bounded to the range [-num..num].
        - Function stretched_bell(num: int) added, this matches the previous behavior of an unbounded plus_or_minus_curve.
        
        ##### Fortuna 0.23.1, internal
        - Small bug fixes and general clean up.
        
        ##### Fortuna 0.23.0
        - The number of test cycles in the test suite has been reduced to 10,000 (down from 100,000). The performance of the pure python implementation and the c-extension are now directly comparable.
        - Minor tweaks made to the examples in `.../fortuna_extras/fortuna_examples.py`
        
        ##### Fortuna 0.22.2, experimental features
        - BlockCycle class added.
        - RandomWalk class added.
        - CatWalk class added.
        
        ##### Fortuna 0.22.1
        - Fortuna classes no longer return lists of values, this behavior has been extracted to a free function called n_samples.
        
        ##### Fortuna 0.22.0, experimental features
        - Function bind added.
        - Function n_samples added.
        
        ##### Fortuna 0.21.3
        - Flatten will no longer raise an error if passed a callable item that it can't call. It correctly returns such items in an uncalled state without error.
        - Simplified `.../fortuna_extras/fortuna_examples.py` - removed unnecessary class structure.
        
        ##### Fortuna 0.21.2
        - Fix some minor bugs.
        
        ##### Fortuna 0.21.1
        - Fixed a bug in `.../fortuna_extras/fortuna_examples.py`
        
        ##### Fortuna 0.21.0
        - Function flatten added.
        - Flatten: The Fortuna classes will recursively unpack callable objects in the data set.
        
        ##### Fortuna 0.20.10
        - Documentation updated.
        
        ##### Fortuna 0.20.9
        - Minor bug fixes.
        
        ##### Fortuna 0.20.8, internal
        - Testing cycle for potential new features.
        
        ##### Fortuna 0.20.7
        - Documentation updated for clarity.
        
        ##### Fortuna 0.20.6
        - Tests updated based on recent changes.
        
        ##### Fortuna 0.20.5, internal
        - Documentation updated based on recent changes.
        
        ##### Fortuna 0.20.4, internal
        - WeightedChoice (both types) can optionally return a list of samples rather than just one value, control the length of the list via the n_samples argument.
        
        ##### Fortuna 0.20.3, internal
        - RandomCycle can optionally return a list of samples rather than just one value,
        control the length of the list via the n_samples argument.
        
        ##### Fortuna 0.20.2, internal
        - QuantumMonty can optionally return a list of samples rather than just one value,
        control the length of the list via the n_samples argument.
        
        ##### Fortuna 0.20.1, internal
        - FlexCat can optionally return a list of samples rather than just one value,
        control the length of the list via the n_samples argument.
        
        ##### Fortuna 0.20.0, internal
        - FlexCat now accepts a standard dict as input. The ordered(ness) of dict is now part of the standard in Python 3.7.1. Previously FlexCat required an OrderedDict, now it accepts either and treats them the same.
        
        ##### Fortuna 0.19.7
        - Fixed bug in `.../fortuna_extras/fortuna_examples.py`.
        
        ##### Fortuna 0.19.6
        - Updated documentation formatting.
        - Small performance tweak for QuantumMonty and FlexCat.
        
        ##### Fortuna 0.19.5
        - Minor documentation update.
        
        ##### Fortuna 0.19.4
        - Minor update to all classes for better debugging.
        
        ##### Fortuna 0.19.3
        - Updated plus_or_minus_curve to allow unbounded output.
        
        ##### Fortuna 0.19.2
        - Internal development cycle.
        - Minor update to FlexCat for better debugging.
        
        ##### Fortuna 0.19.1
        - Internal development cycle.
        
        ##### Fortuna 0.19.0
        - Updated documentation for clarity.
        - MultiCat has been removed, it is replaced by FlexCat.
        - Mostly has been removed, it is replaced by QuantumMonty.
        
        ##### Fortuna 0.18.7
        - Fixed some more README typos.
        
        ##### Fortuna 0.18.6
        - Fixed some README typos.
        
        ##### Fortuna 0.18.5
        - Updated documentation.
        - Fixed another minor test bug.
        
        ##### Fortuna 0.18.4
        - Updated documentation to reflect recent changes.
        - Fixed some small test bugs.
        - Reduced default number of test cycles to 10,000 - down from 100,000.
        
        ##### Fortuna 0.18.3
        - Fixed some minor README typos.
        
        ##### Fortuna 0.18.2
        - Fixed a bug with Fortuna Pure.
        
        ##### Fortuna 0.18.1
        - Fixed some minor typos.
        - Added tests for `.../fortuna_extras/fortuna_pure.py`
        
        ##### Fortuna 0.18.0
        - Introduced new test format, now includes average call time in nanoseconds.
        - Reduced default number of test cycles to 100,000 - down from 1,000,000.
        - Added pure Python implementation of Fortuna: `.../fortuna_extras/fortuna_pure.py`
        - Promoted several low level functions to top level.
            - `zero_flat(num: int) -> int`
            - `zero_cool(num: int) -> int`
            - `zero_extreme(num: int) -> int`
            - `max_cool(num: int) -> int`
            - `max_extreme(num: int) -> int`
            - `analytic_continuation(func: staticmethod, num: int) -> int`
            - `min_max(num: int, lo: int, hi: int) -> int`
        
        ##### Fortuna 0.17.3
        - Internal development cycle.
        
        ##### Fortuna 0.17.2
        - User Requested: dice() and d() functions now support negative numbers as input.
        
        ##### Fortuna 0.17.1
        - Fixed some minor typos.
        
        ##### Fortuna 0.17.0
        - Added QuantumMonty to replace Mostly, same default behavior with more options.
        - Mostly is depreciated and may be removed in a future release.
        - Added FlexCat to replace MultiCat, same default behavior with more options.
        - MultiCat is depreciated and may be removed in a future release.
        - Expanded the Treasure Table example in `.../fortuna_extras/fortuna_examples.py`
        
        ##### Fortuna 0.16.2
        - Minor refactoring for WeightedChoice.
        
        ##### Fortuna 0.16.1
        - Redesigned fortuna_examples.py to feature a dynamic random magic item generator.
        - Raised cumulative_weighted_choice function to top level.
        - Added test for cumulative_weighted_choice as free function.
        - Updated MultiCat documentation for clarity.
        
        ##### Fortuna 0.16.0
        - Pushed distribution_timer to the .pyx layer.
        - Changed default number of iterations of tests to 1 million, up form 1 hundred thousand.
        - Reordered tests to better match documentation.
        - Added Base Case Fortuna.fast_rand_below.
        - Added Base Case Fortuna.fast_d.
        - Added Base Case Fortuna.fast_dice.
        
        ##### Fortuna 0.15.10
        - Internal Development Cycle
        
        ##### Fortuna 0.15.9
        - Added Base Cases for random_value()
        - Added Base Case for randint()
        
        ##### Fortuna 0.15.8
        - Clarified MultiCat Test
        
        ##### Fortuna 0.15.7
        - Fixed minor typos.
        
        ##### Fortuna 0.15.6
        - Fixed minor typos.
        - Simplified MultiCat example.
        
        ##### Fortuna 0.15.5
        - Added MultiCat test.
        - Fixed some minor typos in docs.
        
        ##### Fortuna 0.15.4
        - Performance optimization for both WeightedChoice() variants.
        - Cython update provides small performance enhancement across the board.
        - Compilation now leverages Python3 all the way down.
        - MultiCat pushed to the .pyx layer for better performance.
        
        ##### Fortuna 0.15.3
        - Reworked the MultiCat example to include several randomizing strategies working in concert.
        - Added Multi Dice 10d10 performance tests.
        - Updated sudo code in documentation to be more pythonic.
        
        ##### Fortuna 0.15.2
        - Fixed: Linux installation failure.
        - Added: complete source files to the distribution (.cpp .hpp .pyx).
        
        ##### Fortuna 0.15.1
        - Updated & simplified distribution_timer in `fortuna_tests.py`
        - Readme updated, fixed some typos.
        - Known issue preventing successful installation on some linux platforms.
        
        ##### Fortuna 0.15.0
        - Performance tweaks.
        - Readme updated, added some details.
        
        ##### Fortuna 0.14.1
        - Readme updated, fixed some typos.
        
        ##### Fortuna 0.14.0
        - Fixed a bug where the analytic continuation algorithm caused a rare issue during compilation on some platforms.
        
        ##### Fortuna 0.13.3
        - Fixed Test Bug: percent sign was missing in output distributions.
        - Readme updated: added update history, fixed some typos.
        
        ##### Fortuna 0.13.2
        - Readme updated for even more clarity.
        
        ##### Fortuna 0.13.1
        - Readme updated for clarity.
        
        ##### Fortuna 0.13.0
        - Minor Bug Fixes.
        - Readme updated for aesthetics.
        - Added Tests: `.../fortuna_extras/fortuna_tests.py`
        
        ##### Fortuna 0.12.0
        - Internal test for future update.
        
        ##### Fortuna 0.11.0
        - Initial Release: Public Beta
        
        ##### Fortuna 0.10.0
        - Module name changed from Dice to Fortuna
        
        ##### Dice 0.1.x - 0.9.x
        - Experimental Phase
        
        
        ## Distribution and Performance Tests
        ```
        MonkeyScope: Fortuna Quick Test
        
        Random Sequence Values:
        
        some_list = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
        
        Base Case
        Output Analysis: Random.choice(some_list)
        Typical Timing: 719 ± 28 ns
        Statistics of 1024 samples:
         Minimum: 0
         Median: 4
         Maximum: 9
         Mean: 4.4501953125
         Std Deviation: 2.8123905363188197
        Distribution of 102400 samples:
         0: 9.990234375%
         1: 10.1181640625%
         2: 9.912109375%
         3: 10.0390625%
         4: 9.9814453125%
         5: 10.0634765625%
         6: 10.033203125%
         7: 9.9404296875%
         8: 10.0%
         9: 9.921875%
        
        Output Analysis: random_value(some_list)
        Typical Timing: 63 ± 15 ns
        Statistics of 1024 samples:
         Minimum: 0
         Median: 5
         Maximum: 9
         Mean: 4.6767578125
         Std Deviation: 2.8848894827024374
        Distribution of 102400 samples:
         0: 10.044921875%
         1: 9.95703125%
         2: 9.9482421875%
         3: 10.0576171875%
         4: 9.9111328125%
         5: 9.9638671875%
         6: 10.0068359375%
         7: 10.037109375%
         8: 10.2119140625%
         9: 9.861328125%
        
        Output Analysis: TruffleShuffle(collection)()
        Typical Timing: 500 ± 13 ns
        Statistics of 1024 samples:
         Minimum: 0
         Median: 5
         Maximum: 9
         Mean: 4.4970703125
         Std Deviation: 2.8953718438757408
        Distribution of 102400 samples:
         0: 9.966796875%
         1: 9.93359375%
         2: 9.9560546875%
         3: 10.0693359375%
         4: 9.9853515625%
         5: 10.0048828125%
         6: 10.04296875%
         7: 10.0361328125%
         8: 10.0078125%
         9: 9.9970703125%
        
        Output Analysis: QuantumMonty(collection)()
        Typical Timing: 532 ± 15 ns
        Statistics of 1024 samples:
         Minimum: 0
         Median: 5
         Maximum: 9
         Mean: 4.65625
         Std Deviation: 2.942425702155914
        Distribution of 102400 samples:
         0: 10.7421875%
         1: 8.8486328125%
         2: 9.0380859375%
         3: 9.7431640625%
         4: 11.5263671875%
         5: 11.607421875%
         6: 9.7626953125%
         7: 8.84765625%
         8: 8.888671875%
         9: 10.9951171875%
        
        Output Analysis: RandomValue(collection)()
        Typical Timing: 375 ± 15 ns
        Statistics of 1024 samples:
         Minimum: 0
         Median: 5
         Maximum: 9
         Mean: 4.541015625
         Std Deviation: 2.835723333954688
        Distribution of 102400 samples:
         0: 9.90234375%
         1: 10.048828125%
         2: 10.1181640625%
         3: 9.958984375%
         4: 9.8427734375%
         5: 9.98046875%
         6: 10.1796875%
         7: 10.189453125%
         8: 9.947265625%
         9: 9.83203125%
        
        
        Weighted Tables:
        
        population = ('A', 'B', 'C', 'D')
        cum_weights = (1, 3, 6, 10)
        rel_weights = (1, 2, 3, 4)
        cum_weighted_table = zip(cum_weights, population)
        rel_weighted_table = zip(rel_weights, population)
        
        Cumulative Base Case
        Output Analysis: Random.choices(population, cum_weights=cum_weights)
        Typical Timing: 1594 ± 16 ns
        Distribution of 102400 samples:
         A: 10.1298828125%
         B: 19.94921875%
         C: 29.87890625%
         D: 40.0419921875%
        
        Output Analysis: CumulativeWeightedChoice(weighted_table)()
        Typical Timing: 407 ± 16 ns
        Distribution of 102400 samples:
         A: 10.033203125%
         B: 19.9814453125%
         C: 29.8662109375%
         D: 40.119140625%
        
        Output Analysis: cumulative_weighted_choice(tuple(zip(cum_weights, population)))
        Typical Timing: 157 ± 1 ns
        Distribution of 102400 samples:
         A: 9.869140625%
         B: 19.9931640625%
         C: 30.04296875%
         D: 40.0947265625%
        
        Relative Base Case
        Output Analysis: Random.choices(population, weights=rel_weights)
        Typical Timing: 2125 ± 20 ns
        Distribution of 102400 samples:
         A: 10.03515625%
         B: 19.9853515625%
         C: 29.9931640625%
         D: 39.986328125%
        
        Output Analysis: RelativeWeightedChoice(weighted_table)()
        Typical Timing: 407 ± 16 ns
        Distribution of 102400 samples:
         A: 10.0400390625%
         B: 19.9375%
         C: 30.0556640625%
         D: 39.966796875%
        
        
        Random Matrix Values:
        
        some_matrix = {'A': (1, 2, 3, 4), 'B': (10, 20, 30, 40), 'C': (100, 200, 300, 400)}
        
        Output Analysis: FlexCat(matrix_data, key_bias, val_bias, flat)()
        Typical Timing: 813 ± 11 ns
        Statistics of 1024 samples:
         Minimum: 1
         Median: 30
         Maximum: 400
         Mean: 100.9990234375
         Std Deviation: 134.60534616809136
        Distribution of 102400 samples:
         1: 8.2119140625%
         2: 8.4248046875%
         3: 8.244140625%
         4: 8.4013671875%
         10: 8.2421875%
         20: 8.2822265625%
         30: 8.4296875%
         40: 8.30859375%
         100: 8.3447265625%
         200: 8.298828125%
         300: 8.3779296875%
         400: 8.43359375%
        
        
        Random Integers:
        
        Base Case
        Output Analysis: Random.randrange(10)
        Typical Timing: 813 ± 22 ns
        Statistics of 1024 samples:
         Minimum: 0
         Median: 5
         Maximum: 9
         Mean: 4.5224609375
         Std Deviation: 2.8207240666976294
        Distribution of 102400 samples:
         0: 9.9951171875%
         1: 10.0068359375%
         2: 9.927734375%
         3: 9.8251953125%
         4: 9.9970703125%
         5: 9.998046875%
         6: 10.09375%
         7: 10.029296875%
         8: 10.0595703125%
         9: 10.0673828125%
        
        Output Analysis: random_below(10)
        Typical Timing: 63 ± 15 ns
        Statistics of 1024 samples:
         Minimum: 0
         Median: 4
         Maximum: 9
         Mean: 4.486328125
         Std Deviation: 2.9037691812902664
        Distribution of 102400 samples:
         0: 9.8955078125%
         1: 9.9814453125%
         2: 10.1298828125%
         3: 10.1240234375%
         4: 10.0966796875%
         5: 9.9189453125%
         6: 9.9599609375%
         7: 9.8251953125%
         8: 9.9169921875%
         9: 10.1513671875%
        
        Output Analysis: random_index(10)
        Typical Timing: 63 ± 16 ns
        Statistics of 1024 samples:
         Minimum: 0
         Median: 5
         Maximum: 9
         Mean: 4.6201171875
         Std Deviation: 2.8224116311026775
        Distribution of 102400 samples:
         0: 10.0712890625%
         1: 10.091796875%
         2: 10.0673828125%
         3: 9.888671875%
         4: 10.05078125%
         5: 9.990234375%
         6: 9.9072265625%
         7: 9.978515625%
         8: 9.8857421875%
         9: 10.068359375%
        
        Output Analysis: random_range(10)
        Typical Timing: 94 ± 10 ns
        Statistics of 1024 samples:
         Minimum: 0
         Median: 4
         Maximum: 9
         Mean: 4.501953125
         Std Deviation: 2.9376039893409036
        Distribution of 102400 samples:
         0: 10.0%
         1: 9.9462890625%
         2: 9.9375%
         3: 9.876953125%
         4: 10.041015625%
         5: 10.0791015625%
         6: 10.228515625%
         7: 9.96875%
         8: 9.9140625%
         9: 10.0078125%
        
        Output Analysis: random_below(-10)
        Typical Timing: 63 ± 8 ns
        Statistics of 1024 samples:
         Minimum: -9
         Median: -4
         Maximum: 0
         Mean: -4.341796875
         Std Deviation: 2.8655726208741283
        Distribution of 102400 samples:
         -9: 9.953125%
         -8: 9.880859375%
         -7: 9.9228515625%
         -6: 10.140625%
         -5: 10.06640625%
         -4: 9.95703125%
         -3: 10.0546875%
         -2: 10.0537109375%
         -1: 10.083984375%
         0: 9.88671875%
        
        Output Analysis: random_index(-10)
        Typical Timing: 94 ± 1 ns
        Statistics of 1024 samples:
         Minimum: -10
         Median: -5
         Maximum: -1
         Mean: -5.4580078125
         Std Deviation: 2.885598842578575
        Distribution of 102400 samples:
         -10: 10.0126953125%
         -9: 10.1220703125%
         -8: 10.0244140625%
         -7: 9.90234375%
         -6: 9.7724609375%
         -5: 9.978515625%
         -4: 10.0380859375%
         -3: 9.9892578125%
         -2: 10.03125%
         -1: 10.12890625%
        
        Output Analysis: random_range(-10)
        Typical Timing: 94 ± 16 ns
        Statistics of 1024 samples:
         Minimum: -10
         Median: -5
         Maximum: -1
         Mean: -5.4609375
         Std Deviation: 2.8737592418056086
        Distribution of 102400 samples:
         -10: 9.9677734375%
         -9: 9.9677734375%
         -8: 9.8330078125%
         -7: 10.2080078125%
         -6: 10.1064453125%
         -5: 9.861328125%
         -4: 10.0986328125%
         -3: 10.0537109375%
         -2: 9.947265625%
         -1: 9.9560546875%
        
        Base Case
        Output Analysis: Random.randrange(1, 10)
        Typical Timing: 1063 ± 24 ns
        Statistics of 1024 samples:
         Minimum: 1
         Median: 5
         Maximum: 9
         Mean: 5.103515625
         Std Deviation: 2.5783949601691383
        Distribution of 102400 samples:
         1: 11.029296875%
         2: 11.2421875%
         3: 11.03515625%
         4: 11.1259765625%
         5: 11.13671875%
         6: 11.1630859375%
         7: 11.03515625%
         8: 11.205078125%
         9: 11.02734375%
        
        Output Analysis: random_range(1, 10)
        Typical Timing: 94 ± 12 ns
        Statistics of 1024 samples:
         Minimum: 1
         Median: 5
         Maximum: 9
         Mean: 4.9853515625
         Std Deviation: 2.573414776206575
        Distribution of 102400 samples:
         1: 11.2001953125%
         2: 11.18359375%
         3: 11.119140625%
         4: 11.048828125%
         5: 11.1259765625%
         6: 10.923828125%
         7: 11.1630859375%
         8: 11.2021484375%
         9: 11.033203125%
        
        Output Analysis: random_range(10, 1)
        Typical Timing: 94 ± 12 ns
        Statistics of 1024 samples:
         Minimum: 1
         Median: 5
         Maximum: 9
         Mean: 4.95703125
         Std Deviation: 2.5736671948626193
        Distribution of 102400 samples:
         1: 11.12109375%
         2: 11.185546875%
         3: 11.2021484375%
         4: 11.0537109375%
         5: 11.162109375%
         6: 11.1484375%
         7: 11.1083984375%
         8: 10.87109375%
         9: 11.1474609375%
        
        Base Case
        Output Analysis: Random.randint(-5, 5)
        Typical Timing: 1188 ± 25 ns
        Statistics of 1024 samples:
         Minimum: -5
         Median: 0
         Maximum: 5
         Mean: -0.0078125
         Std Deviation: 3.14956862164389
        Distribution of 102400 samples:
         -5: 8.9541015625%
         -4: 9.0419921875%
         -3: 9.1767578125%
         -2: 8.95703125%
         -1: 9.1943359375%
         0: 9.0751953125%
         1: 9.0810546875%
         2: 9.1884765625%
         3: 9.1123046875%
         4: 9.1826171875%
         5: 9.0361328125%
        
        Output Analysis: random_int(-5, 5)
        Typical Timing: 63 ± 13 ns
        Statistics of 1024 samples:
         Minimum: -5
         Median: 0
         Maximum: 5
         Mean: 0.1044921875
         Std Deviation: 3.1597758028194938
        Distribution of 102400 samples:
         -5: 9.14453125%
         -4: 9.130859375%
         -3: 8.9892578125%
         -2: 9.25%
         -1: 8.9951171875%
         0: 9.1171875%
         1: 9.0498046875%
         2: 9.025390625%
         3: 9.078125%
         4: 9.07421875%
         5: 9.1455078125%
        
        Base Case
        Output Analysis: Random.randrange(1, 20, 2)
        Typical Timing: 1282 ± 25 ns
        Statistics of 1024 samples:
         Minimum: 1
         Median: 11
         Maximum: 19
         Mean: 10.19140625
         Std Deviation: 5.714833332185878
        Distribution of 102400 samples:
         1: 10.0712890625%
         3: 9.8759765625%
         5: 10.0048828125%
         7: 10.01171875%
         9: 10.0341796875%
         11: 10.064453125%
         13: 9.96484375%
         15: 9.9072265625%
         17: 10.140625%
         19: 9.9248046875%
        
        Output Analysis: random_range(1, 20, 2)
        Typical Timing: 94 ± 10 ns
        Statistics of 1024 samples:
         Minimum: 1
         Median: 9
         Maximum: 19
         Mean: 9.783203125
         Std Deviation: 5.742594457079905
        Distribution of 102400 samples:
         1: 10.0244140625%
         3: 10.197265625%
         5: 9.8291015625%
         7: 10.0478515625%
         9: 9.9716796875%
         11: 9.876953125%
         13: 9.888671875%
         15: 10.0947265625%
         17: 10.060546875%
         19: 10.0087890625%
        
        Output Analysis: random_range(1, 20, -2)
        Typical Timing: 94 ± 11 ns
        Statistics of 1024 samples:
         Minimum: 2
         Median: 10
         Maximum: 20
         Mean: 10.501953125
         Std Deviation: 5.776041466965383
        Distribution of 102400 samples:
         2: 9.927734375%
         4: 10.25%
         6: 9.9384765625%
         8: 9.8984375%
         10: 10.0419921875%
         12: 10.0185546875%
         14: 9.8779296875%
         16: 10.06640625%
         18: 9.8798828125%
         20: 10.1005859375%
        
        Output Analysis: random_range(20, 1, -2)
        Typical Timing: 94 ± 14 ns
        Statistics of 1024 samples:
         Minimum: 2
         Median: 10
         Maximum: 20
         Mean: 10.83984375
         Std Deviation: 5.585007718616761
        Distribution of 102400 samples:
         2: 9.9365234375%
         4: 10.0751953125%
         6: 10.005859375%
         8: 9.7890625%
         10: 10.1103515625%
         12: 9.98828125%
         14: 10.1787109375%
         16: 10.0595703125%
         18: 9.853515625%
         20: 10.0029296875%
        
        Output Analysis: d(10)
        Typical Timing: 63 ± 13 ns
        Statistics of 1024 samples:
         Minimum: 1
         Median: 6
         Maximum: 10
         Mean: 5.5966796875
         Std Deviation: 2.8350599151206746
        Distribution of 102400 samples:
         1: 9.931640625%
         2: 9.822265625%
         3: 9.833984375%
         4: 10.0439453125%
         5: 10.0615234375%
         6: 10.0263671875%
         7: 10.123046875%
         8: 10.2138671875%
         9: 10.1171875%
         10: 9.826171875%
        
        Output Analysis: dice(3, 6)
        Typical Timing: 125 ± 13 ns
        Statistics of 1024 samples:
         Minimum: 3
         Median: 11
         Maximum: 18
         Mean: 10.6552734375
         Std Deviation: 3.0179183887589933
        Distribution of 102400 samples:
         3: 0.482421875%
         4: 1.3837890625%
         5: 2.7861328125%
         6: 4.703125%
         7: 6.8896484375%
         8: 9.7900390625%
         9: 11.4609375%
         10: 12.46875%
         11: 12.5986328125%
         12: 11.48046875%
         13: 9.7236328125%
         14: 6.876953125%
         15: 4.6962890625%
         16: 2.7861328125%
         17: 1.380859375%
         18: 0.4921875%
        
        Output Analysis: ability_dice(4)
        Typical Timing: 188 ± 14 ns
        Statistics of 1024 samples:
         Minimum: 4
         Median: 12
         Maximum: 18
         Mean: 12.2529296875
         Std Deviation: 2.715491060894178
        Distribution of 102400 samples:
         3: 0.0810546875%
         4: 0.28515625%
         5: 0.76953125%
         6: 1.5556640625%
         7: 3.0166015625%
         8: 4.755859375%
         9: 7.0380859375%
         10: 9.474609375%
         11: 11.412109375%
         12: 12.88671875%
         13: 13.283203125%
         14: 12.38671875%
         15: 10.1220703125%
         16: 7.20703125%
         17: 4.10546875%
         18: 1.6201171875%
        
        Output Analysis: plus_or_minus(5)
        Typical Timing: 63 ± 8 ns
        Statistics of 1024 samples:
         Minimum: -5
         Median: 0
         Maximum: 5
         Mean: -0.138671875
         Std Deviation: 3.159542110457101
        Distribution of 102400 samples:
         -5: 9.130859375%
         -4: 8.98828125%
         -3: 9.0751953125%
         -2: 9.21484375%
         -1: 8.96875%
         0: 9.2255859375%
         1: 9.154296875%
         2: 9.021484375%
         3: 8.8408203125%
         4: 9.1650390625%
         5: 9.21484375%
        
        Output Analysis: plus_or_minus_linear(5)
        Typical Timing: 94 ± 6 ns
        Statistics of 1024 samples:
         Minimum: -5
         Median: 0
         Maximum: 5
         Mean: -0.0751953125
         Std Deviation: 2.4897070536586496
        Distribution of 102400 samples:
         -5: 2.814453125%
         -4: 5.5712890625%
         -3: 8.3818359375%
         -2: 11.1181640625%
         -1: 13.94140625%
         0: 16.7294921875%
         1: 13.9033203125%
         2: 11.048828125%
         3: 8.171875%
         4: 5.490234375%
         5: 2.8291015625%
        
        Output Analysis: plus_or_minus_gauss(5)
        Typical Timing: 94 ± 14 ns
        Statistics of 1024 samples:
         Minimum: -5
         Median: 0
         Maximum: 4
         Mean: -0.017578125
         Std Deviation: 1.6244958895489057
        Distribution of 102400 samples:
         -5: 0.18359375%
         -4: 1.1845703125%
         -3: 4.4560546875%
         -2: 11.677734375%
         -1: 20.359375%
         0: 24.48828125%
         1: 20.3505859375%
         2: 11.6005859375%
         3: 4.369140625%
         4: 1.12890625%
         5: 0.201171875%
        
        
        Random Floats:
        
        Base Case
        Output Analysis: Random.random()
        Typical Timing: 32 ± 15 ns
        Statistics of 1024 samples:
         Minimum: 0.001399505641212273
         Median: (0.5183140601104201, 0.5189100123375476)
         Maximum: 0.9999668523801805
         Mean: 0.5148379645495982
         Std Deviation: 0.28576150285571433
        Post-processor distribution of 102400 samples using round method:
         0: 49.705078125%
         1: 50.294921875%
        
        Output Analysis: canonical()
        Typical Timing: 32 ± 15 ns
        Statistics of 1024 samples:
         Minimum: 0.002218262858187889
         Median: (0.5123715393080173, 0.5130877399180623)
         Maximum: 0.9967316403132384
         Mean: 0.4976660074304864
         Std Deviation: 0.28703370180727694
        Post-processor distribution of 102400 samples using round method:
         0: 50.0595703125%
         1: 49.9404296875%
        
        Output Analysis: random_float(0.0, 10.0)
        Typical Timing: 32 ± 15 ns
        Statistics of 1024 samples:
         Minimum: 0.001411942607799279
         Median: (5.161879109306529, 5.173372947499032)
         Maximum: 9.982120854333887
         Mean: 5.062316619318977
         Std Deviation: 2.997533989771835
        Post-processor distribution of 102400 samples using floor method:
         0: 10.0244140625%
         1: 10.0126953125%
         2: 10.1298828125%
         3: 9.974609375%
         4: 9.84765625%
         5: 10.0029296875%
         6: 10.1005859375%
         7: 9.958984375%
         8: 9.8935546875%
         9: 10.0546875%
        
        Base Case
        Output Analysis: Random.triangular(0.0, 10.0, 5.0)
        Typical Timing: 469 ± 12 ns
        Statistics of 1024 samples:
         Minimum: 0.11561403947740122
         Median: (5.013834042637729, 5.018779020687248)
         Maximum: 9.791619310349777
         Mean: 4.991447556844317
         Std Deviation: 2.024514535168726
        Post-processor distribution of 102400 samples using round method:
         0: 0.490234375%
         1: 4.0419921875%
         2: 7.8681640625%
         3: 11.912109375%
         4: 15.97265625%
         5: 19.10546875%
         6: 16.0556640625%
         7: 12.0537109375%
         8: 7.931640625%
         9: 4.0595703125%
         10: 0.5087890625%
        
        Output Analysis: triangular(0.0, 10.0, 5.0)
        Typical Timing: 63 ± 1 ns
        Statistics of 1024 samples:
         Minimum: 0.18627071621182983
         Median: (4.9946027309192, 4.995534887631672)
         Maximum: 9.794901403444339
         Mean: 5.0081006279149065
         Std Deviation: 2.052634983843724
        Post-processor distribution of 102400 samples using round method:
         0: 0.498046875%
         1: 4.0341796875%
         2: 8.02734375%
         3: 11.97265625%
         4: 16.056640625%
         5: 19.005859375%
         6: 16.0791015625%
         7: 11.9140625%
         8: 7.955078125%
         9: 3.9521484375%
         10: 0.5048828125%
        
        
        Random Booleans:
        
        Output Analysis: percent_true(33.33)
        Typical Timing: 32 ± 14 ns
        Statistics of 1024 samples:
         Minimum: False
         Median: False
         Maximum: True
         Mean: 0.349609375
         Std Deviation: 0.4770795849246813
        Distribution of 102400 samples:
         False: 66.68359375%
         True: 33.31640625%
        
        
        Shuffle Performance:
        
        some_small_list = [i for i in range(10)]
        some_med_list = [i for i in range(100)]
        some_large_list = [i for i in range(1000)]
        
        Base Case:
        Random.shuffle()
        Typical Timing: 7125 ± 134 ns
        Typical Timing: 68625 ± 1034 ns
        Typical Timing: 715250 ± 3484 ns
        
        Fortuna.shuffle()
        Typical Timing: 375 ± 1 ns
        Typical Timing: 3750 ± 58 ns
        Typical Timing: 36500 ± 130 ns
        
        
        -------------------------------------------------------------------------
        Total Test Time: 3.566 seconds
        
        ```
        
        
        ## Legal Information
        Fortuna © 2019 Robert W Sharp, all rights reserved.
        
        Fortuna is licensed under a Creative Commons Attribution-NonCommercial 3.0 Unported License.
        
        See online version of this license here: <http://creativecommons.org/licenses/by-nc/3.0/>
        
Keywords: Fortuna,Random Patterns,Data Perturbation,Game Dice,Weighted Choice,Random Value Generator,Gaussian Distribution,Linear Distribution,TruffleShuffle,FlexCat,Percent True,ZeroCool,QuantumMonty,Custom Distribution,Rarity Table,D20
Platform: Darwin
Platform: Linux
Classifier: Development Status :: 5 - Production/Stable
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Cython
Classifier: Programming Language :: C++
Classifier: Operating System :: MacOS :: MacOS X
Classifier: Operating System :: POSIX :: Linux
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires: Cython
Requires-Python: >=3.6
Description-Content-Type: text/markdown
