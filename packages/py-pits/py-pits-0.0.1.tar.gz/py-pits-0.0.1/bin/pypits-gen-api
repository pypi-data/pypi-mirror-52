#!/usr/bin/env python

# The MIT License (MIT)
#
# Copyright (c) 2019 Caian Benedicto <caian@ggaunicamp.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.

import sys, os, base64

_apis = {
    'c': {
        'spitz.h': 'LyoKICogVGhlIE1JVCBMaWNlbnNlIChNSVQpCiAqCiAqIENvcHlyaWdodCAoYykgMjAxNSBDYWlhbiBCZW5lZGljdG8gPGNhaWFuQGdnYXVuaWNhbXAuY29tPgogKiBDb3B5cmlnaHQgKGMpIDIwMTQgSWFuIExpdSBSb2RyaWd1ZXMgPGlhbi5saXVAZ2dhdW5pY2FtcC5jb20+CiAqCiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkgCiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlICJTb2Z0d2FyZSIpLCB0byAKICogZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgCiAqIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIAogKiBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgCiAqIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6CiAqIAogKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiAKICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCiAqIAogKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUiAKICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksIAogKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCAKICogVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgCiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIAogKiBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIAogKiBJTiBUSEUgU09GVFdBUkUuCiAqLwoKI2lmbmRlZiBfX1NQSVRaX0hfXwojZGVmaW5lIF9fU1BJVFpfSF9fCgojaWZkZWYgX19jcGx1c3BsdXMKZXh0ZXJuICJDIiB7CiNlbmRpZgoKIC8qIFB5dGhvbiB2ZXJzaW9uIG9mIHNwaXRzIHVzZXMgY2RlY2wgY2FsbGluZyBjb252ZW50aW9uICovCgovKiBUaGUgc2l6ZSB1c2VkIHRvIHBhc3MgbWVzc2FnZXMgaXMgNjQgYml0ICovCgp0eXBlZGVmIGxvbmcgbG9uZyBpbnQgc3BpdHNzaXplX3Q7Cgp0eXBlZGVmIGNvbnN0IHZvaWQqIHNwaXRzY3R4X3Q7CgovKiBSdW5uZXIgY2FsbGJhY2sgdGhhdCBleGVjdXRlcyB0aGUgdGFzayBkaXN0cmlidXRpb24gYW5kIGNvbW1pdHRpbmcgKi8KCnR5cGVkZWYgaW50ICgqc3BpdHpydW5fdCkoaW50LCBjb25zdCBjaGFyKiosIGNvbnN0IHZvaWQqLCBzcGl0c3NpemVfdCwgCiAgICBjb25zdCB2b2lkKiosIHNwaXRzc2l6ZV90Kik7CgovKiBQdXNoZXIgY2FsbGJhY2sgdGhhdCBwZXJmb3JtcyByZXN1bHQgc3VibWlzc2lvbiBmcm9tIGEgd29ya2VyICovCgp0eXBlZGVmIHZvaWQgKCpzcGl0c3B1c2hfdCkoY29uc3Qgdm9pZCosIHNwaXRzc2l6ZV90LCBzcGl0c2N0eF90KTsKCi8qIFNwaXRzIG1haW4gKi8KCmludCBzcGl0c19tYWluKGludCBhcmdjLCBjb25zdCBjaGFyKiBhcmd2W10sIHNwaXR6cnVuX3QgcnVuKTsKCi8qIEpvYiBNYW5hZ2VyICovCgp2b2lkKiBzcGl0c19qb2JfbWFuYWdlcl9uZXcoaW50IGFyZ2MsIGNvbnN0IGNoYXIgKmFyZ3ZbXSwKICAgIGNvbnN0IHZvaWQqIGpvYmluZm8sIHNwaXRzc2l6ZV90IGpvYmluZm9zeik7CgppbnQgc3BpdHNfam9iX21hbmFnZXJfbmV4dF90YXNrKHZvaWQgKnVzZXJfZGF0YSwgCiAgICBzcGl0c3B1c2hfdCBwdXNoX3Rhc2ssIHNwaXRzY3R4X3Qgam1jdHgpOwoKdm9pZCBzcGl0c19qb2JfbWFuYWdlcl9maW5hbGl6ZSh2b2lkICp1c2VyX2RhdGEpOwoKLyogV29ya2VyICovCgp2b2lkKiBzcGl0c193b3JrZXJfbmV3KGludCBhcmdjLCBjb25zdCBjaGFyICphcmd2W10pOwoKaW50IHNwaXRzX3dvcmtlcl9ydW4odm9pZCAqdXNlcl9kYXRhLCBjb25zdCB2b2lkKiB0YXNrLCAKICAgIHNwaXRzc2l6ZV90IHRhc2tzeiwgc3BpdHNwdXNoX3QgcHVzaF9yZXN1bHQsIAogICAgc3BpdHNjdHhfdCB0YXNrY3R4KTsKCnZvaWQgc3BpdHNfd29ya2VyX2ZpbmFsaXplKHZvaWQgKnVzZXJfZGF0YSk7CgovKiBDb21taXR0ZXIgKi8KCnZvaWQqIHNwaXRzX2NvbW1pdHRlcl9uZXcoaW50IGFyZ2MsIGNvbnN0IGNoYXIgKmFyZ3ZbXSwKICAgIGNvbnN0IHZvaWQqIGpvYmluZm8sIHNwaXRzc2l6ZV90IGpvYmluZm9zeik7CgppbnQgc3BpdHNfY29tbWl0dGVyX2NvbW1pdF9waXQodm9pZCAqdXNlcl9kYXRhLAogICAgY29uc3Qgdm9pZCogcmVzdWx0LCBzcGl0c3NpemVfdCByZXN1bHRzeik7CgppbnQgc3BpdHNfY29tbWl0dGVyX2NvbW1pdF9qb2Iodm9pZCAqdXNlcl9kYXRhLAogICAgc3BpdHNwdXNoX3QgcHVzaF9maW5hbF9yZXN1bHQsIHNwaXRzY3R4X3Qgam9iY3R4KTsKCnZvaWQgc3BpdHNfY29tbWl0dGVyX2ZpbmFsaXplKHZvaWQgKnVzZXJfZGF0YSk7CgojaWZkZWYgX19jcGx1c3BsdXMKfQojZW5kaWYKCiNlbmRpZiAvKiBfX1NQSVRaX0hfXyAqLwo='
    },
    'cpp': {
        'spitz.h': 'LyoKICogVGhlIE1JVCBMaWNlbnNlIChNSVQpCiAqCiAqIENvcHlyaWdodCAoYykgMjAxNSBDYWlhbiBCZW5lZGljdG8gPGNhaWFuQGdnYXVuaWNhbXAuY29tPgogKiBDb3B5cmlnaHQgKGMpIDIwMTQgSWFuIExpdSBSb2RyaWd1ZXMgPGlhbi5saXVAZ2dhdW5pY2FtcC5jb20+CiAqCiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkgCiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlICJTb2Z0d2FyZSIpLCB0byAKICogZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgCiAqIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIAogKiBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgCiAqIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6CiAqIAogKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiAKICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCiAqIAogKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUiAKICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksIAogKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCAKICogVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgCiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIAogKiBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIAogKiBJTiBUSEUgU09GVFdBUkUuCiAqLwoKI2lmbmRlZiBfX1NQSVRaX0hfXwojZGVmaW5lIF9fU1BJVFpfSF9fCgojaWZkZWYgX19jcGx1c3BsdXMKZXh0ZXJuICJDIiB7CiNlbmRpZgoKIC8qIFB5dGhvbiB2ZXJzaW9uIG9mIHNwaXRzIHVzZXMgY2RlY2wgY2FsbGluZyBjb252ZW50aW9uICovCgovKiBUaGUgc2l6ZSB1c2VkIHRvIHBhc3MgbWVzc2FnZXMgaXMgNjQgYml0ICovCgp0eXBlZGVmIGxvbmcgbG9uZyBpbnQgc3BpdHNzaXplX3Q7Cgp0eXBlZGVmIGNvbnN0IHZvaWQqIHNwaXRzY3R4X3Q7CgovKiBSdW5uZXIgY2FsbGJhY2sgdGhhdCBleGVjdXRlcyB0aGUgdGFzayBkaXN0cmlidXRpb24gYW5kIGNvbW1pdHRpbmcgKi8KCnR5cGVkZWYgaW50ICgqc3BpdHpydW5fdCkoaW50LCBjb25zdCBjaGFyKiosIGNvbnN0IHZvaWQqLCBzcGl0c3NpemVfdCwgCiAgICBjb25zdCB2b2lkKiosIHNwaXRzc2l6ZV90Kik7CgovKiBQdXNoZXIgY2FsbGJhY2sgdGhhdCBwZXJmb3JtcyByZXN1bHQgc3VibWlzc2lvbiBmcm9tIGEgd29ya2VyICovCgp0eXBlZGVmIHZvaWQgKCpzcGl0c3B1c2hfdCkoY29uc3Qgdm9pZCosIHNwaXRzc2l6ZV90LCBzcGl0c2N0eF90KTsKCi8qIFNwaXRzIG1haW4gKi8KCmludCBzcGl0c19tYWluKGludCBhcmdjLCBjb25zdCBjaGFyKiBhcmd2W10sIHNwaXR6cnVuX3QgcnVuKTsKCi8qIEpvYiBNYW5hZ2VyICovCgp2b2lkKiBzcGl0c19qb2JfbWFuYWdlcl9uZXcoaW50IGFyZ2MsIGNvbnN0IGNoYXIgKmFyZ3ZbXSwKICAgIGNvbnN0IHZvaWQqIGpvYmluZm8sIHNwaXRzc2l6ZV90IGpvYmluZm9zeik7CgppbnQgc3BpdHNfam9iX21hbmFnZXJfbmV4dF90YXNrKHZvaWQgKnVzZXJfZGF0YSwgCiAgICBzcGl0c3B1c2hfdCBwdXNoX3Rhc2ssIHNwaXRzY3R4X3Qgam1jdHgpOwoKdm9pZCBzcGl0c19qb2JfbWFuYWdlcl9maW5hbGl6ZSh2b2lkICp1c2VyX2RhdGEpOwoKLyogV29ya2VyICovCgp2b2lkKiBzcGl0c193b3JrZXJfbmV3KGludCBhcmdjLCBjb25zdCBjaGFyICphcmd2W10pOwoKaW50IHNwaXRzX3dvcmtlcl9ydW4odm9pZCAqdXNlcl9kYXRhLCBjb25zdCB2b2lkKiB0YXNrLCAKICAgIHNwaXRzc2l6ZV90IHRhc2tzeiwgc3BpdHNwdXNoX3QgcHVzaF9yZXN1bHQsIAogICAgc3BpdHNjdHhfdCB0YXNrY3R4KTsKCnZvaWQgc3BpdHNfd29ya2VyX2ZpbmFsaXplKHZvaWQgKnVzZXJfZGF0YSk7CgovKiBDb21taXR0ZXIgKi8KCnZvaWQqIHNwaXRzX2NvbW1pdHRlcl9uZXcoaW50IGFyZ2MsIGNvbnN0IGNoYXIgKmFyZ3ZbXSwKICAgIGNvbnN0IHZvaWQqIGpvYmluZm8sIHNwaXRzc2l6ZV90IGpvYmluZm9zeik7CgppbnQgc3BpdHNfY29tbWl0dGVyX2NvbW1pdF9waXQodm9pZCAqdXNlcl9kYXRhLAogICAgY29uc3Qgdm9pZCogcmVzdWx0LCBzcGl0c3NpemVfdCByZXN1bHRzeik7CgppbnQgc3BpdHNfY29tbWl0dGVyX2NvbW1pdF9qb2Iodm9pZCAqdXNlcl9kYXRhLAogICAgc3BpdHNwdXNoX3QgcHVzaF9maW5hbF9yZXN1bHQsIHNwaXRzY3R4X3Qgam9iY3R4KTsKCnZvaWQgc3BpdHNfY29tbWl0dGVyX2ZpbmFsaXplKHZvaWQgKnVzZXJfZGF0YSk7CgojaWZkZWYgX19jcGx1c3BsdXMKfQojZW5kaWYKCiNlbmRpZiAvKiBfX1NQSVRaX0hfXyAqLwo=',
        'spitz.hpp': '',
        'stream.hpp' : ''
    }
}

def render_api(name):
    """"""
    if name not in _apis:
        sys.stderr.write("Error: Unknown API '%s'!\n" % name)
        exit(1)
    destdir = 'spitz'
    if not os.path.exists(destdir):
        print("Creating '%s'..." % destdir)
        os.makedirs(destdir)
    for filename, blob in sorted(_apis[name].items()):
        filepath = os.path.join(destdir, filename)
        if os.path.exists(filepath):
            sys.stderr.write("Error: The file '%s' already exists!\n" % filepath)
            exit(1)
        print("Creating '%s'..." % filepath)
        fblob = open(filepath, 'wb')
        fblob.write(base64.b64decode(blob))
    print("Done.")


if __name__ == '__main__':
    if len(sys.argv) != 2:
        print('USAGE: spitz-examples example_name')
        print('Available examples:')
        for name in sorted(_apis.keys()):
            print('  %s' % name)
        exit(1)
    render_api(sys.argv[1])
