# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkPolyDataPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkPolyDataPython', [dirname(__file__)])
        except ImportError:
            import _itkPolyDataPython
            return _itkPolyDataPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkPolyDataPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkPolyDataPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkPolyDataPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkVectorContainerPython
import itkVectorPython
import itkFixedArrayPython
import pyBasePython
import vnl_vector_refPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import ITKCommonBasePython
import itkContinuousIndexPython
import itkIndexPython
import itkSizePython
import itkOffsetPython
import itkPointPython
import itkMatrixPython
import itkCovariantVectorPython
import vnl_matrix_fixedPython


HAVE_NUMPY = True
try:
  import numpy
except ImportError:
  HAVE_NUMPY = False

def _get_numpy_pixelid(itk_Image_type):
    """Returns a ITK PixelID given a numpy array."""

    if not HAVE_NUMPY:
        raise ImportError('Numpy not available.')
# This is a Mapping from numpy array types to itk pixel types.
    _np_itk = {"UC":numpy.uint8,
               "US":numpy.uint16,
               "UI":numpy.uint32,
               "UL":numpy.uint64,
               "SC":numpy.int8,
               "SS":numpy.int16,
               "SI":numpy.int32,
               "SL":numpy.int64,
               "F":numpy.float32,
               "D":numpy.float64,
               "PF2":numpy.float32,
               "PF3":numpy.float32,
                }
    import os
    if os.name == 'nt':
        _np_itk['UL'] = numpy.uint32
        _np_itk['SL'] = numpy.int32
    try:
        return _np_itk[itk_Image_type]
    except KeyError as e:
        raise e


def itkPolyDataD_New():
  return itkPolyDataD.New()


def itkPolyDataF_New():
  return itkPolyDataF.New()


def itkPolyDataUS_New():
  return itkPolyDataUS.New()


def itkPolyDataUC_New():
  return itkPolyDataUC.New()


def itkPolyDataSS_New():
  return itkPolyDataSS.New()

class itkPolyDataD(ITKCommonBasePython.itkDataObject):
    """Proxy of C++ itkPolyDataD class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkPolyDataD_Pointer":
        """__New_orig__() -> itkPolyDataD_Pointer"""
        return _itkPolyDataPython.itkPolyDataD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkPolyDataD_Pointer":
        """Clone(itkPolyDataD self) -> itkPolyDataD_Pointer"""
        return _itkPolyDataPython.itkPolyDataD_Clone(self)


    def GetNumberOfPoints(self) -> "unsigned long long":
        """GetNumberOfPoints(itkPolyDataD self) -> unsigned long long"""
        return _itkPolyDataPython.itkPolyDataD_GetNumberOfPoints(self)


    def SetPoints(self, arg0: 'itkVectorContainerULLPF3') -> "void":
        """SetPoints(itkPolyDataD self, itkVectorContainerULLPF3 arg0)"""
        return _itkPolyDataPython.itkPolyDataD_SetPoints(self, arg0)


    def GetPoints(self, *args) -> "itkVectorContainerULLPF3 const *":
        """
        GetPoints(itkPolyDataD self) -> itkVectorContainerULLPF3
        GetPoints(itkPolyDataD self) -> itkVectorContainerULLPF3
        """
        return _itkPolyDataPython.itkPolyDataD_GetPoints(self, *args)


    def SetVertices(self, arg0: 'itkVectorContainerULLUI') -> "void":
        """SetVertices(itkPolyDataD self, itkVectorContainerULLUI arg0)"""
        return _itkPolyDataPython.itkPolyDataD_SetVertices(self, arg0)


    def GetVertices(self, *args) -> "itkVectorContainerULLUI const *":
        """
        GetVertices(itkPolyDataD self) -> itkVectorContainerULLUI
        GetVertices(itkPolyDataD self) -> itkVectorContainerULLUI
        """
        return _itkPolyDataPython.itkPolyDataD_GetVertices(self, *args)


    def SetLines(self, arg0: 'itkVectorContainerULLUI') -> "void":
        """SetLines(itkPolyDataD self, itkVectorContainerULLUI arg0)"""
        return _itkPolyDataPython.itkPolyDataD_SetLines(self, arg0)


    def GetLines(self, *args) -> "itkVectorContainerULLUI const *":
        """
        GetLines(itkPolyDataD self) -> itkVectorContainerULLUI
        GetLines(itkPolyDataD self) -> itkVectorContainerULLUI
        """
        return _itkPolyDataPython.itkPolyDataD_GetLines(self, *args)


    def SetPolygons(self, arg0: 'itkVectorContainerULLUI') -> "void":
        """SetPolygons(itkPolyDataD self, itkVectorContainerULLUI arg0)"""
        return _itkPolyDataPython.itkPolyDataD_SetPolygons(self, arg0)


    def GetPolygons(self, *args) -> "itkVectorContainerULLUI const *":
        """
        GetPolygons(itkPolyDataD self) -> itkVectorContainerULLUI
        GetPolygons(itkPolyDataD self) -> itkVectorContainerULLUI
        """
        return _itkPolyDataPython.itkPolyDataD_GetPolygons(self, *args)


    def SetTriangleStrips(self, arg0: 'itkVectorContainerULLUI') -> "void":
        """SetTriangleStrips(itkPolyDataD self, itkVectorContainerULLUI arg0)"""
        return _itkPolyDataPython.itkPolyDataD_SetTriangleStrips(self, arg0)


    def GetTriangleStrips(self, *args) -> "itkVectorContainerULLUI const *":
        """
        GetTriangleStrips(itkPolyDataD self) -> itkVectorContainerULLUI
        GetTriangleStrips(itkPolyDataD self) -> itkVectorContainerULLUI
        """
        return _itkPolyDataPython.itkPolyDataD_GetTriangleStrips(self, *args)


    def SetPoint(self, arg0: 'unsigned long long', arg1: 'itkPointF3') -> "void":
        """SetPoint(itkPolyDataD self, unsigned long long arg0, itkPointF3 arg1)"""
        return _itkPolyDataPython.itkPolyDataD_SetPoint(self, arg0, arg1)


    def GetPoint(self, *args) -> "itkPointF3":
        """
        GetPoint(itkPolyDataD self, unsigned long long arg0, itkPointF3 arg1) -> bool
        GetPoint(itkPolyDataD self, unsigned long long arg0) -> itkPointF3
        """
        return _itkPolyDataPython.itkPolyDataD_GetPoint(self, *args)


    def SetPointData(self, *args) -> "void":
        """
        SetPointData(itkPolyDataD self, itkVectorContainerULLD arg0)
        SetPointData(itkPolyDataD self, unsigned long long arg0, double arg1)
        """
        return _itkPolyDataPython.itkPolyDataD_SetPointData(self, *args)


    def GetPointData(self, *args) -> "bool":
        """
        GetPointData(itkPolyDataD self) -> itkVectorContainerULLD
        GetPointData(itkPolyDataD self) -> itkVectorContainerULLD
        GetPointData(itkPolyDataD self, unsigned long long arg0, double * arg1) -> bool
        """
        return _itkPolyDataPython.itkPolyDataD_GetPointData(self, *args)


    def SetCellData(self, *args) -> "void":
        """
        SetCellData(itkPolyDataD self, itkVectorContainerULLD arg0)
        SetCellData(itkPolyDataD self, unsigned long long arg0, double arg1)
        """
        return _itkPolyDataPython.itkPolyDataD_SetCellData(self, *args)


    def GetCellData(self, *args) -> "bool":
        """
        GetCellData(itkPolyDataD self) -> itkVectorContainerULLD
        GetCellData(itkPolyDataD self) -> itkVectorContainerULLD
        GetCellData(itkPolyDataD self, unsigned long long arg0, double * arg1) -> bool
        """
        return _itkPolyDataPython.itkPolyDataD_GetCellData(self, *args)

    __swig_destroy__ = _itkPolyDataPython.delete_itkPolyDataD

    def cast(obj: 'itkLightObject') -> "itkPolyDataD *":
        """cast(itkLightObject obj) -> itkPolyDataD"""
        return _itkPolyDataPython.itkPolyDataD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkPolyDataD

        Create a new object of the class itkPolyDataD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPolyDataD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkPolyDataD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPolyDataD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPolyDataD.Clone = new_instancemethod(_itkPolyDataPython.itkPolyDataD_Clone, None, itkPolyDataD)
itkPolyDataD.GetNumberOfPoints = new_instancemethod(_itkPolyDataPython.itkPolyDataD_GetNumberOfPoints, None, itkPolyDataD)
itkPolyDataD.SetPoints = new_instancemethod(_itkPolyDataPython.itkPolyDataD_SetPoints, None, itkPolyDataD)
itkPolyDataD.GetPoints = new_instancemethod(_itkPolyDataPython.itkPolyDataD_GetPoints, None, itkPolyDataD)
itkPolyDataD.SetVertices = new_instancemethod(_itkPolyDataPython.itkPolyDataD_SetVertices, None, itkPolyDataD)
itkPolyDataD.GetVertices = new_instancemethod(_itkPolyDataPython.itkPolyDataD_GetVertices, None, itkPolyDataD)
itkPolyDataD.SetLines = new_instancemethod(_itkPolyDataPython.itkPolyDataD_SetLines, None, itkPolyDataD)
itkPolyDataD.GetLines = new_instancemethod(_itkPolyDataPython.itkPolyDataD_GetLines, None, itkPolyDataD)
itkPolyDataD.SetPolygons = new_instancemethod(_itkPolyDataPython.itkPolyDataD_SetPolygons, None, itkPolyDataD)
itkPolyDataD.GetPolygons = new_instancemethod(_itkPolyDataPython.itkPolyDataD_GetPolygons, None, itkPolyDataD)
itkPolyDataD.SetTriangleStrips = new_instancemethod(_itkPolyDataPython.itkPolyDataD_SetTriangleStrips, None, itkPolyDataD)
itkPolyDataD.GetTriangleStrips = new_instancemethod(_itkPolyDataPython.itkPolyDataD_GetTriangleStrips, None, itkPolyDataD)
itkPolyDataD.SetPoint = new_instancemethod(_itkPolyDataPython.itkPolyDataD_SetPoint, None, itkPolyDataD)
itkPolyDataD.GetPoint = new_instancemethod(_itkPolyDataPython.itkPolyDataD_GetPoint, None, itkPolyDataD)
itkPolyDataD.SetPointData = new_instancemethod(_itkPolyDataPython.itkPolyDataD_SetPointData, None, itkPolyDataD)
itkPolyDataD.GetPointData = new_instancemethod(_itkPolyDataPython.itkPolyDataD_GetPointData, None, itkPolyDataD)
itkPolyDataD.SetCellData = new_instancemethod(_itkPolyDataPython.itkPolyDataD_SetCellData, None, itkPolyDataD)
itkPolyDataD.GetCellData = new_instancemethod(_itkPolyDataPython.itkPolyDataD_GetCellData, None, itkPolyDataD)
itkPolyDataD_swigregister = _itkPolyDataPython.itkPolyDataD_swigregister
itkPolyDataD_swigregister(itkPolyDataD)

def itkPolyDataD___New_orig__() -> "itkPolyDataD_Pointer":
    """itkPolyDataD___New_orig__() -> itkPolyDataD_Pointer"""
    return _itkPolyDataPython.itkPolyDataD___New_orig__()

def itkPolyDataD_cast(obj: 'itkLightObject') -> "itkPolyDataD *":
    """itkPolyDataD_cast(itkLightObject obj) -> itkPolyDataD"""
    return _itkPolyDataPython.itkPolyDataD_cast(obj)

class itkPolyDataF(ITKCommonBasePython.itkDataObject):
    """Proxy of C++ itkPolyDataF class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkPolyDataF_Pointer":
        """__New_orig__() -> itkPolyDataF_Pointer"""
        return _itkPolyDataPython.itkPolyDataF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkPolyDataF_Pointer":
        """Clone(itkPolyDataF self) -> itkPolyDataF_Pointer"""
        return _itkPolyDataPython.itkPolyDataF_Clone(self)


    def GetNumberOfPoints(self) -> "unsigned long long":
        """GetNumberOfPoints(itkPolyDataF self) -> unsigned long long"""
        return _itkPolyDataPython.itkPolyDataF_GetNumberOfPoints(self)


    def SetPoints(self, arg0: 'itkVectorContainerULLPF3') -> "void":
        """SetPoints(itkPolyDataF self, itkVectorContainerULLPF3 arg0)"""
        return _itkPolyDataPython.itkPolyDataF_SetPoints(self, arg0)


    def GetPoints(self, *args) -> "itkVectorContainerULLPF3 const *":
        """
        GetPoints(itkPolyDataF self) -> itkVectorContainerULLPF3
        GetPoints(itkPolyDataF self) -> itkVectorContainerULLPF3
        """
        return _itkPolyDataPython.itkPolyDataF_GetPoints(self, *args)


    def SetVertices(self, arg0: 'itkVectorContainerULLUI') -> "void":
        """SetVertices(itkPolyDataF self, itkVectorContainerULLUI arg0)"""
        return _itkPolyDataPython.itkPolyDataF_SetVertices(self, arg0)


    def GetVertices(self, *args) -> "itkVectorContainerULLUI const *":
        """
        GetVertices(itkPolyDataF self) -> itkVectorContainerULLUI
        GetVertices(itkPolyDataF self) -> itkVectorContainerULLUI
        """
        return _itkPolyDataPython.itkPolyDataF_GetVertices(self, *args)


    def SetLines(self, arg0: 'itkVectorContainerULLUI') -> "void":
        """SetLines(itkPolyDataF self, itkVectorContainerULLUI arg0)"""
        return _itkPolyDataPython.itkPolyDataF_SetLines(self, arg0)


    def GetLines(self, *args) -> "itkVectorContainerULLUI const *":
        """
        GetLines(itkPolyDataF self) -> itkVectorContainerULLUI
        GetLines(itkPolyDataF self) -> itkVectorContainerULLUI
        """
        return _itkPolyDataPython.itkPolyDataF_GetLines(self, *args)


    def SetPolygons(self, arg0: 'itkVectorContainerULLUI') -> "void":
        """SetPolygons(itkPolyDataF self, itkVectorContainerULLUI arg0)"""
        return _itkPolyDataPython.itkPolyDataF_SetPolygons(self, arg0)


    def GetPolygons(self, *args) -> "itkVectorContainerULLUI const *":
        """
        GetPolygons(itkPolyDataF self) -> itkVectorContainerULLUI
        GetPolygons(itkPolyDataF self) -> itkVectorContainerULLUI
        """
        return _itkPolyDataPython.itkPolyDataF_GetPolygons(self, *args)


    def SetTriangleStrips(self, arg0: 'itkVectorContainerULLUI') -> "void":
        """SetTriangleStrips(itkPolyDataF self, itkVectorContainerULLUI arg0)"""
        return _itkPolyDataPython.itkPolyDataF_SetTriangleStrips(self, arg0)


    def GetTriangleStrips(self, *args) -> "itkVectorContainerULLUI const *":
        """
        GetTriangleStrips(itkPolyDataF self) -> itkVectorContainerULLUI
        GetTriangleStrips(itkPolyDataF self) -> itkVectorContainerULLUI
        """
        return _itkPolyDataPython.itkPolyDataF_GetTriangleStrips(self, *args)


    def SetPoint(self, arg0: 'unsigned long long', arg1: 'itkPointF3') -> "void":
        """SetPoint(itkPolyDataF self, unsigned long long arg0, itkPointF3 arg1)"""
        return _itkPolyDataPython.itkPolyDataF_SetPoint(self, arg0, arg1)


    def GetPoint(self, *args) -> "itkPointF3":
        """
        GetPoint(itkPolyDataF self, unsigned long long arg0, itkPointF3 arg1) -> bool
        GetPoint(itkPolyDataF self, unsigned long long arg0) -> itkPointF3
        """
        return _itkPolyDataPython.itkPolyDataF_GetPoint(self, *args)


    def SetPointData(self, *args) -> "void":
        """
        SetPointData(itkPolyDataF self, itkVectorContainerULLF arg0)
        SetPointData(itkPolyDataF self, unsigned long long arg0, float arg1)
        """
        return _itkPolyDataPython.itkPolyDataF_SetPointData(self, *args)


    def GetPointData(self, *args) -> "bool":
        """
        GetPointData(itkPolyDataF self) -> itkVectorContainerULLF
        GetPointData(itkPolyDataF self) -> itkVectorContainerULLF
        GetPointData(itkPolyDataF self, unsigned long long arg0, float * arg1) -> bool
        """
        return _itkPolyDataPython.itkPolyDataF_GetPointData(self, *args)


    def SetCellData(self, *args) -> "void":
        """
        SetCellData(itkPolyDataF self, itkVectorContainerULLF arg0)
        SetCellData(itkPolyDataF self, unsigned long long arg0, float arg1)
        """
        return _itkPolyDataPython.itkPolyDataF_SetCellData(self, *args)


    def GetCellData(self, *args) -> "bool":
        """
        GetCellData(itkPolyDataF self) -> itkVectorContainerULLF
        GetCellData(itkPolyDataF self) -> itkVectorContainerULLF
        GetCellData(itkPolyDataF self, unsigned long long arg0, float * arg1) -> bool
        """
        return _itkPolyDataPython.itkPolyDataF_GetCellData(self, *args)

    __swig_destroy__ = _itkPolyDataPython.delete_itkPolyDataF

    def cast(obj: 'itkLightObject') -> "itkPolyDataF *":
        """cast(itkLightObject obj) -> itkPolyDataF"""
        return _itkPolyDataPython.itkPolyDataF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkPolyDataF

        Create a new object of the class itkPolyDataF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPolyDataF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkPolyDataF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPolyDataF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPolyDataF.Clone = new_instancemethod(_itkPolyDataPython.itkPolyDataF_Clone, None, itkPolyDataF)
itkPolyDataF.GetNumberOfPoints = new_instancemethod(_itkPolyDataPython.itkPolyDataF_GetNumberOfPoints, None, itkPolyDataF)
itkPolyDataF.SetPoints = new_instancemethod(_itkPolyDataPython.itkPolyDataF_SetPoints, None, itkPolyDataF)
itkPolyDataF.GetPoints = new_instancemethod(_itkPolyDataPython.itkPolyDataF_GetPoints, None, itkPolyDataF)
itkPolyDataF.SetVertices = new_instancemethod(_itkPolyDataPython.itkPolyDataF_SetVertices, None, itkPolyDataF)
itkPolyDataF.GetVertices = new_instancemethod(_itkPolyDataPython.itkPolyDataF_GetVertices, None, itkPolyDataF)
itkPolyDataF.SetLines = new_instancemethod(_itkPolyDataPython.itkPolyDataF_SetLines, None, itkPolyDataF)
itkPolyDataF.GetLines = new_instancemethod(_itkPolyDataPython.itkPolyDataF_GetLines, None, itkPolyDataF)
itkPolyDataF.SetPolygons = new_instancemethod(_itkPolyDataPython.itkPolyDataF_SetPolygons, None, itkPolyDataF)
itkPolyDataF.GetPolygons = new_instancemethod(_itkPolyDataPython.itkPolyDataF_GetPolygons, None, itkPolyDataF)
itkPolyDataF.SetTriangleStrips = new_instancemethod(_itkPolyDataPython.itkPolyDataF_SetTriangleStrips, None, itkPolyDataF)
itkPolyDataF.GetTriangleStrips = new_instancemethod(_itkPolyDataPython.itkPolyDataF_GetTriangleStrips, None, itkPolyDataF)
itkPolyDataF.SetPoint = new_instancemethod(_itkPolyDataPython.itkPolyDataF_SetPoint, None, itkPolyDataF)
itkPolyDataF.GetPoint = new_instancemethod(_itkPolyDataPython.itkPolyDataF_GetPoint, None, itkPolyDataF)
itkPolyDataF.SetPointData = new_instancemethod(_itkPolyDataPython.itkPolyDataF_SetPointData, None, itkPolyDataF)
itkPolyDataF.GetPointData = new_instancemethod(_itkPolyDataPython.itkPolyDataF_GetPointData, None, itkPolyDataF)
itkPolyDataF.SetCellData = new_instancemethod(_itkPolyDataPython.itkPolyDataF_SetCellData, None, itkPolyDataF)
itkPolyDataF.GetCellData = new_instancemethod(_itkPolyDataPython.itkPolyDataF_GetCellData, None, itkPolyDataF)
itkPolyDataF_swigregister = _itkPolyDataPython.itkPolyDataF_swigregister
itkPolyDataF_swigregister(itkPolyDataF)

def itkPolyDataF___New_orig__() -> "itkPolyDataF_Pointer":
    """itkPolyDataF___New_orig__() -> itkPolyDataF_Pointer"""
    return _itkPolyDataPython.itkPolyDataF___New_orig__()

def itkPolyDataF_cast(obj: 'itkLightObject') -> "itkPolyDataF *":
    """itkPolyDataF_cast(itkLightObject obj) -> itkPolyDataF"""
    return _itkPolyDataPython.itkPolyDataF_cast(obj)

class itkPolyDataSS(ITKCommonBasePython.itkDataObject):
    """Proxy of C++ itkPolyDataSS class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkPolyDataSS_Pointer":
        """__New_orig__() -> itkPolyDataSS_Pointer"""
        return _itkPolyDataPython.itkPolyDataSS___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkPolyDataSS_Pointer":
        """Clone(itkPolyDataSS self) -> itkPolyDataSS_Pointer"""
        return _itkPolyDataPython.itkPolyDataSS_Clone(self)


    def GetNumberOfPoints(self) -> "unsigned long long":
        """GetNumberOfPoints(itkPolyDataSS self) -> unsigned long long"""
        return _itkPolyDataPython.itkPolyDataSS_GetNumberOfPoints(self)


    def SetPoints(self, arg0: 'itkVectorContainerULLPF3') -> "void":
        """SetPoints(itkPolyDataSS self, itkVectorContainerULLPF3 arg0)"""
        return _itkPolyDataPython.itkPolyDataSS_SetPoints(self, arg0)


    def GetPoints(self, *args) -> "itkVectorContainerULLPF3 const *":
        """
        GetPoints(itkPolyDataSS self) -> itkVectorContainerULLPF3
        GetPoints(itkPolyDataSS self) -> itkVectorContainerULLPF3
        """
        return _itkPolyDataPython.itkPolyDataSS_GetPoints(self, *args)


    def SetVertices(self, arg0: 'itkVectorContainerULLUI') -> "void":
        """SetVertices(itkPolyDataSS self, itkVectorContainerULLUI arg0)"""
        return _itkPolyDataPython.itkPolyDataSS_SetVertices(self, arg0)


    def GetVertices(self, *args) -> "itkVectorContainerULLUI const *":
        """
        GetVertices(itkPolyDataSS self) -> itkVectorContainerULLUI
        GetVertices(itkPolyDataSS self) -> itkVectorContainerULLUI
        """
        return _itkPolyDataPython.itkPolyDataSS_GetVertices(self, *args)


    def SetLines(self, arg0: 'itkVectorContainerULLUI') -> "void":
        """SetLines(itkPolyDataSS self, itkVectorContainerULLUI arg0)"""
        return _itkPolyDataPython.itkPolyDataSS_SetLines(self, arg0)


    def GetLines(self, *args) -> "itkVectorContainerULLUI const *":
        """
        GetLines(itkPolyDataSS self) -> itkVectorContainerULLUI
        GetLines(itkPolyDataSS self) -> itkVectorContainerULLUI
        """
        return _itkPolyDataPython.itkPolyDataSS_GetLines(self, *args)


    def SetPolygons(self, arg0: 'itkVectorContainerULLUI') -> "void":
        """SetPolygons(itkPolyDataSS self, itkVectorContainerULLUI arg0)"""
        return _itkPolyDataPython.itkPolyDataSS_SetPolygons(self, arg0)


    def GetPolygons(self, *args) -> "itkVectorContainerULLUI const *":
        """
        GetPolygons(itkPolyDataSS self) -> itkVectorContainerULLUI
        GetPolygons(itkPolyDataSS self) -> itkVectorContainerULLUI
        """
        return _itkPolyDataPython.itkPolyDataSS_GetPolygons(self, *args)


    def SetTriangleStrips(self, arg0: 'itkVectorContainerULLUI') -> "void":
        """SetTriangleStrips(itkPolyDataSS self, itkVectorContainerULLUI arg0)"""
        return _itkPolyDataPython.itkPolyDataSS_SetTriangleStrips(self, arg0)


    def GetTriangleStrips(self, *args) -> "itkVectorContainerULLUI const *":
        """
        GetTriangleStrips(itkPolyDataSS self) -> itkVectorContainerULLUI
        GetTriangleStrips(itkPolyDataSS self) -> itkVectorContainerULLUI
        """
        return _itkPolyDataPython.itkPolyDataSS_GetTriangleStrips(self, *args)


    def SetPoint(self, arg0: 'unsigned long long', arg1: 'itkPointF3') -> "void":
        """SetPoint(itkPolyDataSS self, unsigned long long arg0, itkPointF3 arg1)"""
        return _itkPolyDataPython.itkPolyDataSS_SetPoint(self, arg0, arg1)


    def GetPoint(self, *args) -> "itkPointF3":
        """
        GetPoint(itkPolyDataSS self, unsigned long long arg0, itkPointF3 arg1) -> bool
        GetPoint(itkPolyDataSS self, unsigned long long arg0) -> itkPointF3
        """
        return _itkPolyDataPython.itkPolyDataSS_GetPoint(self, *args)


    def SetPointData(self, *args) -> "void":
        """
        SetPointData(itkPolyDataSS self, itkVectorContainerULLSS arg0)
        SetPointData(itkPolyDataSS self, unsigned long long arg0, short arg1)
        """
        return _itkPolyDataPython.itkPolyDataSS_SetPointData(self, *args)


    def GetPointData(self, *args) -> "bool":
        """
        GetPointData(itkPolyDataSS self) -> itkVectorContainerULLSS
        GetPointData(itkPolyDataSS self) -> itkVectorContainerULLSS
        GetPointData(itkPolyDataSS self, unsigned long long arg0, short * arg1) -> bool
        """
        return _itkPolyDataPython.itkPolyDataSS_GetPointData(self, *args)


    def SetCellData(self, *args) -> "void":
        """
        SetCellData(itkPolyDataSS self, itkVectorContainerULLSS arg0)
        SetCellData(itkPolyDataSS self, unsigned long long arg0, short arg1)
        """
        return _itkPolyDataPython.itkPolyDataSS_SetCellData(self, *args)


    def GetCellData(self, *args) -> "bool":
        """
        GetCellData(itkPolyDataSS self) -> itkVectorContainerULLSS
        GetCellData(itkPolyDataSS self) -> itkVectorContainerULLSS
        GetCellData(itkPolyDataSS self, unsigned long long arg0, short * arg1) -> bool
        """
        return _itkPolyDataPython.itkPolyDataSS_GetCellData(self, *args)

    __swig_destroy__ = _itkPolyDataPython.delete_itkPolyDataSS

    def cast(obj: 'itkLightObject') -> "itkPolyDataSS *":
        """cast(itkLightObject obj) -> itkPolyDataSS"""
        return _itkPolyDataPython.itkPolyDataSS_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkPolyDataSS

        Create a new object of the class itkPolyDataSS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPolyDataSS.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkPolyDataSS.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPolyDataSS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPolyDataSS.Clone = new_instancemethod(_itkPolyDataPython.itkPolyDataSS_Clone, None, itkPolyDataSS)
itkPolyDataSS.GetNumberOfPoints = new_instancemethod(_itkPolyDataPython.itkPolyDataSS_GetNumberOfPoints, None, itkPolyDataSS)
itkPolyDataSS.SetPoints = new_instancemethod(_itkPolyDataPython.itkPolyDataSS_SetPoints, None, itkPolyDataSS)
itkPolyDataSS.GetPoints = new_instancemethod(_itkPolyDataPython.itkPolyDataSS_GetPoints, None, itkPolyDataSS)
itkPolyDataSS.SetVertices = new_instancemethod(_itkPolyDataPython.itkPolyDataSS_SetVertices, None, itkPolyDataSS)
itkPolyDataSS.GetVertices = new_instancemethod(_itkPolyDataPython.itkPolyDataSS_GetVertices, None, itkPolyDataSS)
itkPolyDataSS.SetLines = new_instancemethod(_itkPolyDataPython.itkPolyDataSS_SetLines, None, itkPolyDataSS)
itkPolyDataSS.GetLines = new_instancemethod(_itkPolyDataPython.itkPolyDataSS_GetLines, None, itkPolyDataSS)
itkPolyDataSS.SetPolygons = new_instancemethod(_itkPolyDataPython.itkPolyDataSS_SetPolygons, None, itkPolyDataSS)
itkPolyDataSS.GetPolygons = new_instancemethod(_itkPolyDataPython.itkPolyDataSS_GetPolygons, None, itkPolyDataSS)
itkPolyDataSS.SetTriangleStrips = new_instancemethod(_itkPolyDataPython.itkPolyDataSS_SetTriangleStrips, None, itkPolyDataSS)
itkPolyDataSS.GetTriangleStrips = new_instancemethod(_itkPolyDataPython.itkPolyDataSS_GetTriangleStrips, None, itkPolyDataSS)
itkPolyDataSS.SetPoint = new_instancemethod(_itkPolyDataPython.itkPolyDataSS_SetPoint, None, itkPolyDataSS)
itkPolyDataSS.GetPoint = new_instancemethod(_itkPolyDataPython.itkPolyDataSS_GetPoint, None, itkPolyDataSS)
itkPolyDataSS.SetPointData = new_instancemethod(_itkPolyDataPython.itkPolyDataSS_SetPointData, None, itkPolyDataSS)
itkPolyDataSS.GetPointData = new_instancemethod(_itkPolyDataPython.itkPolyDataSS_GetPointData, None, itkPolyDataSS)
itkPolyDataSS.SetCellData = new_instancemethod(_itkPolyDataPython.itkPolyDataSS_SetCellData, None, itkPolyDataSS)
itkPolyDataSS.GetCellData = new_instancemethod(_itkPolyDataPython.itkPolyDataSS_GetCellData, None, itkPolyDataSS)
itkPolyDataSS_swigregister = _itkPolyDataPython.itkPolyDataSS_swigregister
itkPolyDataSS_swigregister(itkPolyDataSS)

def itkPolyDataSS___New_orig__() -> "itkPolyDataSS_Pointer":
    """itkPolyDataSS___New_orig__() -> itkPolyDataSS_Pointer"""
    return _itkPolyDataPython.itkPolyDataSS___New_orig__()

def itkPolyDataSS_cast(obj: 'itkLightObject') -> "itkPolyDataSS *":
    """itkPolyDataSS_cast(itkLightObject obj) -> itkPolyDataSS"""
    return _itkPolyDataPython.itkPolyDataSS_cast(obj)

class itkPolyDataUC(ITKCommonBasePython.itkDataObject):
    """Proxy of C++ itkPolyDataUC class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkPolyDataUC_Pointer":
        """__New_orig__() -> itkPolyDataUC_Pointer"""
        return _itkPolyDataPython.itkPolyDataUC___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkPolyDataUC_Pointer":
        """Clone(itkPolyDataUC self) -> itkPolyDataUC_Pointer"""
        return _itkPolyDataPython.itkPolyDataUC_Clone(self)


    def GetNumberOfPoints(self) -> "unsigned long long":
        """GetNumberOfPoints(itkPolyDataUC self) -> unsigned long long"""
        return _itkPolyDataPython.itkPolyDataUC_GetNumberOfPoints(self)


    def SetPoints(self, arg0: 'itkVectorContainerULLPF3') -> "void":
        """SetPoints(itkPolyDataUC self, itkVectorContainerULLPF3 arg0)"""
        return _itkPolyDataPython.itkPolyDataUC_SetPoints(self, arg0)


    def GetPoints(self, *args) -> "itkVectorContainerULLPF3 const *":
        """
        GetPoints(itkPolyDataUC self) -> itkVectorContainerULLPF3
        GetPoints(itkPolyDataUC self) -> itkVectorContainerULLPF3
        """
        return _itkPolyDataPython.itkPolyDataUC_GetPoints(self, *args)


    def SetVertices(self, arg0: 'itkVectorContainerULLUI') -> "void":
        """SetVertices(itkPolyDataUC self, itkVectorContainerULLUI arg0)"""
        return _itkPolyDataPython.itkPolyDataUC_SetVertices(self, arg0)


    def GetVertices(self, *args) -> "itkVectorContainerULLUI const *":
        """
        GetVertices(itkPolyDataUC self) -> itkVectorContainerULLUI
        GetVertices(itkPolyDataUC self) -> itkVectorContainerULLUI
        """
        return _itkPolyDataPython.itkPolyDataUC_GetVertices(self, *args)


    def SetLines(self, arg0: 'itkVectorContainerULLUI') -> "void":
        """SetLines(itkPolyDataUC self, itkVectorContainerULLUI arg0)"""
        return _itkPolyDataPython.itkPolyDataUC_SetLines(self, arg0)


    def GetLines(self, *args) -> "itkVectorContainerULLUI const *":
        """
        GetLines(itkPolyDataUC self) -> itkVectorContainerULLUI
        GetLines(itkPolyDataUC self) -> itkVectorContainerULLUI
        """
        return _itkPolyDataPython.itkPolyDataUC_GetLines(self, *args)


    def SetPolygons(self, arg0: 'itkVectorContainerULLUI') -> "void":
        """SetPolygons(itkPolyDataUC self, itkVectorContainerULLUI arg0)"""
        return _itkPolyDataPython.itkPolyDataUC_SetPolygons(self, arg0)


    def GetPolygons(self, *args) -> "itkVectorContainerULLUI const *":
        """
        GetPolygons(itkPolyDataUC self) -> itkVectorContainerULLUI
        GetPolygons(itkPolyDataUC self) -> itkVectorContainerULLUI
        """
        return _itkPolyDataPython.itkPolyDataUC_GetPolygons(self, *args)


    def SetTriangleStrips(self, arg0: 'itkVectorContainerULLUI') -> "void":
        """SetTriangleStrips(itkPolyDataUC self, itkVectorContainerULLUI arg0)"""
        return _itkPolyDataPython.itkPolyDataUC_SetTriangleStrips(self, arg0)


    def GetTriangleStrips(self, *args) -> "itkVectorContainerULLUI const *":
        """
        GetTriangleStrips(itkPolyDataUC self) -> itkVectorContainerULLUI
        GetTriangleStrips(itkPolyDataUC self) -> itkVectorContainerULLUI
        """
        return _itkPolyDataPython.itkPolyDataUC_GetTriangleStrips(self, *args)


    def SetPoint(self, arg0: 'unsigned long long', arg1: 'itkPointF3') -> "void":
        """SetPoint(itkPolyDataUC self, unsigned long long arg0, itkPointF3 arg1)"""
        return _itkPolyDataPython.itkPolyDataUC_SetPoint(self, arg0, arg1)


    def GetPoint(self, *args) -> "itkPointF3":
        """
        GetPoint(itkPolyDataUC self, unsigned long long arg0, itkPointF3 arg1) -> bool
        GetPoint(itkPolyDataUC self, unsigned long long arg0) -> itkPointF3
        """
        return _itkPolyDataPython.itkPolyDataUC_GetPoint(self, *args)


    def SetPointData(self, *args) -> "void":
        """
        SetPointData(itkPolyDataUC self, itkVectorContainerULLUC arg0)
        SetPointData(itkPolyDataUC self, unsigned long long arg0, unsigned char arg1)
        """
        return _itkPolyDataPython.itkPolyDataUC_SetPointData(self, *args)


    def GetPointData(self, *args) -> "bool":
        """
        GetPointData(itkPolyDataUC self) -> itkVectorContainerULLUC
        GetPointData(itkPolyDataUC self) -> itkVectorContainerULLUC
        GetPointData(itkPolyDataUC self, unsigned long long arg0, unsigned char * arg1) -> bool
        """
        return _itkPolyDataPython.itkPolyDataUC_GetPointData(self, *args)


    def SetCellData(self, *args) -> "void":
        """
        SetCellData(itkPolyDataUC self, itkVectorContainerULLUC arg0)
        SetCellData(itkPolyDataUC self, unsigned long long arg0, unsigned char arg1)
        """
        return _itkPolyDataPython.itkPolyDataUC_SetCellData(self, *args)


    def GetCellData(self, *args) -> "bool":
        """
        GetCellData(itkPolyDataUC self) -> itkVectorContainerULLUC
        GetCellData(itkPolyDataUC self) -> itkVectorContainerULLUC
        GetCellData(itkPolyDataUC self, unsigned long long arg0, unsigned char * arg1) -> bool
        """
        return _itkPolyDataPython.itkPolyDataUC_GetCellData(self, *args)

    __swig_destroy__ = _itkPolyDataPython.delete_itkPolyDataUC

    def cast(obj: 'itkLightObject') -> "itkPolyDataUC *":
        """cast(itkLightObject obj) -> itkPolyDataUC"""
        return _itkPolyDataPython.itkPolyDataUC_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkPolyDataUC

        Create a new object of the class itkPolyDataUC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPolyDataUC.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkPolyDataUC.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPolyDataUC.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPolyDataUC.Clone = new_instancemethod(_itkPolyDataPython.itkPolyDataUC_Clone, None, itkPolyDataUC)
itkPolyDataUC.GetNumberOfPoints = new_instancemethod(_itkPolyDataPython.itkPolyDataUC_GetNumberOfPoints, None, itkPolyDataUC)
itkPolyDataUC.SetPoints = new_instancemethod(_itkPolyDataPython.itkPolyDataUC_SetPoints, None, itkPolyDataUC)
itkPolyDataUC.GetPoints = new_instancemethod(_itkPolyDataPython.itkPolyDataUC_GetPoints, None, itkPolyDataUC)
itkPolyDataUC.SetVertices = new_instancemethod(_itkPolyDataPython.itkPolyDataUC_SetVertices, None, itkPolyDataUC)
itkPolyDataUC.GetVertices = new_instancemethod(_itkPolyDataPython.itkPolyDataUC_GetVertices, None, itkPolyDataUC)
itkPolyDataUC.SetLines = new_instancemethod(_itkPolyDataPython.itkPolyDataUC_SetLines, None, itkPolyDataUC)
itkPolyDataUC.GetLines = new_instancemethod(_itkPolyDataPython.itkPolyDataUC_GetLines, None, itkPolyDataUC)
itkPolyDataUC.SetPolygons = new_instancemethod(_itkPolyDataPython.itkPolyDataUC_SetPolygons, None, itkPolyDataUC)
itkPolyDataUC.GetPolygons = new_instancemethod(_itkPolyDataPython.itkPolyDataUC_GetPolygons, None, itkPolyDataUC)
itkPolyDataUC.SetTriangleStrips = new_instancemethod(_itkPolyDataPython.itkPolyDataUC_SetTriangleStrips, None, itkPolyDataUC)
itkPolyDataUC.GetTriangleStrips = new_instancemethod(_itkPolyDataPython.itkPolyDataUC_GetTriangleStrips, None, itkPolyDataUC)
itkPolyDataUC.SetPoint = new_instancemethod(_itkPolyDataPython.itkPolyDataUC_SetPoint, None, itkPolyDataUC)
itkPolyDataUC.GetPoint = new_instancemethod(_itkPolyDataPython.itkPolyDataUC_GetPoint, None, itkPolyDataUC)
itkPolyDataUC.SetPointData = new_instancemethod(_itkPolyDataPython.itkPolyDataUC_SetPointData, None, itkPolyDataUC)
itkPolyDataUC.GetPointData = new_instancemethod(_itkPolyDataPython.itkPolyDataUC_GetPointData, None, itkPolyDataUC)
itkPolyDataUC.SetCellData = new_instancemethod(_itkPolyDataPython.itkPolyDataUC_SetCellData, None, itkPolyDataUC)
itkPolyDataUC.GetCellData = new_instancemethod(_itkPolyDataPython.itkPolyDataUC_GetCellData, None, itkPolyDataUC)
itkPolyDataUC_swigregister = _itkPolyDataPython.itkPolyDataUC_swigregister
itkPolyDataUC_swigregister(itkPolyDataUC)

def itkPolyDataUC___New_orig__() -> "itkPolyDataUC_Pointer":
    """itkPolyDataUC___New_orig__() -> itkPolyDataUC_Pointer"""
    return _itkPolyDataPython.itkPolyDataUC___New_orig__()

def itkPolyDataUC_cast(obj: 'itkLightObject') -> "itkPolyDataUC *":
    """itkPolyDataUC_cast(itkLightObject obj) -> itkPolyDataUC"""
    return _itkPolyDataPython.itkPolyDataUC_cast(obj)

class itkPolyDataUS(ITKCommonBasePython.itkDataObject):
    """Proxy of C++ itkPolyDataUS class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkPolyDataUS_Pointer":
        """__New_orig__() -> itkPolyDataUS_Pointer"""
        return _itkPolyDataPython.itkPolyDataUS___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkPolyDataUS_Pointer":
        """Clone(itkPolyDataUS self) -> itkPolyDataUS_Pointer"""
        return _itkPolyDataPython.itkPolyDataUS_Clone(self)


    def GetNumberOfPoints(self) -> "unsigned long long":
        """GetNumberOfPoints(itkPolyDataUS self) -> unsigned long long"""
        return _itkPolyDataPython.itkPolyDataUS_GetNumberOfPoints(self)


    def SetPoints(self, arg0: 'itkVectorContainerULLPF3') -> "void":
        """SetPoints(itkPolyDataUS self, itkVectorContainerULLPF3 arg0)"""
        return _itkPolyDataPython.itkPolyDataUS_SetPoints(self, arg0)


    def GetPoints(self, *args) -> "itkVectorContainerULLPF3 const *":
        """
        GetPoints(itkPolyDataUS self) -> itkVectorContainerULLPF3
        GetPoints(itkPolyDataUS self) -> itkVectorContainerULLPF3
        """
        return _itkPolyDataPython.itkPolyDataUS_GetPoints(self, *args)


    def SetVertices(self, arg0: 'itkVectorContainerULLUI') -> "void":
        """SetVertices(itkPolyDataUS self, itkVectorContainerULLUI arg0)"""
        return _itkPolyDataPython.itkPolyDataUS_SetVertices(self, arg0)


    def GetVertices(self, *args) -> "itkVectorContainerULLUI const *":
        """
        GetVertices(itkPolyDataUS self) -> itkVectorContainerULLUI
        GetVertices(itkPolyDataUS self) -> itkVectorContainerULLUI
        """
        return _itkPolyDataPython.itkPolyDataUS_GetVertices(self, *args)


    def SetLines(self, arg0: 'itkVectorContainerULLUI') -> "void":
        """SetLines(itkPolyDataUS self, itkVectorContainerULLUI arg0)"""
        return _itkPolyDataPython.itkPolyDataUS_SetLines(self, arg0)


    def GetLines(self, *args) -> "itkVectorContainerULLUI const *":
        """
        GetLines(itkPolyDataUS self) -> itkVectorContainerULLUI
        GetLines(itkPolyDataUS self) -> itkVectorContainerULLUI
        """
        return _itkPolyDataPython.itkPolyDataUS_GetLines(self, *args)


    def SetPolygons(self, arg0: 'itkVectorContainerULLUI') -> "void":
        """SetPolygons(itkPolyDataUS self, itkVectorContainerULLUI arg0)"""
        return _itkPolyDataPython.itkPolyDataUS_SetPolygons(self, arg0)


    def GetPolygons(self, *args) -> "itkVectorContainerULLUI const *":
        """
        GetPolygons(itkPolyDataUS self) -> itkVectorContainerULLUI
        GetPolygons(itkPolyDataUS self) -> itkVectorContainerULLUI
        """
        return _itkPolyDataPython.itkPolyDataUS_GetPolygons(self, *args)


    def SetTriangleStrips(self, arg0: 'itkVectorContainerULLUI') -> "void":
        """SetTriangleStrips(itkPolyDataUS self, itkVectorContainerULLUI arg0)"""
        return _itkPolyDataPython.itkPolyDataUS_SetTriangleStrips(self, arg0)


    def GetTriangleStrips(self, *args) -> "itkVectorContainerULLUI const *":
        """
        GetTriangleStrips(itkPolyDataUS self) -> itkVectorContainerULLUI
        GetTriangleStrips(itkPolyDataUS self) -> itkVectorContainerULLUI
        """
        return _itkPolyDataPython.itkPolyDataUS_GetTriangleStrips(self, *args)


    def SetPoint(self, arg0: 'unsigned long long', arg1: 'itkPointF3') -> "void":
        """SetPoint(itkPolyDataUS self, unsigned long long arg0, itkPointF3 arg1)"""
        return _itkPolyDataPython.itkPolyDataUS_SetPoint(self, arg0, arg1)


    def GetPoint(self, *args) -> "itkPointF3":
        """
        GetPoint(itkPolyDataUS self, unsigned long long arg0, itkPointF3 arg1) -> bool
        GetPoint(itkPolyDataUS self, unsigned long long arg0) -> itkPointF3
        """
        return _itkPolyDataPython.itkPolyDataUS_GetPoint(self, *args)


    def SetPointData(self, *args) -> "void":
        """
        SetPointData(itkPolyDataUS self, itkVectorContainerULLUS arg0)
        SetPointData(itkPolyDataUS self, unsigned long long arg0, unsigned short arg1)
        """
        return _itkPolyDataPython.itkPolyDataUS_SetPointData(self, *args)


    def GetPointData(self, *args) -> "bool":
        """
        GetPointData(itkPolyDataUS self) -> itkVectorContainerULLUS
        GetPointData(itkPolyDataUS self) -> itkVectorContainerULLUS
        GetPointData(itkPolyDataUS self, unsigned long long arg0, unsigned short * arg1) -> bool
        """
        return _itkPolyDataPython.itkPolyDataUS_GetPointData(self, *args)


    def SetCellData(self, *args) -> "void":
        """
        SetCellData(itkPolyDataUS self, itkVectorContainerULLUS arg0)
        SetCellData(itkPolyDataUS self, unsigned long long arg0, unsigned short arg1)
        """
        return _itkPolyDataPython.itkPolyDataUS_SetCellData(self, *args)


    def GetCellData(self, *args) -> "bool":
        """
        GetCellData(itkPolyDataUS self) -> itkVectorContainerULLUS
        GetCellData(itkPolyDataUS self) -> itkVectorContainerULLUS
        GetCellData(itkPolyDataUS self, unsigned long long arg0, unsigned short * arg1) -> bool
        """
        return _itkPolyDataPython.itkPolyDataUS_GetCellData(self, *args)

    __swig_destroy__ = _itkPolyDataPython.delete_itkPolyDataUS

    def cast(obj: 'itkLightObject') -> "itkPolyDataUS *":
        """cast(itkLightObject obj) -> itkPolyDataUS"""
        return _itkPolyDataPython.itkPolyDataUS_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkPolyDataUS

        Create a new object of the class itkPolyDataUS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPolyDataUS.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkPolyDataUS.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPolyDataUS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPolyDataUS.Clone = new_instancemethod(_itkPolyDataPython.itkPolyDataUS_Clone, None, itkPolyDataUS)
itkPolyDataUS.GetNumberOfPoints = new_instancemethod(_itkPolyDataPython.itkPolyDataUS_GetNumberOfPoints, None, itkPolyDataUS)
itkPolyDataUS.SetPoints = new_instancemethod(_itkPolyDataPython.itkPolyDataUS_SetPoints, None, itkPolyDataUS)
itkPolyDataUS.GetPoints = new_instancemethod(_itkPolyDataPython.itkPolyDataUS_GetPoints, None, itkPolyDataUS)
itkPolyDataUS.SetVertices = new_instancemethod(_itkPolyDataPython.itkPolyDataUS_SetVertices, None, itkPolyDataUS)
itkPolyDataUS.GetVertices = new_instancemethod(_itkPolyDataPython.itkPolyDataUS_GetVertices, None, itkPolyDataUS)
itkPolyDataUS.SetLines = new_instancemethod(_itkPolyDataPython.itkPolyDataUS_SetLines, None, itkPolyDataUS)
itkPolyDataUS.GetLines = new_instancemethod(_itkPolyDataPython.itkPolyDataUS_GetLines, None, itkPolyDataUS)
itkPolyDataUS.SetPolygons = new_instancemethod(_itkPolyDataPython.itkPolyDataUS_SetPolygons, None, itkPolyDataUS)
itkPolyDataUS.GetPolygons = new_instancemethod(_itkPolyDataPython.itkPolyDataUS_GetPolygons, None, itkPolyDataUS)
itkPolyDataUS.SetTriangleStrips = new_instancemethod(_itkPolyDataPython.itkPolyDataUS_SetTriangleStrips, None, itkPolyDataUS)
itkPolyDataUS.GetTriangleStrips = new_instancemethod(_itkPolyDataPython.itkPolyDataUS_GetTriangleStrips, None, itkPolyDataUS)
itkPolyDataUS.SetPoint = new_instancemethod(_itkPolyDataPython.itkPolyDataUS_SetPoint, None, itkPolyDataUS)
itkPolyDataUS.GetPoint = new_instancemethod(_itkPolyDataPython.itkPolyDataUS_GetPoint, None, itkPolyDataUS)
itkPolyDataUS.SetPointData = new_instancemethod(_itkPolyDataPython.itkPolyDataUS_SetPointData, None, itkPolyDataUS)
itkPolyDataUS.GetPointData = new_instancemethod(_itkPolyDataPython.itkPolyDataUS_GetPointData, None, itkPolyDataUS)
itkPolyDataUS.SetCellData = new_instancemethod(_itkPolyDataPython.itkPolyDataUS_SetCellData, None, itkPolyDataUS)
itkPolyDataUS.GetCellData = new_instancemethod(_itkPolyDataPython.itkPolyDataUS_GetCellData, None, itkPolyDataUS)
itkPolyDataUS_swigregister = _itkPolyDataPython.itkPolyDataUS_swigregister
itkPolyDataUS_swigregister(itkPolyDataUS)

def itkPolyDataUS___New_orig__() -> "itkPolyDataUS_Pointer":
    """itkPolyDataUS___New_orig__() -> itkPolyDataUS_Pointer"""
    return _itkPolyDataPython.itkPolyDataUS___New_orig__()

def itkPolyDataUS_cast(obj: 'itkLightObject') -> "itkPolyDataUS *":
    """itkPolyDataUS_cast(itkLightObject obj) -> itkPolyDataUS"""
    return _itkPolyDataPython.itkPolyDataUS_cast(obj)



