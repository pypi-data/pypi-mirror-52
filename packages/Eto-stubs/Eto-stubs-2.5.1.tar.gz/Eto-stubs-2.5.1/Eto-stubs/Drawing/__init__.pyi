from typing import Tuple, Set, Iterable, List


class PixelFormat:
    Format32bppRgb = 0
    Format24bppRgb = 1
    Format32bppRgba = 2


class ImageFormat:
    Jpeg = 0
    Bitmap = 1
    Tiff = 2
    Png = 3
    Gif = 4


class Bitmap(Image):
    @overload
    def __init__(self, fileName: str): ...
    @overload
    def __init__(self, stream: Stream): ...
    @overload
    def __init__(self, size: Size, pixelFormat: PixelFormat): ...
    @overload
    def __init__(self, width: int, height: int, pixelFormat: PixelFormat): ...
    @overload
    def __init__(self, width: int, height: int, graphics: Graphics): ...
    @overload
    def __init__(self, image: Image, width: Nullable, height: Nullable, interpolation: ImageInterpolation): ...
    @overload
    def __init__(self, width: int, height: int, pixelFormat: PixelFormat, data: Iterable[Color]): ...
    @overload
    def __init__(self, width: int, height: int, pixelFormat: PixelFormat, data: Iterable[int]): ...
    @overload
    def __init__(self, bytes: Set(Byte)): ...
    @overload
    def __init__(self, handler: IHandler): ...
    @overload
    def FromResource(resourceName: str, assembly: Assembly) -> Bitmap: ...
    @overload
    def FromResource(resourceName: str, type: Type) -> Bitmap: ...
    def Lock(self) -> BitmapData: ...
    @overload
    def Save(self, fileName: str, format: ImageFormat) -> None: ...
    @overload
    def Save(self, stream: Stream, format: ImageFormat) -> None: ...
    def ToByteArray(self, imageFormat: ImageFormat) -> Set(Byte): ...
    def Clone(self, rectangle: Nullable) -> Bitmap: ...
    @overload
    def GetPixel(self, position: Point) -> Color: ...
    @overload
    def GetPixel(self, x: int, y: int) -> Color: ...
    @overload
    def SetPixel(self, position: Point, color: Color) -> None: ...
    @overload
    def SetPixel(self, x: int, y: int, color: Color) -> None: ...
    @overload
    def WithSize(self, width: int, height: int) -> Icon: ...
    @overload
    def WithSize(self, fittingSize: Size) -> Icon: ...


class BitmapData:
    @property
    def Image(self) -> Image: ...
    @property
    def BitsPerPixel(self) -> int: ...
    @property
    def BytesPerPixel(self) -> int: ...
    def TranslateArgbToData(self, argb: int) -> int: ...
    def TranslateDataToArgb(self, bitmapData: int) -> int: ...
    @property
    def Data(self) -> IntPtr: ...
    @property
    def Flipped(self) -> bool: ...
    @overload
    def GetPixel(self, position: Point) -> Color: ...
    @overload
    def GetPixel(self, x: int, y: int) -> Color: ...
    @overload
    def SetPixel(self, position: Point, color: Color) -> None: ...
    @overload
    def SetPixel(self, x: int, y: int, color: Color) -> None: ...
    @property
    def ScanWidth(self) -> int: ...
    @property
    def ControlObject(self) -> Object: ...
    def Dispose(self) -> None: ...
    def GetPixels(self) -> Iterable[Color]: ...
    def SetPixels(self, pixels: Iterable[Color]) -> None: ...


class Brush:
    @property
    def ControlObject(self) -> Object: ...
    @ControlObject.setter
    def ControlObject(self, value: Object) -> None: ...
    @property
    def Handler(self) -> Object: ...
    def Dispose(self) -> None: ...


class Brushes:
    @property
    def SteelBlue() -> SolidBrush: ...
    @property
    def LightSteelBlue() -> SolidBrush: ...
    @property
    def PowderBlue() -> SolidBrush: ...
    @property
    def LightBlue() -> SolidBrush: ...
    @property
    def SkyBlue() -> SolidBrush: ...
    @property
    def LightSkyBlue() -> SolidBrush: ...
    @property
    def DeepSkyBlue() -> SolidBrush: ...
    @property
    def DodgerBlue() -> SolidBrush: ...
    @property
    def CornflowerBlue() -> SolidBrush: ...
    @property
    def RoyalBlue() -> SolidBrush: ...
    @property
    def Blue() -> SolidBrush: ...
    @property
    def MediumBlue() -> SolidBrush: ...
    @property
    def DarkBlue() -> SolidBrush: ...
    @property
    def Navy() -> SolidBrush: ...
    @property
    def MidnightBlue() -> SolidBrush: ...
    @property
    def Cornsilk() -> SolidBrush: ...
    @property
    def BlanchedAlmond() -> SolidBrush: ...
    @property
    def Bisque() -> SolidBrush: ...
    @property
    def NavajoWhite() -> SolidBrush: ...
    @property
    def Wheat() -> SolidBrush: ...
    @property
    def BurlyWood() -> SolidBrush: ...
    @property
    def Tan() -> SolidBrush: ...
    @property
    def RosyBrown() -> SolidBrush: ...
    @property
    def SandyBrown() -> SolidBrush: ...
    @property
    def Goldenrod() -> SolidBrush: ...
    @property
    def DarkGoldenrod() -> SolidBrush: ...
    @property
    def Peru() -> SolidBrush: ...
    @property
    def Chocolate() -> SolidBrush: ...
    @property
    def SaddleBrown() -> SolidBrush: ...
    @property
    def Sienna() -> SolidBrush: ...
    @property
    def Brown() -> SolidBrush: ...
    @property
    def Maroon() -> SolidBrush: ...
    @property
    def White() -> SolidBrush: ...
    @property
    def Snow() -> SolidBrush: ...
    @property
    def Honeydew() -> SolidBrush: ...
    @property
    def MintCream() -> SolidBrush: ...
    @property
    def Azure() -> SolidBrush: ...
    @property
    def AliceBlue() -> SolidBrush: ...
    @property
    def GhostWhite() -> SolidBrush: ...
    @property
    def WhiteSmoke() -> SolidBrush: ...
    @property
    def Seashell() -> SolidBrush: ...
    @property
    def Beige() -> SolidBrush: ...
    @property
    def OldLace() -> SolidBrush: ...
    @property
    def FloralWhite() -> SolidBrush: ...
    @property
    def Ivory() -> SolidBrush: ...
    @property
    def AntiqueWhite() -> SolidBrush: ...
    @property
    def Linen() -> SolidBrush: ...
    @property
    def LavenderBlush() -> SolidBrush: ...
    @property
    def MistyRose() -> SolidBrush: ...
    @property
    def Gainsboro() -> SolidBrush: ...
    @property
    def LightGrey() -> SolidBrush: ...
    @property
    def Silver() -> SolidBrush: ...
    @property
    def DarkGray() -> SolidBrush: ...
    @property
    def Gray() -> SolidBrush: ...
    @property
    def DimGray() -> SolidBrush: ...
    @property
    def LightSlateGray() -> SolidBrush: ...
    @property
    def SlateGray() -> SolidBrush: ...
    @property
    def DarkSlateGray() -> SolidBrush: ...
    @property
    def Black() -> SolidBrush: ...
    def Cached(color: Color) -> SolidBrush: ...
    def ClearCache() -> None: ...
    @property
    def Transparent() -> SolidBrush: ...
    @property
    def IndianRed() -> SolidBrush: ...
    @property
    def LightCoral() -> SolidBrush: ...
    @property
    def Salmon() -> SolidBrush: ...
    @property
    def DarkSalmon() -> SolidBrush: ...
    @property
    def LightSalmon() -> SolidBrush: ...
    @property
    def Red() -> SolidBrush: ...
    @property
    def Crimson() -> SolidBrush: ...
    @property
    def Firebrick() -> SolidBrush: ...
    @property
    def DarkRed() -> SolidBrush: ...
    @property
    def Pink() -> SolidBrush: ...
    @property
    def LightPink() -> SolidBrush: ...
    @property
    def HotPink() -> SolidBrush: ...
    @property
    def DeepPink() -> SolidBrush: ...
    @property
    def MediumVioletRed() -> SolidBrush: ...
    @property
    def PaleVioletRed() -> SolidBrush: ...
    @property
    def Coral() -> SolidBrush: ...
    @property
    def Tomato() -> SolidBrush: ...
    @property
    def OrangeRed() -> SolidBrush: ...
    @property
    def DarkOrange() -> SolidBrush: ...
    @property
    def Orange() -> SolidBrush: ...
    @property
    def Gold() -> SolidBrush: ...
    @property
    def Yellow() -> SolidBrush: ...
    @property
    def LightYellow() -> SolidBrush: ...
    @property
    def LemonChiffon() -> SolidBrush: ...
    @property
    def LightGoldenrodYellow() -> SolidBrush: ...
    @property
    def PapayaWhip() -> SolidBrush: ...
    @property
    def Moccasin() -> SolidBrush: ...
    @property
    def PeachPuff() -> SolidBrush: ...
    @property
    def PaleGoldenrod() -> SolidBrush: ...
    @property
    def Khaki() -> SolidBrush: ...
    @property
    def DarkKhaki() -> SolidBrush: ...
    @property
    def Lavender() -> SolidBrush: ...
    @property
    def Thistle() -> SolidBrush: ...
    @property
    def Plum() -> SolidBrush: ...
    @property
    def Violet() -> SolidBrush: ...
    @property
    def Orchid() -> SolidBrush: ...
    @property
    def Fuchsia() -> SolidBrush: ...
    @property
    def Magenta() -> SolidBrush: ...
    @property
    def MediumOrchid() -> SolidBrush: ...
    @property
    def MediumPurple() -> SolidBrush: ...
    @property
    def BlueViolet() -> SolidBrush: ...
    @property
    def DarkViolet() -> SolidBrush: ...
    @property
    def DarkOrchid() -> SolidBrush: ...
    @property
    def DarkMagenta() -> SolidBrush: ...
    @property
    def Purple() -> SolidBrush: ...
    @property
    def Indigo() -> SolidBrush: ...
    @property
    def DarkSlateBlue() -> SolidBrush: ...
    @property
    def SlateBlue() -> SolidBrush: ...
    @property
    def MediumSlateBlue() -> SolidBrush: ...
    @property
    def GreenYellow() -> SolidBrush: ...
    @property
    def Chartreuse() -> SolidBrush: ...
    @property
    def LawnGreen() -> SolidBrush: ...
    @property
    def Lime() -> SolidBrush: ...
    @property
    def LimeGreen() -> SolidBrush: ...
    @property
    def PaleGreen() -> SolidBrush: ...
    @property
    def LightGreen() -> SolidBrush: ...
    @property
    def MediumSpringGreen() -> SolidBrush: ...
    @property
    def SpringGreen() -> SolidBrush: ...
    @property
    def MediumSeaGreen() -> SolidBrush: ...
    @property
    def SeaGreen() -> SolidBrush: ...
    @property
    def ForestGreen() -> SolidBrush: ...
    @property
    def Green() -> SolidBrush: ...
    @property
    def DarkGreen() -> SolidBrush: ...
    @property
    def YellowGreen() -> SolidBrush: ...
    @property
    def OliveDrab() -> SolidBrush: ...
    @property
    def Olive() -> SolidBrush: ...
    @property
    def DarkOliveGreen() -> SolidBrush: ...
    @property
    def MediumAquamarine() -> SolidBrush: ...
    @property
    def DarkSeaGreen() -> SolidBrush: ...
    @property
    def LightSeaGreen() -> SolidBrush: ...
    @property
    def DarkCyan() -> SolidBrush: ...
    @property
    def Teal() -> SolidBrush: ...
    @property
    def Aqua() -> SolidBrush: ...
    @property
    def Cyan() -> SolidBrush: ...
    @property
    def LightCyan() -> SolidBrush: ...
    @property
    def PaleTurquoise() -> SolidBrush: ...
    @property
    def Aquamarine() -> SolidBrush: ...
    @property
    def Turquoise() -> SolidBrush: ...
    @property
    def MediumTurquoise() -> SolidBrush: ...
    @property
    def DarkTurquoise() -> SolidBrush: ...
    @property
    def CadetBlue() -> SolidBrush: ...


class Color:
    @overload
    def __init__(self, red: Single, green: Single, blue: Single, alpha: Single): ...
    @overload
    def __init__(self, color: Color, alpha: Nullable): ...
    @overload
    def __init__(self, controlObject: Object, red: Single, green: Single, blue: Single, alpha: Single): ...
    @property
    def A(self) -> Single: ...
    @A.setter
    def A(self, value: Single) -> None: ...
    @property
    def R(self) -> Single: ...
    @R.setter
    def R(self, value: Single) -> None: ...
    @property
    def G(self) -> Single: ...
    @G.setter
    def G(self, value: Single) -> None: ...
    @property
    def B(self) -> Single: ...
    @B.setter
    def B(self, value: Single) -> None: ...
    @property
    def Ab(self) -> int: ...
    @Ab.setter
    def Ab(self, value: int) -> None: ...
    @property
    def Rb(self) -> int: ...
    @Rb.setter
    def Rb(self, value: int) -> None: ...
    @property
    def Gb(self) -> int: ...
    @Gb.setter
    def Gb(self, value: int) -> None: ...
    @property
    def Bb(self) -> int: ...
    @Bb.setter
    def Bb(self, value: int) -> None: ...
    @property
    def ControlObject(self) -> Object: ...
    @overload
    def FromArgb(red: int, green: int, blue: int, alpha: int) -> Color: ...
    @overload
    def FromArgb(argb: int) -> Color: ...
    def FromRgb(argb: int) -> Color: ...
    def FromGrayscale(val: Single, alpha: Single) -> Color: ...
    def Distance(value1: Color, value2: Color) -> Single: ...
    @overload
    def Blend(baseColor: Color, blendColor: Color) -> Color: ...
    @overload
    def Blend(baseColor: Color, blendColor: Color, blendFactor: Single) -> Color: ...
    def TryParse(value: str) -> Tuple[bool, Color]: ...
    def Parse(value: str) -> Color: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(color1: Color, color2: Color) -> bool: ...
    def op_Inequality(color1: Color, color2: Color) -> bool: ...
    def Invert(self) -> None: ...
    def ToArgb(self) -> int: ...
    def ToHex(self, includeAlpha: bool) -> str: ...
    def ToString(self) -> str: ...
    @overload
    def Equals(self, other: Color) -> bool: ...
    def FromElementId(id: int, alpha: int) -> Color: ...
    def ToElementId(self) -> int: ...
    def ToHSB(self) -> ColorHSB: ...
    def ToHSL(self) -> ColorHSL: ...
    def ToCMYK(self) -> ColorCMYK: ...


class ColorCMYK:
    @overload
    def __init__(self, cyan: Single, magenta: Single, yellow: Single, black: Single, alpha: Single): ...
    @overload
    def __init__(self, color: Color): ...
    @property
    def C(self) -> Single: ...
    @C.setter
    def C(self, value: Single) -> None: ...
    @property
    def M(self) -> Single: ...
    @M.setter
    def M(self, value: Single) -> None: ...
    @property
    def Y(self) -> Single: ...
    @Y.setter
    def Y(self, value: Single) -> None: ...
    @property
    def K(self) -> Single: ...
    @K.setter
    def K(self, value: Single) -> None: ...
    @property
    def A(self) -> Single: ...
    @A.setter
    def A(self, value: Single) -> None: ...
    def Distance(value1: ColorCMYK, value2: ColorCMYK) -> Single: ...
    def ToColor(self) -> Color: ...
    def op_Equality(color1: ColorCMYK, color2: ColorCMYK) -> bool: ...
    def op_Inequality(color1: ColorCMYK, color2: ColorCMYK) -> bool: ...
    @overload
    def op_Implicit(cmyk: ColorCMYK) -> Color: ...
    @overload
    def op_Implicit(color: Color) -> ColorCMYK: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    def GetHashCode(self) -> int: ...
    @overload
    def Equals(self, other: ColorCMYK) -> bool: ...


class ColorConverter(TypeConverter):
    def __init__(self): ...
    @overload
    def CanConvertTo(self, context: ITypeDescriptorContext, destinationType: Type) -> bool: ...
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object) -> Object: ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object, destinationType: Type) -> Object: ...


class ColorHSB:
    @overload
    def __init__(self, hue: Single, saturation: Single, brightness: Single, alpha: Single): ...
    @overload
    def __init__(self, color: Color): ...
    @property
    def A(self) -> Single: ...
    @A.setter
    def A(self, value: Single) -> None: ...
    @property
    def H(self) -> Single: ...
    @H.setter
    def H(self, value: Single) -> None: ...
    @property
    def S(self) -> Single: ...
    @S.setter
    def S(self, value: Single) -> None: ...
    @property
    def B(self) -> Single: ...
    @B.setter
    def B(self, value: Single) -> None: ...
    def Distance(value1: ColorHSB, value2: ColorHSB) -> Single: ...
    def ToColor(self) -> Color: ...
    def op_Equality(color1: ColorHSB, color2: ColorHSB) -> bool: ...
    def op_Inequality(color1: ColorHSB, color2: ColorHSB) -> bool: ...
    @overload
    def op_Implicit(hsb: ColorHSB) -> Color: ...
    @overload
    def op_Implicit(color: Color) -> ColorHSB: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    def GetHashCode(self) -> int: ...
    @overload
    def Equals(self, other: ColorHSB) -> bool: ...


class ColorHSL:
    @overload
    def __init__(self, hue: Single, saturation: Single, luminance: Single, alpha: Single): ...
    @overload
    def __init__(self, color: Color): ...
    @property
    def A(self) -> Single: ...
    @A.setter
    def A(self, value: Single) -> None: ...
    @property
    def H(self) -> Single: ...
    @H.setter
    def H(self, value: Single) -> None: ...
    @property
    def S(self) -> Single: ...
    @S.setter
    def S(self, value: Single) -> None: ...
    @property
    def L(self) -> Single: ...
    @L.setter
    def L(self, value: Single) -> None: ...
    def Distance(value1: ColorHSL, value2: ColorHSL) -> Single: ...
    def ToColor(self) -> Color: ...
    def op_Equality(color1: ColorHSL, color2: ColorHSL) -> bool: ...
    def op_Inequality(color1: ColorHSL, color2: ColorHSL) -> bool: ...
    @overload
    def op_Implicit(hsl: ColorHSL) -> Color: ...
    @overload
    def op_Implicit(color: Color) -> ColorHSL: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    def GetHashCode(self) -> int: ...
    @overload
    def Equals(self, other: ColorHSL) -> bool: ...


class Colors:
    @property
    def LightBlue() -> Color: ...
    @property
    def SkyBlue() -> Color: ...
    @property
    def LightSkyBlue() -> Color: ...
    @property
    def DeepSkyBlue() -> Color: ...
    @property
    def DodgerBlue() -> Color: ...
    @property
    def CornflowerBlue() -> Color: ...
    @property
    def RoyalBlue() -> Color: ...
    @property
    def Blue() -> Color: ...
    @property
    def MediumBlue() -> Color: ...
    @property
    def DarkBlue() -> Color: ...
    @property
    def Navy() -> Color: ...
    @property
    def MidnightBlue() -> Color: ...
    @property
    def Cornsilk() -> Color: ...
    @property
    def BlanchedAlmond() -> Color: ...
    @property
    def Bisque() -> Color: ...
    @property
    def NavajoWhite() -> Color: ...
    @property
    def Wheat() -> Color: ...
    @property
    def BurlyWood() -> Color: ...
    @property
    def Tan() -> Color: ...
    @property
    def RosyBrown() -> Color: ...
    @property
    def SandyBrown() -> Color: ...
    @property
    def Goldenrod() -> Color: ...
    @property
    def DarkGoldenrod() -> Color: ...
    @property
    def Peru() -> Color: ...
    @property
    def Chocolate() -> Color: ...
    @property
    def SaddleBrown() -> Color: ...
    @property
    def Sienna() -> Color: ...
    @property
    def Brown() -> Color: ...
    @property
    def Maroon() -> Color: ...
    @property
    def White() -> Color: ...
    @property
    def Snow() -> Color: ...
    @property
    def Honeydew() -> Color: ...
    @property
    def MintCream() -> Color: ...
    @property
    def Azure() -> Color: ...
    @property
    def AliceBlue() -> Color: ...
    @property
    def GhostWhite() -> Color: ...
    @property
    def WhiteSmoke() -> Color: ...
    @property
    def Seashell() -> Color: ...
    @property
    def Beige() -> Color: ...
    @property
    def OldLace() -> Color: ...
    @property
    def FloralWhite() -> Color: ...
    @property
    def Ivory() -> Color: ...
    @property
    def AntiqueWhite() -> Color: ...
    @property
    def Linen() -> Color: ...
    @property
    def LavenderBlush() -> Color: ...
    @property
    def MistyRose() -> Color: ...
    @property
    def Gainsboro() -> Color: ...
    @property
    def LightGrey() -> Color: ...
    @property
    def Silver() -> Color: ...
    @property
    def DarkGray() -> Color: ...
    @property
    def Gray() -> Color: ...
    @property
    def DimGray() -> Color: ...
    @property
    def LightSlateGray() -> Color: ...
    @property
    def SlateGray() -> Color: ...
    @property
    def DarkSlateGray() -> Color: ...
    @property
    def Black() -> Color: ...
    @property
    def Transparent() -> Color: ...
    @property
    def IndianRed() -> Color: ...
    @property
    def LightCoral() -> Color: ...
    @property
    def Salmon() -> Color: ...
    @property
    def DarkSalmon() -> Color: ...
    @property
    def LightSalmon() -> Color: ...
    @property
    def Red() -> Color: ...
    @property
    def Crimson() -> Color: ...
    @property
    def Firebrick() -> Color: ...
    @property
    def DarkRed() -> Color: ...
    @property
    def Pink() -> Color: ...
    @property
    def LightPink() -> Color: ...
    @property
    def HotPink() -> Color: ...
    @property
    def DeepPink() -> Color: ...
    @property
    def MediumVioletRed() -> Color: ...
    @property
    def PaleVioletRed() -> Color: ...
    @property
    def Coral() -> Color: ...
    @property
    def Tomato() -> Color: ...
    @property
    def OrangeRed() -> Color: ...
    @property
    def DarkOrange() -> Color: ...
    @property
    def Orange() -> Color: ...
    @property
    def Gold() -> Color: ...
    @property
    def Yellow() -> Color: ...
    @property
    def LightYellow() -> Color: ...
    @property
    def LemonChiffon() -> Color: ...
    @property
    def LightGoldenrodYellow() -> Color: ...
    @property
    def PapayaWhip() -> Color: ...
    @property
    def Moccasin() -> Color: ...
    @property
    def PeachPuff() -> Color: ...
    @property
    def PaleGoldenrod() -> Color: ...
    @property
    def Khaki() -> Color: ...
    @property
    def DarkKhaki() -> Color: ...
    @property
    def Lavender() -> Color: ...
    @property
    def Thistle() -> Color: ...
    @property
    def Plum() -> Color: ...
    @property
    def Violet() -> Color: ...
    @property
    def Orchid() -> Color: ...
    @property
    def Fuchsia() -> Color: ...
    @property
    def Magenta() -> Color: ...
    @property
    def MediumOrchid() -> Color: ...
    @property
    def MediumPurple() -> Color: ...
    @property
    def BlueViolet() -> Color: ...
    @property
    def DarkViolet() -> Color: ...
    @property
    def DarkOrchid() -> Color: ...
    @property
    def DarkMagenta() -> Color: ...
    @property
    def Purple() -> Color: ...
    @property
    def Indigo() -> Color: ...
    @property
    def DarkSlateBlue() -> Color: ...
    @property
    def SlateBlue() -> Color: ...
    @property
    def MediumSlateBlue() -> Color: ...
    @property
    def GreenYellow() -> Color: ...
    @property
    def Chartreuse() -> Color: ...
    @property
    def LawnGreen() -> Color: ...
    @property
    def Lime() -> Color: ...
    @property
    def LimeGreen() -> Color: ...
    @property
    def PaleGreen() -> Color: ...
    @property
    def LightGreen() -> Color: ...
    @property
    def MediumSpringGreen() -> Color: ...
    @property
    def SpringGreen() -> Color: ...
    @property
    def MediumSeaGreen() -> Color: ...
    @property
    def SeaGreen() -> Color: ...
    @property
    def ForestGreen() -> Color: ...
    @property
    def Green() -> Color: ...
    @property
    def DarkGreen() -> Color: ...
    @property
    def YellowGreen() -> Color: ...
    @property
    def OliveDrab() -> Color: ...
    @property
    def Olive() -> Color: ...
    @property
    def DarkOliveGreen() -> Color: ...
    @property
    def MediumAquamarine() -> Color: ...
    @property
    def DarkSeaGreen() -> Color: ...
    @property
    def LightSeaGreen() -> Color: ...
    @property
    def DarkCyan() -> Color: ...
    @property
    def Teal() -> Color: ...
    @property
    def Aqua() -> Color: ...
    @property
    def Cyan() -> Color: ...
    @property
    def LightCyan() -> Color: ...
    @property
    def PaleTurquoise() -> Color: ...
    @property
    def Aquamarine() -> Color: ...
    @property
    def Turquoise() -> Color: ...
    @property
    def MediumTurquoise() -> Color: ...
    @property
    def DarkTurquoise() -> Color: ...
    @property
    def CadetBlue() -> Color: ...
    @property
    def SteelBlue() -> Color: ...
    @property
    def LightSteelBlue() -> Color: ...
    @property
    def PowderBlue() -> Color: ...


class DashStyle:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, offset: Single, dashes: Set(Single)): ...
    @property
    def Dashes(self) -> Set(Single): ...
    @property
    def Offset(self) -> Single: ...
    @property
    def IsSolid(self) -> bool: ...
    def TryParse(value: str) -> Tuple[bool, DashStyle]: ...
    def Parse(value: str) -> DashStyle: ...
    def op_Equality(style1: DashStyle, style2: DashStyle) -> bool: ...
    def op_Inequality(style1: DashStyle, style2: DashStyle) -> bool: ...
    @overload
    def Equals(self, other: DashStyle) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    def ToString(self) -> str: ...
    def GetHashCode(self) -> int: ...


class DashStyles:
    @property
    def Solid() -> DashStyle: ...
    @property
    def Dash() -> DashStyle: ...
    @property
    def Dot() -> DashStyle: ...
    @property
    def DashDot() -> DashStyle: ...
    @property
    def DashDotDot() -> DashStyle: ...


class FillMode:
    Alternate = 0
    Winding = 1


class SystemFont:
    Default = 0
    Bold = 1
    Label = 2
    TitleBar = 3
    ToolTip = 4
    MenuBar = 5
    Menu = 6
    Message = 7
    Palette = 8
    StatusBar = 9
    User = 10


class FontStyle:
    #None = 0
    Bold = 1
    Italic = 2


class FontDecoration:
    #None = 0
    Underline = 1
    Strikethrough = 2


class Font(Widget):
    @overload
    def __init__(self, family: str, size: Single, style: FontStyle, decoration: FontDecoration): ...
    @overload
    def __init__(self, family: FontFamily, size: Single, style: FontStyle, decoration: FontDecoration): ...
    @overload
    def __init__(self, systemFont: SystemFont, size: Nullable, decoration: FontDecoration): ...
    @overload
    def __init__(self, typeface: FontTypeface, size: Single, decoration: FontDecoration): ...
    @overload
    def __init__(self, handler: IHandler): ...
    @property
    def FamilyName(self) -> str: ...
    @property
    def FontStyle(self) -> FontStyle: ...
    @property
    def FontDecoration(self) -> FontDecoration: ...
    @property
    def Family(self) -> FontFamily: ...
    @property
    def Typeface(self) -> FontTypeface: ...
    @property
    def XHeight(self) -> Single: ...
    @property
    def Ascent(self) -> Single: ...
    @property
    def Descent(self) -> Single: ...
    @property
    def LineHeight(self) -> Single: ...
    @property
    def Leading(self) -> Single: ...
    @property
    def Baseline(self) -> Single: ...
    @property
    def Size(self) -> Single: ...
    @property
    def Bold(self) -> bool: ...
    @property
    def Italic(self) -> bool: ...
    @property
    def Underline(self) -> bool: ...
    @property
    def Strikethrough(self) -> bool: ...
    def MeasureString(self, text: str) -> SizeF: ...
    def ToString(self) -> str: ...
    def Equals(self, obj: Object) -> bool: ...
    def GetHashCode(self) -> int: ...


class FontFamilies:
    @property
    def Monospace() -> FontFamily: ...
    @property
    def Sans() -> FontFamily: ...
    @property
    def Serif() -> FontFamily: ...
    @property
    def Cursive() -> FontFamily: ...
    @property
    def Fantasy() -> FontFamily: ...


class FontFamily(Widget):
    @overload
    def __init__(self, handler: IHandler): ...
    @overload
    def __init__(self, familyName: str): ...
    @property
    def Name(self) -> str: ...
    @property
    def LocalizedName(self) -> str: ...
    @property
    def Typefaces(self) -> Iterable[FontTypeface]: ...
    @overload
    def Equals(self, other: FontFamily) -> bool: ...
    def op_Equality(value1: FontFamily, value2: FontFamily) -> bool: ...
    def op_Inequality(value1: FontFamily, value2: FontFamily) -> bool: ...
    def GetHashCode(self) -> int: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    def ToString(self) -> str: ...


class Fonts:
    @overload
    def Cached(familyName: str, size: Single, style: FontStyle, decoration: FontDecoration) -> Font: ...
    @overload
    def Cached(family: FontFamily, size: Single, style: FontStyle, decoration: FontDecoration) -> Font: ...
    def ClearCache() -> None: ...
    def Monospace(size: Single, style: FontStyle, decoration: FontDecoration) -> Font: ...
    def Sans(size: Single, style: FontStyle, decoration: FontDecoration) -> Font: ...
    def Serif(size: Single, style: FontStyle, decoration: FontDecoration) -> Font: ...
    def Cursive(size: Single, style: FontStyle, decoration: FontDecoration) -> Font: ...
    def Fantasy(size: Single, style: FontStyle, decoration: FontDecoration) -> Font: ...
    @property
    def AvailableFontFamilies() -> Iterable[FontFamily]: ...


class FontTypeface(Widget):
    def __init__(self, family: FontFamily, handler: IHandler): ...
    @property
    def Family(self) -> FontFamily: ...
    @property
    def Name(self) -> str: ...
    @property
    def LocalizedName(self) -> str: ...
    @property
    def FontStyle(self) -> FontStyle: ...
    @property
    def Bold(self) -> bool: ...
    @property
    def Italic(self) -> bool: ...
    def ToString(self) -> str: ...
    @overload
    def Equals(self, other: FontTypeface) -> bool: ...
    def op_Equality(value1: FontTypeface, value2: FontTypeface) -> bool: ...
    def op_Inequality(value1: FontTypeface, value2: FontTypeface) -> bool: ...
    def GetHashCode(self) -> int: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...


class Graphics(Widget):
    @overload
    def __init__(self, handler: IHandler): ...
    @overload
    def __init__(self, image: Bitmap): ...
    @overload
    def Clear(self, color: Color) -> None: ...
    @overload
    def DrawLine(self, color: Color, start: PointF, end: PointF) -> None: ...
    @overload
    def DrawLine(self, pen: Pen, start: PointF, end: PointF) -> None: ...
    @overload
    def DrawLine(self, color: Color, startx: Single, starty: Single, endx: Single, endy: Single) -> None: ...
    @overload
    def DrawLine(self, pen: Pen, startx: Single, starty: Single, endx: Single, endy: Single) -> None: ...
    @overload
    def DrawRectangle(self, pen: Pen, x: Single, y: Single, width: Single, height: Single) -> None: ...
    @overload
    def DrawRectangle(self, color: Color, rectangle: RectangleF) -> None: ...
    @overload
    def DrawRectangle(self, color: Color, x: Single, y: Single, width: Single, height: Single) -> None: ...
    @overload
    def DrawRectangle(self, pen: Pen, rectangle: RectangleF) -> None: ...
    def DrawInsetRectangle(self, topLeftColor: Color, bottomRightColor: Color, rectangle: RectangleF, width: int) -> None: ...
    @overload
    def FillRectangle(self, color: Color, x: Single, y: Single, width: Single, height: Single) -> None: ...
    @overload
    def FillRectangle(self, brush: Brush, x: Single, y: Single, width: Single, height: Single) -> None: ...
    @overload
    def FillRectangle(self, color: Color, rectangle: RectangleF) -> None: ...
    @overload
    def FillRectangle(self, brush: Brush, rectangle: RectangleF) -> None: ...
    @overload
    def FillRectangles(self, color: Color, rectangles: Iterable[RectangleF]) -> None: ...
    @overload
    def FillRectangles(self, brush: Brush, rectangles: Iterable[RectangleF]) -> None: ...
    @overload
    def FillEllipse(self, color: Color, rectangle: RectangleF) -> None: ...
    @overload
    def FillEllipse(self, brush: Brush, rectangle: RectangleF) -> None: ...
    @overload
    def FillEllipse(self, color: Color, x: Single, y: Single, width: Single, height: Single) -> None: ...
    @overload
    def FillEllipse(self, brush: Brush, x: Single, y: Single, width: Single, height: Single) -> None: ...
    @overload
    def DrawEllipse(self, color: Color, rectangle: RectangleF) -> None: ...
    @overload
    def DrawEllipse(self, pen: Pen, rectangle: RectangleF) -> None: ...
    @overload
    def DrawEllipse(self, color: Color, x: Single, y: Single, width: Single, height: Single) -> None: ...
    @overload
    def DrawEllipse(self, pen: Pen, x: Single, y: Single, width: Single, height: Single) -> None: ...
    @overload
    def DrawArc(self, color: Color, rectangle: RectangleF, startAngle: Single, sweepAngle: Single) -> None: ...
    @overload
    def DrawArc(self, pen: Pen, rectangle: RectangleF, startAngle: Single, sweepAngle: Single) -> None: ...
    @overload
    def DrawArc(self, color: Color, x: Single, y: Single, width: Single, height: Single, startAngle: Single, sweepAngle: Single) -> None: ...
    @overload
    def DrawArc(self, pen: Pen, x: Single, y: Single, width: Single, height: Single, startAngle: Single, sweepAngle: Single) -> None: ...
    @overload
    def FillPie(self, color: Color, rectangle: RectangleF, startAngle: Single, sweepAngle: Single) -> None: ...
    @overload
    def FillPie(self, brush: Brush, rectangle: RectangleF, startAngle: Single, sweepAngle: Single) -> None: ...
    @overload
    def FillPie(self, color: Color, x: Single, y: Single, width: Single, height: Single, startAngle: Single, sweepAngle: Single) -> None: ...
    @overload
    def FillPie(self, brush: Brush, x: Single, y: Single, width: Single, height: Single, startAngle: Single, sweepAngle: Single) -> None: ...
    @overload
    def FillPolygon(self, color: Color, points: Set(PointF)) -> None: ...
    @overload
    def FillPolygon(self, brush: Brush, points: Set(PointF)) -> None: ...
    @overload
    def DrawPolygon(self, color: Color, points: Set(PointF)) -> None: ...
    @overload
    def DrawPolygon(self, pen: Pen, points: Set(PointF)) -> None: ...
    @overload
    def DrawLines(self, color: Color, points: Set(PointF)) -> None: ...
    @overload
    def DrawLines(self, color: Color, points: Iterable[PointF]) -> None: ...
    @overload
    def DrawLines(self, pen: Pen, points: Set(PointF)) -> None: ...
    @overload
    def DrawLines(self, pen: Pen, points: Iterable[PointF]) -> None: ...
    @overload
    def DrawPath(self, color: Color, path: IGraphicsPath) -> None: ...
    @overload
    def DrawPath(self, pen: Pen, path: IGraphicsPath) -> None: ...
    @overload
    def FillPath(self, color: Color, path: IGraphicsPath) -> None: ...
    @overload
    def FillPath(self, brush: Brush, path: IGraphicsPath) -> None: ...
    @overload
    def DrawImage(self, image: Image, location: PointF) -> None: ...
    @overload
    def DrawImage(self, image: Image, x: Single, y: Single) -> None: ...
    @overload
    def DrawImage(self, image: Image, x: Single, y: Single, width: Single, height: Single) -> None: ...
    @overload
    def DrawImage(self, image: Image, rectangle: RectangleF) -> None: ...
    @overload
    def DrawImage(self, image: Image, source: RectangleF, destination: PointF) -> None: ...
    @overload
    def DrawImage(self, image: Image, source: RectangleF, destination: RectangleF) -> None: ...
    @overload
    def DrawText(self, font: Font, brush: SolidBrush, x: Single, y: Single, text: str) -> None: ...
    @overload
    def DrawText(self, font: Font, color: Color, x: Single, y: Single, text: str) -> None: ...
    @overload
    def DrawText(self, font: Font, brush: SolidBrush, location: PointF, text: str) -> None: ...
    @overload
    def DrawText(self, font: Font, color: Color, location: PointF, text: str) -> None: ...
    def MeasureString(self, font: Font, text: str) -> SizeF: ...
    @property
    def AntiAlias(self) -> bool: ...
    @AntiAlias.setter
    def AntiAlias(self, value: bool) -> None: ...
    @property
    def ImageInterpolation(self) -> ImageInterpolation: ...
    @ImageInterpolation.setter
    def ImageInterpolation(self, value: ImageInterpolation) -> None: ...
    @property
    def DPI(self) -> Single: ...
    @property
    def PointsPerPixel(self) -> Single: ...
    @property
    def PixelsPerPoint(self) -> Single: ...
    @property
    def PixelOffsetMode(self) -> PixelOffsetMode: ...
    @PixelOffsetMode.setter
    def PixelOffsetMode(self, value: PixelOffsetMode) -> None: ...
    @property
    def IsRetained(self) -> bool: ...
    def Flush(self) -> None: ...
    @overload
    def TranslateTransform(self, offsetX: Single, offsetY: Single) -> None: ...
    @overload
    def TranslateTransform(self, offset: PointF) -> None: ...
    def RotateTransform(self, angle: Single) -> None: ...
    @overload
    def ScaleTransform(self, scale: SizeF) -> None: ...
    @overload
    def ScaleTransform(self, scaleX: Single, scaleY: Single) -> None: ...
    @overload
    def ScaleTransform(self, scale: Single) -> None: ...
    def MultiplyTransform(self, matrix: IMatrix) -> None: ...
    def SaveTransformState(self) -> IDisposable: ...
    def SaveTransform(self) -> None: ...
    def RestoreTransform(self) -> None: ...
    @property
    def CurrentTransform(self) -> IMatrix: ...
    @property
    def ClipBounds(self) -> RectangleF: ...
    @overload
    def SetClip(self, rectangle: RectangleF) -> None: ...
    @overload
    def SetClip(self, path: IGraphicsPath) -> None: ...
    def ResetClip(self) -> None: ...
    def IsVisible(self, rectangle: RectangleF) -> bool: ...
    @overload
    def Clear(self, brush: SolidBrush) -> None: ...


class IGraphicsPath:
    @property
    def Bounds(self) -> RectangleF: ...
    @property
    def FillMode(self) -> FillMode: ...
    @FillMode.setter
    def FillMode(self, value: FillMode) -> None: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def CurrentPoint(self) -> PointF: ...
    def AddLine(self, startX: Single, startY: Single, endX: Single, endY: Single) -> None: ...
    def AddLines(self, points: Iterable[PointF]) -> None: ...
    def LineTo(self, x: Single, y: Single) -> None: ...
    def MoveTo(self, x: Single, y: Single) -> None: ...
    def AddArc(self, x: Single, y: Single, width: Single, height: Single, startAngle: Single, sweepAngle: Single) -> None: ...
    def AddBezier(self, start: PointF, control1: PointF, control2: PointF, end: PointF) -> None: ...
    def AddCurve(self, points: Iterable[PointF], tension: Single) -> None: ...
    def AddEllipse(self, x: Single, y: Single, width: Single, height: Single) -> None: ...
    def AddRectangle(self, x: Single, y: Single, width: Single, height: Single) -> None: ...
    def AddPath(self, path: IGraphicsPath, connect: bool) -> None: ...
    def Transform(self, matrix: IMatrix) -> None: ...
    def StartFigure(self) -> None: ...
    def CloseFigure(self) -> None: ...
    def Clone(self) -> IGraphicsPath: ...


class GraphicsPathExtensions:
    def MoveTo(path: IGraphicsPath, point: PointF) -> None: ...
    def LineTo(path: IGraphicsPath, point: PointF) -> None: ...
    def AddLines(path: IGraphicsPath, points: Set(PointF)) -> None: ...
    def AddLine(path: IGraphicsPath, start: PointF, end: PointF) -> None: ...
    def AddArc(path: IGraphicsPath, location: RectangleF, startAngle: Single, sweepAngle: Single) -> None: ...
    @overload
    def AddCurve(path: IGraphicsPath, points: Set(PointF)) -> None: ...
    @overload
    def AddCurve(path: IGraphicsPath, tension: Single, points: Set(PointF)) -> None: ...
    def AddEllipse(path: IGraphicsPath, location: RectangleF) -> None: ...
    def AddRectangle(path: IGraphicsPath, location: RectangleF) -> None: ...


class GraphicsPath:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, handler: IGraphicsPath): ...
    @property
    def Bounds(self) -> RectangleF: ...
    @FillMode.setter
    def FillMode(self, value: FillMode) -> None: ...
    @property
    def FillMode(self) -> FillMode: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def CurrentPoint(self) -> PointF: ...
    @property
    def Instantiator() -> Func: ...
    def Create() -> IGraphicsPath: ...
    def AddLine(self, startX: Single, startY: Single, endX: Single, endY: Single) -> None: ...
    def AddLines(self, points: Iterable[PointF]) -> None: ...
    def LineTo(self, x: Single, y: Single) -> None: ...
    def MoveTo(self, x: Single, y: Single) -> None: ...
    def AddArc(self, x: Single, y: Single, width: Single, height: Single, startAngle: Single, sweepAngle: Single) -> None: ...
    def AddBezier(self, start: PointF, control1: PointF, control2: PointF, end: PointF) -> None: ...
    def AddCurve(self, points: Iterable[PointF], tension: Single) -> None: ...
    def AddEllipse(self, x: Single, y: Single, width: Single, height: Single) -> None: ...
    def AddRectangle(self, x: Single, y: Single, width: Single, height: Single) -> None: ...
    def AddPath(self, path: IGraphicsPath, connect: bool) -> None: ...
    def Transform(self, matrix: IMatrix) -> None: ...
    def StartFigure(self) -> None: ...
    def CloseFigure(self) -> None: ...
    def Dispose(self) -> None: ...
    def Clone(self) -> IGraphicsPath: ...
    @overload
    def GetRoundRect(rectangle: RectangleF, radius: Single) -> IGraphicsPath: ...
    @overload
    def GetRoundRect(rectangle: RectangleF, nwRadius: Single, neRadius: Single, seRadius: Single, swRadius: Single) -> IGraphicsPath: ...


class Icon(Image):
    @overload
    def __init__(self, handler: IHandler): ...
    @overload
    def __init__(self, stream: Stream): ...
    @overload
    def __init__(self, fileName: str): ...
    @overload
    def __init__(self, frames: Iterable[IconFrame]): ...
    @overload
    def __init__(self, frames: Set(IconFrame)): ...
    @overload
    def __init__(self, scale: Single, bitmap: Bitmap): ...
    @overload
    def FromResource(resourceName: str, assembly: Assembly) -> Icon: ...
    @overload
    def FromResource(resourceName: str, type: Type) -> Icon: ...
    def GetFrame(self, scale: Single, fittingSize: Nullable) -> IconFrame: ...
    @overload
    def WithSize(self, fittingSize: Size) -> Icon: ...
    @overload
    def WithSize(self, width: int, height: int) -> Icon: ...
    @property
    def Frames(self) -> Iterable[IconFrame]: ...


class IconFrame:
    @overload
    def __init__(self, scale: Single, load: Func): ...
    @overload
    def __init__(self, scale: Single, stream: Stream): ...
    @overload
    def __init__(self, scale: Single, bitmap: Bitmap): ...
    @property
    def ControlObject(self) -> Object: ...
    @property
    def PixelSize(self) -> Size: ...
    @property
    def Scale(self) -> Single: ...
    @property
    def Size(self) -> Size: ...
    @property
    def Bitmap(self) -> Bitmap: ...
    def FromControlObject(scale: Single, controlObject: Object) -> IconFrame: ...
    def FromResource(scale: Single, resourceName: str, assembly: Assembly) -> IconFrame: ...


class ILockableImage:
    def Lock(self) -> BitmapData: ...
    def Unlock(self, bitmapData: BitmapData) -> None: ...


class Image(Widget):
    @property
    def Size(self) -> Size: ...
    @property
    def Width(self) -> int: ...
    @property
    def Height(self) -> int: ...


class ImageConverter(TypeConverter):
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: Type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ITypeDescriptorContext, destinationType: Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object) -> Object: ...


class ImageInterpolation:
    Default = 0
    #None = 1
    Low = 2
    Medium = 3
    High = 4


class IndexedBitmap(Image):
    def __init__(self, width: int, height: int, bitsPerPixel: int): ...
    @property
    def BitsPerPixel(self) -> int: ...
    def Resize(self, width: int, height: int) -> None: ...
    def Lock(self) -> BitmapData: ...
    @property
    def Palette(self) -> Palette: ...
    @Palette.setter
    def Palette(self, value: Palette) -> None: ...


class GradientWrapMode:
    Pad = 0
    Repeat = 1
    Reflect = 2


class LinearGradientBrush(Brush):
    @overload
    def __init__(self, startColor: Color, endColor: Color, startPoint: PointF, endPoint: PointF): ...
    @overload
    def __init__(self, rectangle: RectangleF, startColor: Color, endColor: Color, angle: Single): ...
    @property
    def Handler(self) -> Object: ...
    @property
    def Instantiator() -> Func`5: ...
    @property
    def Transform(self) -> IMatrix: ...
    @Transform.setter
    def Transform(self, value: IMatrix) -> None: ...
    @property
    def Wrap(self) -> GradientWrapMode: ...
    @Wrap.setter
    def Wrap(self, value: GradientWrapMode) -> None: ...


class IMatrix:
    @property
    def Elements(self) -> Set(Single): ...
    @property
    def Xx(self) -> Single: ...
    @Xx.setter
    def Xx(self, value: Single) -> None: ...
    @property
    def Yx(self) -> Single: ...
    @Yx.setter
    def Yx(self, value: Single) -> None: ...
    @property
    def Xy(self) -> Single: ...
    @Xy.setter
    def Xy(self, value: Single) -> None: ...
    @property
    def Yy(self) -> Single: ...
    @Yy.setter
    def Yy(self, value: Single) -> None: ...
    @property
    def X0(self) -> Single: ...
    @X0.setter
    def X0(self, value: Single) -> None: ...
    @property
    def Y0(self) -> Single: ...
    @Y0.setter
    def Y0(self, value: Single) -> None: ...
    def Rotate(self, angle: Single) -> None: ...
    def RotateAt(self, angle: Single, centerX: Single, centerY: Single) -> None: ...
    def Translate(self, offsetX: Single, offsetY: Single) -> None: ...
    def Scale(self, scaleX: Single, scaleY: Single) -> None: ...
    def ScaleAt(self, scaleX: Single, scaleY: Single, centerX: Single, centerY: Single) -> None: ...
    def Skew(self, skewX: Single, skewY: Single) -> None: ...
    def Append(self, matrix: IMatrix) -> None: ...
    def Prepend(self, matrix: IMatrix) -> None: ...
    def Invert(self) -> None: ...
    @overload
    def TransformPoint(self, point: Point) -> PointF: ...
    @overload
    def TransformPoint(self, point: PointF) -> PointF: ...
    def Clone(self) -> IMatrix: ...


class Matrix:
    def Multiply(matrix: IMatrix, matrices: Set(IMatrix)) -> IMatrix: ...
    @overload
    def FromScale(scale: SizeF) -> IMatrix: ...
    @overload
    def FromScale(scaleX: Single, scaleY: Single) -> IMatrix: ...
    @overload
    def FromScaleAt(scale: SizeF, center: PointF) -> IMatrix: ...
    @overload
    def FromScaleAt(scaleX: Single, scaleY: Single, centerX: Single, centerY: Single) -> IMatrix: ...
    @overload
    def FromTranslation(offset: SizeF) -> IMatrix: ...
    @overload
    def FromTranslation(offset: PointF) -> IMatrix: ...
    @overload
    def FromTranslation(distanceX: Single, distanceY: Single) -> IMatrix: ...
    def FromRotation(angle: Single) -> IMatrix: ...
    @overload
    def FromRotationAt(angle: Single, center: PointF) -> IMatrix: ...
    @overload
    def FromRotationAt(angle: Single, centerX: Single, centerY: Single) -> IMatrix: ...
    def FromSkew(skewX: Single, skewY: Single) -> IMatrix: ...
    @property
    def Instantiator() -> Func: ...
    @property
    def InstantiatorWithElements() -> Func`7: ...
    @overload
    def Create() -> IMatrix: ...
    @overload
    def Create(elements: Set(Single)) -> IMatrix: ...
    @overload
    def Create(xx: Single, yx: Single, xy: Single, yy: Single, x0: Single, y0: Single) -> IMatrix: ...
    def RotateAt(matrix: IMatrix, angle: Single, center: PointF) -> None: ...
    @overload
    def Translate(matrix: IMatrix, offset: SizeF) -> None: ...
    @overload
    def Translate(matrix: IMatrix, offset: PointF) -> None: ...
    @overload
    def Scale(matrix: IMatrix, scale: SizeF) -> None: ...
    @overload
    def Scale(matrix: IMatrix, scale: Single) -> None: ...
    @overload
    def ScaleAt(matrix: IMatrix, scale: SizeF, center: PointF) -> None: ...
    @overload
    def ScaleAt(matrix: IMatrix, scale: Single, center: PointF) -> None: ...
    @overload
    def ScaleAt(matrix: IMatrix, scale: Single, centerX: Single, centerY: Single) -> None: ...
    def Append(matrix: IMatrix, matrices: Set(IMatrix)) -> None: ...
    def Prepend(matrix: IMatrix, matrices: Set(IMatrix)) -> None: ...
    def GetScale(matrix: IMatrix) -> PointF: ...
    def TransformRectangle(matrix: IMatrix, rect: RectangleF) -> RectangleF: ...
    def TransformSize(matrix: IMatrix, size: SizeF) -> SizeF: ...
    def Inverse(matrix: IMatrix) -> IMatrix: ...


class Padding:
    @overload
    def __init__(self, all: int): ...
    @overload
    def __init__(self, horizontal: int, vertical: int): ...
    @overload
    def __init__(self, left: int, top: int, right: int, bottom: int): ...
    @property
    def Top(self) -> int: ...
    @Top.setter
    def Top(self, value: int) -> None: ...
    @property
    def Left(self) -> int: ...
    @Left.setter
    def Left(self, value: int) -> None: ...
    @property
    def Right(self) -> int: ...
    @Right.setter
    def Right(self, value: int) -> None: ...
    @property
    def Bottom(self) -> int: ...
    @Bottom.setter
    def Bottom(self, value: int) -> None: ...
    @property
    def Horizontal(self) -> int: ...
    @property
    def Vertical(self) -> int: ...
    @property
    def Size(self) -> Size: ...
    @property
    def IsZero(self) -> bool: ...
    def op_Addition(value1: Padding, value2: Padding) -> Padding: ...
    def op_Subtraction(value1: Padding, value2: Padding) -> Padding: ...
    def op_Equality(value1: Padding, value2: Padding) -> bool: ...
    def op_Inequality(value1: Padding, value2: Padding) -> bool: ...
    def op_Implicit(all: int) -> Padding: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    def GetHashCode(self) -> int: ...
    def ToString(self) -> str: ...
    @overload
    def Equals(self, other: Padding) -> bool: ...


class PaddingConverter(TypeConverter):
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object) -> Object: ...


class Palette:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, colors: Iterable[Color]): ...
    @property
    def EGAColors() -> Set(int): ...
    def GetEgaPalette() -> Palette: ...
    def GetDosPalette() -> Palette: ...
    def FromEGA(palEGA: Palette) -> Palette: ...
    def Save(self, writer: BinaryWriter, shift: int, includeAlpha: bool) -> None: ...
    def Load(self, reader: BinaryReader, size: int, shift: int, includeAlpha: bool) -> None: ...
    def GetRGBColor(self, index: int) -> int: ...
    def AddRange(self, colors: Iterable[Color]) -> None: ...
    def FindClosest(self, color: Color) -> int: ...
    def FindAddColour(self, color: Color) -> int: ...
    def GetHashCode(self) -> int: ...
    def Equals(self, obj: Object) -> bool: ...
    def Clone(self) -> Palette: ...


class Pen:
    @overload
    def __init__(self, color: Color, thickness: Single): ...
    @overload
    def __init__(self, brush: Brush, thickness: Single): ...
    @property
    def ControlObject(self) -> Object: ...
    @ControlObject.setter
    def ControlObject(self, value: Object) -> None: ...
    @property
    def Handler(self) -> Object: ...
    @property
    def Instantiator() -> Func`3: ...
    @property
    def Color(self) -> Color: ...
    @Color.setter
    def Color(self, value: Color) -> None: ...
    @property
    def Brush(self) -> Brush: ...
    @property
    def Thickness(self) -> Single: ...
    @Thickness.setter
    def Thickness(self, value: Single) -> None: ...
    @property
    def LineJoin(self) -> PenLineJoin: ...
    @LineJoin.setter
    def LineJoin(self, value: PenLineJoin) -> None: ...
    @property
    def LineCap(self) -> PenLineCap: ...
    @LineCap.setter
    def LineCap(self, value: PenLineCap) -> None: ...
    @property
    def MiterLimit(self) -> Single: ...
    @MiterLimit.setter
    def MiterLimit(self, value: Single) -> None: ...
    @property
    def DashStyle(self) -> DashStyle: ...
    @DashStyle.setter
    def DashStyle(self, value: DashStyle) -> None: ...
    def Dispose(self) -> None: ...


class PenLineCap:
    Square = 0
    Butt = 1
    Round = 2


class PenLineJoin:
    Miter = 0
    Bevel = 1
    Round = 2


class Pens:
    @property
    def SteelBlue() -> Pen: ...
    @property
    def LightSteelBlue() -> Pen: ...
    @property
    def PowderBlue() -> Pen: ...
    @property
    def LightBlue() -> Pen: ...
    @property
    def SkyBlue() -> Pen: ...
    @property
    def LightSkyBlue() -> Pen: ...
    @property
    def DeepSkyBlue() -> Pen: ...
    @property
    def DodgerBlue() -> Pen: ...
    @property
    def CornflowerBlue() -> Pen: ...
    @property
    def RoyalBlue() -> Pen: ...
    @property
    def Blue() -> Pen: ...
    @property
    def MediumBlue() -> Pen: ...
    @property
    def DarkBlue() -> Pen: ...
    @property
    def Navy() -> Pen: ...
    @property
    def MidnightBlue() -> Pen: ...
    @property
    def Cornsilk() -> Pen: ...
    @property
    def BlanchedAlmond() -> Pen: ...
    @property
    def Bisque() -> Pen: ...
    @property
    def NavajoWhite() -> Pen: ...
    @property
    def Wheat() -> Pen: ...
    @property
    def BurlyWood() -> Pen: ...
    @property
    def Tan() -> Pen: ...
    @property
    def RosyBrown() -> Pen: ...
    @property
    def SandyBrown() -> Pen: ...
    @property
    def Goldenrod() -> Pen: ...
    @property
    def DarkGoldenrod() -> Pen: ...
    @property
    def Peru() -> Pen: ...
    @property
    def Chocolate() -> Pen: ...
    @property
    def SaddleBrown() -> Pen: ...
    @property
    def Sienna() -> Pen: ...
    @property
    def Brown() -> Pen: ...
    @property
    def Maroon() -> Pen: ...
    @property
    def White() -> Pen: ...
    @property
    def Snow() -> Pen: ...
    @property
    def Honeydew() -> Pen: ...
    @property
    def MintCream() -> Pen: ...
    @property
    def Azure() -> Pen: ...
    @property
    def AliceBlue() -> Pen: ...
    @property
    def GhostWhite() -> Pen: ...
    @property
    def WhiteSmoke() -> Pen: ...
    @property
    def Seashell() -> Pen: ...
    @property
    def Beige() -> Pen: ...
    @property
    def OldLace() -> Pen: ...
    @property
    def FloralWhite() -> Pen: ...
    @property
    def Ivory() -> Pen: ...
    @property
    def AntiqueWhite() -> Pen: ...
    @property
    def Linen() -> Pen: ...
    @property
    def LavenderBlush() -> Pen: ...
    @property
    def MistyRose() -> Pen: ...
    @property
    def Gainsboro() -> Pen: ...
    @property
    def LightGrey() -> Pen: ...
    @property
    def Silver() -> Pen: ...
    @property
    def DarkGray() -> Pen: ...
    @property
    def Gray() -> Pen: ...
    @property
    def DimGray() -> Pen: ...
    @property
    def LightSlateGray() -> Pen: ...
    @property
    def SlateGray() -> Pen: ...
    @property
    def DarkSlateGray() -> Pen: ...
    @property
    def Black() -> Pen: ...
    def Cached(color: Color, thickness: Single, dashStyle: DashStyle) -> Pen: ...
    def ClearCache() -> None: ...
    @property
    def Transparent() -> Pen: ...
    @property
    def IndianRed() -> Pen: ...
    @property
    def LightCoral() -> Pen: ...
    @property
    def Salmon() -> Pen: ...
    @property
    def DarkSalmon() -> Pen: ...
    @property
    def LightSalmon() -> Pen: ...
    @property
    def Red() -> Pen: ...
    @property
    def Crimson() -> Pen: ...
    @property
    def Firebrick() -> Pen: ...
    @property
    def DarkRed() -> Pen: ...
    @property
    def Pink() -> Pen: ...
    @property
    def LightPink() -> Pen: ...
    @property
    def HotPink() -> Pen: ...
    @property
    def DeepPink() -> Pen: ...
    @property
    def MediumVioletRed() -> Pen: ...
    @property
    def PaleVioletRed() -> Pen: ...
    @property
    def Coral() -> Pen: ...
    @property
    def Tomato() -> Pen: ...
    @property
    def OrangeRed() -> Pen: ...
    @property
    def DarkOrange() -> Pen: ...
    @property
    def Orange() -> Pen: ...
    @property
    def Gold() -> Pen: ...
    @property
    def Yellow() -> Pen: ...
    @property
    def LightYellow() -> Pen: ...
    @property
    def LemonChiffon() -> Pen: ...
    @property
    def LightGoldenrodYellow() -> Pen: ...
    @property
    def PapayaWhip() -> Pen: ...
    @property
    def Moccasin() -> Pen: ...
    @property
    def PeachPuff() -> Pen: ...
    @property
    def PaleGoldenrod() -> Pen: ...
    @property
    def Khaki() -> Pen: ...
    @property
    def DarkKhaki() -> Pen: ...
    @property
    def Lavender() -> Pen: ...
    @property
    def Thistle() -> Pen: ...
    @property
    def Plum() -> Pen: ...
    @property
    def Violet() -> Pen: ...
    @property
    def Orchid() -> Pen: ...
    @property
    def Fuchsia() -> Pen: ...
    @property
    def Magenta() -> Pen: ...
    @property
    def MediumOrchid() -> Pen: ...
    @property
    def MediumPurple() -> Pen: ...
    @property
    def BlueViolet() -> Pen: ...
    @property
    def DarkViolet() -> Pen: ...
    @property
    def DarkOrchid() -> Pen: ...
    @property
    def DarkMagenta() -> Pen: ...
    @property
    def Purple() -> Pen: ...
    @property
    def Indigo() -> Pen: ...
    @property
    def DarkSlateBlue() -> Pen: ...
    @property
    def SlateBlue() -> Pen: ...
    @property
    def MediumSlateBlue() -> Pen: ...
    @property
    def GreenYellow() -> Pen: ...
    @property
    def Chartreuse() -> Pen: ...
    @property
    def LawnGreen() -> Pen: ...
    @property
    def Lime() -> Pen: ...
    @property
    def LimeGreen() -> Pen: ...
    @property
    def PaleGreen() -> Pen: ...
    @property
    def LightGreen() -> Pen: ...
    @property
    def MediumSpringGreen() -> Pen: ...
    @property
    def SpringGreen() -> Pen: ...
    @property
    def MediumSeaGreen() -> Pen: ...
    @property
    def SeaGreen() -> Pen: ...
    @property
    def ForestGreen() -> Pen: ...
    @property
    def Green() -> Pen: ...
    @property
    def DarkGreen() -> Pen: ...
    @property
    def YellowGreen() -> Pen: ...
    @property
    def OliveDrab() -> Pen: ...
    @property
    def Olive() -> Pen: ...
    @property
    def DarkOliveGreen() -> Pen: ...
    @property
    def MediumAquamarine() -> Pen: ...
    @property
    def DarkSeaGreen() -> Pen: ...
    @property
    def LightSeaGreen() -> Pen: ...
    @property
    def DarkCyan() -> Pen: ...
    @property
    def Teal() -> Pen: ...
    @property
    def Aqua() -> Pen: ...
    @property
    def Cyan() -> Pen: ...
    @property
    def LightCyan() -> Pen: ...
    @property
    def PaleTurquoise() -> Pen: ...
    @property
    def Aquamarine() -> Pen: ...
    @property
    def Turquoise() -> Pen: ...
    @property
    def MediumTurquoise() -> Pen: ...
    @property
    def DarkTurquoise() -> Pen: ...
    @property
    def CadetBlue() -> Pen: ...


class PixelOffsetMode:
    #None = 0
    Half = 1


class Point:
    @overload
    def __init__(self, x: int, y: int): ...
    @overload
    def __init__(self, size: Size): ...
    @overload
    def __init__(self, point: PointF): ...
    def Truncate(point: PointF) -> Point: ...
    def Round(point: PointF) -> Point: ...
    def Min(point1: Point, point2: Point) -> Point: ...
    def Max(point1: Point, point2: Point) -> Point: ...
    def Abs(point: Point) -> Point: ...
    @property
    def X(self) -> int: ...
    @X.setter
    def X(self, value: int) -> None: ...
    @property
    def Y(self) -> int: ...
    @Y.setter
    def Y(self, value: int) -> None: ...
    @property
    def Normal(self) -> Point: ...
    def UnitVectorAtAngle(angle: Single) -> PointF: ...
    @property
    def UnitVector(self) -> PointF: ...
    @property
    def Length(self) -> Single: ...
    @property
    def LengthSquared(self) -> int: ...
    @property
    def IsZero(self) -> bool: ...
    @overload
    def Distance(self, point: Point) -> Single: ...
    @overload
    def Distance(point1: Point, point2: Point) -> Single: ...
    @overload
    def Restrict(self, rectangle: Rectangle) -> None: ...
    @overload
    def Restrict(point: Point, rectangle: Rectangle) -> Point: ...
    @overload
    def Offset(self, x: int, y: int) -> None: ...
    @overload
    def Offset(self, point: Point) -> None: ...
    @overload
    def Offset(point: Point, x: int, y: int) -> Point: ...
    @overload
    def Offset(point: Point, offset: Point) -> Point: ...
    @overload
    def DotProduct(self, point: Point) -> int: ...
    @overload
    def DotProduct(point1: Point, point2: Point) -> int: ...
    def op_UnaryNegation(point: Point) -> Point: ...
    @overload
    def op_Subtraction(point1: Point, point2: Point) -> Point: ...
    @overload
    def op_Addition(point1: Point, point2: Point) -> Point: ...
    @overload
    def op_Addition(point: Point, size: Size) -> Point: ...
    @overload
    def op_Subtraction(point: Point, size: Size) -> Point: ...
    @overload
    def op_Addition(point: Point, value: int) -> Point: ...
    @overload
    def op_Subtraction(point: Point, value: int) -> Point: ...
    def op_Equality(point1: Point, point2: Point) -> bool: ...
    def op_Inequality(point1: Point, point2: Point) -> bool: ...
    @overload
    def op_Multiply(point: Point, size: Size) -> Point: ...
    @overload
    def op_Multiply(point1: Point, point2: Point) -> Point: ...
    @overload
    def op_Division(point: Point, size: Size) -> Point: ...
    @overload
    def op_Multiply(point: Point, factor: int) -> Point: ...
    @overload
    def op_Multiply(factor: int, point: Point) -> Point: ...
    @overload
    def op_Multiply(point: Point, factor: Single) -> PointF: ...
    @overload
    def op_Division(point: Point, value: int) -> Point: ...
    @overload
    def op_Explicit(point: PointF) -> Point: ...
    @overload
    def op_Explicit(size: Size) -> Point: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    def GetHashCode(self) -> int: ...
    def ToString(self) -> str: ...
    @overload
    def Equals(self, other: Point) -> bool: ...


class PointConverter(TypeConverter):
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object) -> Object: ...


class PointF:
    @overload
    def __init__(self, x: Single, y: Single): ...
    @overload
    def __init__(self, size: SizeF): ...
    @overload
    def __init__(self, point: Point): ...
    def Min(point1: PointF, point2: PointF) -> PointF: ...
    def Max(point1: PointF, point2: PointF) -> PointF: ...
    def Abs(point: PointF) -> PointF: ...
    @property
    def X(self) -> Single: ...
    @X.setter
    def X(self, value: Single) -> None: ...
    @property
    def Y(self) -> Single: ...
    @Y.setter
    def Y(self, value: Single) -> None: ...
    @property
    def Normal(self) -> PointF: ...
    def UnitVectorAtAngle(angle: Single) -> PointF: ...
    @property
    def UnitVector(self) -> PointF: ...
    def AngleTo(self, destination: PointF) -> Single: ...
    def LengthTo(self, destination: PointF) -> Single: ...
    @property
    def Angle(self) -> Single: ...
    @property
    def Length(self) -> Single: ...
    @property
    def LengthSquared(self) -> Single: ...
    @property
    def IsZero(self) -> bool: ...
    @overload
    def Distance(self, point: PointF) -> Single: ...
    @overload
    def Distance(point1: PointF, point2: PointF) -> Single: ...
    @overload
    def Restrict(self, rectangle: RectangleF) -> None: ...
    @overload
    def Restrict(point: Point, rectangle: Rectangle) -> Point: ...
    @overload
    def Offset(self, x: Single, y: Single) -> None: ...
    @overload
    def Offset(self, offset: PointF) -> None: ...
    @overload
    def Offset(point: PointF, x: Single, y: Single) -> PointF: ...
    @overload
    def Offset(point: PointF, offset: PointF) -> PointF: ...
    @overload
    def Rotate(self, angle: Single) -> None: ...
    @overload
    def Rotate(point: PointF, angle: Single) -> PointF: ...
    @overload
    def DotProduct(self, point: PointF) -> Single: ...
    @overload
    def DotProduct(point1: PointF, point2: PointF) -> Single: ...
    def op_UnaryNegation(point: PointF) -> PointF: ...
    @overload
    def op_Subtraction(point1: PointF, point2: PointF) -> PointF: ...
    @overload
    def op_Addition(point1: PointF, point2: PointF) -> PointF: ...
    @overload
    def op_Addition(point: PointF, size: SizeF) -> PointF: ...
    @overload
    def op_Subtraction(point: PointF, size: SizeF) -> PointF: ...
    @overload
    def op_Addition(point: PointF, value: Single) -> PointF: ...
    @overload
    def op_Subtraction(point: PointF, value: Single) -> PointF: ...
    def op_Equality(point1: PointF, point2: PointF) -> bool: ...
    def op_Inequality(point1: PointF, point2: PointF) -> bool: ...
    @overload
    def op_Multiply(point: PointF, size: SizeF) -> PointF: ...
    @overload
    def op_Multiply(point1: PointF, point2: PointF) -> PointF: ...
    @overload
    def op_Division(point: PointF, size: SizeF) -> PointF: ...
    @overload
    def op_Multiply(point: PointF, factor: Single) -> PointF: ...
    @overload
    def op_Multiply(factor: Single, point: PointF) -> PointF: ...
    @overload
    def op_Division(point: PointF, value: Single) -> PointF: ...
    def op_Implicit(point: Point) -> PointF: ...
    def op_Explicit(size: SizeF) -> PointF: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    def GetHashCode(self) -> int: ...
    def ToString(self) -> str: ...
    @overload
    def Equals(self, other: PointF) -> bool: ...


class PointFConverter(TypeConverter):
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object) -> Object: ...


class RadialGradientBrush(Brush):
    def __init__(self, startColor: Color, endColor: Color, center: PointF, gradientOrigin: PointF, radius: SizeF): ...
    @property
    def Handler(self) -> Object: ...
    @property
    def Instantiator() -> Func`6: ...
    @property
    def Transform(self) -> IMatrix: ...
    @Transform.setter
    def Transform(self, value: IMatrix) -> None: ...
    @property
    def Wrap(self) -> GradientWrapMode: ...
    @Wrap.setter
    def Wrap(self, value: GradientWrapMode) -> None: ...


class Rectangle:
    @overload
    def __init__(self, start: Point, end: Point): ...
    @overload
    def __init__(self, location: Point, size: Size): ...
    @overload
    def __init__(self, size: Size): ...
    @overload
    def __init__(self, x: int, y: int, width: int, height: int): ...
    @overload
    def __init__(self, rectangle: RectangleF): ...
    @overload
    def Union(self, rectangle: Rectangle) -> None: ...
    @overload
    def Union(rect1: Rectangle, rect2: Rectangle) -> Rectangle: ...
    @overload
    def Intersect(self, rectangle: Rectangle) -> None: ...
    @overload
    def Intersect(rect1: Rectangle, rect2: Rectangle) -> Rectangle: ...
    @overload
    def Restrict(self, location: Point, size: Size) -> None: ...
    @overload
    def Restrict(self, size: Size) -> None: ...
    @overload
    def Restrict(self, rectangle: Rectangle) -> None: ...
    @overload
    def Restrict(rectangle: Rectangle, size: Size) -> Rectangle: ...
    @overload
    def Restrict(rectangle: Rectangle, restrict: Rectangle) -> Rectangle: ...
    @overload
    def op_Multiply(rectangle: Rectangle, factor: int) -> Rectangle: ...
    @overload
    def op_Division(rectangle: Rectangle, factor: int) -> Rectangle: ...
    @overload
    def op_Multiply(rectangle: Rectangle, size: Size) -> Rectangle: ...
    @overload
    def op_Division(rectangle: Rectangle, size: Size) -> Rectangle: ...
    @overload
    def op_Addition(rectangle: Rectangle, offset: Point) -> Rectangle: ...
    @overload
    def op_Subtraction(rectangle: Rectangle, offset: Point) -> Rectangle: ...
    @overload
    def op_Addition(rectangle: Rectangle, offset: Size) -> Rectangle: ...
    @overload
    def op_Subtraction(rectangle: Rectangle, offset: Size) -> Rectangle: ...
    def op_Equality(rect1: Rectangle, rect2: Rectangle) -> bool: ...
    def op_Inequality(rect1: Rectangle, rect2: Rectangle) -> bool: ...
    def op_Explicit(rectangle: RectangleF) -> Rectangle: ...
    def ToString(self) -> str: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    def GetHashCode(self) -> int: ...
    @overload
    def Equals(self, other: Rectangle) -> bool: ...
    def Round(rectangle: RectangleF) -> Rectangle: ...
    def Ceiling(rectangle: RectangleF) -> Rectangle: ...
    def Truncate(rectangle: RectangleF) -> Rectangle: ...
    def Normalize(self) -> None: ...
    def FromSides(left: int, top: int, right: int, bottom: int) -> Rectangle: ...
    def FromCenter(center: Point, size: Size) -> Rectangle: ...
    @overload
    def Contains(self, point: Point) -> bool: ...
    @overload
    def Contains(self, x: int, y: int) -> bool: ...
    @overload
    def Contains(self, rectangle: Rectangle) -> bool: ...
    def Intersects(self, rectangle: Rectangle) -> bool: ...
    @property
    def IsZero(self) -> bool: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def Location(self) -> Point: ...
    @Location.setter
    def Location(self, value: Point) -> None: ...
    @property
    def EndLocation(self) -> Point: ...
    @EndLocation.setter
    def EndLocation(self, value: Point) -> None: ...
    @property
    def Size(self) -> Size: ...
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @property
    def X(self) -> int: ...
    @X.setter
    def X(self, value: int) -> None: ...
    @property
    def Y(self) -> int: ...
    @Y.setter
    def Y(self, value: int) -> None: ...
    @property
    def Width(self) -> int: ...
    @Width.setter
    def Width(self, value: int) -> None: ...
    @property
    def Height(self) -> int: ...
    @Height.setter
    def Height(self, value: int) -> None: ...
    @property
    def Top(self) -> int: ...
    @Top.setter
    def Top(self, value: int) -> None: ...
    @property
    def Left(self) -> int: ...
    @Left.setter
    def Left(self, value: int) -> None: ...
    @property
    def Right(self) -> int: ...
    @Right.setter
    def Right(self, value: int) -> None: ...
    @property
    def Bottom(self) -> int: ...
    @Bottom.setter
    def Bottom(self, value: int) -> None: ...
    @property
    def TopLeft(self) -> Point: ...
    @TopLeft.setter
    def TopLeft(self, value: Point) -> None: ...
    @property
    def TopRight(self) -> Point: ...
    @TopRight.setter
    def TopRight(self, value: Point) -> None: ...
    @property
    def BottomRight(self) -> Point: ...
    @BottomRight.setter
    def BottomRight(self, value: Point) -> None: ...
    @property
    def BottomLeft(self) -> Point: ...
    @BottomLeft.setter
    def BottomLeft(self, value: Point) -> None: ...
    @property
    def MiddleLeft(self) -> Point: ...
    @MiddleLeft.setter
    def MiddleLeft(self, value: Point) -> None: ...
    @property
    def MiddleRight(self) -> Point: ...
    @MiddleRight.setter
    def MiddleRight(self, value: Point) -> None: ...
    @property
    def MiddleTop(self) -> Point: ...
    @MiddleTop.setter
    def MiddleTop(self, value: Point) -> None: ...
    @property
    def MiddleBottom(self) -> Point: ...
    @MiddleBottom.setter
    def MiddleBottom(self, value: Point) -> None: ...
    @property
    def InnerTopRight(self) -> Point: ...
    @InnerTopRight.setter
    def InnerTopRight(self, value: Point) -> None: ...
    @property
    def InnerBottomRight(self) -> Point: ...
    @InnerBottomRight.setter
    def InnerBottomRight(self, value: Point) -> None: ...
    @property
    def InnerBottomLeft(self) -> Point: ...
    @InnerBottomLeft.setter
    def InnerBottomLeft(self, value: Point) -> None: ...
    @property
    def InnerBottom(self) -> int: ...
    @InnerBottom.setter
    def InnerBottom(self, value: int) -> None: ...
    @property
    def InnerRight(self) -> int: ...
    @InnerRight.setter
    def InnerRight(self, value: int) -> None: ...
    @property
    def Center(self) -> Point: ...
    @Center.setter
    def Center(self, value: Point) -> None: ...
    @property
    def MiddleX(self) -> int: ...
    @MiddleX.setter
    def MiddleX(self, value: int) -> None: ...
    @property
    def MiddleY(self) -> int: ...
    @MiddleY.setter
    def MiddleY(self, value: int) -> None: ...
    @overload
    def Offset(self, x: int, y: int) -> None: ...
    @overload
    def Offset(self, size: Size) -> None: ...
    @overload
    def Offset(self, point: Point) -> None: ...
    @overload
    def Offset(rectangle: Rectangle, x: int, y: int) -> Rectangle: ...
    @overload
    def Offset(rectangle: Rectangle, size: Size) -> Rectangle: ...
    @overload
    def Offset(rectangle: Rectangle, point: Point) -> Rectangle: ...
    @overload
    def Inflate(self, size: Size) -> None: ...
    @overload
    def Inflate(self, width: int, height: int) -> None: ...
    @overload
    def Inflate(rectangle: Rectangle, size: Size) -> Rectangle: ...
    @overload
    def Inflate(rectangle: Rectangle, width: int, height: int) -> Rectangle: ...
    @overload
    def Align(self, gridSize: Size) -> None: ...
    @overload
    def Align(self, gridWidth: int, gridHeight: int) -> None: ...
    @overload
    def Align(rectangle: Rectangle, gridSize: Size) -> Rectangle: ...
    @overload
    def Align(rectangle: Rectangle, gridWidth: int, gridHeight: int) -> Rectangle: ...


class RectangleConverter(TypeConverter):
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object) -> Object: ...


class RectangleF:
    @overload
    def __init__(self, start: PointF, end: PointF): ...
    @overload
    def __init__(self, location: PointF, size: SizeF): ...
    @overload
    def __init__(self, rectangle: Rectangle): ...
    @overload
    def __init__(self, size: SizeF): ...
    @overload
    def __init__(self, x: Single, y: Single, width: Single, height: Single): ...
    @overload
    def Union(rect1: RectangleF, rect2: RectangleF) -> RectangleF: ...
    @overload
    def Intersect(self, rectangle: RectangleF) -> None: ...
    @overload
    def Intersect(rect1: RectangleF, rect2: RectangleF) -> RectangleF: ...
    @overload
    def Restrict(self, point: PointF, size: SizeF) -> None: ...
    @overload
    def Restrict(self, size: SizeF) -> None: ...
    @overload
    def Restrict(self, rectangle: RectangleF) -> None: ...
    @overload
    def Restrict(rectangle: Rectangle, restrict: Rectangle) -> Rectangle: ...
    @overload
    def op_Multiply(rectangle: RectangleF, factor: Single) -> RectangleF: ...
    @overload
    def op_Division(rectangle: RectangleF, factor: Single) -> RectangleF: ...
    @overload
    def op_Multiply(rectangle: RectangleF, size: SizeF) -> RectangleF: ...
    @overload
    def op_Division(rectangle: RectangleF, size: SizeF) -> RectangleF: ...
    @overload
    def op_Addition(rectangle: RectangleF, offset: PointF) -> RectangleF: ...
    @overload
    def op_Subtraction(rectangle: RectangleF, offset: PointF) -> RectangleF: ...
    @overload
    def op_Addition(rectangle: RectangleF, offset: SizeF) -> RectangleF: ...
    @overload
    def op_Subtraction(rectangle: RectangleF, offset: SizeF) -> RectangleF: ...
    def op_Equality(rect1: RectangleF, rect2: RectangleF) -> bool: ...
    def op_Inequality(rect1: RectangleF, rect2: RectangleF) -> bool: ...
    def op_Implicit(rectangle: Rectangle) -> RectangleF: ...
    def ToString(self) -> str: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    def GetHashCode(self) -> int: ...
    @overload
    def Equals(self, other: RectangleF) -> bool: ...
    def Normalize(self) -> None: ...
    def FromSides(left: Single, top: Single, right: Single, bottom: Single) -> RectangleF: ...
    def FromCenter(center: PointF, size: SizeF) -> RectangleF: ...
    @overload
    def Contains(self, point: PointF) -> bool: ...
    @overload
    def Contains(self, x: Single, y: Single) -> bool: ...
    @overload
    def Contains(self, rectangle: RectangleF) -> bool: ...
    def Intersects(self, rectangle: RectangleF) -> bool: ...
    @property
    def IsZero(self) -> bool: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def Location(self) -> PointF: ...
    @Location.setter
    def Location(self, value: PointF) -> None: ...
    @property
    def EndLocation(self) -> PointF: ...
    @EndLocation.setter
    def EndLocation(self, value: PointF) -> None: ...
    @property
    def Size(self) -> SizeF: ...
    @Size.setter
    def Size(self, value: SizeF) -> None: ...
    @property
    def X(self) -> Single: ...
    @X.setter
    def X(self, value: Single) -> None: ...
    @property
    def Y(self) -> Single: ...
    @Y.setter
    def Y(self, value: Single) -> None: ...
    @property
    def Width(self) -> Single: ...
    @Width.setter
    def Width(self, value: Single) -> None: ...
    @property
    def Height(self) -> Single: ...
    @Height.setter
    def Height(self, value: Single) -> None: ...
    @property
    def Top(self) -> Single: ...
    @Top.setter
    def Top(self, value: Single) -> None: ...
    @property
    def Left(self) -> Single: ...
    @Left.setter
    def Left(self, value: Single) -> None: ...
    @property
    def Right(self) -> Single: ...
    @Right.setter
    def Right(self, value: Single) -> None: ...
    @property
    def Bottom(self) -> Single: ...
    @Bottom.setter
    def Bottom(self, value: Single) -> None: ...
    @property
    def TopLeft(self) -> PointF: ...
    @TopLeft.setter
    def TopLeft(self, value: PointF) -> None: ...
    @property
    def TopRight(self) -> PointF: ...
    @TopRight.setter
    def TopRight(self, value: PointF) -> None: ...
    @property
    def BottomRight(self) -> PointF: ...
    @BottomRight.setter
    def BottomRight(self, value: PointF) -> None: ...
    @property
    def BottomLeft(self) -> PointF: ...
    @BottomLeft.setter
    def BottomLeft(self, value: PointF) -> None: ...
    @property
    def MiddleLeft(self) -> PointF: ...
    @MiddleLeft.setter
    def MiddleLeft(self, value: PointF) -> None: ...
    @property
    def MiddleRight(self) -> PointF: ...
    @MiddleRight.setter
    def MiddleRight(self, value: PointF) -> None: ...
    @property
    def MiddleTop(self) -> PointF: ...
    @MiddleTop.setter
    def MiddleTop(self, value: PointF) -> None: ...
    @property
    def MiddleBottom(self) -> PointF: ...
    @MiddleBottom.setter
    def MiddleBottom(self, value: PointF) -> None: ...
    @property
    def InnerTopRight(self) -> PointF: ...
    @InnerTopRight.setter
    def InnerTopRight(self, value: PointF) -> None: ...
    @property
    def InnerBottomRight(self) -> PointF: ...
    @InnerBottomRight.setter
    def InnerBottomRight(self, value: PointF) -> None: ...
    @property
    def InnerBottomLeft(self) -> PointF: ...
    @InnerBottomLeft.setter
    def InnerBottomLeft(self, value: PointF) -> None: ...
    @property
    def InnerBottom(self) -> Single: ...
    @InnerBottom.setter
    def InnerBottom(self, value: Single) -> None: ...
    @property
    def InnerRight(self) -> Single: ...
    @InnerRight.setter
    def InnerRight(self, value: Single) -> None: ...
    @property
    def Center(self) -> PointF: ...
    @Center.setter
    def Center(self, value: PointF) -> None: ...
    @property
    def MiddleX(self) -> Single: ...
    @MiddleX.setter
    def MiddleX(self, value: Single) -> None: ...
    @property
    def MiddleY(self) -> Single: ...
    @MiddleY.setter
    def MiddleY(self, value: Single) -> None: ...
    @overload
    def Offset(self, x: Single, y: Single) -> None: ...
    @overload
    def Offset(self, size: SizeF) -> None: ...
    @overload
    def Offset(self, point: PointF) -> None: ...
    @overload
    def Offset(rectangle: RectangleF, x: Single, y: Single) -> RectangleF: ...
    @overload
    def Offset(rectangle: RectangleF, size: SizeF) -> RectangleF: ...
    @overload
    def Offset(rectangle: RectangleF, point: PointF) -> RectangleF: ...
    @overload
    def Inflate(self, size: SizeF) -> None: ...
    @overload
    def Inflate(self, width: Single, height: Single) -> None: ...
    @overload
    def Inflate(rectangle: RectangleF, size: SizeF) -> RectangleF: ...
    @overload
    def Inflate(rectangle: RectangleF, width: Single, height: Single) -> RectangleF: ...
    @overload
    def Distance(rect: RectangleF, point: PointF) -> SizeF: ...
    @overload
    def Distance(rect1: RectangleF, rect2: RectangleF) -> SizeF: ...
    @overload
    def Align(self, gridSize: SizeF) -> None: ...
    @overload
    def Align(self, gridWidth: Single, gridHeight: Single) -> None: ...
    @overload
    def Align(rectangle: RectangleF, gridSize: SizeF) -> RectangleF: ...
    @overload
    def Align(rectangle: RectangleF, gridWidth: Single, gridHeight: Single) -> RectangleF: ...
    @overload
    def Union(self, rectangle: RectangleF) -> None: ...


class RectangleFConverter(TypeConverter):
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object) -> Object: ...


class Region(Widget):
    def __init__(self): ...
    def Exclude(self, rectangle: Rectangle) -> None: ...
    def Reset(self) -> None: ...
    def Set(self, rectangle: Rectangle) -> None: ...


class Size:
    @overload
    def __init__(self, width: int, height: int): ...
    @overload
    def __init__(self, point: Point): ...
    @overload
    def __init__(self, size: SizeF): ...
    @property
    def Width(self) -> int: ...
    @Width.setter
    def Width(self, value: int) -> None: ...
    @property
    def Height(self) -> int: ...
    @Height.setter
    def Height(self, value: int) -> None: ...
    def Round(size: SizeF) -> Size: ...
    def Truncate(size: SizeF) -> Size: ...
    def Min(size1: Size, size2: Size) -> Size: ...
    def Max(size1: Size, size2: Size) -> Size: ...
    def Abs(size: Size) -> Size: ...
    def Ceiling(size: SizeF) -> Size: ...
    def FitTo(self, constraint: Size) -> Size: ...
    @overload
    def Contains(self, point: Point) -> bool: ...
    @overload
    def Contains(self, x: int, y: int) -> bool: ...
    @property
    def IsZero(self) -> bool: ...
    @property
    def IsEmpty(self) -> bool: ...
    def op_UnaryNegation(size: Size) -> Size: ...
    @overload
    def op_Multiply(size1: Size, size2: Size) -> Size: ...
    @overload
    def op_Multiply(size: Size, factor: int) -> Size: ...
    @overload
    def op_Multiply(factor: int, size: Size) -> Size: ...
    @overload
    def op_Multiply(size: Size, factor: Single) -> SizeF: ...
    @overload
    def op_Division(size1: Size, size2: Size) -> Size: ...
    @overload
    def op_Division(size: Size, factor: int) -> Size: ...
    @overload
    def op_Addition(size1: Size, size2: Size) -> Size: ...
    @overload
    def op_Subtraction(size1: Size, size2: Size) -> Size: ...
    @overload
    def op_Addition(size: Size, point: Point) -> Size: ...
    @overload
    def op_Subtraction(size: Size, point: Point) -> Size: ...
    @overload
    def op_Subtraction(size: Size, value: int) -> Size: ...
    @overload
    def op_Addition(size: Size, value: int) -> Size: ...
    def op_Equality(size1: Size, size2: Size) -> bool: ...
    def op_Inequality(size1: Size, size2: Size) -> bool: ...
    @overload
    def op_Explicit(size: SizeF) -> Size: ...
    @overload
    def op_Explicit(point: Point) -> Size: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    def GetHashCode(self) -> int: ...
    def ToString(self) -> str: ...
    @overload
    def Equals(self, other: Size) -> bool: ...


class SizeConverter(TypeConverter):
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object) -> Object: ...


class SizeF:
    @overload
    def __init__(self, width: Single, height: Single): ...
    @overload
    def __init__(self, point: PointF): ...
    @property
    def Width(self) -> Single: ...
    @Width.setter
    def Width(self, value: Single) -> None: ...
    @property
    def Height(self) -> Single: ...
    @Height.setter
    def Height(self, value: Single) -> None: ...
    def Min(size1: SizeF, size2: SizeF) -> SizeF: ...
    def Max(size1: SizeF, size2: SizeF) -> SizeF: ...
    def Abs(size: SizeF) -> SizeF: ...
    def FitTo(self, constraint: SizeF) -> SizeF: ...
    @overload
    def Contains(self, point: PointF) -> bool: ...
    @overload
    def Contains(self, x: Single, y: Single) -> bool: ...
    @property
    def IsZero(self) -> bool: ...
    @property
    def IsEmpty(self) -> bool: ...
    def op_UnaryNegation(size: SizeF) -> SizeF: ...
    @overload
    def op_Multiply(size1: SizeF, size2: SizeF) -> SizeF: ...
    @overload
    def op_Multiply(size: SizeF, factor: Single) -> SizeF: ...
    @overload
    def op_Multiply(factor: Single, size: SizeF) -> SizeF: ...
    @overload
    def op_Division(size1: SizeF, size2: SizeF) -> SizeF: ...
    @overload
    def op_Division(size: SizeF, factor: Single) -> SizeF: ...
    @overload
    def op_Addition(size1: SizeF, size2: SizeF) -> SizeF: ...
    @overload
    def op_Subtraction(size1: SizeF, size2: SizeF) -> SizeF: ...
    @overload
    def op_Subtraction(size: SizeF, value: Single) -> SizeF: ...
    @overload
    def op_Addition(size: SizeF, value: Single) -> SizeF: ...
    def op_Equality(size1: SizeF, size2: SizeF) -> bool: ...
    def op_Inequality(size1: SizeF, size2: SizeF) -> bool: ...
    def op_Implicit(size: Size) -> SizeF: ...
    def op_Explicit(point: PointF) -> SizeF: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    def GetHashCode(self) -> int: ...
    def ToString(self) -> str: ...
    @overload
    def Equals(self, other: SizeF) -> bool: ...


class SizeFConverter(TypeConverter):
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object) -> Object: ...


class SolidBrush(Brush):
    def __init__(self, color: Color): ...
    @property
    def Handler(self) -> Object: ...
    @property
    def Instantiator() -> Func: ...
    @property
    def Color(self) -> Color: ...
    @Color.setter
    def Color(self, value: Color) -> None: ...


class SystemColors:
    @property
    def DisabledText() -> Color: ...
    @property
    def ControlText() -> Color: ...
    @property
    def HighlightText() -> Color: ...
    @property
    def Control() -> Color: ...
    @property
    def ControlBackground() -> Color: ...
    @property
    def Highlight() -> Color: ...
    @property
    def WindowBackground() -> Color: ...
    @property
    def SelectionText() -> Color: ...
    @property
    def Selection() -> Color: ...
    @property
    def LinkText() -> Color: ...


class SystemFonts:
    def Cached(systemFont: SystemFont, size: Nullable, decoration: FontDecoration) -> Font: ...
    def ClearCache() -> None: ...
    def Bold(size: Nullable, decoration: FontDecoration) -> Font: ...
    def Default(size: Nullable, decoration: FontDecoration) -> Font: ...
    def Label(size: Nullable, decoration: FontDecoration) -> Font: ...
    def Menu(size: Nullable, decoration: FontDecoration) -> Font: ...
    def MenuBar(size: Nullable, decoration: FontDecoration) -> Font: ...
    def Message(size: Nullable, decoration: FontDecoration) -> Font: ...
    def Palette(size: Nullable, decoration: FontDecoration) -> Font: ...
    def StatusBar(size: Nullable, decoration: FontDecoration) -> Font: ...
    def TitleBar(size: Nullable, decoration: FontDecoration) -> Font: ...
    def ToolTip(size: Nullable, decoration: FontDecoration) -> Font: ...
    def User(size: Nullable, decoration: FontDecoration) -> Font: ...


class ITransformBrush:
    @property
    def Transform(self) -> IMatrix: ...
    @Transform.setter
    def Transform(self, value: IMatrix) -> None: ...


class TextureBrush(Brush):
    def __init__(self, image: Image, opacity: Single): ...
    @property
    def Image(self) -> Image: ...
    @property
    def Handler(self) -> Object: ...
    @property
    def Instantiator() -> Func`3: ...
    @property
    def Transform(self) -> IMatrix: ...
    @Transform.setter
    def Transform(self, value: IMatrix) -> None: ...
    @property
    def Opacity(self) -> Single: ...
    @Opacity.setter
    def Opacity(self, value: Single) -> None: ...


class IHandler:
    @overload
    def Create(self, fileName: str) -> None: ...
    @overload
    def Create(self, stream: Stream) -> None: ...
    @overload
    def Create(self, width: int, height: int, pixelFormat: PixelFormat) -> None: ...
    @overload
    def Create(self, width: int, height: int, graphics: Graphics) -> None: ...
    @overload
    def Create(self, image: Image, width: int, height: int, interpolation: ImageInterpolation) -> None: ...
    @overload
    def Save(self, stream: Stream, format: ImageFormat) -> None: ...
    @overload
    def Save(self, fileName: str, format: ImageFormat) -> None: ...
    def Clone(self, rectangle: Nullable) -> Bitmap: ...
    def GetPixel(self, x: int, y: int) -> Color: ...


class IHandler:


class IHandler:
    @overload
    def Create(self, family: FontFamily, size: Single, style: FontStyle, decoration: FontDecoration) -> None: ...
    @overload
    def Create(self, systemFont: SystemFont, size: Nullable, decoration: FontDecoration) -> None: ...
    @overload
    def Create(self, typeface: FontTypeface, size: Single, decoration: FontDecoration) -> None: ...
    @property
    def XHeight(self) -> Single: ...
    @property
    def Ascent(self) -> Single: ...
    @property
    def Descent(self) -> Single: ...
    @property
    def LineHeight(self) -> Single: ...
    @property
    def Leading(self) -> Single: ...
    @property
    def Baseline(self) -> Single: ...
    @property
    def Size(self) -> Single: ...
    @property
    def FamilyName(self) -> str: ...
    @property
    def FontStyle(self) -> FontStyle: ...
    @property
    def FontDecoration(self) -> FontDecoration: ...
    @property
    def Family(self) -> FontFamily: ...
    @property
    def Typeface(self) -> FontTypeface: ...
    def MeasureString(self, text: str) -> SizeF: ...


class IHandler:
    @property
    def Name(self) -> str: ...
    @property
    def LocalizedName(self) -> str: ...
    @property
    def Typefaces(self) -> Iterable[FontTypeface]: ...
    def Create(self, familyName: str) -> None: ...


class IHandler:
    @property
    def AvailableFontFamilies(self) -> Iterable[FontFamily]: ...
    def FontFamilyAvailable(self, fontFamily: str) -> bool: ...


class IHandler:
    @property
    def Name(self) -> str: ...
    @property
    def LocalizedName(self) -> str: ...
    @property
    def FontStyle(self) -> FontStyle: ...


class IHandler:
    @property
    def PointsPerPixel(self) -> Single: ...
    @property
    def PixelOffsetMode(self) -> PixelOffsetMode: ...
    @PixelOffsetMode.setter
    def PixelOffsetMode(self, value: PixelOffsetMode) -> None: ...
    def CreateFromImage(self, image: Bitmap) -> None: ...
    def DrawLine(self, pen: Pen, startx: Single, starty: Single, endx: Single, endy: Single) -> None: ...
    def DrawLines(self, pen: Pen, points: Iterable[PointF]) -> None: ...
    def DrawPolygon(self, pen: Pen, points: Iterable[PointF]) -> None: ...
    def DrawRectangle(self, pen: Pen, x: Single, y: Single, width: Single, height: Single) -> None: ...
    def FillRectangle(self, brush: Brush, x: Single, y: Single, width: Single, height: Single) -> None: ...
    def FillEllipse(self, brush: Brush, x: Single, y: Single, width: Single, height: Single) -> None: ...
    def DrawEllipse(self, pen: Pen, x: Single, y: Single, width: Single, height: Single) -> None: ...
    def DrawArc(self, pen: Pen, x: Single, y: Single, width: Single, height: Single, startAngle: Single, sweepAngle: Single) -> None: ...
    def FillPie(self, brush: Brush, x: Single, y: Single, width: Single, height: Single, startAngle: Single, sweepAngle: Single) -> None: ...
    def FillPath(self, brush: Brush, path: IGraphicsPath) -> None: ...
    def DrawPath(self, pen: Pen, path: IGraphicsPath) -> None: ...
    @overload
    def DrawImage(self, image: Image, x: Single, y: Single) -> None: ...
    @overload
    def DrawImage(self, image: Image, x: Single, y: Single, width: Single, height: Single) -> None: ...
    @overload
    def DrawImage(self, image: Image, source: RectangleF, destination: RectangleF) -> None: ...
    def DrawText(self, font: Font, brush: SolidBrush, x: Single, y: Single, text: str) -> None: ...
    def MeasureString(self, font: Font, text: str) -> SizeF: ...
    def Flush(self) -> None: ...
    @property
    def AntiAlias(self) -> bool: ...
    @AntiAlias.setter
    def AntiAlias(self, value: bool) -> None: ...
    @property
    def ImageInterpolation(self) -> ImageInterpolation: ...
    @ImageInterpolation.setter
    def ImageInterpolation(self, value: ImageInterpolation) -> None: ...
    @property
    def IsRetained(self) -> bool: ...
    def TranslateTransform(self, offsetX: Single, offsetY: Single) -> None: ...
    def RotateTransform(self, angle: Single) -> None: ...
    def ScaleTransform(self, scaleX: Single, scaleY: Single) -> None: ...
    def MultiplyTransform(self, matrix: IMatrix) -> None: ...
    def SaveTransform(self) -> None: ...
    def RestoreTransform(self) -> None: ...
    @property
    def CurrentTransform(self) -> IMatrix: ...
    @property
    def ClipBounds(self) -> RectangleF: ...
    @overload
    def SetClip(self, rectangle: RectangleF) -> None: ...
    @overload
    def SetClip(self, path: IGraphicsPath) -> None: ...
    def ResetClip(self) -> None: ...
    def Clear(self, brush: SolidBrush) -> None: ...


class IHandler:


class IHandler:
    @overload
    def Create(self, stream: Stream) -> None: ...
    @overload
    def Create(self, fileName: str) -> None: ...
    @overload
    def Create(self, frames: Iterable[IconFrame]) -> None: ...
    @property
    def Frames(self) -> Iterable[IconFrame]: ...


class IHandler:
    @overload
    def Create(self, frame: IconFrame, stream: Stream) -> Object: ...
    @overload
    def Create(self, frame: IconFrame, load: Func) -> Object: ...
    @overload
    def Create(self, frame: IconFrame, bitmap: Bitmap) -> Object: ...
    def GetBitmap(self, frame: IconFrame) -> Bitmap: ...
    def GetPixelSize(self, frame: IconFrame) -> Size: ...


class IHandler:
    @property
    def Size(self) -> Size: ...


class IHandler:
    def Create(self, width: int, height: int, bitsPerPixel: int) -> None: ...
    def Resize(self, width: int, height: int) -> None: ...
    @property
    def Palette(self) -> Palette: ...
    @Palette.setter
    def Palette(self, value: Palette) -> None: ...


class IHandler:
    @overload
    def Create(self, startColor: Color, endColor: Color, startPoint: PointF, endPoint: PointF) -> Object: ...
    @overload
    def Create(self, rectangle: RectangleF, startColor: Color, endColor: Color, angle: Single) -> Object: ...
    def GetTransform(self, widget: LinearGradientBrush) -> IMatrix: ...
    def SetTransform(self, widget: LinearGradientBrush, transform: IMatrix) -> None: ...
    def GetGradientWrap(self, widget: LinearGradientBrush) -> GradientWrapMode: ...
    def SetGradientWrap(self, widget: LinearGradientBrush, gradientWrap: GradientWrapMode) -> None: ...


class IHandler:
    @overload
    def Create(self) -> None: ...
    @overload
    def Create(self, xx: Single, yx: Single, xy: Single, yy: Single, x0: Single, y0: Single) -> None: ...


class IHandler:
    def Create(self, brush: Brush, thickness: Single) -> Object: ...
    def GetBrush(self, widget: Pen) -> Brush: ...
    def GetThickness(self, widget: Pen) -> Single: ...
    def SetThickness(self, widget: Pen, thickness: Single) -> None: ...
    def GetLineJoin(self, widget: Pen) -> PenLineJoin: ...
    def SetLineJoin(self, widget: Pen, lineJoin: PenLineJoin) -> None: ...
    def GetLineCap(self, widget: Pen) -> PenLineCap: ...
    def SetLineCap(self, widget: Pen, lineCap: PenLineCap) -> None: ...
    def GetMiterLimit(self, widget: Pen) -> Single: ...
    def SetMiterLimit(self, widget: Pen, miterLimit: Single) -> None: ...
    def SetDashStyle(self, widget: Pen, dashStyle: DashStyle) -> None: ...


class IHandler:
    def Create(self, startColor: Color, endColor: Color, center: PointF, gradientOrigin: PointF, radius: SizeF) -> Object: ...
    def GetTransform(self, widget: RadialGradientBrush) -> IMatrix: ...
    def SetTransform(self, widget: RadialGradientBrush, transform: IMatrix) -> None: ...
    def GetGradientWrap(self, widget: RadialGradientBrush) -> GradientWrapMode: ...
    def SetGradientWrap(self, widget: RadialGradientBrush, gradientWrap: GradientWrapMode) -> None: ...


class IHandler:
    def Exclude(self, rectangle: Rectangle) -> None: ...
    def Reset(self) -> None: ...
    def Set(self, rectangle: Rectangle) -> None: ...


class IHandler:
    def GetColor(self, widget: SolidBrush) -> Color: ...
    def SetColor(self, widget: SolidBrush, color: Color) -> None: ...
    def Create(self, color: Color) -> Object: ...


class IHandler:
    @property
    def DisabledText(self) -> Color: ...
    @property
    def ControlText(self) -> Color: ...
    @property
    def HighlightText(self) -> Color: ...
    @property
    def Control(self) -> Color: ...
    @property
    def ControlBackground(self) -> Color: ...
    @property
    def Highlight(self) -> Color: ...
    @property
    def WindowBackground(self) -> Color: ...
    @property
    def SelectionText(self) -> Color: ...
    @property
    def Selection(self) -> Color: ...
    @property
    def LinkText(self) -> Color: ...


class IHandler:
    def GetTransform(self, widget: TextureBrush) -> IMatrix: ...
    def SetTransform(self, widget: TextureBrush, transform: IMatrix) -> None: ...
    def SetOpacity(self, widget: TextureBrush, opacity: Single) -> None: ...
    def Create(self, image: Image, opacity: Single) -> Object: ...
