{"version":3,"sources":["webpack:////Users/felix/Dropbox/KoppeDesign/Projekte/cavorit/datalab/packages/transform-plotly/src/index.tsx"],"names":["__webpack_require__","r","__webpack_exports__","d","PlotlyTransform","PlotlyNullTransform","lodash__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_1___default","n","MIMETYPE","defaultProps","mediaType","a","Component","[object Object]","this","plotDivRef","plotDiv","getFigure","figure","props","data","JSON","parse","Object","isFrozen","layout","Plotly","newPlot","nextProps","redraw","style","height","autosize","createElement","ref"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,oCAAAE,IAAAJ,EAAAG,EAAAD,EAAA,wCAAAG,IAAA,IAAAC,EAAAN,EAAA,KAAAO,EAAAP,EAAA,GAAAQ,EAAAR,EAAAS,EAAAF,GA4BA,MACMG,EAAW,iCAOXL,EAAsB,IAAM,KAClCA,EAAoBK,SATE,0BAUtBL,EAAoBM,aAAe,CACjCC,UAXoB,2BAcf,MAAMR,UAAwBI,EAAAK,EAAMC,UAA3CC,kCAsCEC,KAAAC,WAAa,CAACC,IACZF,KAAKE,QAAUA,IAGjBF,KAAAG,UAAY,MACV,MAAMC,EAASJ,KAAKK,MAAMC,KAC1B,GAAsB,iBAAXF,EACT,OAAOG,KAAKC,MAAMJ,GAKpB,GAAIK,OAAOC,SAASN,GAClB,OAAOK,OAAAnB,EAAA,UAAAmB,CAAUL,GAGnB,MAAME,KAAEA,EAAO,GAAEK,OAAEA,EAAS,IAAOP,EAEnC,MAAO,CAAEE,OAAMK,YAvCjBZ,oBAEE,MAAMK,EAASJ,KAAKG,YACpBH,KAAKY,OAAS5B,EAAQ,MACtBgB,KAAKY,OAAOC,QAAQb,KAAKE,QAASE,EAAOE,KAAMF,EAAOO,QAGxDZ,sBAAsBe,GACpB,OAAOd,KAAKK,MAAMC,OAASQ,EAAUR,KAGvCP,qBACE,MAAMK,EAASJ,KAAKG,YACfH,KAAKE,UAGVF,KAAKE,QAAQI,KAAOF,EAAOE,KAC3BN,KAAKE,QAAQS,OAASP,EAAOO,OAC7BX,KAAKY,OAAOG,OAAOf,KAAKE,UAwB1BH,SACE,MAAMY,OAAEA,GAAWX,KAAKG,YAClBa,EAA6B,GAInC,OAHIL,GAAUA,EAAOM,SAAWN,EAAOO,WACrCF,EAAMC,OAASN,EAAOM,QAEjBzB,EAAAK,EAAAsB,cAAA,OAAKC,IAAKpB,KAAKC,WAAYe,MAAOA,KAhEpC5B,EAAAM,SAAWA,EAEXN,EAAAO,aAAe,CACpBC,UAAWF,GAkEAR,EAAA","file":"plotly-2e60e857908b4f29f177.bundle.js","sourcesContent":["/* eslint class-methods-use-this: 0 */\nimport { cloneDeep } from \"lodash\";\nimport React from \"react\";\n\ninterface Props {\n  data: string | object;\n  mediaType: \"application/vnd.plotly.v1+json\";\n}\n\ntype ObjectType = object;\n\ninterface FigureLayout extends ObjectType {\n  height?: string;\n  autosize?: boolean;\n}\n\ninterface Figure extends ObjectType {\n  data: object;\n  layout: FigureLayout;\n}\n\ndeclare class PlotlyHTMLElement extends HTMLDivElement {\n  data: object;\n  layout: object;\n  newPlot: () => void;\n  redraw: () => void;\n}\n\nconst NULL_MIMETYPE = \"text/vnd.plotly.v1+html\";\nconst MIMETYPE = \"application/vnd.plotly.v1+json\";\n\n/*\n * As part of the init notebook mode, Plotly sneaks a <script> tag in to load\n * the plotlyjs lib. We have already loaded this though, so we \"handle\" the\n * transform by doing nothing and returning null.\n */\nconst PlotlyNullTransform = () => null;\nPlotlyNullTransform.MIMETYPE = NULL_MIMETYPE;\nPlotlyNullTransform.defaultProps = {\n  mediaType: NULL_MIMETYPE\n};\n\nexport class PlotlyTransform extends React.Component<Props> {\n  static MIMETYPE = MIMETYPE;\n\n  static defaultProps = {\n    mediaType: MIMETYPE\n  };\n\n  plotDiv?: PlotlyHTMLElement | null;\n  Plotly!: {\n    newPlot: (\n      div: PlotlyHTMLElement | null | undefined,\n      data: object,\n      layout: FigureLayout\n    ) => void;\n    redraw: (div?: PlotlyHTMLElement) => void;\n  };\n\n  componentDidMount(): void {\n    // Handle case of either string to be `JSON.parse`d or pure object\n    const figure = this.getFigure();\n    this.Plotly = require(\"plotly.js-dist\");\n    this.Plotly.newPlot(this.plotDiv, figure.data, figure.layout);\n  }\n\n  shouldComponentUpdate(nextProps: Props): boolean {\n    return this.props.data !== nextProps.data;\n  }\n\n  componentDidUpdate() {\n    const figure = this.getFigure();\n    if (!this.plotDiv) {\n      return;\n    }\n    this.plotDiv.data = figure.data;\n    this.plotDiv.layout = figure.layout;\n    this.Plotly.redraw(this.plotDiv);\n  }\n\n  plotDivRef = (plotDiv: PlotlyHTMLElement | null): void => {\n    this.plotDiv = plotDiv;\n  };\n\n  getFigure = (): Figure => {\n    const figure = this.props.data;\n    if (typeof figure === \"string\") {\n      return JSON.parse(figure);\n    }\n\n    // The Plotly API *mutates* the figure to include a UID, which means\n    // they won't take our frozen objects\n    if (Object.isFrozen(figure)) {\n      return cloneDeep(figure) as Figure;\n    }\n\n    const { data = {}, layout = {} } = figure as Figure;\n\n    return { data, layout };\n  };\n\n  render() {\n    const { layout } = this.getFigure();\n    const style: React.CSSProperties = {};\n    if (layout && layout.height && !layout.autosize) {\n      style.height = layout.height;\n    }\n    return <div ref={this.plotDivRef} style={style} />;\n  }\n}\n\nexport { PlotlyNullTransform };\nexport default PlotlyTransform;\n"],"sourceRoot":""}