{"version":3,"sources":["webpack:///./node_modules/@nteract/transform-vega/src/mime.ts","webpack:///./node_modules/@nteract/transform-vega/src/external.ts","webpack:///./node_modules/@nteract/transform-vega/src/react.tsx","webpack:///./node_modules/@nteract/transform-vega/src/index.tsx"],"names":["MEDIA_TYPES","kind","version","vegaLevel","mediaType","schemaPrefix","deepThaw","spec","JSON","parse","stringify","props","super","this","anchorRef","ref","current","result","anchor","options","defaults","actions","mode","then","default","vegaEmbed","resultHandler","error","errorHandler","console","nextProps","callEmbedder","Vega","embed","data","onResult","onError","MIMETYPE","Vega2","Vega3","Vega4","Vega5","VegaLite1","VegaLite2","VegaLite3"],"mappings":"sHAuBO,MAAMA,EAA8B,CACzC,+BAAgC,CAC9BC,KAAM,OACNC,QAAS,IACTC,UAAW,EACXC,UAAW,+BACXC,aAAc,yCAEhB,+BAAgC,CAC9BJ,KAAM,OACNC,QAAS,IACTC,UAAW,EACXC,UAAW,+BACXC,aAAc,yCAEhB,+BAAgC,CAC9BJ,KAAM,OACNC,QAAS,IACTC,UAAW,EACXC,UAAW,+BACXC,aAAc,yCAEhB,+BAAgC,CAC9BJ,KAAM,OACNC,QAAS,IACTC,UAAW,EACXC,UAAW,+BACXC,aAAc,yCAEhB,mCAAoC,CAClCJ,KAAM,YACNC,QAAS,IACTC,UAAW,EACXC,UAAW,mCACXC,aAAc,8CAEhB,mCAAoC,CAClCJ,KAAM,YACNC,QAAS,IACTC,UAAW,EACXC,UAAW,mCACXC,aAAc,8CAEhB,mCAAoC,CAClCJ,KAAM,YACNC,QAAS,IACTC,UAAW,EACXC,UAAW,mCACXC,aAAc,+C,0SC7BlB,SAASC,EAASC,GAChB,OAAOC,KAAKC,MAAMD,KAAKE,UAAUH,I,0SC7B5B,MAAM,UACH,YAIR,YAAYI,GACVC,MAAMD,GACNE,KAAKC,UAAY,cAGnB,SACE,OAAO,uBAAKC,IAAKF,KAAKC,YAGlB,e,yCACJ,GAA+B,OAA3BD,KAAKC,UAAUE,QAEnB,IACE,MAAMC,QDxBL,SACLC,EACAd,EACAG,EACAY,EAAgC,I,yCAEhC,MAAMjB,EAAUF,EAAYI,GACtBgB,EAAW,CACfC,SAAS,EACTC,KAAMpB,EAAQD,MAGhB,OAAQC,EAAQC,WACd,KAAK,EACH,aAAa,8DAAiCoB,KAC5C,EAAGC,QAASC,KACV,oBAAUA,EAAV,CAAqBP,EAAQ,OAAF,sCAAME,GAAaD,GAAO,CAAEZ,WAG7D,KAAK,EACH,aAAa,2EAAiCgB,KAC5C,EAAGC,QAASC,KACVA,EAAUP,EAAQZ,EAASC,GAAO,OAAF,wBAAMa,GAAaD,KAGzD,KAAK,EACL,KAAK,EACH,aAAa,oEAAqBI,KAChC,EAAGC,QAASC,KACVA,EAAUP,EAAQZ,EAASC,GAAO,OAAF,wBAAMa,GAAaD,SCLlC,CACnBN,KAAKC,UAAUE,QACfH,KAAKF,MAAMP,UACXS,KAAKF,MAAMJ,KACXM,KAAKF,MAAMQ,SAGTN,KAAKF,MAAMe,eACbb,KAAKF,MAAMe,cAAcT,GAG7B,MAAOU,IACJd,KAAKF,MAAMiB,cAAgBC,QAAQF,OAAOA,OAI/C,sBAAsBG,GACpB,OAAOjB,KAAKF,MAAMJ,OAASuB,EAAUvB,KAGvC,oBACEM,KAAKkB,eAAeR,OAGtB,qBACEV,KAAKkB,eAAeR,QCzDxB,qYAcO,MAAMS,EAAQ5B,IACnB,MAAM6B,EAAQ,EAAEC,OAAMf,UAASgB,WAAUC,aACvC,gBAAC,EAAS,CACRhC,UAAWA,EACXG,KAAM2B,EACNf,QAASA,EACTO,cAAeS,EACfP,aAAcQ,IAIlB,OADAH,EAAMI,SAAWjC,EACV6B,GAGIK,EAAQN,EAAK,gCACbO,EAAQP,EAAK,gCACbQ,EAAQR,EAAK,gCACbS,EAAQT,EAAK,gCACbU,EAAYV,EAAK,oCACjBW,EAAYX,EAAK,oCACjBY,EAAYZ,EAAK","file":"vega-transform-73392a6eebb2595bb734.bundle.js","sourcesContent":["/** Single MIME string. */\nexport type VegaMediaType =\n  | \"application/vnd.vega.v2+json\"\n  | \"application/vnd.vega.v3+json\"\n  | \"application/vnd.vega.v4+json\"\n  | \"application/vnd.vega.v5+json\"\n  | \"application/vnd.vegalite.v1+json\"\n  | \"application/vnd.vegalite.v2+json\"\n  | \"application/vnd.vegalite.v3+json\";\n\n/** Information about a particular Vega or Vega Lite version. */\nexport interface VegaMediaTypeInfo<T extends VegaMediaType> {\n  kind: \"vega\" | \"vega-lite\",\n  version: string,\n  vegaLevel: 2 | 3 | 4 | 5,\n  mediaType: T,\n  schemaPrefix: string,\n}\n\n/** Information about all known Vega or Vega Lite versions. */\nexport type VegaMediaTypes = { [K in VegaMediaType]: VegaMediaTypeInfo<K> }\n\n/** All the information. All of it. On Vega (Lite) media types, at least. */\nexport const MEDIA_TYPES: VegaMediaTypes = {\n  \"application/vnd.vega.v2+json\": {\n    kind: \"vega\",\n    version: \"2\",\n    vegaLevel: 2,\n    mediaType: \"application/vnd.vega.v2+json\",\n    schemaPrefix: \"https://vega.github.io/schema/vega/v2\",\n  },\n  \"application/vnd.vega.v3+json\": {\n    kind: \"vega\",\n    version: \"3\",\n    vegaLevel: 3,\n    mediaType: \"application/vnd.vega.v3+json\",\n    schemaPrefix: \"https://vega.github.io/schema/vega/v3\",\n  },\n  \"application/vnd.vega.v4+json\": {\n    kind: \"vega\",\n    version: \"4\",\n    vegaLevel: 4,\n    mediaType: \"application/vnd.vega.v4+json\",\n    schemaPrefix: \"https://vega.github.io/schema/vega/v4\",\n  },\n  \"application/vnd.vega.v5+json\": {\n    kind: \"vega\",\n    version: \"5\",\n    vegaLevel: 5,\n    mediaType: \"application/vnd.vega.v5+json\",\n    schemaPrefix: \"https://vega.github.io/schema/vega/v5\",\n  },\n  \"application/vnd.vegalite.v1+json\": {\n    kind: \"vega-lite\",\n    version: \"1\",\n    vegaLevel: 2,\n    mediaType: \"application/vnd.vegalite.v1+json\",\n    schemaPrefix: \"https://vega.github.io/schema/vega-lite/v1\",\n  },\n  \"application/vnd.vegalite.v2+json\": {\n    kind: \"vega-lite\",\n    version: \"2\",\n    vegaLevel: 3,\n    mediaType: \"application/vnd.vegalite.v2+json\",\n    schemaPrefix: \"https://vega.github.io/schema/vega-lite/v2\",\n  },\n  \"application/vnd.vegalite.v3+json\": {\n    kind: \"vega-lite\",\n    version: \"3\",\n    vegaLevel: 5,\n    mediaType: \"application/vnd.vegalite.v3+json\",\n    schemaPrefix: \"https://vega.github.io/schema/vega-lite/v3\",\n  },\n};\n","import { promisify } from \"util\";\nimport { MEDIA_TYPES, VegaMediaType } from \"./mime\";\n\nexport interface VegaOptions {\n  renderer: \"canvas\" | \"svg\";\n}\n\n/** Call the external library to do the embedding. */\nexport async function embed(\n  anchor: HTMLElement,\n  mediaType: VegaMediaType,\n  spec: Readonly<{}>,\n  options: Partial<VegaOptions> = {},\n): Promise<any> {\n  const version = MEDIA_TYPES[mediaType];\n  const defaults = {\n    actions: false,\n    mode: version.kind,\n  };\n\n  switch (version.vegaLevel) {\n    case 2:\n      return await import(\"@nteract/vega-embed-v2\").then(\n        ({ default: vegaEmbed }) =>\n          promisify(vegaEmbed)(anchor, {...defaults, ...options, spec})\n      );\n\n    case 3:\n      return await import(\"@nteract/vega-embed-v3\").then(\n        ({ default: vegaEmbed }) =>\n          vegaEmbed(anchor, deepThaw(spec), {...defaults, ...options})\n      );\n\n    case 4:\n    case 5:\n      return await import(\"vega-embed\").then(\n        ({ default: vegaEmbed }) =>\n          vegaEmbed(anchor, deepThaw(spec), {...defaults, ...options})\n      );\n  }\n}\n\nfunction deepThaw(spec: Readonly<{}>): {} {\n  return JSON.parse(JSON.stringify(spec));\n}\n","import * as React from \"react\";\nimport { embed, VegaOptions } from \"./external\";\nimport { VegaMediaType } from \"./mime\";\n\n/** Props needed for embedding a certain Vega (Lite) media type. */\nexport interface VegaEmbedProps<T extends VegaMediaType> {\n  spec: Readonly<{}>;\n  mediaType: T;\n  options?: Partial<VegaOptions>,\n  resultHandler?: (result: any) => void;\n  errorHandler?: (error: Error) => void;\n}\n\n/** React component embedding a certain Vega (Lite) media type. */\nexport class VegaEmbed<T extends VegaMediaType>\n  extends React.Component<VegaEmbedProps<T>> {\n\n  private anchorRef: React.RefObject<HTMLDivElement>;\n\n  constructor(props: VegaEmbedProps<T>) {\n    super(props);\n    this.anchorRef = React.createRef<HTMLDivElement>();\n  }\n\n  render(): JSX.Element {\n    return <div ref={this.anchorRef} />;\n  }\n\n  async callEmbedder(): Promise<void> {\n    if (this.anchorRef.current === null) { return; }\n\n    try {\n      const result = await embed(\n        this.anchorRef.current,\n        this.props.mediaType,\n        this.props.spec,\n        this.props.options,\n      );\n\n      if (this.props.resultHandler) {\n        this.props.resultHandler(result);\n      }\n    }\n    catch (error) {\n      (this.props.errorHandler || console.error)(error);\n    }\n  }\n\n  shouldComponentUpdate(nextProps: VegaEmbedProps<T>): boolean {\n    return this.props.spec !== nextProps.spec;\n  }\n\n  componentDidMount(): void {\n    this.callEmbedder().then();\n  }\n\n  componentDidUpdate(): void {\n    this.callEmbedder().then();\n  }\n}\n","import * as React from \"react\";\nimport { VegaOptions } from \"./external\";\nimport { VegaMediaType } from \"./mime\";\nimport { VegaEmbed } from \"./react\";\n\nexport { VegaOptions, VegaMediaType };\n\nexport interface VegaProps  {\n  data: Readonly<{}>;\n  options?: Partial<VegaOptions>;\n  onResult?: (result: any) => void;\n  onError?: (error: Error) => void;\n}\n\nexport const Vega = (mediaType: VegaMediaType) => {\n  const embed = ({data, options, onResult, onError}: VegaProps)  =>\n    <VegaEmbed\n      mediaType={mediaType}\n      spec={data}\n      options={options}\n      resultHandler={onResult}\n      errorHandler={onError}\n    />;\n\n  embed.MIMETYPE = mediaType;\n  return embed;\n};\n\nexport const Vega2 = Vega(\"application/vnd.vega.v2+json\");\nexport const Vega3 = Vega(\"application/vnd.vega.v3+json\");\nexport const Vega4 = Vega(\"application/vnd.vega.v4+json\");\nexport const Vega5 = Vega(\"application/vnd.vega.v5+json\");\nexport const VegaLite1 = Vega(\"application/vnd.vegalite.v1+json\");\nexport const VegaLite2 = Vega(\"application/vnd.vegalite.v2+json\");\nexport const VegaLite3 = Vega(\"application/vnd.vegalite.v3+json\");\n"],"sourceRoot":""}