# coding: utf-8

"""
    Budgea API Documentation

    see https://www.budget-insight.com/budgea-api  # noqa: E501

    OpenAPI spec version: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class AccountLog(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'balance': 'float',
        'coming': 'float',
        'error': 'str',
        'error_message': 'str',
        'id_account': 'int',
        'id_connection_log': 'int',
        'id_connector': 'int',
        'timestamp': 'datetime'
    }

    attribute_map = {
        'balance': 'balance',
        'coming': 'coming',
        'error': 'error',
        'error_message': 'error_message',
        'id_account': 'id_account',
        'id_connection_log': 'id_connection_log',
        'id_connector': 'id_connector',
        'timestamp': 'timestamp'
    }

    def __init__(self, balance=None, coming=0.0, error=None, error_message=None, id_account=None, id_connection_log=None, id_connector=None, timestamp=None):  # noqa: E501
        """AccountLog - a model defined in OpenAPI"""  # noqa: E501

        self._balance = None
        self._coming = None
        self._error = None
        self._error_message = None
        self._id_account = None
        self._id_connection_log = None
        self._id_connector = None
        self._timestamp = None
        self.discriminator = None

        self.balance = balance
        if coming is not None:
            self.coming = coming
        if error is not None:
            self.error = error
        if error_message is not None:
            self.error_message = error_message
        self.id_account = id_account
        if id_connection_log is not None:
            self.id_connection_log = id_connection_log
        if id_connector is not None:
            self.id_connector = id_connector
        self.timestamp = timestamp

    @property
    def balance(self):
        """Gets the balance of this AccountLog.  # noqa: E501

        Balanced recorded  # noqa: E501

        :return: The balance of this AccountLog.  # noqa: E501
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this AccountLog.

        Balanced recorded  # noqa: E501

        :param balance: The balance of this AccountLog.  # noqa: E501
        :type: float
        """
        if balance is None:
            raise ValueError("Invalid value for `balance`, must not be `None`")  # noqa: E501

        self._balance = balance

    @property
    def coming(self):
        """Gets the coming of this AccountLog.  # noqa: E501

        Coming debit recorded  # noqa: E501

        :return: The coming of this AccountLog.  # noqa: E501
        :rtype: float
        """
        return self._coming

    @coming.setter
    def coming(self, coming):
        """Sets the coming of this AccountLog.

        Coming debit recorded  # noqa: E501

        :param coming: The coming of this AccountLog.  # noqa: E501
        :type: float
        """

        self._coming = coming

    @property
    def error(self):
        """Gets the error of this AccountLog.  # noqa: E501

        If fail, contains the error code  # noqa: E501

        :return: The error of this AccountLog.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this AccountLog.

        If fail, contains the error code  # noqa: E501

        :param error: The error of this AccountLog.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def error_message(self):
        """Gets the error_message of this AccountLog.  # noqa: E501

        If fail, error message received from bank or provider  # noqa: E501

        :return: The error_message of this AccountLog.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this AccountLog.

        If fail, error message received from bank or provider  # noqa: E501

        :param error_message: The error_message of this AccountLog.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    @property
    def id_account(self):
        """Gets the id_account of this AccountLog.  # noqa: E501

        ID of the related account  # noqa: E501

        :return: The id_account of this AccountLog.  # noqa: E501
        :rtype: int
        """
        return self._id_account

    @id_account.setter
    def id_account(self, id_account):
        """Sets the id_account of this AccountLog.

        ID of the related account  # noqa: E501

        :param id_account: The id_account of this AccountLog.  # noqa: E501
        :type: int
        """
        if id_account is None:
            raise ValueError("Invalid value for `id_account`, must not be `None`")  # noqa: E501

        self._id_account = id_account

    @property
    def id_connection_log(self):
        """Gets the id_connection_log of this AccountLog.  # noqa: E501

        ID of the related connection log  # noqa: E501

        :return: The id_connection_log of this AccountLog.  # noqa: E501
        :rtype: int
        """
        return self._id_connection_log

    @id_connection_log.setter
    def id_connection_log(self, id_connection_log):
        """Sets the id_connection_log of this AccountLog.

        ID of the related connection log  # noqa: E501

        :param id_connection_log: The id_connection_log of this AccountLog.  # noqa: E501
        :type: int
        """

        self._id_connection_log = id_connection_log

    @property
    def id_connector(self):
        """Gets the id_connector of this AccountLog.  # noqa: E501

        provider id  # noqa: E501

        :return: The id_connector of this AccountLog.  # noqa: E501
        :rtype: int
        """
        return self._id_connector

    @id_connector.setter
    def id_connector(self, id_connector):
        """Sets the id_connector of this AccountLog.

        provider id  # noqa: E501

        :param id_connector: The id_connector of this AccountLog.  # noqa: E501
        :type: int
        """

        self._id_connector = id_connector

    @property
    def timestamp(self):
        """Gets the timestamp of this AccountLog.  # noqa: E501

        Timestamp of log  # noqa: E501

        :return: The timestamp of this AccountLog.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this AccountLog.

        Timestamp of log  # noqa: E501

        :param timestamp: The timestamp of this AccountLog.  # noqa: E501
        :type: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountLog):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
