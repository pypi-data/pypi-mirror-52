# coding: utf-8

"""
    Budgea API Documentation

    see https://www.budget-insight.com/budgea-api  # noqa: E501

    OpenAPI spec version: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ConfigLog(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'key': 'str',
        'new_value': 'str',
        'previous_value': 'str',
        'timestamp': 'datetime',
        'type': 'str'
    }

    attribute_map = {
        'id': 'id',
        'key': 'key',
        'new_value': 'new_value',
        'previous_value': 'previous_value',
        'timestamp': 'timestamp',
        'type': 'type'
    }

    def __init__(self, id=None, key=None, new_value=None, previous_value=None, timestamp=None, type=None):  # noqa: E501
        """ConfigLog - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._key = None
        self._new_value = None
        self._previous_value = None
        self._timestamp = None
        self._type = None
        self.discriminator = None

        self.id = id
        self.key = key
        if new_value is not None:
            self.new_value = new_value
        if previous_value is not None:
            self.previous_value = previous_value
        self.timestamp = timestamp
        self.type = type

    @property
    def id(self):
        """Gets the id of this ConfigLog.  # noqa: E501


        :return: The id of this ConfigLog.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ConfigLog.


        :param id: The id of this ConfigLog.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def key(self):
        """Gets the key of this ConfigLog.  # noqa: E501


        :return: The key of this ConfigLog.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this ConfigLog.


        :param key: The key of this ConfigLog.  # noqa: E501
        :type: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")  # noqa: E501

        self._key = key

    @property
    def new_value(self):
        """Gets the new_value of this ConfigLog.  # noqa: E501


        :return: The new_value of this ConfigLog.  # noqa: E501
        :rtype: str
        """
        return self._new_value

    @new_value.setter
    def new_value(self, new_value):
        """Sets the new_value of this ConfigLog.


        :param new_value: The new_value of this ConfigLog.  # noqa: E501
        :type: str
        """

        self._new_value = new_value

    @property
    def previous_value(self):
        """Gets the previous_value of this ConfigLog.  # noqa: E501


        :return: The previous_value of this ConfigLog.  # noqa: E501
        :rtype: str
        """
        return self._previous_value

    @previous_value.setter
    def previous_value(self, previous_value):
        """Sets the previous_value of this ConfigLog.


        :param previous_value: The previous_value of this ConfigLog.  # noqa: E501
        :type: str
        """

        self._previous_value = previous_value

    @property
    def timestamp(self):
        """Gets the timestamp of this ConfigLog.  # noqa: E501

        Timestamp of when the configuration key was changed  # noqa: E501

        :return: The timestamp of this ConfigLog.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this ConfigLog.

        Timestamp of when the configuration key was changed  # noqa: E501

        :param timestamp: The timestamp of this ConfigLog.  # noqa: E501
        :type: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def type(self):
        """Gets the type of this ConfigLog.  # noqa: E501

        Action done on the config: add, update or delete  # noqa: E501

        :return: The type of this ConfigLog.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ConfigLog.

        Action done on the config: add, update or delete  # noqa: E501

        :param type: The type of this ConfigLog.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigLog):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
