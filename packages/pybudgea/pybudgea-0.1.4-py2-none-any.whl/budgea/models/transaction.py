# coding: utf-8

"""
    Budgea API Documentation

    see https://www.budget-insight.com/budgea-api  # noqa: E501

    OpenAPI spec version: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Transaction(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'active': 'bool',
        'application_date': 'date',
        'bdate': 'date',
        'card': 'str',
        'coming': 'bool',
        'comment': 'str',
        'commission': 'float',
        'commission_currency': 'object',
        'counterparty': 'str',
        'country': 'str',
        'date': 'date',
        'date_scraped': 'datetime',
        'deleted': 'datetime',
        'gross_value': 'float',
        'id': 'int',
        'id_account': 'int',
        'id_category': 'int',
        'id_cluster': 'int',
        'last_update': 'datetime',
        'nature': 'str',
        'original_currency': 'object',
        'original_value': 'float',
        'original_wording': 'str',
        'rdate': 'date',
        'simplified_wording': 'str',
        'state': 'str',
        'stemmed_wording': 'str',
        'value': 'float',
        'vdate': 'date',
        'webid': 'str',
        'wording': 'str'
    }

    attribute_map = {
        'active': 'active',
        'application_date': 'application_date',
        'bdate': 'bdate',
        'card': 'card',
        'coming': 'coming',
        'comment': 'comment',
        'commission': 'commission',
        'commission_currency': 'commission_currency',
        'counterparty': 'counterparty',
        'country': 'country',
        'date': 'date',
        'date_scraped': 'date_scraped',
        'deleted': 'deleted',
        'gross_value': 'gross_value',
        'id': 'id',
        'id_account': 'id_account',
        'id_category': 'id_category',
        'id_cluster': 'id_cluster',
        'last_update': 'last_update',
        'nature': 'nature',
        'original_currency': 'original_currency',
        'original_value': 'original_value',
        'original_wording': 'original_wording',
        'rdate': 'rdate',
        'simplified_wording': 'simplified_wording',
        'state': 'state',
        'stemmed_wording': 'stemmed_wording',
        'value': 'value',
        'vdate': 'vdate',
        'webid': 'webid',
        'wording': 'wording'
    }

    def __init__(self, active=True, application_date=None, bdate=None, card=None, coming=None, comment=None, commission=None, commission_currency=None, counterparty=None, country=None, date=None, date_scraped=None, deleted=None, gross_value=None, id=None, id_account=None, id_category=None, id_cluster=None, last_update=None, nature='inconnu', original_currency=None, original_value=None, original_wording=None, rdate=None, simplified_wording=None, state='new', stemmed_wording=None, value=None, vdate=None, webid=None, wording=None):  # noqa: E501
        """Transaction - a model defined in OpenAPI"""  # noqa: E501

        self._active = None
        self._application_date = None
        self._bdate = None
        self._card = None
        self._coming = None
        self._comment = None
        self._commission = None
        self._commission_currency = None
        self._counterparty = None
        self._country = None
        self._date = None
        self._date_scraped = None
        self._deleted = None
        self._gross_value = None
        self._id = None
        self._id_account = None
        self._id_category = None
        self._id_cluster = None
        self._last_update = None
        self._nature = None
        self._original_currency = None
        self._original_value = None
        self._original_wording = None
        self._rdate = None
        self._simplified_wording = None
        self._state = None
        self._stemmed_wording = None
        self._value = None
        self._vdate = None
        self._webid = None
        self._wording = None
        self.discriminator = None

        self.active = active
        if application_date is not None:
            self.application_date = application_date
        if bdate is not None:
            self.bdate = bdate
        if card is not None:
            self.card = card
        self.coming = coming
        if comment is not None:
            self.comment = comment
        if commission is not None:
            self.commission = commission
        if commission_currency is not None:
            self.commission_currency = commission_currency
        if counterparty is not None:
            self.counterparty = counterparty
        if country is not None:
            self.country = country
        self.date = date
        self.date_scraped = date_scraped
        if deleted is not None:
            self.deleted = deleted
        if gross_value is not None:
            self.gross_value = gross_value
        self.id = id
        self.id_account = id_account
        if id_category is not None:
            self.id_category = id_category
        if id_cluster is not None:
            self.id_cluster = id_cluster
        if last_update is not None:
            self.last_update = last_update
        self.nature = nature
        if original_currency is not None:
            self.original_currency = original_currency
        if original_value is not None:
            self.original_value = original_value
        self.original_wording = original_wording
        self.rdate = rdate
        self.simplified_wording = simplified_wording
        self.state = state
        self.stemmed_wording = stemmed_wording
        if value is not None:
            self.value = value
        if vdate is not None:
            self.vdate = vdate
        if webid is not None:
            self.webid = webid
        if wording is not None:
            self.wording = wording

    @property
    def active(self):
        """Gets the active of this Transaction.  # noqa: E501

        If false, PFM services will ignore this transaction  # noqa: E501

        :return: The active of this Transaction.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Transaction.

        If false, PFM services will ignore this transaction  # noqa: E501

        :param active: The active of this Transaction.  # noqa: E501
        :type: bool
        """
        if active is None:
            raise ValueError("Invalid value for `active`, must not be `None`")  # noqa: E501

        self._active = active

    @property
    def application_date(self):
        """Gets the application_date of this Transaction.  # noqa: E501

        Date considered by PFM services. It is used to change the month of a transaction, for example.  # noqa: E501

        :return: The application_date of this Transaction.  # noqa: E501
        :rtype: date
        """
        return self._application_date

    @application_date.setter
    def application_date(self, application_date):
        """Sets the application_date of this Transaction.

        Date considered by PFM services. It is used to change the month of a transaction, for example.  # noqa: E501

        :param application_date: The application_date of this Transaction.  # noqa: E501
        :type: date
        """

        self._application_date = application_date

    @property
    def bdate(self):
        """Gets the bdate of this Transaction.  # noqa: E501

        Date used by the bank for the transaction  # noqa: E501

        :return: The bdate of this Transaction.  # noqa: E501
        :rtype: date
        """
        return self._bdate

    @bdate.setter
    def bdate(self, bdate):
        """Sets the bdate of this Transaction.

        Date used by the bank for the transaction  # noqa: E501

        :param bdate: The bdate of this Transaction.  # noqa: E501
        :type: date
        """

        self._bdate = bdate

    @property
    def card(self):
        """Gets the card of this Transaction.  # noqa: E501

        Card number associated to the transaction  # noqa: E501

        :return: The card of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._card

    @card.setter
    def card(self, card):
        """Sets the card of this Transaction.

        Card number associated to the transaction  # noqa: E501

        :param card: The card of this Transaction.  # noqa: E501
        :type: str
        """

        self._card = card

    @property
    def coming(self):
        """Gets the coming of this Transaction.  # noqa: E501

        If true, this transaction hasn't been yet debited  # noqa: E501

        :return: The coming of this Transaction.  # noqa: E501
        :rtype: bool
        """
        return self._coming

    @coming.setter
    def coming(self, coming):
        """Sets the coming of this Transaction.

        If true, this transaction hasn't been yet debited  # noqa: E501

        :param coming: The coming of this Transaction.  # noqa: E501
        :type: bool
        """
        if coming is None:
            raise ValueError("Invalid value for `coming`, must not be `None`")  # noqa: E501

        self._coming = coming

    @property
    def comment(self):
        """Gets the comment of this Transaction.  # noqa: E501

        User comment  # noqa: E501

        :return: The comment of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this Transaction.

        User comment  # noqa: E501

        :param comment: The comment of this Transaction.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def commission(self):
        """Gets the commission of this Transaction.  # noqa: E501

        Commission taken on the transaction  # noqa: E501

        :return: The commission of this Transaction.  # noqa: E501
        :rtype: float
        """
        return self._commission

    @commission.setter
    def commission(self, commission):
        """Sets the commission of this Transaction.

        Commission taken on the transaction  # noqa: E501

        :param commission: The commission of this Transaction.  # noqa: E501
        :type: float
        """

        self._commission = commission

    @property
    def commission_currency(self):
        """Gets the commission_currency of this Transaction.  # noqa: E501

        Commission currency  # noqa: E501

        :return: The commission_currency of this Transaction.  # noqa: E501
        :rtype: object
        """
        return self._commission_currency

    @commission_currency.setter
    def commission_currency(self, commission_currency):
        """Sets the commission_currency of this Transaction.

        Commission currency  # noqa: E501

        :param commission_currency: The commission_currency of this Transaction.  # noqa: E501
        :type: object
        """

        self._commission_currency = commission_currency

    @property
    def counterparty(self):
        """Gets the counterparty of this Transaction.  # noqa: E501

        Counterparty  # noqa: E501

        :return: The counterparty of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._counterparty

    @counterparty.setter
    def counterparty(self, counterparty):
        """Sets the counterparty of this Transaction.

        Counterparty  # noqa: E501

        :param counterparty: The counterparty of this Transaction.  # noqa: E501
        :type: str
        """

        self._counterparty = counterparty

    @property
    def country(self):
        """Gets the country of this Transaction.  # noqa: E501

        Original country  # noqa: E501

        :return: The country of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Transaction.

        Original country  # noqa: E501

        :param country: The country of this Transaction.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def date(self):
        """Gets the date of this Transaction.  # noqa: E501

        Debit date  # noqa: E501

        :return: The date of this Transaction.  # noqa: E501
        :rtype: date
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this Transaction.

        Debit date  # noqa: E501

        :param date: The date of this Transaction.  # noqa: E501
        :type: date
        """
        if date is None:
            raise ValueError("Invalid value for `date`, must not be `None`")  # noqa: E501

        self._date = date

    @property
    def date_scraped(self):
        """Gets the date_scraped of this Transaction.  # noqa: E501

        Date when the transaction has been seen  # noqa: E501

        :return: The date_scraped of this Transaction.  # noqa: E501
        :rtype: datetime
        """
        return self._date_scraped

    @date_scraped.setter
    def date_scraped(self, date_scraped):
        """Sets the date_scraped of this Transaction.

        Date when the transaction has been seen  # noqa: E501

        :param date_scraped: The date_scraped of this Transaction.  # noqa: E501
        :type: datetime
        """
        if date_scraped is None:
            raise ValueError("Invalid value for `date_scraped`, must not be `None`")  # noqa: E501

        self._date_scraped = date_scraped

    @property
    def deleted(self):
        """Gets the deleted of this Transaction.  # noqa: E501

        If set, this transaction has been removed from the bank  # noqa: E501

        :return: The deleted of this Transaction.  # noqa: E501
        :rtype: datetime
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Transaction.

        If set, this transaction has been removed from the bank  # noqa: E501

        :param deleted: The deleted of this Transaction.  # noqa: E501
        :type: datetime
        """

        self._deleted = deleted

    @property
    def gross_value(self):
        """Gets the gross_value of this Transaction.  # noqa: E501

        Gross value of the transaction  # noqa: E501

        :return: The gross_value of this Transaction.  # noqa: E501
        :rtype: float
        """
        return self._gross_value

    @gross_value.setter
    def gross_value(self, gross_value):
        """Sets the gross_value of this Transaction.

        Gross value of the transaction  # noqa: E501

        :param gross_value: The gross_value of this Transaction.  # noqa: E501
        :type: float
        """

        self._gross_value = gross_value

    @property
    def id(self):
        """Gets the id of this Transaction.  # noqa: E501

        ID of the transaction  # noqa: E501

        :return: The id of this Transaction.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Transaction.

        ID of the transaction  # noqa: E501

        :param id: The id of this Transaction.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def id_account(self):
        """Gets the id_account of this Transaction.  # noqa: E501

        ID of the related account  # noqa: E501

        :return: The id_account of this Transaction.  # noqa: E501
        :rtype: int
        """
        return self._id_account

    @id_account.setter
    def id_account(self, id_account):
        """Sets the id_account of this Transaction.

        ID of the related account  # noqa: E501

        :param id_account: The id_account of this Transaction.  # noqa: E501
        :type: int
        """
        if id_account is None:
            raise ValueError("Invalid value for `id_account`, must not be `None`")  # noqa: E501

        self._id_account = id_account

    @property
    def id_category(self):
        """Gets the id_category of this Transaction.  # noqa: E501

        ID of the related category  # noqa: E501

        :return: The id_category of this Transaction.  # noqa: E501
        :rtype: int
        """
        return self._id_category

    @id_category.setter
    def id_category(self, id_category):
        """Sets the id_category of this Transaction.

        ID of the related category  # noqa: E501

        :param id_category: The id_category of this Transaction.  # noqa: E501
        :type: int
        """

        self._id_category = id_category

    @property
    def id_cluster(self):
        """Gets the id_cluster of this Transaction.  # noqa: E501

        If the transaction is part of a cluster  # noqa: E501

        :return: The id_cluster of this Transaction.  # noqa: E501
        :rtype: int
        """
        return self._id_cluster

    @id_cluster.setter
    def id_cluster(self, id_cluster):
        """Sets the id_cluster of this Transaction.

        If the transaction is part of a cluster  # noqa: E501

        :param id_cluster: The id_cluster of this Transaction.  # noqa: E501
        :type: int
        """

        self._id_cluster = id_cluster

    @property
    def last_update(self):
        """Gets the last_update of this Transaction.  # noqa: E501

        Last update of the transaction  # noqa: E501

        :return: The last_update of this Transaction.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update

    @last_update.setter
    def last_update(self, last_update):
        """Sets the last_update of this Transaction.

        Last update of the transaction  # noqa: E501

        :param last_update: The last_update of this Transaction.  # noqa: E501
        :type: datetime
        """

        self._last_update = last_update

    @property
    def nature(self):
        """Gets the nature of this Transaction.  # noqa: E501

        Type of transaction  # noqa: E501

        :return: The nature of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._nature

    @nature.setter
    def nature(self, nature):
        """Sets the nature of this Transaction.

        Type of transaction  # noqa: E501

        :param nature: The nature of this Transaction.  # noqa: E501
        :type: str
        """
        if nature is None:
            raise ValueError("Invalid value for `nature`, must not be `None`")  # noqa: E501

        self._nature = nature

    @property
    def original_currency(self):
        """Gets the original_currency of this Transaction.  # noqa: E501

        Original currency  # noqa: E501

        :return: The original_currency of this Transaction.  # noqa: E501
        :rtype: object
        """
        return self._original_currency

    @original_currency.setter
    def original_currency(self, original_currency):
        """Sets the original_currency of this Transaction.

        Original currency  # noqa: E501

        :param original_currency: The original_currency of this Transaction.  # noqa: E501
        :type: object
        """

        self._original_currency = original_currency

    @property
    def original_value(self):
        """Gets the original_value of this Transaction.  # noqa: E501

        Value in the original currency  # noqa: E501

        :return: The original_value of this Transaction.  # noqa: E501
        :rtype: float
        """
        return self._original_value

    @original_value.setter
    def original_value(self, original_value):
        """Sets the original_value of this Transaction.

        Value in the original currency  # noqa: E501

        :param original_value: The original_value of this Transaction.  # noqa: E501
        :type: float
        """

        self._original_value = original_value

    @property
    def original_wording(self):
        """Gets the original_wording of this Transaction.  # noqa: E501

        Full label of the transaction  # noqa: E501

        :return: The original_wording of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._original_wording

    @original_wording.setter
    def original_wording(self, original_wording):
        """Sets the original_wording of this Transaction.

        Full label of the transaction  # noqa: E501

        :param original_wording: The original_wording of this Transaction.  # noqa: E501
        :type: str
        """
        if original_wording is None:
            raise ValueError("Invalid value for `original_wording`, must not be `None`")  # noqa: E501

        self._original_wording = original_wording

    @property
    def rdate(self):
        """Gets the rdate of this Transaction.  # noqa: E501

        Realization of the transaction  # noqa: E501

        :return: The rdate of this Transaction.  # noqa: E501
        :rtype: date
        """
        return self._rdate

    @rdate.setter
    def rdate(self, rdate):
        """Sets the rdate of this Transaction.

        Realization of the transaction  # noqa: E501

        :param rdate: The rdate of this Transaction.  # noqa: E501
        :type: date
        """
        if rdate is None:
            raise ValueError("Invalid value for `rdate`, must not be `None`")  # noqa: E501

        self._rdate = rdate

    @property
    def simplified_wording(self):
        """Gets the simplified_wording of this Transaction.  # noqa: E501

        Simplified label of the transaction  # noqa: E501

        :return: The simplified_wording of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._simplified_wording

    @simplified_wording.setter
    def simplified_wording(self, simplified_wording):
        """Sets the simplified_wording of this Transaction.

        Simplified label of the transaction  # noqa: E501

        :param simplified_wording: The simplified_wording of this Transaction.  # noqa: E501
        :type: str
        """
        if simplified_wording is None:
            raise ValueError("Invalid value for `simplified_wording`, must not be `None`")  # noqa: E501

        self._simplified_wording = simplified_wording

    @property
    def state(self):
        """Gets the state of this Transaction.  # noqa: E501

        Internal state of the transaction  # noqa: E501

        :return: The state of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Transaction.

        Internal state of the transaction  # noqa: E501

        :param state: The state of this Transaction.  # noqa: E501
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    @property
    def stemmed_wording(self):
        """Gets the stemmed_wording of this Transaction.  # noqa: E501

        Do not use it  # noqa: E501

        :return: The stemmed_wording of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._stemmed_wording

    @stemmed_wording.setter
    def stemmed_wording(self, stemmed_wording):
        """Sets the stemmed_wording of this Transaction.

        Do not use it  # noqa: E501

        :param stemmed_wording: The stemmed_wording of this Transaction.  # noqa: E501
        :type: str
        """
        if stemmed_wording is None:
            raise ValueError("Invalid value for `stemmed_wording`, must not be `None`")  # noqa: E501

        self._stemmed_wording = stemmed_wording

    @property
    def value(self):
        """Gets the value of this Transaction.  # noqa: E501

        Value of the transaction  # noqa: E501

        :return: The value of this Transaction.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Transaction.

        Value of the transaction  # noqa: E501

        :param value: The value of this Transaction.  # noqa: E501
        :type: float
        """

        self._value = value

    @property
    def vdate(self):
        """Gets the vdate of this Transaction.  # noqa: E501

        Value date of the transaction  # noqa: E501

        :return: The vdate of this Transaction.  # noqa: E501
        :rtype: date
        """
        return self._vdate

    @vdate.setter
    def vdate(self, vdate):
        """Sets the vdate of this Transaction.

        Value date of the transaction  # noqa: E501

        :param vdate: The vdate of this Transaction.  # noqa: E501
        :type: date
        """

        self._vdate = vdate

    @property
    def webid(self):
        """Gets the webid of this Transaction.  # noqa: E501

        Webid of the transaction  # noqa: E501

        :return: The webid of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._webid

    @webid.setter
    def webid(self, webid):
        """Sets the webid of this Transaction.

        Webid of the transaction  # noqa: E501

        :param webid: The webid of this Transaction.  # noqa: E501
        :type: str
        """

        self._webid = webid

    @property
    def wording(self):
        """Gets the wording of this Transaction.  # noqa: E501

        Label set by the user  # noqa: E501

        :return: The wording of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._wording

    @wording.setter
    def wording(self, wording):
        """Sets the wording of this Transaction.

        Label set by the user  # noqa: E501

        :param wording: The wording of this Transaction.  # noqa: E501
        :type: str
        """

        self._wording = wording

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Transaction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
