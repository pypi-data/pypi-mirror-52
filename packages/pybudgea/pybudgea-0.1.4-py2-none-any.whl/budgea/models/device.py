# coding: utf-8

"""
    Budgea API Documentation

    see https://www.budget-insight.com/budgea-api  # noqa: E501

    OpenAPI spec version: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Device(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'debug': 'bool',
        'id': 'int',
        'id_token': 'int',
        'last_update': 'datetime',
        'notification_token': 'str',
        'type': 'str',
        'version': 'str'
    }

    attribute_map = {
        'debug': 'debug',
        'id': 'id',
        'id_token': 'id_token',
        'last_update': 'last_update',
        'notification_token': 'notification_token',
        'type': 'type',
        'version': 'version'
    }

    def __init__(self, debug=False, id=None, id_token=None, last_update=None, notification_token=None, type=None, version=None):  # noqa: E501
        """Device - a model defined in OpenAPI"""  # noqa: E501

        self._debug = None
        self._id = None
        self._id_token = None
        self._last_update = None
        self._notification_token = None
        self._type = None
        self._version = None
        self.discriminator = None

        self.debug = debug
        self.id = id
        self.id_token = id_token
        self.last_update = last_update
        self.notification_token = notification_token
        self.type = type
        self.version = version

    @property
    def debug(self):
        """Gets the debug of this Device.  # noqa: E501


        :return: The debug of this Device.  # noqa: E501
        :rtype: bool
        """
        return self._debug

    @debug.setter
    def debug(self, debug):
        """Sets the debug of this Device.


        :param debug: The debug of this Device.  # noqa: E501
        :type: bool
        """
        if debug is None:
            raise ValueError("Invalid value for `debug`, must not be `None`")  # noqa: E501

        self._debug = debug

    @property
    def id(self):
        """Gets the id of this Device.  # noqa: E501


        :return: The id of this Device.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Device.


        :param id: The id of this Device.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def id_token(self):
        """Gets the id_token of this Device.  # noqa: E501


        :return: The id_token of this Device.  # noqa: E501
        :rtype: int
        """
        return self._id_token

    @id_token.setter
    def id_token(self, id_token):
        """Sets the id_token of this Device.


        :param id_token: The id_token of this Device.  # noqa: E501
        :type: int
        """
        if id_token is None:
            raise ValueError("Invalid value for `id_token`, must not be `None`")  # noqa: E501

        self._id_token = id_token

    @property
    def last_update(self):
        """Gets the last_update of this Device.  # noqa: E501


        :return: The last_update of this Device.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update

    @last_update.setter
    def last_update(self, last_update):
        """Sets the last_update of this Device.


        :param last_update: The last_update of this Device.  # noqa: E501
        :type: datetime
        """
        if last_update is None:
            raise ValueError("Invalid value for `last_update`, must not be `None`")  # noqa: E501

        self._last_update = last_update

    @property
    def notification_token(self):
        """Gets the notification_token of this Device.  # noqa: E501


        :return: The notification_token of this Device.  # noqa: E501
        :rtype: str
        """
        return self._notification_token

    @notification_token.setter
    def notification_token(self, notification_token):
        """Sets the notification_token of this Device.


        :param notification_token: The notification_token of this Device.  # noqa: E501
        :type: str
        """
        if notification_token is None:
            raise ValueError("Invalid value for `notification_token`, must not be `None`")  # noqa: E501

        self._notification_token = notification_token

    @property
    def type(self):
        """Gets the type of this Device.  # noqa: E501


        :return: The type of this Device.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Device.


        :param type: The type of this Device.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def version(self):
        """Gets the version of this Device.  # noqa: E501


        :return: The version of this Device.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Device.


        :param version: The version of this Device.  # noqa: E501
        :type: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Device):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
