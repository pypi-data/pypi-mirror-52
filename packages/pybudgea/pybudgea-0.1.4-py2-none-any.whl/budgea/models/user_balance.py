# coding: utf-8

"""
    Budgea API Documentation

    see https://www.budget-insight.com/budgea-api  # noqa: E501

    OpenAPI spec version: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class UserBalance(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'balance': 'float',
        'converted': 'bool',
        'currencies': 'list[UserBalanceCurrency]',
        'expenses': 'float',
        'incomes': 'float',
        'max_date': 'date',
        'min_date': 'date',
        'remains': 'float',
        'transactions': 'list[UserBalanceTransaction]'
    }

    attribute_map = {
        'balance': 'balance',
        'converted': 'converted',
        'currencies': 'currencies',
        'expenses': 'expenses',
        'incomes': 'incomes',
        'max_date': 'max_date',
        'min_date': 'min_date',
        'remains': 'remains',
        'transactions': 'transactions'
    }

    def __init__(self, balance=None, converted=None, currencies=None, expenses=None, incomes=None, max_date=None, min_date=None, remains=None, transactions=None):  # noqa: E501
        """UserBalance - a model defined in OpenAPI"""  # noqa: E501

        self._balance = None
        self._converted = None
        self._currencies = None
        self._expenses = None
        self._incomes = None
        self._max_date = None
        self._min_date = None
        self._remains = None
        self._transactions = None
        self.discriminator = None

        if balance is not None:
            self.balance = balance
        if converted is not None:
            self.converted = converted
        if currencies is not None:
            self.currencies = currencies
        if expenses is not None:
            self.expenses = expenses
        if incomes is not None:
            self.incomes = incomes
        if max_date is not None:
            self.max_date = max_date
        if min_date is not None:
            self.min_date = min_date
        if remains is not None:
            self.remains = remains
        if transactions is not None:
            self.transactions = transactions

    @property
    def balance(self):
        """Gets the balance of this UserBalance.  # noqa: E501


        :return: The balance of this UserBalance.  # noqa: E501
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this UserBalance.


        :param balance: The balance of this UserBalance.  # noqa: E501
        :type: float
        """

        self._balance = balance

    @property
    def converted(self):
        """Gets the converted of this UserBalance.  # noqa: E501


        :return: The converted of this UserBalance.  # noqa: E501
        :rtype: bool
        """
        return self._converted

    @converted.setter
    def converted(self, converted):
        """Sets the converted of this UserBalance.


        :param converted: The converted of this UserBalance.  # noqa: E501
        :type: bool
        """

        self._converted = converted

    @property
    def currencies(self):
        """Gets the currencies of this UserBalance.  # noqa: E501


        :return: The currencies of this UserBalance.  # noqa: E501
        :rtype: list[UserBalanceCurrency]
        """
        return self._currencies

    @currencies.setter
    def currencies(self, currencies):
        """Sets the currencies of this UserBalance.


        :param currencies: The currencies of this UserBalance.  # noqa: E501
        :type: list[UserBalanceCurrency]
        """

        self._currencies = currencies

    @property
    def expenses(self):
        """Gets the expenses of this UserBalance.  # noqa: E501


        :return: The expenses of this UserBalance.  # noqa: E501
        :rtype: float
        """
        return self._expenses

    @expenses.setter
    def expenses(self, expenses):
        """Sets the expenses of this UserBalance.


        :param expenses: The expenses of this UserBalance.  # noqa: E501
        :type: float
        """

        self._expenses = expenses

    @property
    def incomes(self):
        """Gets the incomes of this UserBalance.  # noqa: E501


        :return: The incomes of this UserBalance.  # noqa: E501
        :rtype: float
        """
        return self._incomes

    @incomes.setter
    def incomes(self, incomes):
        """Sets the incomes of this UserBalance.


        :param incomes: The incomes of this UserBalance.  # noqa: E501
        :type: float
        """

        self._incomes = incomes

    @property
    def max_date(self):
        """Gets the max_date of this UserBalance.  # noqa: E501


        :return: The max_date of this UserBalance.  # noqa: E501
        :rtype: date
        """
        return self._max_date

    @max_date.setter
    def max_date(self, max_date):
        """Sets the max_date of this UserBalance.


        :param max_date: The max_date of this UserBalance.  # noqa: E501
        :type: date
        """

        self._max_date = max_date

    @property
    def min_date(self):
        """Gets the min_date of this UserBalance.  # noqa: E501


        :return: The min_date of this UserBalance.  # noqa: E501
        :rtype: date
        """
        return self._min_date

    @min_date.setter
    def min_date(self, min_date):
        """Sets the min_date of this UserBalance.


        :param min_date: The min_date of this UserBalance.  # noqa: E501
        :type: date
        """

        self._min_date = min_date

    @property
    def remains(self):
        """Gets the remains of this UserBalance.  # noqa: E501


        :return: The remains of this UserBalance.  # noqa: E501
        :rtype: float
        """
        return self._remains

    @remains.setter
    def remains(self, remains):
        """Sets the remains of this UserBalance.


        :param remains: The remains of this UserBalance.  # noqa: E501
        :type: float
        """

        self._remains = remains

    @property
    def transactions(self):
        """Gets the transactions of this UserBalance.  # noqa: E501


        :return: The transactions of this UserBalance.  # noqa: E501
        :rtype: list[UserBalanceTransaction]
        """
        return self._transactions

    @transactions.setter
    def transactions(self, transactions):
        """Sets the transactions of this UserBalance.


        :param transactions: The transactions of this UserBalance.  # noqa: E501
        :type: list[UserBalanceTransaction]
        """

        self._transactions = transactions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserBalance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
