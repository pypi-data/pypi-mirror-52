# coding: utf-8

"""
    Budgea API Documentation

    see https://www.budget-insight.com/budgea-api  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: rienafairefr@gmail.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Account(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'balance': 'float',
        'bookmarked': 'int',
        'coming': 'float',
        'currency': 'object',
        'deleted': 'datetime',
        'disabled': 'datetime',
        'display': 'bool',
        'error': 'str',
        'iban': 'str',
        'id': 'int',
        'id_connection': 'int',
        'id_parent': 'int',
        'id_type': 'int',
        'id_user': 'int',
        'last_update': 'datetime',
        'name': 'str',
        'number': 'str',
        'original_name': 'str',
        'ownership': 'str',
        'usage': 'str',
        'webid': 'str'
    }

    attribute_map = {
        'balance': 'balance',
        'bookmarked': 'bookmarked',
        'coming': 'coming',
        'currency': 'currency',
        'deleted': 'deleted',
        'disabled': 'disabled',
        'display': 'display',
        'error': 'error',
        'iban': 'iban',
        'id': 'id',
        'id_connection': 'id_connection',
        'id_parent': 'id_parent',
        'id_type': 'id_type',
        'id_user': 'id_user',
        'last_update': 'last_update',
        'name': 'name',
        'number': 'number',
        'original_name': 'original_name',
        'ownership': 'ownership',
        'usage': 'usage',
        'webid': 'webid'
    }

    def __init__(self, balance=None, bookmarked=None, coming=0.0, currency=None, deleted=None, disabled=None, display=True, error=None, iban=None, id=None, id_connection=None, id_parent=None, id_type=None, id_user=None, last_update=None, name=None, number=None, original_name=None, ownership=None, usage=None, webid=None):  # noqa: E501
        """Account - a model defined in OpenAPI"""  # noqa: E501

        self._balance = None
        self._bookmarked = None
        self._coming = None
        self._currency = None
        self._deleted = None
        self._disabled = None
        self._display = None
        self._error = None
        self._iban = None
        self._id = None
        self._id_connection = None
        self._id_parent = None
        self._id_type = None
        self._id_user = None
        self._last_update = None
        self._name = None
        self._number = None
        self._original_name = None
        self._ownership = None
        self._usage = None
        self._webid = None
        self.discriminator = None

        self.balance = balance
        self.bookmarked = bookmarked
        if coming is not None:
            self.coming = coming
        if currency is not None:
            self.currency = currency
        if deleted is not None:
            self.deleted = deleted
        if disabled is not None:
            self.disabled = disabled
        self.display = display
        if error is not None:
            self.error = error
        if iban is not None:
            self.iban = iban
        self.id = id
        if id_connection is not None:
            self.id_connection = id_connection
        if id_parent is not None:
            self.id_parent = id_parent
        if id_type is not None:
            self.id_type = id_type
        if id_user is not None:
            self.id_user = id_user
        if last_update is not None:
            self.last_update = last_update
        if name is not None:
            self.name = name
        if number is not None:
            self.number = number
        self.original_name = original_name
        if ownership is not None:
            self.ownership = ownership
        if usage is not None:
            self.usage = usage
        if webid is not None:
            self.webid = webid

    @property
    def balance(self):
        """Gets the balance of this Account.  # noqa: E501

        Balance of the account  # noqa: E501

        :return: The balance of this Account.  # noqa: E501
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this Account.

        Balance of the account  # noqa: E501

        :param balance: The balance of this Account.  # noqa: E501
        :type: float
        """
        if balance is None:
            raise ValueError("Invalid value for `balance`, must not be `None`")  # noqa: E501

        self._balance = balance

    @property
    def bookmarked(self):
        """Gets the bookmarked of this Account.  # noqa: E501

        This account has been bookmarked by user  # noqa: E501

        :return: The bookmarked of this Account.  # noqa: E501
        :rtype: int
        """
        return self._bookmarked

    @bookmarked.setter
    def bookmarked(self, bookmarked):
        """Sets the bookmarked of this Account.

        This account has been bookmarked by user  # noqa: E501

        :param bookmarked: The bookmarked of this Account.  # noqa: E501
        :type: int
        """
        if bookmarked is None:
            raise ValueError("Invalid value for `bookmarked`, must not be `None`")  # noqa: E501

        self._bookmarked = bookmarked

    @property
    def coming(self):
        """Gets the coming of this Account.  # noqa: E501

        Amount of coming operations not yet debited  # noqa: E501

        :return: The coming of this Account.  # noqa: E501
        :rtype: float
        """
        return self._coming

    @coming.setter
    def coming(self, coming):
        """Sets the coming of this Account.

        Amount of coming operations not yet debited  # noqa: E501

        :param coming: The coming of this Account.  # noqa: E501
        :type: float
        """

        self._coming = coming

    @property
    def currency(self):
        """Gets the currency of this Account.  # noqa: E501

        Account currency  # noqa: E501

        :return: The currency of this Account.  # noqa: E501
        :rtype: object
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Account.

        Account currency  # noqa: E501

        :param currency: The currency of this Account.  # noqa: E501
        :type: object
        """

        self._currency = currency

    @property
    def deleted(self):
        """Gets the deleted of this Account.  # noqa: E501

        This account is not found on the website anymore  # noqa: E501

        :return: The deleted of this Account.  # noqa: E501
        :rtype: datetime
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Account.

        This account is not found on the website anymore  # noqa: E501

        :param deleted: The deleted of this Account.  # noqa: E501
        :type: datetime
        """

        self._deleted = deleted

    @property
    def disabled(self):
        """Gets the disabled of this Account.  # noqa: E501

        This account has been deleted by user and will not be synchronized anymore  # noqa: E501

        :return: The disabled of this Account.  # noqa: E501
        :rtype: datetime
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this Account.

        This account has been deleted by user and will not be synchronized anymore  # noqa: E501

        :param disabled: The disabled of this Account.  # noqa: E501
        :type: datetime
        """

        self._disabled = disabled

    @property
    def display(self):
        """Gets the display of this Account.  # noqa: E501

        Display this account in accounts list  # noqa: E501

        :return: The display of this Account.  # noqa: E501
        :rtype: bool
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this Account.

        Display this account in accounts list  # noqa: E501

        :param display: The display of this Account.  # noqa: E501
        :type: bool
        """
        if display is None:
            raise ValueError("Invalid value for `display`, must not be `None`")  # noqa: E501

        self._display = display

    @property
    def error(self):
        """Gets the error of this Account.  # noqa: E501

        If the last update has failed, the error code  # noqa: E501

        :return: The error of this Account.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this Account.

        If the last update has failed, the error code  # noqa: E501

        :param error: The error of this Account.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def iban(self):
        """Gets the iban of this Account.  # noqa: E501

        Account IBAN  # noqa: E501

        :return: The iban of this Account.  # noqa: E501
        :rtype: str
        """
        return self._iban

    @iban.setter
    def iban(self, iban):
        """Sets the iban of this Account.

        Account IBAN  # noqa: E501

        :param iban: The iban of this Account.  # noqa: E501
        :type: str
        """

        self._iban = iban

    @property
    def id(self):
        """Gets the id of this Account.  # noqa: E501

        ID of the account  # noqa: E501

        :return: The id of this Account.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Account.

        ID of the account  # noqa: E501

        :param id: The id of this Account.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def id_connection(self):
        """Gets the id_connection of this Account.  # noqa: E501

        ID of the related connection  # noqa: E501

        :return: The id_connection of this Account.  # noqa: E501
        :rtype: int
        """
        return self._id_connection

    @id_connection.setter
    def id_connection(self, id_connection):
        """Sets the id_connection of this Account.

        ID of the related connection  # noqa: E501

        :param id_connection: The id_connection of this Account.  # noqa: E501
        :type: int
        """

        self._id_connection = id_connection

    @property
    def id_parent(self):
        """Gets the id_parent of this Account.  # noqa: E501

        Id of the parent account  # noqa: E501

        :return: The id_parent of this Account.  # noqa: E501
        :rtype: int
        """
        return self._id_parent

    @id_parent.setter
    def id_parent(self, id_parent):
        """Sets the id_parent of this Account.

        Id of the parent account  # noqa: E501

        :param id_parent: The id_parent of this Account.  # noqa: E501
        :type: int
        """

        self._id_parent = id_parent

    @property
    def id_type(self):
        """Gets the id_type of this Account.  # noqa: E501

        ID of the account type  # noqa: E501

        :return: The id_type of this Account.  # noqa: E501
        :rtype: int
        """
        return self._id_type

    @id_type.setter
    def id_type(self, id_type):
        """Sets the id_type of this Account.

        ID of the account type  # noqa: E501

        :param id_type: The id_type of this Account.  # noqa: E501
        :type: int
        """

        self._id_type = id_type

    @property
    def id_user(self):
        """Gets the id_user of this Account.  # noqa: E501

        ID of the related user  # noqa: E501

        :return: The id_user of this Account.  # noqa: E501
        :rtype: int
        """
        return self._id_user

    @id_user.setter
    def id_user(self, id_user):
        """Sets the id_user of this Account.

        ID of the related user  # noqa: E501

        :param id_user: The id_user of this Account.  # noqa: E501
        :type: int
        """

        self._id_user = id_user

    @property
    def last_update(self):
        """Gets the last_update of this Account.  # noqa: E501

        Last successful update of the account  # noqa: E501

        :return: The last_update of this Account.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update

    @last_update.setter
    def last_update(self, last_update):
        """Sets the last_update of this Account.

        Last successful update of the account  # noqa: E501

        :param last_update: The last_update of this Account.  # noqa: E501
        :type: datetime
        """

        self._last_update = last_update

    @property
    def name(self):
        """Gets the name of this Account.  # noqa: E501

        Name of the account  # noqa: E501

        :return: The name of this Account.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Account.

        Name of the account  # noqa: E501

        :param name: The name of this Account.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def number(self):
        """Gets the number of this Account.  # noqa: E501

        Account number  # noqa: E501

        :return: The number of this Account.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this Account.

        Account number  # noqa: E501

        :param number: The number of this Account.  # noqa: E501
        :type: str
        """

        self._number = number

    @property
    def original_name(self):
        """Gets the original_name of this Account.  # noqa: E501

        Original name of the account on the bank  # noqa: E501

        :return: The original_name of this Account.  # noqa: E501
        :rtype: str
        """
        return self._original_name

    @original_name.setter
    def original_name(self, original_name):
        """Sets the original_name of this Account.

        Original name of the account on the bank  # noqa: E501

        :param original_name: The original_name of this Account.  # noqa: E501
        :type: str
        """
        if original_name is None:
            raise ValueError("Invalid value for `original_name`, must not be `None`")  # noqa: E501

        self._original_name = original_name

    @property
    def ownership(self):
        """Gets the ownership of this Account.  # noqa: E501

        Relationship between the credentials owner and the account  # noqa: E501

        :return: The ownership of this Account.  # noqa: E501
        :rtype: str
        """
        return self._ownership

    @ownership.setter
    def ownership(self, ownership):
        """Sets the ownership of this Account.

        Relationship between the credentials owner and the account  # noqa: E501

        :param ownership: The ownership of this Account.  # noqa: E501
        :type: str
        """

        self._ownership = ownership

    @property
    def usage(self):
        """Gets the usage of this Account.  # noqa: E501

        Account usage  # noqa: E501

        :return: The usage of this Account.  # noqa: E501
        :rtype: str
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """Sets the usage of this Account.

        Account usage  # noqa: E501

        :param usage: The usage of this Account.  # noqa: E501
        :type: str
        """

        self._usage = usage

    @property
    def webid(self):
        """Gets the webid of this Account.  # noqa: E501

        Account webid  # noqa: E501

        :return: The webid of this Account.  # noqa: E501
        :rtype: str
        """
        return self._webid

    @webid.setter
    def webid(self, webid):
        """Sets the webid of this Account.

        Account webid  # noqa: E501

        :param webid: The webid of this Account.  # noqa: E501
        :type: str
        """

        self._webid = webid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Account):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
