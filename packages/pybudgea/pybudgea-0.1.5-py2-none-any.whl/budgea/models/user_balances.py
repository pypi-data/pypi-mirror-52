# coding: utf-8

"""
    Budgea API Documentation

    see https://www.budget-insight.com/budgea-api  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: rienafairefr@gmail.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class UserBalances(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'balances': 'list[UserBalance]',
        'first_date': 'date',
        'last_date': 'date',
        'result_max_date': 'date',
        'result_min_date': 'date',
        'total': 'int'
    }

    attribute_map = {
        'balances': 'balances',
        'first_date': 'first_date',
        'last_date': 'last_date',
        'result_max_date': 'result_max_date',
        'result_min_date': 'result_min_date',
        'total': 'total'
    }

    def __init__(self, balances=None, first_date=None, last_date=None, result_max_date=None, result_min_date=None, total=None):  # noqa: E501
        """UserBalances - a model defined in OpenAPI"""  # noqa: E501

        self._balances = None
        self._first_date = None
        self._last_date = None
        self._result_max_date = None
        self._result_min_date = None
        self._total = None
        self.discriminator = None

        if balances is not None:
            self.balances = balances
        if first_date is not None:
            self.first_date = first_date
        if last_date is not None:
            self.last_date = last_date
        if result_max_date is not None:
            self.result_max_date = result_max_date
        if result_min_date is not None:
            self.result_min_date = result_min_date
        if total is not None:
            self.total = total

    @property
    def balances(self):
        """Gets the balances of this UserBalances.  # noqa: E501


        :return: The balances of this UserBalances.  # noqa: E501
        :rtype: list[UserBalance]
        """
        return self._balances

    @balances.setter
    def balances(self, balances):
        """Sets the balances of this UserBalances.


        :param balances: The balances of this UserBalances.  # noqa: E501
        :type: list[UserBalance]
        """

        self._balances = balances

    @property
    def first_date(self):
        """Gets the first_date of this UserBalances.  # noqa: E501


        :return: The first_date of this UserBalances.  # noqa: E501
        :rtype: date
        """
        return self._first_date

    @first_date.setter
    def first_date(self, first_date):
        """Sets the first_date of this UserBalances.


        :param first_date: The first_date of this UserBalances.  # noqa: E501
        :type: date
        """

        self._first_date = first_date

    @property
    def last_date(self):
        """Gets the last_date of this UserBalances.  # noqa: E501


        :return: The last_date of this UserBalances.  # noqa: E501
        :rtype: date
        """
        return self._last_date

    @last_date.setter
    def last_date(self, last_date):
        """Sets the last_date of this UserBalances.


        :param last_date: The last_date of this UserBalances.  # noqa: E501
        :type: date
        """

        self._last_date = last_date

    @property
    def result_max_date(self):
        """Gets the result_max_date of this UserBalances.  # noqa: E501


        :return: The result_max_date of this UserBalances.  # noqa: E501
        :rtype: date
        """
        return self._result_max_date

    @result_max_date.setter
    def result_max_date(self, result_max_date):
        """Sets the result_max_date of this UserBalances.


        :param result_max_date: The result_max_date of this UserBalances.  # noqa: E501
        :type: date
        """

        self._result_max_date = result_max_date

    @property
    def result_min_date(self):
        """Gets the result_min_date of this UserBalances.  # noqa: E501


        :return: The result_min_date of this UserBalances.  # noqa: E501
        :rtype: date
        """
        return self._result_min_date

    @result_min_date.setter
    def result_min_date(self, result_min_date):
        """Sets the result_min_date of this UserBalances.


        :param result_min_date: The result_min_date of this UserBalances.  # noqa: E501
        :type: date
        """

        self._result_min_date = result_min_date

    @property
    def total(self):
        """Gets the total of this UserBalances.  # noqa: E501


        :return: The total of this UserBalances.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this UserBalances.


        :param total: The total of this UserBalances.  # noqa: E501
        :type: int
        """

        self._total = total

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserBalances):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
