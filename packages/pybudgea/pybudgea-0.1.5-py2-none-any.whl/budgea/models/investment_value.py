# coding: utf-8

"""
    Budgea API Documentation

    see https://www.budget-insight.com/budgea-api  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: rienafairefr@gmail.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class InvestmentValue(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'id_investment': 'int',
        'original_currency': 'object',
        'original_unitvalue': 'float',
        'unitvalue': 'float',
        'vdate': 'date'
    }

    attribute_map = {
        'id': 'id',
        'id_investment': 'id_investment',
        'original_currency': 'original_currency',
        'original_unitvalue': 'original_unitvalue',
        'unitvalue': 'unitvalue',
        'vdate': 'vdate'
    }

    def __init__(self, id=None, id_investment=None, original_currency=None, original_unitvalue=None, unitvalue=None, vdate=None):  # noqa: E501
        """InvestmentValue - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._id_investment = None
        self._original_currency = None
        self._original_unitvalue = None
        self._unitvalue = None
        self._vdate = None
        self.discriminator = None

        self.id = id
        self.id_investment = id_investment
        if original_currency is not None:
            self.original_currency = original_currency
        if original_unitvalue is not None:
            self.original_unitvalue = original_unitvalue
        self.unitvalue = unitvalue
        self.vdate = vdate

    @property
    def id(self):
        """Gets the id of this InvestmentValue.  # noqa: E501

        ID of the value  # noqa: E501

        :return: The id of this InvestmentValue.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InvestmentValue.

        ID of the value  # noqa: E501

        :param id: The id of this InvestmentValue.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def id_investment(self):
        """Gets the id_investment of this InvestmentValue.  # noqa: E501

        ID of the related investment  # noqa: E501

        :return: The id_investment of this InvestmentValue.  # noqa: E501
        :rtype: int
        """
        return self._id_investment

    @id_investment.setter
    def id_investment(self, id_investment):
        """Sets the id_investment of this InvestmentValue.

        ID of the related investment  # noqa: E501

        :param id_investment: The id_investment of this InvestmentValue.  # noqa: E501
        :type: int
        """
        if id_investment is None:
            raise ValueError("Invalid value for `id_investment`, must not be `None`")  # noqa: E501

        self._id_investment = id_investment

    @property
    def original_currency(self):
        """Gets the original_currency of this InvestmentValue.  # noqa: E501

        Original currency  # noqa: E501

        :return: The original_currency of this InvestmentValue.  # noqa: E501
        :rtype: object
        """
        return self._original_currency

    @original_currency.setter
    def original_currency(self, original_currency):
        """Sets the original_currency of this InvestmentValue.

        Original currency  # noqa: E501

        :param original_currency: The original_currency of this InvestmentValue.  # noqa: E501
        :type: object
        """

        self._original_currency = original_currency

    @property
    def original_unitvalue(self):
        """Gets the original_unitvalue of this InvestmentValue.  # noqa: E501

        Value on this date, in the original currency  # noqa: E501

        :return: The original_unitvalue of this InvestmentValue.  # noqa: E501
        :rtype: float
        """
        return self._original_unitvalue

    @original_unitvalue.setter
    def original_unitvalue(self, original_unitvalue):
        """Sets the original_unitvalue of this InvestmentValue.

        Value on this date, in the original currency  # noqa: E501

        :param original_unitvalue: The original_unitvalue of this InvestmentValue.  # noqa: E501
        :type: float
        """

        self._original_unitvalue = original_unitvalue

    @property
    def unitvalue(self):
        """Gets the unitvalue of this InvestmentValue.  # noqa: E501

        Value on this date  # noqa: E501

        :return: The unitvalue of this InvestmentValue.  # noqa: E501
        :rtype: float
        """
        return self._unitvalue

    @unitvalue.setter
    def unitvalue(self, unitvalue):
        """Sets the unitvalue of this InvestmentValue.

        Value on this date  # noqa: E501

        :param unitvalue: The unitvalue of this InvestmentValue.  # noqa: E501
        :type: float
        """
        if unitvalue is None:
            raise ValueError("Invalid value for `unitvalue`, must not be `None`")  # noqa: E501

        self._unitvalue = unitvalue

    @property
    def vdate(self):
        """Gets the vdate of this InvestmentValue.  # noqa: E501

        Date of this value  # noqa: E501

        :return: The vdate of this InvestmentValue.  # noqa: E501
        :rtype: date
        """
        return self._vdate

    @vdate.setter
    def vdate(self, vdate):
        """Sets the vdate of this InvestmentValue.

        Date of this value  # noqa: E501

        :param vdate: The vdate of this InvestmentValue.  # noqa: E501
        :type: date
        """
        if vdate is None:
            raise ValueError("Invalid value for `vdate`, must not be `None`")  # noqa: E501

        self._vdate = vdate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvestmentValue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
