# coding: utf-8

"""
    Budgea API Documentation

    see https://www.budget-insight.com/budgea-api  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: rienafairefr@gmail.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Subscription(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'deleted': 'datetime',
        'disabled': 'datetime',
        'error': 'str',
        'id': 'int',
        'id_connection': 'int',
        'id_user': 'int',
        'label': 'str',
        'last_update': 'datetime',
        'number': 'str',
        'renewdate': 'date',
        'subscriber': 'str',
        'validity': 'date'
    }

    attribute_map = {
        'deleted': 'deleted',
        'disabled': 'disabled',
        'error': 'error',
        'id': 'id',
        'id_connection': 'id_connection',
        'id_user': 'id_user',
        'label': 'label',
        'last_update': 'last_update',
        'number': 'number',
        'renewdate': 'renewdate',
        'subscriber': 'subscriber',
        'validity': 'validity'
    }

    def __init__(self, deleted=None, disabled=None, error=None, id=None, id_connection=None, id_user=None, label=None, last_update=None, number=None, renewdate=None, subscriber=None, validity=None):  # noqa: E501
        """Subscription - a model defined in OpenAPI"""  # noqa: E501

        self._deleted = None
        self._disabled = None
        self._error = None
        self._id = None
        self._id_connection = None
        self._id_user = None
        self._label = None
        self._last_update = None
        self._number = None
        self._renewdate = None
        self._subscriber = None
        self._validity = None
        self.discriminator = None

        if deleted is not None:
            self.deleted = deleted
        if disabled is not None:
            self.disabled = disabled
        if error is not None:
            self.error = error
        self.id = id
        if id_connection is not None:
            self.id_connection = id_connection
        if id_user is not None:
            self.id_user = id_user
        self.label = label
        if last_update is not None:
            self.last_update = last_update
        self.number = number
        if renewdate is not None:
            self.renewdate = renewdate
        if subscriber is not None:
            self.subscriber = subscriber
        if validity is not None:
            self.validity = validity

    @property
    def deleted(self):
        """Gets the deleted of this Subscription.  # noqa: E501

        This subscription is not found on the website anymore  # noqa: E501

        :return: The deleted of this Subscription.  # noqa: E501
        :rtype: datetime
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Subscription.

        This subscription is not found on the website anymore  # noqa: E501

        :param deleted: The deleted of this Subscription.  # noqa: E501
        :type: datetime
        """

        self._deleted = deleted

    @property
    def disabled(self):
        """Gets the disabled of this Subscription.  # noqa: E501

        This subscription has been deleted by user and will not be synchronized anymore  # noqa: E501

        :return: The disabled of this Subscription.  # noqa: E501
        :rtype: datetime
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this Subscription.

        This subscription has been deleted by user and will not be synchronized anymore  # noqa: E501

        :param disabled: The disabled of this Subscription.  # noqa: E501
        :type: datetime
        """

        self._disabled = disabled

    @property
    def error(self):
        """Gets the error of this Subscription.  # noqa: E501

        If the last update has failed, the error code  # noqa: E501

        :return: The error of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this Subscription.

        If the last update has failed, the error code  # noqa: E501

        :param error: The error of this Subscription.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def id(self):
        """Gets the id of this Subscription.  # noqa: E501

        ID of subscription  # noqa: E501

        :return: The id of this Subscription.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Subscription.

        ID of subscription  # noqa: E501

        :param id: The id of this Subscription.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def id_connection(self):
        """Gets the id_connection of this Subscription.  # noqa: E501

        ID of related connection  # noqa: E501

        :return: The id_connection of this Subscription.  # noqa: E501
        :rtype: int
        """
        return self._id_connection

    @id_connection.setter
    def id_connection(self, id_connection):
        """Sets the id_connection of this Subscription.

        ID of related connection  # noqa: E501

        :param id_connection: The id_connection of this Subscription.  # noqa: E501
        :type: int
        """

        self._id_connection = id_connection

    @property
    def id_user(self):
        """Gets the id_user of this Subscription.  # noqa: E501

        ID of related user  # noqa: E501

        :return: The id_user of this Subscription.  # noqa: E501
        :rtype: int
        """
        return self._id_user

    @id_user.setter
    def id_user(self, id_user):
        """Sets the id_user of this Subscription.

        ID of related user  # noqa: E501

        :param id_user: The id_user of this Subscription.  # noqa: E501
        :type: int
        """

        self._id_user = id_user

    @property
    def label(self):
        """Gets the label of this Subscription.  # noqa: E501

        Label of the subscription  # noqa: E501

        :return: The label of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Subscription.

        Label of the subscription  # noqa: E501

        :param label: The label of this Subscription.  # noqa: E501
        :type: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")  # noqa: E501

        self._label = label

    @property
    def last_update(self):
        """Gets the last_update of this Subscription.  # noqa: E501

        Last successful update of the subscription  # noqa: E501

        :return: The last_update of this Subscription.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update

    @last_update.setter
    def last_update(self, last_update):
        """Sets the last_update of this Subscription.

        Last successful update of the subscription  # noqa: E501

        :param last_update: The last_update of this Subscription.  # noqa: E501
        :type: datetime
        """

        self._last_update = last_update

    @property
    def number(self):
        """Gets the number of this Subscription.  # noqa: E501

        Subscription's number  # noqa: E501

        :return: The number of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this Subscription.

        Subscription's number  # noqa: E501

        :param number: The number of this Subscription.  # noqa: E501
        :type: str
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")  # noqa: E501

        self._number = number

    @property
    def renewdate(self):
        """Gets the renewdate of this Subscription.  # noqa: E501

        Next renew date, if any  # noqa: E501

        :return: The renewdate of this Subscription.  # noqa: E501
        :rtype: date
        """
        return self._renewdate

    @renewdate.setter
    def renewdate(self, renewdate):
        """Sets the renewdate of this Subscription.

        Next renew date, if any  # noqa: E501

        :param renewdate: The renewdate of this Subscription.  # noqa: E501
        :type: date
        """

        self._renewdate = renewdate

    @property
    def subscriber(self):
        """Gets the subscriber of this Subscription.  # noqa: E501

        Name of the subscriber  # noqa: E501

        :return: The subscriber of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._subscriber

    @subscriber.setter
    def subscriber(self, subscriber):
        """Sets the subscriber of this Subscription.

        Name of the subscriber  # noqa: E501

        :param subscriber: The subscriber of this Subscription.  # noqa: E501
        :type: str
        """

        self._subscriber = subscriber

    @property
    def validity(self):
        """Gets the validity of this Subscription.  # noqa: E501

        The subscription is valid until this date, if any  # noqa: E501

        :return: The validity of this Subscription.  # noqa: E501
        :rtype: date
        """
        return self._validity

    @validity.setter
    def validity(self, validity):
        """Sets the validity of this Subscription.

        The subscription is valid until this date, if any  # noqa: E501

        :param validity: The validity of this Subscription.  # noqa: E501
        :type: date
        """

        self._validity = validity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Subscription):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
