# coding: utf-8

"""
    Budgea API Documentation

    see https://www.budget-insight.com/budgea-api  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: rienafairefr@gmail.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Group(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'color': 'str',
        'conf': 'str',
        'email': 'str',
        'id': 'int',
        'id_logo': 'int',
        'id_parent_group': 'int',
        'name': 'str',
        'url': 'str'
    }

    attribute_map = {
        'color': 'color',
        'conf': 'conf',
        'email': 'email',
        'id': 'id',
        'id_logo': 'id_logo',
        'id_parent_group': 'id_parent_group',
        'name': 'name',
        'url': 'url'
    }

    def __init__(self, color=None, conf=None, email=None, id=None, id_logo=None, id_parent_group=None, name=None, url=None):  # noqa: E501
        """Group - a model defined in OpenAPI"""  # noqa: E501

        self._color = None
        self._conf = None
        self._email = None
        self._id = None
        self._id_logo = None
        self._id_parent_group = None
        self._name = None
        self._url = None
        self.discriminator = None

        if color is not None:
            self.color = color
        if conf is not None:
            self.conf = conf
        if email is not None:
            self.email = email
        self.id = id
        if id_logo is not None:
            self.id_logo = id_logo
        if id_parent_group is not None:
            self.id_parent_group = id_parent_group
        if name is not None:
            self.name = name
        if url is not None:
            self.url = url

    @property
    def color(self):
        """Gets the color of this Group.  # noqa: E501


        :return: The color of this Group.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this Group.


        :param color: The color of this Group.  # noqa: E501
        :type: str
        """

        self._color = color

    @property
    def conf(self):
        """Gets the conf of this Group.  # noqa: E501


        :return: The conf of this Group.  # noqa: E501
        :rtype: str
        """
        return self._conf

    @conf.setter
    def conf(self, conf):
        """Sets the conf of this Group.


        :param conf: The conf of this Group.  # noqa: E501
        :type: str
        """

        self._conf = conf

    @property
    def email(self):
        """Gets the email of this Group.  # noqa: E501


        :return: The email of this Group.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Group.


        :param email: The email of this Group.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def id(self):
        """Gets the id of this Group.  # noqa: E501


        :return: The id of this Group.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Group.


        :param id: The id of this Group.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def id_logo(self):
        """Gets the id_logo of this Group.  # noqa: E501


        :return: The id_logo of this Group.  # noqa: E501
        :rtype: int
        """
        return self._id_logo

    @id_logo.setter
    def id_logo(self, id_logo):
        """Sets the id_logo of this Group.


        :param id_logo: The id_logo of this Group.  # noqa: E501
        :type: int
        """

        self._id_logo = id_logo

    @property
    def id_parent_group(self):
        """Gets the id_parent_group of this Group.  # noqa: E501


        :return: The id_parent_group of this Group.  # noqa: E501
        :rtype: int
        """
        return self._id_parent_group

    @id_parent_group.setter
    def id_parent_group(self, id_parent_group):
        """Sets the id_parent_group of this Group.


        :param id_parent_group: The id_parent_group of this Group.  # noqa: E501
        :type: int
        """

        self._id_parent_group = id_parent_group

    @property
    def name(self):
        """Gets the name of this Group.  # noqa: E501


        :return: The name of this Group.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Group.


        :param name: The name of this Group.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def url(self):
        """Gets the url of this Group.  # noqa: E501


        :return: The url of this Group.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Group.


        :param url: The url of this Group.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Group):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
