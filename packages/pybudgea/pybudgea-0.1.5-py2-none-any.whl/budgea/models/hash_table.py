# coding: utf-8

"""
    Budgea API Documentation

    see https://www.budget-insight.com/budgea-api  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: rienafairefr@gmail.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class HashTable(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'display': 'bool',
        'income': 'bool',
        'nature': 'str',
        'wording': 'str'
    }

    attribute_map = {
        'display': 'display',
        'income': 'income',
        'nature': 'nature',
        'wording': 'wording'
    }

    def __init__(self, display=True, income=None, nature=None, wording=None):  # noqa: E501
        """HashTable - a model defined in OpenAPI"""  # noqa: E501

        self._display = None
        self._income = None
        self._nature = None
        self._wording = None
        self.discriminator = None

        self.display = display
        self.income = income
        self.nature = nature
        self.wording = wording

    @property
    def display(self):
        """Gets the display of this HashTable.  # noqa: E501


        :return: The display of this HashTable.  # noqa: E501
        :rtype: bool
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this HashTable.


        :param display: The display of this HashTable.  # noqa: E501
        :type: bool
        """
        if display is None:
            raise ValueError("Invalid value for `display`, must not be `None`")  # noqa: E501

        self._display = display

    @property
    def income(self):
        """Gets the income of this HashTable.  # noqa: E501


        :return: The income of this HashTable.  # noqa: E501
        :rtype: bool
        """
        return self._income

    @income.setter
    def income(self, income):
        """Sets the income of this HashTable.


        :param income: The income of this HashTable.  # noqa: E501
        :type: bool
        """
        if income is None:
            raise ValueError("Invalid value for `income`, must not be `None`")  # noqa: E501

        self._income = income

    @property
    def nature(self):
        """Gets the nature of this HashTable.  # noqa: E501


        :return: The nature of this HashTable.  # noqa: E501
        :rtype: str
        """
        return self._nature

    @nature.setter
    def nature(self, nature):
        """Sets the nature of this HashTable.


        :param nature: The nature of this HashTable.  # noqa: E501
        :type: str
        """
        if nature is None:
            raise ValueError("Invalid value for `nature`, must not be `None`")  # noqa: E501

        self._nature = nature

    @property
    def wording(self):
        """Gets the wording of this HashTable.  # noqa: E501


        :return: The wording of this HashTable.  # noqa: E501
        :rtype: str
        """
        return self._wording

    @wording.setter
    def wording(self, wording):
        """Sets the wording of this HashTable.


        :param wording: The wording of this HashTable.  # noqa: E501
        :type: str
        """
        if wording is None:
            raise ValueError("Invalid value for `wording`, must not be `None`")  # noqa: E501

        self._wording = wording

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HashTable):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
