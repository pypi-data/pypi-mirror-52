# coding: utf-8

"""
    Budgea API Documentation

    see https://www.budget-insight.com/budgea-api  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: rienafairefr@gmail.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class AccountType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'color': 'str',
        'display_name': 'str',
        'display_name_p': 'str',
        'id': 'int',
        'id_parent': 'int',
        'is_invest': 'bool',
        'name': 'str',
        'weboob_type_id': 'int'
    }

    attribute_map = {
        'color': 'color',
        'display_name': 'display_name',
        'display_name_p': 'display_name_p',
        'id': 'id',
        'id_parent': 'id_parent',
        'is_invest': 'is_invest',
        'name': 'name',
        'weboob_type_id': 'weboob_type_id'
    }

    def __init__(self, color=None, display_name=None, display_name_p=None, id=None, id_parent=None, is_invest=False, name=None, weboob_type_id=None):  # noqa: E501
        """AccountType - a model defined in OpenAPI"""  # noqa: E501

        self._color = None
        self._display_name = None
        self._display_name_p = None
        self._id = None
        self._id_parent = None
        self._is_invest = None
        self._name = None
        self._weboob_type_id = None
        self.discriminator = None

        if color is not None:
            self.color = color
        self.display_name = display_name
        self.display_name_p = display_name_p
        self.id = id
        if id_parent is not None:
            self.id_parent = id_parent
        self.is_invest = is_invest
        self.name = name
        self.weboob_type_id = weboob_type_id

    @property
    def color(self):
        """Gets the color of this AccountType.  # noqa: E501

        Color of the account type (hexdecimal)  # noqa: E501

        :return: The color of this AccountType.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this AccountType.

        Color of the account type (hexdecimal)  # noqa: E501

        :param color: The color of this AccountType.  # noqa: E501
        :type: str
        """

        self._color = color

    @property
    def display_name(self):
        """Gets the display_name of this AccountType.  # noqa: E501

        Name to display in singular  # noqa: E501

        :return: The display_name of this AccountType.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this AccountType.

        Name to display in singular  # noqa: E501

        :param display_name: The display_name of this AccountType.  # noqa: E501
        :type: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")  # noqa: E501

        self._display_name = display_name

    @property
    def display_name_p(self):
        """Gets the display_name_p of this AccountType.  # noqa: E501

        Name to display in plurial  # noqa: E501

        :return: The display_name_p of this AccountType.  # noqa: E501
        :rtype: str
        """
        return self._display_name_p

    @display_name_p.setter
    def display_name_p(self, display_name_p):
        """Sets the display_name_p of this AccountType.

        Name to display in plurial  # noqa: E501

        :param display_name_p: The display_name_p of this AccountType.  # noqa: E501
        :type: str
        """
        if display_name_p is None:
            raise ValueError("Invalid value for `display_name_p`, must not be `None`")  # noqa: E501

        self._display_name_p = display_name_p

    @property
    def id(self):
        """Gets the id of this AccountType.  # noqa: E501

        ID of the account type  # noqa: E501

        :return: The id of this AccountType.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AccountType.

        ID of the account type  # noqa: E501

        :param id: The id of this AccountType.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def id_parent(self):
        """Gets the id_parent of this AccountType.  # noqa: E501

        Id of the parent type  # noqa: E501

        :return: The id_parent of this AccountType.  # noqa: E501
        :rtype: int
        """
        return self._id_parent

    @id_parent.setter
    def id_parent(self, id_parent):
        """Sets the id_parent of this AccountType.

        Id of the parent type  # noqa: E501

        :param id_parent: The id_parent of this AccountType.  # noqa: E501
        :type: int
        """

        self._id_parent = id_parent

    @property
    def is_invest(self):
        """Gets the is_invest of this AccountType.  # noqa: E501

        Is it an investment account  # noqa: E501

        :return: The is_invest of this AccountType.  # noqa: E501
        :rtype: bool
        """
        return self._is_invest

    @is_invest.setter
    def is_invest(self, is_invest):
        """Sets the is_invest of this AccountType.

        Is it an investment account  # noqa: E501

        :param is_invest: The is_invest of this AccountType.  # noqa: E501
        :type: bool
        """
        if is_invest is None:
            raise ValueError("Invalid value for `is_invest`, must not be `None`")  # noqa: E501

        self._is_invest = is_invest

    @property
    def name(self):
        """Gets the name of this AccountType.  # noqa: E501

        Name of the account type  # noqa: E501

        :return: The name of this AccountType.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AccountType.

        Name of the account type  # noqa: E501

        :param name: The name of this AccountType.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def weboob_type_id(self):
        """Gets the weboob_type_id of this AccountType.  # noqa: E501

        Map to the weboob_type_id  # noqa: E501

        :return: The weboob_type_id of this AccountType.  # noqa: E501
        :rtype: int
        """
        return self._weboob_type_id

    @weboob_type_id.setter
    def weboob_type_id(self, weboob_type_id):
        """Sets the weboob_type_id of this AccountType.

        Map to the weboob_type_id  # noqa: E501

        :param weboob_type_id: The weboob_type_id of this AccountType.  # noqa: E501
        :type: int
        """
        if weboob_type_id is None:
            raise ValueError("Invalid value for `weboob_type_id`, must not be `None`")  # noqa: E501

        self._weboob_type_id = weboob_type_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
