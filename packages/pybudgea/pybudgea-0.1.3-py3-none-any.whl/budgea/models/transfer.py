# coding: utf-8

"""
    Budgea API Documentation

    see https://www.budget-insight.com/budgea-api  # noqa: E501

    OpenAPI spec version: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Transfer(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'account_balance': 'float',
        'account_iban': 'str',
        'amount': 'float',
        'currency': 'object',
        'error': 'str',
        'exec_date': 'date',
        'fees': 'float',
        'id': 'int',
        'id_account': 'int',
        'id_recipient': 'int',
        'id_transaction': 'int',
        'id_user': 'int',
        'label': 'str',
        'recipient_iban': 'str',
        'register_date': 'datetime',
        'state': 'str',
        'webid': 'str'
    }

    attribute_map = {
        'account_balance': 'account_balance',
        'account_iban': 'account_iban',
        'amount': 'amount',
        'currency': 'currency',
        'error': 'error',
        'exec_date': 'exec_date',
        'fees': 'fees',
        'id': 'id',
        'id_account': 'id_account',
        'id_recipient': 'id_recipient',
        'id_transaction': 'id_transaction',
        'id_user': 'id_user',
        'label': 'label',
        'recipient_iban': 'recipient_iban',
        'register_date': 'register_date',
        'state': 'state',
        'webid': 'webid'
    }

    def __init__(self, account_balance=None, account_iban=None, amount=None, currency=None, error=None, exec_date=None, fees=None, id=None, id_account=None, id_recipient=None, id_transaction=None, id_user=None, label=None, recipient_iban=None, register_date=None, state=None, webid=None):  # noqa: E501
        """Transfer - a model defined in OpenAPI"""  # noqa: E501

        self._account_balance = None
        self._account_iban = None
        self._amount = None
        self._currency = None
        self._error = None
        self._exec_date = None
        self._fees = None
        self._id = None
        self._id_account = None
        self._id_recipient = None
        self._id_transaction = None
        self._id_user = None
        self._label = None
        self._recipient_iban = None
        self._register_date = None
        self._state = None
        self._webid = None
        self.discriminator = None

        if account_balance is not None:
            self.account_balance = account_balance
        if account_iban is not None:
            self.account_iban = account_iban
        self.amount = amount
        if currency is not None:
            self.currency = currency
        if error is not None:
            self.error = error
        self.exec_date = exec_date
        if fees is not None:
            self.fees = fees
        self.id = id
        if id_account is not None:
            self.id_account = id_account
        if id_recipient is not None:
            self.id_recipient = id_recipient
        if id_transaction is not None:
            self.id_transaction = id_transaction
        if id_user is not None:
            self.id_user = id_user
        if label is not None:
            self.label = label
        if recipient_iban is not None:
            self.recipient_iban = recipient_iban
        self.register_date = register_date
        self.state = state
        if webid is not None:
            self.webid = webid

    @property
    def account_balance(self):
        """Gets the account_balance of this Transfer.  # noqa: E501

        Balance of the account just before the transfer  # noqa: E501

        :return: The account_balance of this Transfer.  # noqa: E501
        :rtype: float
        """
        return self._account_balance

    @account_balance.setter
    def account_balance(self, account_balance):
        """Sets the account_balance of this Transfer.

        Balance of the account just before the transfer  # noqa: E501

        :param account_balance: The account_balance of this Transfer.  # noqa: E501
        :type: float
        """

        self._account_balance = account_balance

    @property
    def account_iban(self):
        """Gets the account_iban of this Transfer.  # noqa: E501

        IBAN of the debited account  # noqa: E501

        :return: The account_iban of this Transfer.  # noqa: E501
        :rtype: str
        """
        return self._account_iban

    @account_iban.setter
    def account_iban(self, account_iban):
        """Sets the account_iban of this Transfer.

        IBAN of the debited account  # noqa: E501

        :param account_iban: The account_iban of this Transfer.  # noqa: E501
        :type: str
        """

        self._account_iban = account_iban

    @property
    def amount(self):
        """Gets the amount of this Transfer.  # noqa: E501

        Amount of the transfer  # noqa: E501

        :return: The amount of this Transfer.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Transfer.

        Amount of the transfer  # noqa: E501

        :param amount: The amount of this Transfer.  # noqa: E501
        :type: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def currency(self):
        """Gets the currency of this Transfer.  # noqa: E501

        Currency of the object  # noqa: E501

        :return: The currency of this Transfer.  # noqa: E501
        :rtype: object
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Transfer.

        Currency of the object  # noqa: E501

        :param currency: The currency of this Transfer.  # noqa: E501
        :type: object
        """

        self._currency = currency

    @property
    def error(self):
        """Gets the error of this Transfer.  # noqa: E501

        Error message during transfer, if any  # noqa: E501

        :return: The error of this Transfer.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this Transfer.

        Error message during transfer, if any  # noqa: E501

        :param error: The error of this Transfer.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def exec_date(self):
        """Gets the exec_date of this Transfer.  # noqa: E501

        Date when the transfer will be operated by the bank  # noqa: E501

        :return: The exec_date of this Transfer.  # noqa: E501
        :rtype: date
        """
        return self._exec_date

    @exec_date.setter
    def exec_date(self, exec_date):
        """Sets the exec_date of this Transfer.

        Date when the transfer will be operated by the bank  # noqa: E501

        :param exec_date: The exec_date of this Transfer.  # noqa: E501
        :type: date
        """
        if exec_date is None:
            raise ValueError("Invalid value for `exec_date`, must not be `None`")  # noqa: E501

        self._exec_date = exec_date

    @property
    def fees(self):
        """Gets the fees of this Transfer.  # noqa: E501

        Fees taken by the bank  # noqa: E501

        :return: The fees of this Transfer.  # noqa: E501
        :rtype: float
        """
        return self._fees

    @fees.setter
    def fees(self, fees):
        """Sets the fees of this Transfer.

        Fees taken by the bank  # noqa: E501

        :param fees: The fees of this Transfer.  # noqa: E501
        :type: float
        """

        self._fees = fees

    @property
    def id(self):
        """Gets the id of this Transfer.  # noqa: E501

        ID of transfer  # noqa: E501

        :return: The id of this Transfer.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Transfer.

        ID of transfer  # noqa: E501

        :param id: The id of this Transfer.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def id_account(self):
        """Gets the id_account of this Transfer.  # noqa: E501

        ID of the debited account  # noqa: E501

        :return: The id_account of this Transfer.  # noqa: E501
        :rtype: int
        """
        return self._id_account

    @id_account.setter
    def id_account(self, id_account):
        """Sets the id_account of this Transfer.

        ID of the debited account  # noqa: E501

        :param id_account: The id_account of this Transfer.  # noqa: E501
        :type: int
        """

        self._id_account = id_account

    @property
    def id_recipient(self):
        """Gets the id_recipient of this Transfer.  # noqa: E501

        ID of the recipient  # noqa: E501

        :return: The id_recipient of this Transfer.  # noqa: E501
        :rtype: int
        """
        return self._id_recipient

    @id_recipient.setter
    def id_recipient(self, id_recipient):
        """Sets the id_recipient of this Transfer.

        ID of the recipient  # noqa: E501

        :param id_recipient: The id_recipient of this Transfer.  # noqa: E501
        :type: int
        """

        self._id_recipient = id_recipient

    @property
    def id_transaction(self):
        """Gets the id_transaction of this Transfer.  # noqa: E501

        If found, ID of the related transaction  # noqa: E501

        :return: The id_transaction of this Transfer.  # noqa: E501
        :rtype: int
        """
        return self._id_transaction

    @id_transaction.setter
    def id_transaction(self, id_transaction):
        """Sets the id_transaction of this Transfer.

        If found, ID of the related transaction  # noqa: E501

        :param id_transaction: The id_transaction of this Transfer.  # noqa: E501
        :type: int
        """

        self._id_transaction = id_transaction

    @property
    def id_user(self):
        """Gets the id_user of this Transfer.  # noqa: E501

        ID of the related user  # noqa: E501

        :return: The id_user of this Transfer.  # noqa: E501
        :rtype: int
        """
        return self._id_user

    @id_user.setter
    def id_user(self, id_user):
        """Sets the id_user of this Transfer.

        ID of the related user  # noqa: E501

        :param id_user: The id_user of this Transfer.  # noqa: E501
        :type: int
        """

        self._id_user = id_user

    @property
    def label(self):
        """Gets the label of this Transfer.  # noqa: E501

        Label of the transfer  # noqa: E501

        :return: The label of this Transfer.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Transfer.

        Label of the transfer  # noqa: E501

        :param label: The label of this Transfer.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def recipient_iban(self):
        """Gets the recipient_iban of this Transfer.  # noqa: E501

        IBAN of the recipient in bank recipient list  # noqa: E501

        :return: The recipient_iban of this Transfer.  # noqa: E501
        :rtype: str
        """
        return self._recipient_iban

    @recipient_iban.setter
    def recipient_iban(self, recipient_iban):
        """Sets the recipient_iban of this Transfer.

        IBAN of the recipient in bank recipient list  # noqa: E501

        :param recipient_iban: The recipient_iban of this Transfer.  # noqa: E501
        :type: str
        """

        self._recipient_iban = recipient_iban

    @property
    def register_date(self):
        """Gets the register_date of this Transfer.  # noqa: E501

        Date when the transfer has been registered  # noqa: E501

        :return: The register_date of this Transfer.  # noqa: E501
        :rtype: datetime
        """
        return self._register_date

    @register_date.setter
    def register_date(self, register_date):
        """Sets the register_date of this Transfer.

        Date when the transfer has been registered  # noqa: E501

        :param register_date: The register_date of this Transfer.  # noqa: E501
        :type: datetime
        """
        if register_date is None:
            raise ValueError("Invalid value for `register_date`, must not be `None`")  # noqa: E501

        self._register_date = register_date

    @property
    def state(self):
        """Gets the state of this Transfer.  # noqa: E501

        State of the transfer (created, scheduled, validating, pending, coming, done, canceled, transactionNotFound, deleted, error, bug)  # noqa: E501

        :return: The state of this Transfer.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Transfer.

        State of the transfer (created, scheduled, validating, pending, coming, done, canceled, transactionNotFound, deleted, error, bug)  # noqa: E501

        :param state: The state of this Transfer.  # noqa: E501
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    @property
    def webid(self):
        """Gets the webid of this Transfer.  # noqa: E501

        WebID of the transfer  # noqa: E501

        :return: The webid of this Transfer.  # noqa: E501
        :rtype: str
        """
        return self._webid

    @webid.setter
    def webid(self, webid):
        """Sets the webid of this Transfer.

        WebID of the transfer  # noqa: E501

        :param webid: The webid of this Transfer.  # noqa: E501
        :type: str
        """

        self._webid = webid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Transfer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
