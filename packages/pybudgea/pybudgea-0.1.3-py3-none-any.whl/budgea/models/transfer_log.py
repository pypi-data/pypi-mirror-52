# coding: utf-8

"""
    Budgea API Documentation

    see https://www.budget-insight.com/budgea-api  # noqa: E501

    OpenAPI spec version: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class TransferLog(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'error': 'str',
        'fields': 'str',
        'id': 'int',
        'id_file': 'int',
        'id_transfer': 'int',
        'request_data': 'str',
        'state': 'str',
        'timestamp': 'datetime'
    }

    attribute_map = {
        'error': 'error',
        'fields': 'fields',
        'id': 'id',
        'id_file': 'id_file',
        'id_transfer': 'id_transfer',
        'request_data': 'request_data',
        'state': 'state',
        'timestamp': 'timestamp'
    }

    def __init__(self, error=None, fields=None, id=None, id_file=None, id_transfer=None, request_data=None, state=None, timestamp=None):  # noqa: E501
        """TransferLog - a model defined in OpenAPI"""  # noqa: E501

        self._error = None
        self._fields = None
        self._id = None
        self._id_file = None
        self._id_transfer = None
        self._request_data = None
        self._state = None
        self._timestamp = None
        self.discriminator = None

        if error is not None:
            self.error = error
        if fields is not None:
            self.fields = fields
        self.id = id
        if id_file is not None:
            self.id_file = id_file
        if id_transfer is not None:
            self.id_transfer = id_transfer
        if request_data is not None:
            self.request_data = request_data
        if state is not None:
            self.state = state
        self.timestamp = timestamp

    @property
    def error(self):
        """Gets the error of this TransferLog.  # noqa: E501

        Error message during transfer, if any  # noqa: E501

        :return: The error of this TransferLog.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this TransferLog.

        Error message during transfer, if any  # noqa: E501

        :param error: The error of this TransferLog.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def fields(self):
        """Gets the fields of this TransferLog.  # noqa: E501

        Fields for transfer in additionalInformationNeeded state with background option  # noqa: E501

        :return: The fields of this TransferLog.  # noqa: E501
        :rtype: str
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this TransferLog.

        Fields for transfer in additionalInformationNeeded state with background option  # noqa: E501

        :param fields: The fields of this TransferLog.  # noqa: E501
        :type: str
        """

        self._fields = fields

    @property
    def id(self):
        """Gets the id of this TransferLog.  # noqa: E501

        ID of the transfer log entry  # noqa: E501

        :return: The id of this TransferLog.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TransferLog.

        ID of the transfer log entry  # noqa: E501

        :param id: The id of this TransferLog.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def id_file(self):
        """Gets the id_file of this TransferLog.  # noqa: E501

        ID of the related file  # noqa: E501

        :return: The id_file of this TransferLog.  # noqa: E501
        :rtype: int
        """
        return self._id_file

    @id_file.setter
    def id_file(self, id_file):
        """Sets the id_file of this TransferLog.

        ID of the related file  # noqa: E501

        :param id_file: The id_file of this TransferLog.  # noqa: E501
        :type: int
        """

        self._id_file = id_file

    @property
    def id_transfer(self):
        """Gets the id_transfer of this TransferLog.  # noqa: E501

        ID of the related transfer  # noqa: E501

        :return: The id_transfer of this TransferLog.  # noqa: E501
        :rtype: int
        """
        return self._id_transfer

    @id_transfer.setter
    def id_transfer(self, id_transfer):
        """Sets the id_transfer of this TransferLog.

        ID of the related transfer  # noqa: E501

        :param id_transfer: The id_transfer of this TransferLog.  # noqa: E501
        :type: int
        """

        self._id_transfer = id_transfer

    @property
    def request_data(self):
        """Gets the request_data of this TransferLog.  # noqa: E501

        Data stored related to user who has requested the transfer  # noqa: E501

        :return: The request_data of this TransferLog.  # noqa: E501
        :rtype: str
        """
        return self._request_data

    @request_data.setter
    def request_data(self, request_data):
        """Sets the request_data of this TransferLog.

        Data stored related to user who has requested the transfer  # noqa: E501

        :param request_data: The request_data of this TransferLog.  # noqa: E501
        :type: str
        """

        self._request_data = request_data

    @property
    def state(self):
        """Gets the state of this TransferLog.  # noqa: E501

        State of the transfer (created, scheduled, validating, pending, done, canceled, error, bug)  # noqa: E501

        :return: The state of this TransferLog.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this TransferLog.

        State of the transfer (created, scheduled, validating, pending, done, canceled, error, bug)  # noqa: E501

        :param state: The state of this TransferLog.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def timestamp(self):
        """Gets the timestamp of this TransferLog.  # noqa: E501

        Timestamp of the log  # noqa: E501

        :return: The timestamp of this TransferLog.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this TransferLog.

        Timestamp of the log  # noqa: E501

        :param timestamp: The timestamp of this TransferLog.  # noqa: E501
        :type: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransferLog):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
