# coding: utf-8

"""
    Budgea API Documentation

    see https://www.budget-insight.com/budgea-api  # noqa: E501

    OpenAPI spec version: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Pocket(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'availability_date': 'date',
        'condition': 'str',
        'deleted': 'datetime',
        'id': 'int',
        'id_account': 'int',
        'id_investment': 'int',
        'label': 'str',
        'last_update': 'datetime',
        'quantity': 'float',
        'value': 'float'
    }

    attribute_map = {
        'availability_date': 'availability_date',
        'condition': 'condition',
        'deleted': 'deleted',
        'id': 'id',
        'id_account': 'id_account',
        'id_investment': 'id_investment',
        'label': 'label',
        'last_update': 'last_update',
        'quantity': 'quantity',
        'value': 'value'
    }

    def __init__(self, availability_date=None, condition='inconnu', deleted=None, id=None, id_account=None, id_investment=None, label=None, last_update=None, quantity=0.0, value=None):  # noqa: E501
        """Pocket - a model defined in OpenAPI"""  # noqa: E501

        self._availability_date = None
        self._condition = None
        self._deleted = None
        self._id = None
        self._id_account = None
        self._id_investment = None
        self._label = None
        self._last_update = None
        self._quantity = None
        self._value = None
        self.discriminator = None

        if availability_date is not None:
            self.availability_date = availability_date
        self.condition = condition
        if deleted is not None:
            self.deleted = deleted
        self.id = id
        self.id_account = id_account
        self.id_investment = id_investment
        if label is not None:
            self.label = label
        if last_update is not None:
            self.last_update = last_update
        if quantity is not None:
            self.quantity = quantity
        self.value = value

    @property
    def availability_date(self):
        """Gets the availability_date of this Pocket.  # noqa: E501

        Availability date of the pocket  # noqa: E501

        :return: The availability_date of this Pocket.  # noqa: E501
        :rtype: date
        """
        return self._availability_date

    @availability_date.setter
    def availability_date(self, availability_date):
        """Sets the availability_date of this Pocket.

        Availability date of the pocket  # noqa: E501

        :param availability_date: The availability_date of this Pocket.  # noqa: E501
        :type: date
        """

        self._availability_date = availability_date

    @property
    def condition(self):
        """Gets the condition of this Pocket.  # noqa: E501

        Withdrawal condition of the pocket  # noqa: E501

        :return: The condition of this Pocket.  # noqa: E501
        :rtype: str
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this Pocket.

        Withdrawal condition of the pocket  # noqa: E501

        :param condition: The condition of this Pocket.  # noqa: E501
        :type: str
        """
        if condition is None:
            raise ValueError("Invalid value for `condition`, must not be `None`")  # noqa: E501

        self._condition = condition

    @property
    def deleted(self):
        """Gets the deleted of this Pocket.  # noqa: E501

        If set, this pocket has been removed from the website  # noqa: E501

        :return: The deleted of this Pocket.  # noqa: E501
        :rtype: datetime
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Pocket.

        If set, this pocket has been removed from the website  # noqa: E501

        :param deleted: The deleted of this Pocket.  # noqa: E501
        :type: datetime
        """

        self._deleted = deleted

    @property
    def id(self):
        """Gets the id of this Pocket.  # noqa: E501

        ID of the pocket  # noqa: E501

        :return: The id of this Pocket.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Pocket.

        ID of the pocket  # noqa: E501

        :param id: The id of this Pocket.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def id_account(self):
        """Gets the id_account of this Pocket.  # noqa: E501

        ID of the related account  # noqa: E501

        :return: The id_account of this Pocket.  # noqa: E501
        :rtype: int
        """
        return self._id_account

    @id_account.setter
    def id_account(self, id_account):
        """Sets the id_account of this Pocket.

        ID of the related account  # noqa: E501

        :param id_account: The id_account of this Pocket.  # noqa: E501
        :type: int
        """
        if id_account is None:
            raise ValueError("Invalid value for `id_account`, must not be `None`")  # noqa: E501

        self._id_account = id_account

    @property
    def id_investment(self):
        """Gets the id_investment of this Pocket.  # noqa: E501

        ID of the related investment  # noqa: E501

        :return: The id_investment of this Pocket.  # noqa: E501
        :rtype: int
        """
        return self._id_investment

    @id_investment.setter
    def id_investment(self, id_investment):
        """Sets the id_investment of this Pocket.

        ID of the related investment  # noqa: E501

        :param id_investment: The id_investment of this Pocket.  # noqa: E501
        :type: int
        """
        if id_investment is None:
            raise ValueError("Invalid value for `id_investment`, must not be `None`")  # noqa: E501

        self._id_investment = id_investment

    @property
    def label(self):
        """Gets the label of this Pocket.  # noqa: E501

        Label of the pocket  # noqa: E501

        :return: The label of this Pocket.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Pocket.

        Label of the pocket  # noqa: E501

        :param label: The label of this Pocket.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def last_update(self):
        """Gets the last_update of this Pocket.  # noqa: E501

        Last update of the pocket  # noqa: E501

        :return: The last_update of this Pocket.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update

    @last_update.setter
    def last_update(self, last_update):
        """Sets the last_update of this Pocket.

        Last update of the pocket  # noqa: E501

        :param last_update: The last_update of this Pocket.  # noqa: E501
        :type: datetime
        """

        self._last_update = last_update

    @property
    def quantity(self):
        """Gets the quantity of this Pocket.  # noqa: E501

        Quantity of stocks  # noqa: E501

        :return: The quantity of this Pocket.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this Pocket.

        Quantity of stocks  # noqa: E501

        :param quantity: The quantity of this Pocket.  # noqa: E501
        :type: float
        """

        self._quantity = quantity

    @property
    def value(self):
        """Gets the value of this Pocket.  # noqa: E501

        Value of the pocket  # noqa: E501

        :return: The value of this Pocket.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Pocket.

        Value of the pocket  # noqa: E501

        :param value: The value of this Pocket.  # noqa: E501
        :type: float
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Pocket):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
