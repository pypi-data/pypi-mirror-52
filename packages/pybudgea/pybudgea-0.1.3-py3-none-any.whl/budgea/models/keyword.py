# coding: utf-8

"""
    Budgea API Documentation

    see https://www.budget-insight.com/budgea-api  # noqa: E501

    OpenAPI spec version: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Keyword(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'id_category': 'int',
        'income': 'bool',
        'keyword': 'str',
        'priority': 'int'
    }

    attribute_map = {
        'id': 'id',
        'id_category': 'id_category',
        'income': 'income',
        'keyword': 'keyword',
        'priority': 'priority'
    }

    def __init__(self, id=None, id_category=None, income=None, keyword=None, priority=None):  # noqa: E501
        """Keyword - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._id_category = None
        self._income = None
        self._keyword = None
        self._priority = None
        self.discriminator = None

        self.id = id
        self.id_category = id_category
        self.income = income
        self.keyword = keyword
        self.priority = priority

    @property
    def id(self):
        """Gets the id of this Keyword.  # noqa: E501


        :return: The id of this Keyword.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Keyword.


        :param id: The id of this Keyword.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def id_category(self):
        """Gets the id_category of this Keyword.  # noqa: E501


        :return: The id_category of this Keyword.  # noqa: E501
        :rtype: int
        """
        return self._id_category

    @id_category.setter
    def id_category(self, id_category):
        """Sets the id_category of this Keyword.


        :param id_category: The id_category of this Keyword.  # noqa: E501
        :type: int
        """
        if id_category is None:
            raise ValueError("Invalid value for `id_category`, must not be `None`")  # noqa: E501

        self._id_category = id_category

    @property
    def income(self):
        """Gets the income of this Keyword.  # noqa: E501


        :return: The income of this Keyword.  # noqa: E501
        :rtype: bool
        """
        return self._income

    @income.setter
    def income(self, income):
        """Sets the income of this Keyword.


        :param income: The income of this Keyword.  # noqa: E501
        :type: bool
        """
        if income is None:
            raise ValueError("Invalid value for `income`, must not be `None`")  # noqa: E501

        self._income = income

    @property
    def keyword(self):
        """Gets the keyword of this Keyword.  # noqa: E501


        :return: The keyword of this Keyword.  # noqa: E501
        :rtype: str
        """
        return self._keyword

    @keyword.setter
    def keyword(self, keyword):
        """Sets the keyword of this Keyword.


        :param keyword: The keyword of this Keyword.  # noqa: E501
        :type: str
        """
        if keyword is None:
            raise ValueError("Invalid value for `keyword`, must not be `None`")  # noqa: E501

        self._keyword = keyword

    @property
    def priority(self):
        """Gets the priority of this Keyword.  # noqa: E501


        :return: The priority of this Keyword.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this Keyword.


        :param priority: The priority of this Keyword.  # noqa: E501
        :type: int
        """
        if priority is None:
            raise ValueError("Invalid value for `priority`, must not be `None`")  # noqa: E501

        self._priority = priority

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Keyword):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
