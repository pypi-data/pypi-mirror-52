# coding: utf-8

"""
    Budgea API Documentation

    see https://www.budget-insight.com/budgea-api  # noqa: E501

    OpenAPI spec version: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from budgea.api_client import ApiClient


class AdministrationApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def clients_get(self, **kwargs):  # noqa: E501
        """List clients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clients_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand:
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.clients_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.clients_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def clients_get_with_http_info(self, **kwargs):  # noqa: E501
        """List clients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clients_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand:
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clients_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/clients', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20012',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def clients_id_client_delete(self, id_client, **kwargs):  # noqa: E501
        """Delete a client  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clients_id_client_delete(id_client, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_client: (required)
        :param str expand:
        :return: Client
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.clients_id_client_delete_with_http_info(id_client, **kwargs)  # noqa: E501
        else:
            (data) = self.clients_id_client_delete_with_http_info(id_client, **kwargs)  # noqa: E501
            return data

    def clients_id_client_delete_with_http_info(self, id_client, **kwargs):  # noqa: E501
        """Delete a client  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clients_id_client_delete_with_http_info(id_client, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_client: (required)
        :param str expand:
        :return: Client
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_client', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clients_id_client_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_client' is set
        if ('id_client' not in local_var_params or
                local_var_params['id_client'] is None):
            raise ValueError("Missing the required parameter `id_client` when calling `clients_id_client_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_client' in local_var_params:
            path_params['id_client'] = local_var_params['id_client']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{id_client}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Client',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def clients_id_client_get(self, id_client, **kwargs):  # noqa: E501
        """Get information about a client  # noqa: E501

        If you use the manage_token or a configuration token, you will get also the client_secret<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clients_id_client_get(id_client, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_client: (required)
        :param str expand:
        :return: Client
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.clients_id_client_get_with_http_info(id_client, **kwargs)  # noqa: E501
        else:
            (data) = self.clients_id_client_get_with_http_info(id_client, **kwargs)  # noqa: E501
            return data

    def clients_id_client_get_with_http_info(self, id_client, **kwargs):  # noqa: E501
        """Get information about a client  # noqa: E501

        If you use the manage_token or a configuration token, you will get also the client_secret<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clients_id_client_get_with_http_info(id_client, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_client: (required)
        :param str expand:
        :return: Client
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_client', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clients_id_client_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_client' is set
        if ('id_client' not in local_var_params or
                local_var_params['id_client'] is None):
            raise ValueError("Missing the required parameter `id_client` when calling `clients_id_client_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_client' in local_var_params:
            path_params['id_client'] = local_var_params['id_client']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{id_client}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Client',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def clients_id_client_logo_delete(self, id_client, **kwargs):  # noqa: E501
        """Delete the client logo  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clients_id_client_logo_delete(id_client, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_client: (required)
        :param str expand:
        :return: File
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.clients_id_client_logo_delete_with_http_info(id_client, **kwargs)  # noqa: E501
        else:
            (data) = self.clients_id_client_logo_delete_with_http_info(id_client, **kwargs)  # noqa: E501
            return data

    def clients_id_client_logo_delete_with_http_info(self, id_client, **kwargs):  # noqa: E501
        """Delete the client logo  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clients_id_client_logo_delete_with_http_info(id_client, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_client: (required)
        :param str expand:
        :return: File
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_client', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clients_id_client_logo_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_client' is set
        if ('id_client' not in local_var_params or
                local_var_params['id_client'] is None):
            raise ValueError("Missing the required parameter `id_client` when calling `clients_id_client_logo_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_client' in local_var_params:
            path_params['id_client'] = local_var_params['id_client']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{id_client}/logo', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='File',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def clients_id_client_logo_post(self, id_client, **kwargs):  # noqa: E501
        """Update the client logo  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clients_id_client_logo_post(id_client, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_client: (required)
        :param str expand:
        :return: File
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.clients_id_client_logo_post_with_http_info(id_client, **kwargs)  # noqa: E501
        else:
            (data) = self.clients_id_client_logo_post_with_http_info(id_client, **kwargs)  # noqa: E501
            return data

    def clients_id_client_logo_post_with_http_info(self, id_client, **kwargs):  # noqa: E501
        """Update the client logo  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clients_id_client_logo_post_with_http_info(id_client, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_client: (required)
        :param str expand:
        :return: File
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_client', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clients_id_client_logo_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_client' is set
        if ('id_client' not in local_var_params or
                local_var_params['id_client'] is None):
            raise ValueError("Missing the required parameter `id_client` when calling `clients_id_client_logo_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_client' in local_var_params:
            path_params['id_client'] = local_var_params['id_client']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{id_client}/logo', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='File',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def clients_id_client_put(self, id_client, **kwargs):  # noqa: E501
        """Update a client  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clients_id_client_put(id_client, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_client: (required)
        :param str expand:
        :param UNKNOWN_BASE_TYPE unknown_base_type:
        :return: Client
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.clients_id_client_put_with_http_info(id_client, **kwargs)  # noqa: E501
        else:
            (data) = self.clients_id_client_put_with_http_info(id_client, **kwargs)  # noqa: E501
            return data

    def clients_id_client_put_with_http_info(self, id_client, **kwargs):  # noqa: E501
        """Update a client  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clients_id_client_put_with_http_info(id_client, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_client: (required)
        :param str expand:
        :param UNKNOWN_BASE_TYPE unknown_base_type:
        :return: Client
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_client', 'expand', 'unknown_base_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clients_id_client_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_client' is set
        if ('id_client' not in local_var_params or
                local_var_params['id_client'] is None):
            raise ValueError("Missing the required parameter `id_client` when calling `clients_id_client_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_client' in local_var_params:
            path_params['id_client'] = local_var_params['id_client']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'unknown_base_type' in local_var_params:
            body_params = local_var_params['unknown_base_type']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{id_client}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Client',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def clients_post(self, **kwargs):  # noqa: E501
        """Create a client  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clients_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand:
        :param UNKNOWN_BASE_TYPE unknown_base_type:
        :return: Client
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.clients_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.clients_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def clients_post_with_http_info(self, **kwargs):  # noqa: E501
        """Create a client  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clients_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand:
        :param UNKNOWN_BASE_TYPE unknown_base_type:
        :return: Client
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['expand', 'unknown_base_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clients_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'unknown_base_type' in local_var_params:
            body_params = local_var_params['unknown_base_type']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/clients', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Client',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def config_get(self, **kwargs):  # noqa: E501
        """Get configuration of the API.  # noqa: E501

        <br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.config_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str search: limit the results to keys matching the given value
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.config_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.config_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def config_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get configuration of the API.  # noqa: E501

        <br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.config_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str search: limit the results to keys matching the given value
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['search']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method config_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'search' in local_var_params:
            query_params.append(('search', local_var_params['search']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def config_logs_get(self, **kwargs):  # noqa: E501
        """Get configuration change history of the API.  # noqa: E501

        <br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.config_logs_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str search: limit the results to keys matching the given value
        :param str type: type of change done on the configuration
        :param date min_date: minimal date of the change
        :param date max_date: maximum date of the change
        :param str expand:
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.config_logs_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.config_logs_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def config_logs_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get configuration change history of the API.  # noqa: E501

        <br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.config_logs_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str search: limit the results to keys matching the given value
        :param str type: type of change done on the configuration
        :param date min_date: minimal date of the change
        :param date max_date: maximum date of the change
        :param str expand:
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['search', 'type', 'min_date', 'max_date', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method config_logs_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'search' in local_var_params:
            query_params.append(('search', local_var_params['search']))  # noqa: E501
        if 'type' in local_var_params:
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'min_date' in local_var_params:
            query_params.append(('min_date', local_var_params['min_date']))  # noqa: E501
        if 'max_date' in local_var_params:
            query_params.append(('max_date', local_var_params['max_date']))  # noqa: E501
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/config/logs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20013',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def config_post(self, **kwargs):  # noqa: E501
        """Set a configuration value on the API.  # noqa: E501

        Request: { \"connection.disable_new\": \"0\", \"search\": \"connection.disable_new\" }<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.config_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str search: limit the results to keys matching the given value
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.config_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.config_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def config_post_with_http_info(self, **kwargs):  # noqa: E501
        """Set a configuration value on the API.  # noqa: E501

        Request: { \"connection.disable_new\": \"0\", \"search\": \"connection.disable_new\" }<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.config_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str search: limit the results to keys matching the given value
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['search']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method config_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'search' in local_var_params:
            query_params.append(('search', local_var_params['search']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'connection.disable_new'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/config', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def merchants_get(self, **kwargs):  # noqa: E501
        """List clients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.merchants_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand:
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.merchants_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.merchants_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def merchants_get_with_http_info(self, **kwargs):  # noqa: E501
        """List clients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.merchants_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand:
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method merchants_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/merchants', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20012',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def merchants_id_client_logo_delete(self, id_client, **kwargs):  # noqa: E501
        """Delete the client logo  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.merchants_id_client_logo_delete(id_client, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_client: (required)
        :param str expand:
        :return: File
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.merchants_id_client_logo_delete_with_http_info(id_client, **kwargs)  # noqa: E501
        else:
            (data) = self.merchants_id_client_logo_delete_with_http_info(id_client, **kwargs)  # noqa: E501
            return data

    def merchants_id_client_logo_delete_with_http_info(self, id_client, **kwargs):  # noqa: E501
        """Delete the client logo  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.merchants_id_client_logo_delete_with_http_info(id_client, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_client: (required)
        :param str expand:
        :return: File
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_client', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method merchants_id_client_logo_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_client' is set
        if ('id_client' not in local_var_params or
                local_var_params['id_client'] is None):
            raise ValueError("Missing the required parameter `id_client` when calling `merchants_id_client_logo_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_client' in local_var_params:
            path_params['id_client'] = local_var_params['id_client']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/merchants/{id_client}/logo', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='File',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def merchants_id_client_logo_post(self, id_client, **kwargs):  # noqa: E501
        """Update the client logo  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.merchants_id_client_logo_post(id_client, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_client: (required)
        :param str expand:
        :return: File
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.merchants_id_client_logo_post_with_http_info(id_client, **kwargs)  # noqa: E501
        else:
            (data) = self.merchants_id_client_logo_post_with_http_info(id_client, **kwargs)  # noqa: E501
            return data

    def merchants_id_client_logo_post_with_http_info(self, id_client, **kwargs):  # noqa: E501
        """Update the client logo  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.merchants_id_client_logo_post_with_http_info(id_client, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_client: (required)
        :param str expand:
        :return: File
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_client', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method merchants_id_client_logo_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_client' is set
        if ('id_client' not in local_var_params or
                local_var_params['id_client'] is None):
            raise ValueError("Missing the required parameter `id_client` when calling `merchants_id_client_logo_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_client' in local_var_params:
            path_params['id_client'] = local_var_params['id_client']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/merchants/{id_client}/logo', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='File',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def merchants_post(self, unknown_base_type, **kwargs):  # noqa: E501
        """Create a merchant. Needs a user identified in bearer to be used  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.merchants_post(unknown_base_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UNKNOWN_BASE_TYPE unknown_base_type: (required)
        :param str expand:
        :return: Client
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.merchants_post_with_http_info(unknown_base_type, **kwargs)  # noqa: E501
        else:
            (data) = self.merchants_post_with_http_info(unknown_base_type, **kwargs)  # noqa: E501
            return data

    def merchants_post_with_http_info(self, unknown_base_type, **kwargs):  # noqa: E501
        """Create a merchant. Needs a user identified in bearer to be used  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.merchants_post_with_http_info(unknown_base_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UNKNOWN_BASE_TYPE unknown_base_type: (required)
        :param str expand:
        :return: Client
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['unknown_base_type', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method merchants_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'unknown_base_type' is set
        if ('unknown_base_type' not in local_var_params or
                local_var_params['unknown_base_type'] is None):
            raise ValueError("Missing the required parameter `unknown_base_type` when calling `merchants_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'unknown_base_type' in local_var_params:
            body_params = local_var_params['unknown_base_type']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/merchants', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Client',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def monitoring_get(self, **kwargs):  # noqa: E501
        """get performances stats on this instance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.monitoring_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int period: number on days on which stats on synchronization have to be done per worker (Default: 1)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.monitoring_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.monitoring_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def monitoring_get_with_http_info(self, **kwargs):  # noqa: E501
        """get performances stats on this instance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.monitoring_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int period: number on days on which stats on synchronization have to be done per worker (Default: 1)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['period']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method monitoring_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'period' in local_var_params:
            query_params.append(('period', local_var_params['period']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/monitoring', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_sync_post(self, **kwargs):  # noqa: E501
        """Test synchronization on a random connection.  # noqa: E501

        It can be used to test receiving data on your webhooks.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_sync_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_sync_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.test_sync_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def test_sync_post_with_http_info(self, **kwargs):  # noqa: E501
        """Test synchronization on a random connection.  # noqa: E501

        It can be used to test receiving data on your webhooks.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_sync_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_sync_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/test/sync', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_webhooks_post(self, **kwargs):  # noqa: E501
        """Test synchronization on a random connection.  # noqa: E501

        It can be used to test receiving data on your webhooks.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_webhooks_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_webhooks_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.test_webhooks_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def test_webhooks_post_with_http_info(self, **kwargs):  # noqa: E501
        """Test synchronization on a random connection.  # noqa: E501

        It can be used to test receiving data on your webhooks.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_webhooks_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_webhooks_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/test/webhooks', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webhooks_auth_delete(self, **kwargs):  # noqa: E501
        """Deletes all webhook authentication types  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webhooks_auth_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand:
        :return: AuthProvider
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webhooks_auth_delete_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.webhooks_auth_delete_with_http_info(**kwargs)  # noqa: E501
            return data

    def webhooks_auth_delete_with_http_info(self, **kwargs):  # noqa: E501
        """Deletes all webhook authentication types  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webhooks_auth_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand:
        :return: AuthProvider
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webhooks_auth_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/webhooks/auth', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AuthProvider',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webhooks_auth_get(self, **kwargs):  # noqa: E501
        """Get webhooks authentication types  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webhooks_auth_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand:
        :return: InlineResponse20038
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webhooks_auth_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.webhooks_auth_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def webhooks_auth_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get webhooks authentication types  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webhooks_auth_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand:
        :return: InlineResponse20038
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webhooks_auth_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/webhooks/auth', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20038',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webhooks_auth_id_auth_delete(self, id_auth, **kwargs):  # noqa: E501
        """Deletes the webhook authentication type  # noqa: E501

        Updates the deleted field with the date of the deletion<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webhooks_auth_id_auth_delete(id_auth, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_auth: (required)
        :param str expand:
        :return: AuthProvider
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webhooks_auth_id_auth_delete_with_http_info(id_auth, **kwargs)  # noqa: E501
        else:
            (data) = self.webhooks_auth_id_auth_delete_with_http_info(id_auth, **kwargs)  # noqa: E501
            return data

    def webhooks_auth_id_auth_delete_with_http_info(self, id_auth, **kwargs):  # noqa: E501
        """Deletes the webhook authentication type  # noqa: E501

        Updates the deleted field with the date of the deletion<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webhooks_auth_id_auth_delete_with_http_info(id_auth, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_auth: (required)
        :param str expand:
        :return: AuthProvider
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_auth', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webhooks_auth_id_auth_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_auth' is set
        if ('id_auth' not in local_var_params or
                local_var_params['id_auth'] is None):
            raise ValueError("Missing the required parameter `id_auth` when calling `webhooks_auth_id_auth_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_auth' in local_var_params:
            path_params['id_auth'] = local_var_params['id_auth']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/webhooks/auth/{id_auth}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AuthProvider',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webhooks_auth_id_auth_post(self, id_auth, unknown_base_type, **kwargs):  # noqa: E501
        """Updates the webhook authentication type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webhooks_auth_id_auth_post(id_auth, unknown_base_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_auth: (required)
        :param UNKNOWN_BASE_TYPE unknown_base_type: (required)
        :param str expand:
        :return: AuthProvider
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webhooks_auth_id_auth_post_with_http_info(id_auth, unknown_base_type, **kwargs)  # noqa: E501
        else:
            (data) = self.webhooks_auth_id_auth_post_with_http_info(id_auth, unknown_base_type, **kwargs)  # noqa: E501
            return data

    def webhooks_auth_id_auth_post_with_http_info(self, id_auth, unknown_base_type, **kwargs):  # noqa: E501
        """Updates the webhook authentication type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webhooks_auth_id_auth_post_with_http_info(id_auth, unknown_base_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_auth: (required)
        :param UNKNOWN_BASE_TYPE unknown_base_type: (required)
        :param str expand:
        :return: AuthProvider
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_auth', 'unknown_base_type', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webhooks_auth_id_auth_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_auth' is set
        if ('id_auth' not in local_var_params or
                local_var_params['id_auth'] is None):
            raise ValueError("Missing the required parameter `id_auth` when calling `webhooks_auth_id_auth_post`")  # noqa: E501
        # verify the required parameter 'unknown_base_type' is set
        if ('unknown_base_type' not in local_var_params or
                local_var_params['unknown_base_type'] is None):
            raise ValueError("Missing the required parameter `unknown_base_type` when calling `webhooks_auth_id_auth_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_auth' in local_var_params:
            path_params['id_auth'] = local_var_params['id_auth']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'unknown_base_type' in local_var_params:
            body_params = local_var_params['unknown_base_type']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/webhooks/auth/{id_auth}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AuthProvider',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webhooks_auth_id_auth_put(self, id_auth, unknown_base_type, **kwargs):  # noqa: E501
        """Updates the webhook authentication type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webhooks_auth_id_auth_put(id_auth, unknown_base_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_auth: (required)
        :param UNKNOWN_BASE_TYPE unknown_base_type: (required)
        :param str expand:
        :return: AuthProvider
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webhooks_auth_id_auth_put_with_http_info(id_auth, unknown_base_type, **kwargs)  # noqa: E501
        else:
            (data) = self.webhooks_auth_id_auth_put_with_http_info(id_auth, unknown_base_type, **kwargs)  # noqa: E501
            return data

    def webhooks_auth_id_auth_put_with_http_info(self, id_auth, unknown_base_type, **kwargs):  # noqa: E501
        """Updates the webhook authentication type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webhooks_auth_id_auth_put_with_http_info(id_auth, unknown_base_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_auth: (required)
        :param UNKNOWN_BASE_TYPE unknown_base_type: (required)
        :param str expand:
        :return: AuthProvider
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_auth', 'unknown_base_type', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webhooks_auth_id_auth_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_auth' is set
        if ('id_auth' not in local_var_params or
                local_var_params['id_auth'] is None):
            raise ValueError("Missing the required parameter `id_auth` when calling `webhooks_auth_id_auth_put`")  # noqa: E501
        # verify the required parameter 'unknown_base_type' is set
        if ('unknown_base_type' not in local_var_params or
                local_var_params['unknown_base_type'] is None):
            raise ValueError("Missing the required parameter `unknown_base_type` when calling `webhooks_auth_id_auth_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_auth' in local_var_params:
            path_params['id_auth'] = local_var_params['id_auth']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'unknown_base_type' in local_var_params:
            body_params = local_var_params['unknown_base_type']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/webhooks/auth/{id_auth}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AuthProvider',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webhooks_auth_post(self, unknown_base_type, **kwargs):  # noqa: E501
        """Adds a new webhook authentication type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webhooks_auth_post(unknown_base_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UNKNOWN_BASE_TYPE unknown_base_type: (required)
        :param str expand:
        :return: AuthProvider
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webhooks_auth_post_with_http_info(unknown_base_type, **kwargs)  # noqa: E501
        else:
            (data) = self.webhooks_auth_post_with_http_info(unknown_base_type, **kwargs)  # noqa: E501
            return data

    def webhooks_auth_post_with_http_info(self, unknown_base_type, **kwargs):  # noqa: E501
        """Adds a new webhook authentication type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webhooks_auth_post_with_http_info(unknown_base_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UNKNOWN_BASE_TYPE unknown_base_type: (required)
        :param str expand:
        :return: AuthProvider
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['unknown_base_type', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webhooks_auth_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'unknown_base_type' is set
        if ('unknown_base_type' not in local_var_params or
                local_var_params['unknown_base_type'] is None):
            raise ValueError("Missing the required parameter `unknown_base_type` when calling `webhooks_auth_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'unknown_base_type' in local_var_params:
            body_params = local_var_params['unknown_base_type']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/webhooks/auth', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AuthProvider',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webhooks_delete(self, **kwargs):  # noqa: E501
        """Deletes all webhooks  # noqa: E501

        Updates the deleted field with the date of the deletion<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webhooks_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand:
        :return: Webhook
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webhooks_delete_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.webhooks_delete_with_http_info(**kwargs)  # noqa: E501
            return data

    def webhooks_delete_with_http_info(self, **kwargs):  # noqa: E501
        """Deletes all webhooks  # noqa: E501

        Updates the deleted field with the date of the deletion<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webhooks_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand:
        :return: Webhook
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webhooks_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/webhooks', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Webhook',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webhooks_get(self, **kwargs):  # noqa: E501
        """Get webhooks  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webhooks_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand:
        :return: InlineResponse20037
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webhooks_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.webhooks_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def webhooks_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get webhooks  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webhooks_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand:
        :return: InlineResponse20037
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webhooks_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/webhooks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20037',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webhooks_id_webhook_add_to_data_delete(self, id_webhook, **kwargs):  # noqa: E501
        """delete all entries  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webhooks_id_webhook_add_to_data_delete(id_webhook, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_webhook: (required)
        :param str expand:
        :return: Webhook
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webhooks_id_webhook_add_to_data_delete_with_http_info(id_webhook, **kwargs)  # noqa: E501
        else:
            (data) = self.webhooks_id_webhook_add_to_data_delete_with_http_info(id_webhook, **kwargs)  # noqa: E501
            return data

    def webhooks_id_webhook_add_to_data_delete_with_http_info(self, id_webhook, **kwargs):  # noqa: E501
        """delete all entries  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webhooks_id_webhook_add_to_data_delete_with_http_info(id_webhook, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_webhook: (required)
        :param str expand:
        :return: Webhook
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_webhook', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webhooks_id_webhook_add_to_data_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_webhook' is set
        if ('id_webhook' not in local_var_params or
                local_var_params['id_webhook'] is None):
            raise ValueError("Missing the required parameter `id_webhook` when calling `webhooks_id_webhook_add_to_data_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_webhook' in local_var_params:
            path_params['id_webhook'] = local_var_params['id_webhook']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/webhooks/{id_webhook}/add_to_data', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Webhook',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webhooks_id_webhook_add_to_data_get(self, id_webhook, **kwargs):  # noqa: E501
        """retrieve the list of the value to add in webhooks when sending the requested webhook  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webhooks_id_webhook_add_to_data_get(id_webhook, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_webhook: (required)
        :param str expand:
        :return: InlineResponse20037
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webhooks_id_webhook_add_to_data_get_with_http_info(id_webhook, **kwargs)  # noqa: E501
        else:
            (data) = self.webhooks_id_webhook_add_to_data_get_with_http_info(id_webhook, **kwargs)  # noqa: E501
            return data

    def webhooks_id_webhook_add_to_data_get_with_http_info(self, id_webhook, **kwargs):  # noqa: E501
        """retrieve the list of the value to add in webhooks when sending the requested webhook  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webhooks_id_webhook_add_to_data_get_with_http_info(id_webhook, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_webhook: (required)
        :param str expand:
        :return: InlineResponse20037
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_webhook', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webhooks_id_webhook_add_to_data_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_webhook' is set
        if ('id_webhook' not in local_var_params or
                local_var_params['id_webhook'] is None):
            raise ValueError("Missing the required parameter `id_webhook` when calling `webhooks_id_webhook_add_to_data_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_webhook' in local_var_params:
            path_params['id_webhook'] = local_var_params['id_webhook']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/webhooks/{id_webhook}/add_to_data', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20037',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webhooks_id_webhook_add_to_data_key_delete(self, id_webhook, key, **kwargs):  # noqa: E501
        """delete the requested entry  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webhooks_id_webhook_add_to_data_key_delete(id_webhook, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_webhook: (required)
        :param str key: (required)
        :param str expand:
        :return: Webhook
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webhooks_id_webhook_add_to_data_key_delete_with_http_info(id_webhook, key, **kwargs)  # noqa: E501
        else:
            (data) = self.webhooks_id_webhook_add_to_data_key_delete_with_http_info(id_webhook, key, **kwargs)  # noqa: E501
            return data

    def webhooks_id_webhook_add_to_data_key_delete_with_http_info(self, id_webhook, key, **kwargs):  # noqa: E501
        """delete the requested entry  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webhooks_id_webhook_add_to_data_key_delete_with_http_info(id_webhook, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_webhook: (required)
        :param str key: (required)
        :param str expand:
        :return: Webhook
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_webhook', 'key', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webhooks_id_webhook_add_to_data_key_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_webhook' is set
        if ('id_webhook' not in local_var_params or
                local_var_params['id_webhook'] is None):
            raise ValueError("Missing the required parameter `id_webhook` when calling `webhooks_id_webhook_add_to_data_key_delete`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in local_var_params or
                local_var_params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `webhooks_id_webhook_add_to_data_key_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_webhook' in local_var_params:
            path_params['id_webhook'] = local_var_params['id_webhook']  # noqa: E501
        if 'key' in local_var_params:
            path_params['key'] = local_var_params['key']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/webhooks/{id_webhook}/add_to_data/{key}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Webhook',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webhooks_id_webhook_add_to_data_key_get(self, id_webhook, key, **kwargs):  # noqa: E501
        """retrieve the value to add in the requested webhook for the requested name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webhooks_id_webhook_add_to_data_key_get(id_webhook, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_webhook: (required)
        :param str key: (required)
        :param str expand:
        :return: Webhook
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webhooks_id_webhook_add_to_data_key_get_with_http_info(id_webhook, key, **kwargs)  # noqa: E501
        else:
            (data) = self.webhooks_id_webhook_add_to_data_key_get_with_http_info(id_webhook, key, **kwargs)  # noqa: E501
            return data

    def webhooks_id_webhook_add_to_data_key_get_with_http_info(self, id_webhook, key, **kwargs):  # noqa: E501
        """retrieve the value to add in the requested webhook for the requested name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webhooks_id_webhook_add_to_data_key_get_with_http_info(id_webhook, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_webhook: (required)
        :param str key: (required)
        :param str expand:
        :return: Webhook
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_webhook', 'key', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webhooks_id_webhook_add_to_data_key_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_webhook' is set
        if ('id_webhook' not in local_var_params or
                local_var_params['id_webhook'] is None):
            raise ValueError("Missing the required parameter `id_webhook` when calling `webhooks_id_webhook_add_to_data_key_get`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in local_var_params or
                local_var_params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `webhooks_id_webhook_add_to_data_key_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_webhook' in local_var_params:
            path_params['id_webhook'] = local_var_params['id_webhook']  # noqa: E501
        if 'key' in local_var_params:
            path_params['key'] = local_var_params['key']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/webhooks/{id_webhook}/add_to_data/{key}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Webhook',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webhooks_id_webhook_add_to_data_key_post(self, id_webhook, key, **kwargs):  # noqa: E501
        """upate the requested field to store in user config when calling the endpoint  # noqa: E501

        For each parameter, a value will be added in the webhook data. Use the key to set the name of the field. The values that can be added are to be found in the user configuration.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webhooks_id_webhook_add_to_data_key_post(id_webhook, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_webhook: (required)
        :param str key: (required)
        :param str expand:
        :return: Webhook
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webhooks_id_webhook_add_to_data_key_post_with_http_info(id_webhook, key, **kwargs)  # noqa: E501
        else:
            (data) = self.webhooks_id_webhook_add_to_data_key_post_with_http_info(id_webhook, key, **kwargs)  # noqa: E501
            return data

    def webhooks_id_webhook_add_to_data_key_post_with_http_info(self, id_webhook, key, **kwargs):  # noqa: E501
        """upate the requested field to store in user config when calling the endpoint  # noqa: E501

        For each parameter, a value will be added in the webhook data. Use the key to set the name of the field. The values that can be added are to be found in the user configuration.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webhooks_id_webhook_add_to_data_key_post_with_http_info(id_webhook, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_webhook: (required)
        :param str key: (required)
        :param str expand:
        :return: Webhook
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_webhook', 'key', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webhooks_id_webhook_add_to_data_key_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_webhook' is set
        if ('id_webhook' not in local_var_params or
                local_var_params['id_webhook'] is None):
            raise ValueError("Missing the required parameter `id_webhook` when calling `webhooks_id_webhook_add_to_data_key_post`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in local_var_params or
                local_var_params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `webhooks_id_webhook_add_to_data_key_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_webhook' in local_var_params:
            path_params['id_webhook'] = local_var_params['id_webhook']  # noqa: E501
        if 'key' in local_var_params:
            path_params['key'] = local_var_params['key']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/webhooks/{id_webhook}/add_to_data/{key}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Webhook',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webhooks_id_webhook_add_to_data_post(self, id_webhook, **kwargs):  # noqa: E501
        """Setup a field to store in user config when calling the endpoint  # noqa: E501

        For each parameter, a value will be added in the webhook data. Use the key to set the name of the field. The values that can be added are to be found in the user configuration.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webhooks_id_webhook_add_to_data_post(id_webhook, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_webhook: (required)
        :param str expand:
        :return: Webhook
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webhooks_id_webhook_add_to_data_post_with_http_info(id_webhook, **kwargs)  # noqa: E501
        else:
            (data) = self.webhooks_id_webhook_add_to_data_post_with_http_info(id_webhook, **kwargs)  # noqa: E501
            return data

    def webhooks_id_webhook_add_to_data_post_with_http_info(self, id_webhook, **kwargs):  # noqa: E501
        """Setup a field to store in user config when calling the endpoint  # noqa: E501

        For each parameter, a value will be added in the webhook data. Use the key to set the name of the field. The values that can be added are to be found in the user configuration.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webhooks_id_webhook_add_to_data_post_with_http_info(id_webhook, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_webhook: (required)
        :param str expand:
        :return: Webhook
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_webhook', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webhooks_id_webhook_add_to_data_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_webhook' is set
        if ('id_webhook' not in local_var_params or
                local_var_params['id_webhook'] is None):
            raise ValueError("Missing the required parameter `id_webhook` when calling `webhooks_id_webhook_add_to_data_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_webhook' in local_var_params:
            path_params['id_webhook'] = local_var_params['id_webhook']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/webhooks/{id_webhook}/add_to_data', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Webhook',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webhooks_id_webhook_delete(self, id_webhook, **kwargs):  # noqa: E501
        """Deletes a webhook  # noqa: E501

        Updates the deleted field with the date of the deletion<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webhooks_id_webhook_delete(id_webhook, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_webhook: (required)
        :param str expand:
        :return: Webhook
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webhooks_id_webhook_delete_with_http_info(id_webhook, **kwargs)  # noqa: E501
        else:
            (data) = self.webhooks_id_webhook_delete_with_http_info(id_webhook, **kwargs)  # noqa: E501
            return data

    def webhooks_id_webhook_delete_with_http_info(self, id_webhook, **kwargs):  # noqa: E501
        """Deletes a webhook  # noqa: E501

        Updates the deleted field with the date of the deletion<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webhooks_id_webhook_delete_with_http_info(id_webhook, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_webhook: (required)
        :param str expand:
        :return: Webhook
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_webhook', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webhooks_id_webhook_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_webhook' is set
        if ('id_webhook' not in local_var_params or
                local_var_params['id_webhook'] is None):
            raise ValueError("Missing the required parameter `id_webhook` when calling `webhooks_id_webhook_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_webhook' in local_var_params:
            path_params['id_webhook'] = local_var_params['id_webhook']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/webhooks/{id_webhook}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Webhook',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webhooks_id_webhook_logs_get(self, id_webhook, **kwargs):  # noqa: E501
        """Get webhooks logs.  # noqa: E501

        Get logs of the webhooks.<br><br>By default, it selects logs for the last month. You can use \"min_date\" and \"max_date\" to change boundary dates.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webhooks_id_webhook_logs_get(id_webhook, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_webhook: (required)
        :param int limit: limit number of results
        :param int offset: offset of first result
        :param date min_date: minimal (inclusive) date
        :param date max_date: maximum (inclusive) date
        :param str expand:
        :return: InlineResponse20039
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webhooks_id_webhook_logs_get_with_http_info(id_webhook, **kwargs)  # noqa: E501
        else:
            (data) = self.webhooks_id_webhook_logs_get_with_http_info(id_webhook, **kwargs)  # noqa: E501
            return data

    def webhooks_id_webhook_logs_get_with_http_info(self, id_webhook, **kwargs):  # noqa: E501
        """Get webhooks logs.  # noqa: E501

        Get logs of the webhooks.<br><br>By default, it selects logs for the last month. You can use \"min_date\" and \"max_date\" to change boundary dates.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webhooks_id_webhook_logs_get_with_http_info(id_webhook, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_webhook: (required)
        :param int limit: limit number of results
        :param int offset: offset of first result
        :param date min_date: minimal (inclusive) date
        :param date max_date: maximum (inclusive) date
        :param str expand:
        :return: InlineResponse20039
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_webhook', 'limit', 'offset', 'min_date', 'max_date', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webhooks_id_webhook_logs_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_webhook' is set
        if ('id_webhook' not in local_var_params or
                local_var_params['id_webhook'] is None):
            raise ValueError("Missing the required parameter `id_webhook` when calling `webhooks_id_webhook_logs_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_webhook' in local_var_params:
            path_params['id_webhook'] = local_var_params['id_webhook']  # noqa: E501

        query_params = []
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params:
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'min_date' in local_var_params:
            query_params.append(('min_date', local_var_params['min_date']))  # noqa: E501
        if 'max_date' in local_var_params:
            query_params.append(('max_date', local_var_params['max_date']))  # noqa: E501
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/webhooks/{id_webhook}/logs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20039',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webhooks_id_webhook_post(self, id_webhook, **kwargs):  # noqa: E501
        """Updates a webhook  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webhooks_id_webhook_post(id_webhook, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_webhook: (required)
        :param str expand:
        :param UNKNOWN_BASE_TYPE unknown_base_type:
        :return: Webhook
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webhooks_id_webhook_post_with_http_info(id_webhook, **kwargs)  # noqa: E501
        else:
            (data) = self.webhooks_id_webhook_post_with_http_info(id_webhook, **kwargs)  # noqa: E501
            return data

    def webhooks_id_webhook_post_with_http_info(self, id_webhook, **kwargs):  # noqa: E501
        """Updates a webhook  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webhooks_id_webhook_post_with_http_info(id_webhook, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_webhook: (required)
        :param str expand:
        :param UNKNOWN_BASE_TYPE unknown_base_type:
        :return: Webhook
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_webhook', 'expand', 'unknown_base_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webhooks_id_webhook_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_webhook' is set
        if ('id_webhook' not in local_var_params or
                local_var_params['id_webhook'] is None):
            raise ValueError("Missing the required parameter `id_webhook` when calling `webhooks_id_webhook_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_webhook' in local_var_params:
            path_params['id_webhook'] = local_var_params['id_webhook']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'unknown_base_type' in local_var_params:
            body_params = local_var_params['unknown_base_type']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/webhooks/{id_webhook}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Webhook',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webhooks_id_webhook_put(self, id_webhook, **kwargs):  # noqa: E501
        """Updates a webhook  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webhooks_id_webhook_put(id_webhook, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_webhook: (required)
        :param str expand:
        :param UNKNOWN_BASE_TYPE unknown_base_type:
        :return: Webhook
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webhooks_id_webhook_put_with_http_info(id_webhook, **kwargs)  # noqa: E501
        else:
            (data) = self.webhooks_id_webhook_put_with_http_info(id_webhook, **kwargs)  # noqa: E501
            return data

    def webhooks_id_webhook_put_with_http_info(self, id_webhook, **kwargs):  # noqa: E501
        """Updates a webhook  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webhooks_id_webhook_put_with_http_info(id_webhook, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_webhook: (required)
        :param str expand:
        :param UNKNOWN_BASE_TYPE unknown_base_type:
        :return: Webhook
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_webhook', 'expand', 'unknown_base_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webhooks_id_webhook_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_webhook' is set
        if ('id_webhook' not in local_var_params or
                local_var_params['id_webhook'] is None):
            raise ValueError("Missing the required parameter `id_webhook` when calling `webhooks_id_webhook_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_webhook' in local_var_params:
            path_params['id_webhook'] = local_var_params['id_webhook']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'unknown_base_type' in local_var_params:
            body_params = local_var_params['unknown_base_type']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/webhooks/{id_webhook}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Webhook',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webhooks_post(self, **kwargs):  # noqa: E501
        """Adds a new webhook  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webhooks_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand:
        :param UNKNOWN_BASE_TYPE unknown_base_type:
        :return: Webhook
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webhooks_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.webhooks_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def webhooks_post_with_http_info(self, **kwargs):  # noqa: E501
        """Adds a new webhook  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webhooks_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand:
        :param UNKNOWN_BASE_TYPE unknown_base_type:
        :return: Webhook
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['expand', 'unknown_base_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webhooks_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'unknown_base_type' in local_var_params:
            body_params = local_var_params['unknown_base_type']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/webhooks', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Webhook',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
