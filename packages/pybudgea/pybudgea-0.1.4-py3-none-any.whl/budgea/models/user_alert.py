# coding: utf-8

"""
    Budgea API Documentation

    see https://www.budget-insight.com/budgea-api  # noqa: E501

    OpenAPI spec version: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class UserAlert(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'apply': 'str',
        'balance_max': 'float',
        'balance_min1': 'float',
        'balance_min2': 'float',
        'date_range': 'int',
        'enabled': 'bool',
        'expense_max': 'float',
        'id': 'int',
        'income_max': 'float',
        'resume_enabled': 'bool',
        'resume_frequency': 'int',
        'transaction_types': 'str',
        'type': 'str',
        'value_type': 'str'
    }

    attribute_map = {
        'apply': 'apply',
        'balance_max': 'balance_max',
        'balance_min1': 'balance_min1',
        'balance_min2': 'balance_min2',
        'date_range': 'date_range',
        'enabled': 'enabled',
        'expense_max': 'expense_max',
        'id': 'id',
        'income_max': 'income_max',
        'resume_enabled': 'resume_enabled',
        'resume_frequency': 'resume_frequency',
        'transaction_types': 'transaction_types',
        'type': 'type',
        'value_type': 'value_type'
    }

    def __init__(self, apply=None, balance_max=10000.0, balance_min1=500.0, balance_min2=0.0, date_range=None, enabled=True, expense_max=500.0, id=None, income_max=500.0, resume_enabled=True, resume_frequency=None, transaction_types=None, type='transactions', value_type='flat'):  # noqa: E501
        """UserAlert - a model defined in OpenAPI"""  # noqa: E501

        self._apply = None
        self._balance_max = None
        self._balance_min1 = None
        self._balance_min2 = None
        self._date_range = None
        self._enabled = None
        self._expense_max = None
        self._id = None
        self._income_max = None
        self._resume_enabled = None
        self._resume_frequency = None
        self._transaction_types = None
        self._type = None
        self._value_type = None
        self.discriminator = None

        if apply is not None:
            self.apply = apply
        if balance_max is not None:
            self.balance_max = balance_max
        if balance_min1 is not None:
            self.balance_min1 = balance_min1
        if balance_min2 is not None:
            self.balance_min2 = balance_min2
        if date_range is not None:
            self.date_range = date_range
        if enabled is not None:
            self.enabled = enabled
        if expense_max is not None:
            self.expense_max = expense_max
        self.id = id
        if income_max is not None:
            self.income_max = income_max
        if resume_enabled is not None:
            self.resume_enabled = resume_enabled
        self.resume_frequency = resume_frequency
        if transaction_types is not None:
            self.transaction_types = transaction_types
        self.type = type
        self.value_type = value_type

    @property
    def apply(self):
        """Gets the apply of this UserAlert.  # noqa: E501


        :return: The apply of this UserAlert.  # noqa: E501
        :rtype: str
        """
        return self._apply

    @apply.setter
    def apply(self, apply):
        """Sets the apply of this UserAlert.


        :param apply: The apply of this UserAlert.  # noqa: E501
        :type: str
        """

        self._apply = apply

    @property
    def balance_max(self):
        """Gets the balance_max of this UserAlert.  # noqa: E501


        :return: The balance_max of this UserAlert.  # noqa: E501
        :rtype: float
        """
        return self._balance_max

    @balance_max.setter
    def balance_max(self, balance_max):
        """Sets the balance_max of this UserAlert.


        :param balance_max: The balance_max of this UserAlert.  # noqa: E501
        :type: float
        """

        self._balance_max = balance_max

    @property
    def balance_min1(self):
        """Gets the balance_min1 of this UserAlert.  # noqa: E501


        :return: The balance_min1 of this UserAlert.  # noqa: E501
        :rtype: float
        """
        return self._balance_min1

    @balance_min1.setter
    def balance_min1(self, balance_min1):
        """Sets the balance_min1 of this UserAlert.


        :param balance_min1: The balance_min1 of this UserAlert.  # noqa: E501
        :type: float
        """

        self._balance_min1 = balance_min1

    @property
    def balance_min2(self):
        """Gets the balance_min2 of this UserAlert.  # noqa: E501


        :return: The balance_min2 of this UserAlert.  # noqa: E501
        :rtype: float
        """
        return self._balance_min2

    @balance_min2.setter
    def balance_min2(self, balance_min2):
        """Sets the balance_min2 of this UserAlert.


        :param balance_min2: The balance_min2 of this UserAlert.  # noqa: E501
        :type: float
        """

        self._balance_min2 = balance_min2

    @property
    def date_range(self):
        """Gets the date_range of this UserAlert.  # noqa: E501


        :return: The date_range of this UserAlert.  # noqa: E501
        :rtype: int
        """
        return self._date_range

    @date_range.setter
    def date_range(self, date_range):
        """Sets the date_range of this UserAlert.


        :param date_range: The date_range of this UserAlert.  # noqa: E501
        :type: int
        """

        self._date_range = date_range

    @property
    def enabled(self):
        """Gets the enabled of this UserAlert.  # noqa: E501


        :return: The enabled of this UserAlert.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this UserAlert.


        :param enabled: The enabled of this UserAlert.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def expense_max(self):
        """Gets the expense_max of this UserAlert.  # noqa: E501


        :return: The expense_max of this UserAlert.  # noqa: E501
        :rtype: float
        """
        return self._expense_max

    @expense_max.setter
    def expense_max(self, expense_max):
        """Sets the expense_max of this UserAlert.


        :param expense_max: The expense_max of this UserAlert.  # noqa: E501
        :type: float
        """

        self._expense_max = expense_max

    @property
    def id(self):
        """Gets the id of this UserAlert.  # noqa: E501


        :return: The id of this UserAlert.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserAlert.


        :param id: The id of this UserAlert.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def income_max(self):
        """Gets the income_max of this UserAlert.  # noqa: E501


        :return: The income_max of this UserAlert.  # noqa: E501
        :rtype: float
        """
        return self._income_max

    @income_max.setter
    def income_max(self, income_max):
        """Sets the income_max of this UserAlert.


        :param income_max: The income_max of this UserAlert.  # noqa: E501
        :type: float
        """

        self._income_max = income_max

    @property
    def resume_enabled(self):
        """Gets the resume_enabled of this UserAlert.  # noqa: E501


        :return: The resume_enabled of this UserAlert.  # noqa: E501
        :rtype: bool
        """
        return self._resume_enabled

    @resume_enabled.setter
    def resume_enabled(self, resume_enabled):
        """Sets the resume_enabled of this UserAlert.


        :param resume_enabled: The resume_enabled of this UserAlert.  # noqa: E501
        :type: bool
        """

        self._resume_enabled = resume_enabled

    @property
    def resume_frequency(self):
        """Gets the resume_frequency of this UserAlert.  # noqa: E501


        :return: The resume_frequency of this UserAlert.  # noqa: E501
        :rtype: int
        """
        return self._resume_frequency

    @resume_frequency.setter
    def resume_frequency(self, resume_frequency):
        """Sets the resume_frequency of this UserAlert.


        :param resume_frequency: The resume_frequency of this UserAlert.  # noqa: E501
        :type: int
        """
        if resume_frequency is None:
            raise ValueError("Invalid value for `resume_frequency`, must not be `None`")  # noqa: E501

        self._resume_frequency = resume_frequency

    @property
    def transaction_types(self):
        """Gets the transaction_types of this UserAlert.  # noqa: E501


        :return: The transaction_types of this UserAlert.  # noqa: E501
        :rtype: str
        """
        return self._transaction_types

    @transaction_types.setter
    def transaction_types(self, transaction_types):
        """Sets the transaction_types of this UserAlert.


        :param transaction_types: The transaction_types of this UserAlert.  # noqa: E501
        :type: str
        """

        self._transaction_types = transaction_types

    @property
    def type(self):
        """Gets the type of this UserAlert.  # noqa: E501


        :return: The type of this UserAlert.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this UserAlert.


        :param type: The type of this UserAlert.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def value_type(self):
        """Gets the value_type of this UserAlert.  # noqa: E501


        :return: The value_type of this UserAlert.  # noqa: E501
        :rtype: str
        """
        return self._value_type

    @value_type.setter
    def value_type(self, value_type):
        """Sets the value_type of this UserAlert.


        :param value_type: The value_type of this UserAlert.  # noqa: E501
        :type: str
        """
        if value_type is None:
            raise ValueError("Invalid value for `value_type`, must not be `None`")  # noqa: E501

        self._value_type = value_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserAlert):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
