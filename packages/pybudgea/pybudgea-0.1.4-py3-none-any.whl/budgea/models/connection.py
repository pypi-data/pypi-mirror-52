# coding: utf-8

"""
    Budgea API Documentation

    see https://www.budget-insight.com/budgea-api  # noqa: E501

    OpenAPI spec version: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Connection(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'active': 'bool',
        'error': 'str',
        'expire': 'datetime',
        'id': 'int',
        'id_connector': 'int',
        'id_user': 'int',
        'last_push': 'datetime',
        'last_update': 'datetime',
        'next_try': 'datetime'
    }

    attribute_map = {
        'active': 'active',
        'error': 'error',
        'expire': 'expire',
        'id': 'id',
        'id_connector': 'id_connector',
        'id_user': 'id_user',
        'last_push': 'last_push',
        'last_update': 'last_update',
        'next_try': 'next_try'
    }

    def __init__(self, active=True, error=None, expire=None, id=None, id_connector=None, id_user=None, last_push=None, last_update=None, next_try=None):  # noqa: E501
        """Connection - a model defined in OpenAPI"""  # noqa: E501

        self._active = None
        self._error = None
        self._expire = None
        self._id = None
        self._id_connector = None
        self._id_user = None
        self._last_push = None
        self._last_update = None
        self._next_try = None
        self.discriminator = None

        self.active = active
        if error is not None:
            self.error = error
        if expire is not None:
            self.expire = expire
        self.id = id
        self.id_connector = id_connector
        if id_user is not None:
            self.id_user = id_user
        if last_push is not None:
            self.last_push = last_push
        if last_update is not None:
            self.last_update = last_update
        if next_try is not None:
            self.next_try = next_try

    @property
    def active(self):
        """Gets the active of this Connection.  # noqa: E501

        This connection is active and will be automatically synced  # noqa: E501

        :return: The active of this Connection.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Connection.

        This connection is active and will be automatically synced  # noqa: E501

        :param active: The active of this Connection.  # noqa: E501
        :type: bool
        """
        if active is None:
            raise ValueError("Invalid value for `active`, must not be `None`")  # noqa: E501

        self._active = active

    @property
    def error(self):
        """Gets the error of this Connection.  # noqa: E501

        If the last update has failed, the error code  # noqa: E501

        :return: The error of this Connection.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this Connection.

        If the last update has failed, the error code  # noqa: E501

        :param error: The error of this Connection.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def expire(self):
        """Gets the expire of this Connection.  # noqa: E501

        Expiration of the connection. Used during add of a two-factor authentication, to purge the connection if the user abort  # noqa: E501

        :return: The expire of this Connection.  # noqa: E501
        :rtype: datetime
        """
        return self._expire

    @expire.setter
    def expire(self, expire):
        """Sets the expire of this Connection.

        Expiration of the connection. Used during add of a two-factor authentication, to purge the connection if the user abort  # noqa: E501

        :param expire: The expire of this Connection.  # noqa: E501
        :type: datetime
        """

        self._expire = expire

    @property
    def id(self):
        """Gets the id of this Connection.  # noqa: E501

        ID of connection  # noqa: E501

        :return: The id of this Connection.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Connection.

        ID of connection  # noqa: E501

        :param id: The id of this Connection.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def id_connector(self):
        """Gets the id_connector of this Connection.  # noqa: E501

        ID of the related connector  # noqa: E501

        :return: The id_connector of this Connection.  # noqa: E501
        :rtype: int
        """
        return self._id_connector

    @id_connector.setter
    def id_connector(self, id_connector):
        """Sets the id_connector of this Connection.

        ID of the related connector  # noqa: E501

        :param id_connector: The id_connector of this Connection.  # noqa: E501
        :type: int
        """
        if id_connector is None:
            raise ValueError("Invalid value for `id_connector`, must not be `None`")  # noqa: E501

        self._id_connector = id_connector

    @property
    def id_user(self):
        """Gets the id_user of this Connection.  # noqa: E501

        ID of the related user  # noqa: E501

        :return: The id_user of this Connection.  # noqa: E501
        :rtype: int
        """
        return self._id_user

    @id_user.setter
    def id_user(self, id_user):
        """Sets the id_user of this Connection.

        ID of the related user  # noqa: E501

        :param id_user: The id_user of this Connection.  # noqa: E501
        :type: int
        """

        self._id_user = id_user

    @property
    def last_push(self):
        """Gets the last_push of this Connection.  # noqa: E501

        Last successful push  # noqa: E501

        :return: The last_push of this Connection.  # noqa: E501
        :rtype: datetime
        """
        return self._last_push

    @last_push.setter
    def last_push(self, last_push):
        """Sets the last_push of this Connection.

        Last successful push  # noqa: E501

        :param last_push: The last_push of this Connection.  # noqa: E501
        :type: datetime
        """

        self._last_push = last_push

    @property
    def last_update(self):
        """Gets the last_update of this Connection.  # noqa: E501

        Last successful update  # noqa: E501

        :return: The last_update of this Connection.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update

    @last_update.setter
    def last_update(self, last_update):
        """Sets the last_update of this Connection.

        Last successful update  # noqa: E501

        :param last_update: The last_update of this Connection.  # noqa: E501
        :type: datetime
        """

        self._last_update = last_update

    @property
    def next_try(self):
        """Gets the next_try of this Connection.  # noqa: E501

        Date of next synchronization  # noqa: E501

        :return: The next_try of this Connection.  # noqa: E501
        :rtype: datetime
        """
        return self._next_try

    @next_try.setter
    def next_try(self, next_try):
        """Sets the next_try of this Connection.

        Date of next synchronization  # noqa: E501

        :param next_try: The next_try of this Connection.  # noqa: E501
        :type: datetime
        """

        self._next_try = next_try

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Connection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
