# coding: utf-8

"""
    Budgea API Documentation

    see https://www.budget-insight.com/budgea-api  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: rienafairefr@gmail.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from budgea.api_client import ApiClient
from budgea.exceptions import (
    ApiTypeError,
    ApiValueError
)


class OIDCApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def oidc_whitelist_id_whitelist_delete(self, id_whitelist, **kwargs):  # noqa: E501
        """Delete the supplied authorized redirect uri  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.oidc_whitelist_id_whitelist_delete(id_whitelist, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int id_whitelist: (required)
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: OidcWhitelist
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.oidc_whitelist_id_whitelist_delete_with_http_info(id_whitelist, **kwargs)  # noqa: E501

    def oidc_whitelist_id_whitelist_delete_with_http_info(self, id_whitelist, **kwargs):  # noqa: E501
        """Delete the supplied authorized redirect uri  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.oidc_whitelist_id_whitelist_delete_with_http_info(id_whitelist, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int id_whitelist: (required)
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(OidcWhitelist, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_whitelist', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method oidc_whitelist_id_whitelist_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_whitelist' is set
        if ('id_whitelist' not in local_var_params or
                local_var_params['id_whitelist'] is None):
            raise ApiValueError("Missing the required parameter `id_whitelist` when calling `oidc_whitelist_id_whitelist_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_whitelist' in local_var_params:
            path_params['id_whitelist'] = local_var_params['id_whitelist']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/oidc/whitelist/{id_whitelist}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OidcWhitelist',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def oidc_whitelist_id_whitelist_post(self, id_whitelist, redirect_uri, **kwargs):  # noqa: E501
        """Edit a authorized redirect uri  # noqa: E501

        Edit the uri for the supplied authorized redirect uri.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.oidc_whitelist_id_whitelist_post(id_whitelist, redirect_uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int id_whitelist: (required)
        :param str redirect_uri: new authorized redirect uri (required)
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: OidcWhitelist
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.oidc_whitelist_id_whitelist_post_with_http_info(id_whitelist, redirect_uri, **kwargs)  # noqa: E501

    def oidc_whitelist_id_whitelist_post_with_http_info(self, id_whitelist, redirect_uri, **kwargs):  # noqa: E501
        """Edit a authorized redirect uri  # noqa: E501

        Edit the uri for the supplied authorized redirect uri.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.oidc_whitelist_id_whitelist_post_with_http_info(id_whitelist, redirect_uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int id_whitelist: (required)
        :param str redirect_uri: new authorized redirect uri (required)
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(OidcWhitelist, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_whitelist', 'redirect_uri', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method oidc_whitelist_id_whitelist_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_whitelist' is set
        if ('id_whitelist' not in local_var_params or
                local_var_params['id_whitelist'] is None):
            raise ApiValueError("Missing the required parameter `id_whitelist` when calling `oidc_whitelist_id_whitelist_post`")  # noqa: E501
        # verify the required parameter 'redirect_uri' is set
        if ('redirect_uri' not in local_var_params or
                local_var_params['redirect_uri'] is None):
            raise ApiValueError("Missing the required parameter `redirect_uri` when calling `oidc_whitelist_id_whitelist_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_whitelist' in local_var_params:
            path_params['id_whitelist'] = local_var_params['id_whitelist']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'redirect_uri' in local_var_params:
            form_params.append(('redirect_uri', local_var_params['redirect_uri']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/oidc/whitelist/{id_whitelist}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OidcWhitelist',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def oidc_whitelist_post(self, redirect_uri, **kwargs):  # noqa: E501
        """Adds an authorized redirect uri  # noqa: E501

        It requires the authorized redirect uri to be created<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.oidc_whitelist_post(redirect_uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str redirect_uri: authorized redirect uri to be created (required)
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: OidcWhitelist
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.oidc_whitelist_post_with_http_info(redirect_uri, **kwargs)  # noqa: E501

    def oidc_whitelist_post_with_http_info(self, redirect_uri, **kwargs):  # noqa: E501
        """Adds an authorized redirect uri  # noqa: E501

        It requires the authorized redirect uri to be created<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.oidc_whitelist_post_with_http_info(redirect_uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str redirect_uri: authorized redirect uri to be created (required)
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(OidcWhitelist, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['redirect_uri', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method oidc_whitelist_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'redirect_uri' is set
        if ('redirect_uri' not in local_var_params or
                local_var_params['redirect_uri'] is None):
            raise ApiValueError("Missing the required parameter `redirect_uri` when calling `oidc_whitelist_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'redirect_uri' in local_var_params:
            form_params.append(('redirect_uri', local_var_params['redirect_uri']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/oidc/whitelist', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OidcWhitelist',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
