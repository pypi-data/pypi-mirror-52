# coding: utf-8

"""
    Budgea API Documentation

    see https://www.budget-insight.com/budgea-api  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: rienafairefr@gmail.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class TransactionsCluster(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created_by': 'str',
        'enabled': 'bool',
        'id': 'int',
        'id_account': 'int',
        'id_category': 'int',
        'mean_amount': 'float',
        'median_increment': 'int',
        'next_date': 'date',
        'wording': 'str'
    }

    attribute_map = {
        'created_by': 'created_by',
        'enabled': 'enabled',
        'id': 'id',
        'id_account': 'id_account',
        'id_category': 'id_category',
        'mean_amount': 'mean_amount',
        'median_increment': 'median_increment',
        'next_date': 'next_date',
        'wording': 'wording'
    }

    def __init__(self, created_by=None, enabled=True, id=None, id_account=None, id_category=None, mean_amount=None, median_increment=None, next_date=None, wording=None):  # noqa: E501
        """TransactionsCluster - a model defined in OpenAPI"""  # noqa: E501

        self._created_by = None
        self._enabled = None
        self._id = None
        self._id_account = None
        self._id_category = None
        self._mean_amount = None
        self._median_increment = None
        self._next_date = None
        self._wording = None
        self.discriminator = None

        if created_by is not None:
            self.created_by = created_by
        self.enabled = enabled
        self.id = id
        self.id_account = id_account
        if id_category is not None:
            self.id_category = id_category
        self.mean_amount = mean_amount
        if median_increment is not None:
            self.median_increment = median_increment
        if next_date is not None:
            self.next_date = next_date
        self.wording = wording

    @property
    def created_by(self):
        """Gets the created_by of this TransactionsCluster.  # noqa: E501


        :return: The created_by of this TransactionsCluster.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this TransactionsCluster.


        :param created_by: The created_by of this TransactionsCluster.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def enabled(self):
        """Gets the enabled of this TransactionsCluster.  # noqa: E501


        :return: The enabled of this TransactionsCluster.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this TransactionsCluster.


        :param enabled: The enabled of this TransactionsCluster.  # noqa: E501
        :type: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")  # noqa: E501

        self._enabled = enabled

    @property
    def id(self):
        """Gets the id of this TransactionsCluster.  # noqa: E501


        :return: The id of this TransactionsCluster.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TransactionsCluster.


        :param id: The id of this TransactionsCluster.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def id_account(self):
        """Gets the id_account of this TransactionsCluster.  # noqa: E501


        :return: The id_account of this TransactionsCluster.  # noqa: E501
        :rtype: int
        """
        return self._id_account

    @id_account.setter
    def id_account(self, id_account):
        """Sets the id_account of this TransactionsCluster.


        :param id_account: The id_account of this TransactionsCluster.  # noqa: E501
        :type: int
        """
        if id_account is None:
            raise ValueError("Invalid value for `id_account`, must not be `None`")  # noqa: E501

        self._id_account = id_account

    @property
    def id_category(self):
        """Gets the id_category of this TransactionsCluster.  # noqa: E501


        :return: The id_category of this TransactionsCluster.  # noqa: E501
        :rtype: int
        """
        return self._id_category

    @id_category.setter
    def id_category(self, id_category):
        """Sets the id_category of this TransactionsCluster.


        :param id_category: The id_category of this TransactionsCluster.  # noqa: E501
        :type: int
        """

        self._id_category = id_category

    @property
    def mean_amount(self):
        """Gets the mean_amount of this TransactionsCluster.  # noqa: E501


        :return: The mean_amount of this TransactionsCluster.  # noqa: E501
        :rtype: float
        """
        return self._mean_amount

    @mean_amount.setter
    def mean_amount(self, mean_amount):
        """Sets the mean_amount of this TransactionsCluster.


        :param mean_amount: The mean_amount of this TransactionsCluster.  # noqa: E501
        :type: float
        """
        if mean_amount is None:
            raise ValueError("Invalid value for `mean_amount`, must not be `None`")  # noqa: E501

        self._mean_amount = mean_amount

    @property
    def median_increment(self):
        """Gets the median_increment of this TransactionsCluster.  # noqa: E501


        :return: The median_increment of this TransactionsCluster.  # noqa: E501
        :rtype: int
        """
        return self._median_increment

    @median_increment.setter
    def median_increment(self, median_increment):
        """Sets the median_increment of this TransactionsCluster.


        :param median_increment: The median_increment of this TransactionsCluster.  # noqa: E501
        :type: int
        """

        self._median_increment = median_increment

    @property
    def next_date(self):
        """Gets the next_date of this TransactionsCluster.  # noqa: E501


        :return: The next_date of this TransactionsCluster.  # noqa: E501
        :rtype: date
        """
        return self._next_date

    @next_date.setter
    def next_date(self, next_date):
        """Sets the next_date of this TransactionsCluster.


        :param next_date: The next_date of this TransactionsCluster.  # noqa: E501
        :type: date
        """

        self._next_date = next_date

    @property
    def wording(self):
        """Gets the wording of this TransactionsCluster.  # noqa: E501


        :return: The wording of this TransactionsCluster.  # noqa: E501
        :rtype: str
        """
        return self._wording

    @wording.setter
    def wording(self, wording):
        """Sets the wording of this TransactionsCluster.


        :param wording: The wording of this TransactionsCluster.  # noqa: E501
        :type: str
        """
        if wording is None:
            raise ValueError("Invalid value for `wording`, must not be `None`")  # noqa: E501

        self._wording = wording

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransactionsCluster):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
