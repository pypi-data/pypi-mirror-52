# coding: utf-8

"""
    Budgea API Documentation

    see https://www.budget-insight.com/budgea-api  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: rienafairefr@gmail.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Alert(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'id_account': 'int',
        'id_investment': 'int',
        'id_transaction': 'int',
        'id_user': 'int',
        'timestamp': 'datetime',
        'type': 'str',
        'value': 'float'
    }

    attribute_map = {
        'id': 'id',
        'id_account': 'id_account',
        'id_investment': 'id_investment',
        'id_transaction': 'id_transaction',
        'id_user': 'id_user',
        'timestamp': 'timestamp',
        'type': 'type',
        'value': 'value'
    }

    def __init__(self, id=None, id_account=None, id_investment=None, id_transaction=None, id_user=None, timestamp=None, type=None, value=None):  # noqa: E501
        """Alert - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._id_account = None
        self._id_investment = None
        self._id_transaction = None
        self._id_user = None
        self._timestamp = None
        self._type = None
        self._value = None
        self.discriminator = None

        self.id = id
        if id_account is not None:
            self.id_account = id_account
        if id_investment is not None:
            self.id_investment = id_investment
        if id_transaction is not None:
            self.id_transaction = id_transaction
        self.id_user = id_user
        self.timestamp = timestamp
        self.type = type
        self.value = value

    @property
    def id(self):
        """Gets the id of this Alert.  # noqa: E501


        :return: The id of this Alert.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Alert.


        :param id: The id of this Alert.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def id_account(self):
        """Gets the id_account of this Alert.  # noqa: E501

        ID of the related account  # noqa: E501

        :return: The id_account of this Alert.  # noqa: E501
        :rtype: int
        """
        return self._id_account

    @id_account.setter
    def id_account(self, id_account):
        """Sets the id_account of this Alert.

        ID of the related account  # noqa: E501

        :param id_account: The id_account of this Alert.  # noqa: E501
        :type: int
        """

        self._id_account = id_account

    @property
    def id_investment(self):
        """Gets the id_investment of this Alert.  # noqa: E501

        ID of the related investment  # noqa: E501

        :return: The id_investment of this Alert.  # noqa: E501
        :rtype: int
        """
        return self._id_investment

    @id_investment.setter
    def id_investment(self, id_investment):
        """Sets the id_investment of this Alert.

        ID of the related investment  # noqa: E501

        :param id_investment: The id_investment of this Alert.  # noqa: E501
        :type: int
        """

        self._id_investment = id_investment

    @property
    def id_transaction(self):
        """Gets the id_transaction of this Alert.  # noqa: E501

        ID of the related transaction  # noqa: E501

        :return: The id_transaction of this Alert.  # noqa: E501
        :rtype: int
        """
        return self._id_transaction

    @id_transaction.setter
    def id_transaction(self, id_transaction):
        """Sets the id_transaction of this Alert.

        ID of the related transaction  # noqa: E501

        :param id_transaction: The id_transaction of this Alert.  # noqa: E501
        :type: int
        """

        self._id_transaction = id_transaction

    @property
    def id_user(self):
        """Gets the id_user of this Alert.  # noqa: E501

        ID of the related user  # noqa: E501

        :return: The id_user of this Alert.  # noqa: E501
        :rtype: int
        """
        return self._id_user

    @id_user.setter
    def id_user(self, id_user):
        """Sets the id_user of this Alert.

        ID of the related user  # noqa: E501

        :param id_user: The id_user of this Alert.  # noqa: E501
        :type: int
        """
        if id_user is None:
            raise ValueError("Invalid value for `id_user`, must not be `None`")  # noqa: E501

        self._id_user = id_user

    @property
    def timestamp(self):
        """Gets the timestamp of this Alert.  # noqa: E501

        Date of the alerts emission  # noqa: E501

        :return: The timestamp of this Alert.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Alert.

        Date of the alerts emission  # noqa: E501

        :param timestamp: The timestamp of this Alert.  # noqa: E501
        :type: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def type(self):
        """Gets the type of this Alert.  # noqa: E501

        Type of the alert  # noqa: E501

        :return: The type of this Alert.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Alert.

        Type of the alert  # noqa: E501

        :param type: The type of this Alert.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def value(self):
        """Gets the value of this Alert.  # noqa: E501

        Amount related to the alert  # noqa: E501

        :return: The value of this Alert.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Alert.

        Amount related to the alert  # noqa: E501

        :param value: The value of this Alert.  # noqa: E501
        :type: float
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Alert):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
