# coding: utf-8

"""
    Budgea API Documentation

    see https://www.budget-insight.com/budgea-api  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: rienafairefr@gmail.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Project(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'active': 'bool',
        'comment': 'str',
        'id': 'int',
        'id_type': 'int',
        'id_user': 'int',
        'monthly_savings': 'float',
        'name': 'str',
        'saved': 'float',
        'target': 'float'
    }

    attribute_map = {
        'active': 'active',
        'comment': 'comment',
        'id': 'id',
        'id_type': 'id_type',
        'id_user': 'id_user',
        'monthly_savings': 'monthly_savings',
        'name': 'name',
        'saved': 'saved',
        'target': 'target'
    }

    def __init__(self, active=True, comment='', id=None, id_type=None, id_user=None, monthly_savings=None, name=None, saved=0.0, target=None):  # noqa: E501
        """Project - a model defined in OpenAPI"""  # noqa: E501

        self._active = None
        self._comment = None
        self._id = None
        self._id_type = None
        self._id_user = None
        self._monthly_savings = None
        self._name = None
        self._saved = None
        self._target = None
        self.discriminator = None

        self.active = active
        self.comment = comment
        self.id = id
        self.id_type = id_type
        self.id_user = id_user
        self.monthly_savings = monthly_savings
        self.name = name
        self.saved = saved
        self.target = target

    @property
    def active(self):
        """Gets the active of this Project.  # noqa: E501


        :return: The active of this Project.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Project.


        :param active: The active of this Project.  # noqa: E501
        :type: bool
        """
        if active is None:
            raise ValueError("Invalid value for `active`, must not be `None`")  # noqa: E501

        self._active = active

    @property
    def comment(self):
        """Gets the comment of this Project.  # noqa: E501


        :return: The comment of this Project.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this Project.


        :param comment: The comment of this Project.  # noqa: E501
        :type: str
        """
        if comment is None:
            raise ValueError("Invalid value for `comment`, must not be `None`")  # noqa: E501

        self._comment = comment

    @property
    def id(self):
        """Gets the id of this Project.  # noqa: E501


        :return: The id of this Project.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Project.


        :param id: The id of this Project.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def id_type(self):
        """Gets the id_type of this Project.  # noqa: E501


        :return: The id_type of this Project.  # noqa: E501
        :rtype: int
        """
        return self._id_type

    @id_type.setter
    def id_type(self, id_type):
        """Sets the id_type of this Project.


        :param id_type: The id_type of this Project.  # noqa: E501
        :type: int
        """
        if id_type is None:
            raise ValueError("Invalid value for `id_type`, must not be `None`")  # noqa: E501

        self._id_type = id_type

    @property
    def id_user(self):
        """Gets the id_user of this Project.  # noqa: E501


        :return: The id_user of this Project.  # noqa: E501
        :rtype: int
        """
        return self._id_user

    @id_user.setter
    def id_user(self, id_user):
        """Sets the id_user of this Project.


        :param id_user: The id_user of this Project.  # noqa: E501
        :type: int
        """
        if id_user is None:
            raise ValueError("Invalid value for `id_user`, must not be `None`")  # noqa: E501

        self._id_user = id_user

    @property
    def monthly_savings(self):
        """Gets the monthly_savings of this Project.  # noqa: E501


        :return: The monthly_savings of this Project.  # noqa: E501
        :rtype: float
        """
        return self._monthly_savings

    @monthly_savings.setter
    def monthly_savings(self, monthly_savings):
        """Sets the monthly_savings of this Project.


        :param monthly_savings: The monthly_savings of this Project.  # noqa: E501
        :type: float
        """
        if monthly_savings is None:
            raise ValueError("Invalid value for `monthly_savings`, must not be `None`")  # noqa: E501

        self._monthly_savings = monthly_savings

    @property
    def name(self):
        """Gets the name of this Project.  # noqa: E501


        :return: The name of this Project.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Project.


        :param name: The name of this Project.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def saved(self):
        """Gets the saved of this Project.  # noqa: E501


        :return: The saved of this Project.  # noqa: E501
        :rtype: float
        """
        return self._saved

    @saved.setter
    def saved(self, saved):
        """Sets the saved of this Project.


        :param saved: The saved of this Project.  # noqa: E501
        :type: float
        """
        if saved is None:
            raise ValueError("Invalid value for `saved`, must not be `None`")  # noqa: E501

        self._saved = saved

    @property
    def target(self):
        """Gets the target of this Project.  # noqa: E501


        :return: The target of this Project.  # noqa: E501
        :rtype: float
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this Project.


        :param target: The target of this Project.  # noqa: E501
        :type: float
        """
        if target is None:
            raise ValueError("Invalid value for `target`, must not be `None`")  # noqa: E501

        self._target = target

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Project):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
