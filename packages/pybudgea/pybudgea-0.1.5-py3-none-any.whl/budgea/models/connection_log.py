# coding: utf-8

"""
    Budgea API Documentation

    see https://www.budget-insight.com/budgea-api  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: rienafairefr@gmail.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ConnectionLog(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'error': 'str',
        'error_message': 'str',
        'error_uid': 'str',
        'fields': 'str',
        'id': 'int',
        'id_connection': 'int',
        'id_connector': 'int',
        'id_user': 'int',
        'login': 'str',
        'nb_accounts': 'int',
        'next_try': 'datetime',
        'session_folder_id': 'str',
        'start': 'datetime',
        'statut': 'int',
        'timestamp': 'datetime',
        'worker': 'str'
    }

    attribute_map = {
        'error': 'error',
        'error_message': 'error_message',
        'error_uid': 'error_uid',
        'fields': 'fields',
        'id': 'id',
        'id_connection': 'id_connection',
        'id_connector': 'id_connector',
        'id_user': 'id_user',
        'login': 'login',
        'nb_accounts': 'nb_accounts',
        'next_try': 'next_try',
        'session_folder_id': 'session_folder_id',
        'start': 'start',
        'statut': 'statut',
        'timestamp': 'timestamp',
        'worker': 'worker'
    }

    def __init__(self, error=None, error_message=None, error_uid=None, fields=None, id=None, id_connection=None, id_connector=None, id_user=None, login=None, nb_accounts=None, next_try=None, session_folder_id=None, start=None, statut=None, timestamp=None, worker=None):  # noqa: E501
        """ConnectionLog - a model defined in OpenAPI"""  # noqa: E501

        self._error = None
        self._error_message = None
        self._error_uid = None
        self._fields = None
        self._id = None
        self._id_connection = None
        self._id_connector = None
        self._id_user = None
        self._login = None
        self._nb_accounts = None
        self._next_try = None
        self._session_folder_id = None
        self._start = None
        self._statut = None
        self._timestamp = None
        self._worker = None
        self.discriminator = None

        if error is not None:
            self.error = error
        if error_message is not None:
            self.error_message = error_message
        if error_uid is not None:
            self.error_uid = error_uid
        if fields is not None:
            self.fields = fields
        self.id = id
        self.id_connection = id_connection
        if id_connector is not None:
            self.id_connector = id_connector
        if id_user is not None:
            self.id_user = id_user
        if login is not None:
            self.login = login
        if nb_accounts is not None:
            self.nb_accounts = nb_accounts
        if next_try is not None:
            self.next_try = next_try
        if session_folder_id is not None:
            self.session_folder_id = session_folder_id
        if start is not None:
            self.start = start
        if statut is not None:
            self.statut = statut
        self.timestamp = timestamp
        if worker is not None:
            self.worker = worker

    @property
    def error(self):
        """Gets the error of this ConnectionLog.  # noqa: E501

        If fail, contains the error code  # noqa: E501

        :return: The error of this ConnectionLog.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this ConnectionLog.

        If fail, contains the error code  # noqa: E501

        :param error: The error of this ConnectionLog.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def error_message(self):
        """Gets the error_message of this ConnectionLog.  # noqa: E501

        If fail, error message received from connector  # noqa: E501

        :return: The error_message of this ConnectionLog.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this ConnectionLog.

        If fail, error message received from connector  # noqa: E501

        :param error_message: The error_message of this ConnectionLog.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    @property
    def error_uid(self):
        """Gets the error_uid of this ConnectionLog.  # noqa: E501

        MD5 hash of the exception backtrace  # noqa: E501

        :return: The error_uid of this ConnectionLog.  # noqa: E501
        :rtype: str
        """
        return self._error_uid

    @error_uid.setter
    def error_uid(self, error_uid):
        """Sets the error_uid of this ConnectionLog.

        MD5 hash of the exception backtrace  # noqa: E501

        :param error_uid: The error_uid of this ConnectionLog.  # noqa: E501
        :type: str
        """

        self._error_uid = error_uid

    @property
    def fields(self):
        """Gets the fields of this ConnectionLog.  # noqa: E501

        Fields for connection in additionalInformationNeeded state with background option  # noqa: E501

        :return: The fields of this ConnectionLog.  # noqa: E501
        :rtype: str
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this ConnectionLog.

        Fields for connection in additionalInformationNeeded state with background option  # noqa: E501

        :param fields: The fields of this ConnectionLog.  # noqa: E501
        :type: str
        """

        self._fields = fields

    @property
    def id(self):
        """Gets the id of this ConnectionLog.  # noqa: E501

        ID of the log  # noqa: E501

        :return: The id of this ConnectionLog.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ConnectionLog.

        ID of the log  # noqa: E501

        :param id: The id of this ConnectionLog.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def id_connection(self):
        """Gets the id_connection of this ConnectionLog.  # noqa: E501

        ID of the connection  # noqa: E501

        :return: The id_connection of this ConnectionLog.  # noqa: E501
        :rtype: int
        """
        return self._id_connection

    @id_connection.setter
    def id_connection(self, id_connection):
        """Sets the id_connection of this ConnectionLog.

        ID of the connection  # noqa: E501

        :param id_connection: The id_connection of this ConnectionLog.  # noqa: E501
        :type: int
        """
        if id_connection is None:
            raise ValueError("Invalid value for `id_connection`, must not be `None`")  # noqa: E501

        self._id_connection = id_connection

    @property
    def id_connector(self):
        """Gets the id_connector of this ConnectionLog.  # noqa: E501

        ID of the connector  # noqa: E501

        :return: The id_connector of this ConnectionLog.  # noqa: E501
        :rtype: int
        """
        return self._id_connector

    @id_connector.setter
    def id_connector(self, id_connector):
        """Sets the id_connector of this ConnectionLog.

        ID of the connector  # noqa: E501

        :param id_connector: The id_connector of this ConnectionLog.  # noqa: E501
        :type: int
        """

        self._id_connector = id_connector

    @property
    def id_user(self):
        """Gets the id_user of this ConnectionLog.  # noqa: E501

        ID of the user  # noqa: E501

        :return: The id_user of this ConnectionLog.  # noqa: E501
        :rtype: int
        """
        return self._id_user

    @id_user.setter
    def id_user(self, id_user):
        """Sets the id_user of this ConnectionLog.

        ID of the user  # noqa: E501

        :param id_user: The id_user of this ConnectionLog.  # noqa: E501
        :type: int
        """

        self._id_user = id_user

    @property
    def login(self):
        """Gets the login of this ConnectionLog.  # noqa: E501

        bcrypt hash of the login  # noqa: E501

        :return: The login of this ConnectionLog.  # noqa: E501
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login):
        """Sets the login of this ConnectionLog.

        bcrypt hash of the login  # noqa: E501

        :param login: The login of this ConnectionLog.  # noqa: E501
        :type: str
        """

        self._login = login

    @property
    def nb_accounts(self):
        """Gets the nb_accounts of this ConnectionLog.  # noqa: E501

        In case of bank connection, number of accounts  # noqa: E501

        :return: The nb_accounts of this ConnectionLog.  # noqa: E501
        :rtype: int
        """
        return self._nb_accounts

    @nb_accounts.setter
    def nb_accounts(self, nb_accounts):
        """Sets the nb_accounts of this ConnectionLog.

        In case of bank connection, number of accounts  # noqa: E501

        :param nb_accounts: The nb_accounts of this ConnectionLog.  # noqa: E501
        :type: int
        """

        self._nb_accounts = nb_accounts

    @property
    def next_try(self):
        """Gets the next_try of this ConnectionLog.  # noqa: E501

        If fail, the date represents the next try to connect  # noqa: E501

        :return: The next_try of this ConnectionLog.  # noqa: E501
        :rtype: datetime
        """
        return self._next_try

    @next_try.setter
    def next_try(self, next_try):
        """Sets the next_try of this ConnectionLog.

        If fail, the date represents the next try to connect  # noqa: E501

        :param next_try: The next_try of this ConnectionLog.  # noqa: E501
        :type: datetime
        """

        self._next_try = next_try

    @property
    def session_folder_id(self):
        """Gets the session_folder_id of this ConnectionLog.  # noqa: E501

        Session folder uid  # noqa: E501

        :return: The session_folder_id of this ConnectionLog.  # noqa: E501
        :rtype: str
        """
        return self._session_folder_id

    @session_folder_id.setter
    def session_folder_id(self, session_folder_id):
        """Sets the session_folder_id of this ConnectionLog.

        Session folder uid  # noqa: E501

        :param session_folder_id: The session_folder_id of this ConnectionLog.  # noqa: E501
        :type: str
        """

        self._session_folder_id = session_folder_id

    @property
    def start(self):
        """Gets the start of this ConnectionLog.  # noqa: E501

        Timestamp when the synchronization has started  # noqa: E501

        :return: The start of this ConnectionLog.  # noqa: E501
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this ConnectionLog.

        Timestamp when the synchronization has started  # noqa: E501

        :param start: The start of this ConnectionLog.  # noqa: E501
        :type: datetime
        """

        self._start = start

    @property
    def statut(self):
        """Gets the statut of this ConnectionLog.  # noqa: E501

        Status of user (1 = charged user)  # noqa: E501

        :return: The statut of this ConnectionLog.  # noqa: E501
        :rtype: int
        """
        return self._statut

    @statut.setter
    def statut(self, statut):
        """Sets the statut of this ConnectionLog.

        Status of user (1 = charged user)  # noqa: E501

        :param statut: The statut of this ConnectionLog.  # noqa: E501
        :type: int
        """

        self._statut = statut

    @property
    def timestamp(self):
        """Gets the timestamp of this ConnectionLog.  # noqa: E501

        Timestamp of log, when the synchronization has finished  # noqa: E501

        :return: The timestamp of this ConnectionLog.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this ConnectionLog.

        Timestamp of log, when the synchronization has finished  # noqa: E501

        :param timestamp: The timestamp of this ConnectionLog.  # noqa: E501
        :type: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def worker(self):
        """Gets the worker of this ConnectionLog.  # noqa: E501

        Worker used to do synchronization  # noqa: E501

        :return: The worker of this ConnectionLog.  # noqa: E501
        :rtype: str
        """
        return self._worker

    @worker.setter
    def worker(self, worker):
        """Sets the worker of this ConnectionLog.

        Worker used to do synchronization  # noqa: E501

        :param worker: The worker of this ConnectionLog.  # noqa: E501
        :type: str
        """

        self._worker = worker

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConnectionLog):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
