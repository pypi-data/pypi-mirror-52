# coding: utf-8

"""
    Budgea API Documentation

    see https://www.budget-insight.com/budgea-api  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: rienafairefr@gmail.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class WebhookLog(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'id_service': 'int',
        'id_user': 'int',
        'id_webhook_data': 'int',
        'next_try': 'datetime',
        'response_code': 'int',
        'response_date': 'datetime',
        'timestamp': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'id_service': 'id_service',
        'id_user': 'id_user',
        'id_webhook_data': 'id_webhook_data',
        'next_try': 'next_try',
        'response_code': 'response_code',
        'response_date': 'response_date',
        'timestamp': 'timestamp'
    }

    def __init__(self, id=None, id_service=None, id_user=None, id_webhook_data=None, next_try=None, response_code=None, response_date=None, timestamp=None):  # noqa: E501
        """WebhookLog - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._id_service = None
        self._id_user = None
        self._id_webhook_data = None
        self._next_try = None
        self._response_code = None
        self._response_date = None
        self._timestamp = None
        self.discriminator = None

        self.id = id
        if id_service is not None:
            self.id_service = id_service
        if id_user is not None:
            self.id_user = id_user
        if id_webhook_data is not None:
            self.id_webhook_data = id_webhook_data
        if next_try is not None:
            self.next_try = next_try
        if response_code is not None:
            self.response_code = response_code
        if response_date is not None:
            self.response_date = response_date
        self.timestamp = timestamp

    @property
    def id(self):
        """Gets the id of this WebhookLog.  # noqa: E501

        ID of the log  # noqa: E501

        :return: The id of this WebhookLog.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WebhookLog.

        ID of the log  # noqa: E501

        :param id: The id of this WebhookLog.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def id_service(self):
        """Gets the id_service of this WebhookLog.  # noqa: E501

        ID of the service  # noqa: E501

        :return: The id_service of this WebhookLog.  # noqa: E501
        :rtype: int
        """
        return self._id_service

    @id_service.setter
    def id_service(self, id_service):
        """Sets the id_service of this WebhookLog.

        ID of the service  # noqa: E501

        :param id_service: The id_service of this WebhookLog.  # noqa: E501
        :type: int
        """

        self._id_service = id_service

    @property
    def id_user(self):
        """Gets the id_user of this WebhookLog.  # noqa: E501

        ID of the user  # noqa: E501

        :return: The id_user of this WebhookLog.  # noqa: E501
        :rtype: int
        """
        return self._id_user

    @id_user.setter
    def id_user(self, id_user):
        """Sets the id_user of this WebhookLog.

        ID of the user  # noqa: E501

        :param id_user: The id_user of this WebhookLog.  # noqa: E501
        :type: int
        """

        self._id_user = id_user

    @property
    def id_webhook_data(self):
        """Gets the id_webhook_data of this WebhookLog.  # noqa: E501

        ID of the webhook data  # noqa: E501

        :return: The id_webhook_data of this WebhookLog.  # noqa: E501
        :rtype: int
        """
        return self._id_webhook_data

    @id_webhook_data.setter
    def id_webhook_data(self, id_webhook_data):
        """Sets the id_webhook_data of this WebhookLog.

        ID of the webhook data  # noqa: E501

        :param id_webhook_data: The id_webhook_data of this WebhookLog.  # noqa: E501
        :type: int
        """

        self._id_webhook_data = id_webhook_data

    @property
    def next_try(self):
        """Gets the next_try of this WebhookLog.  # noqa: E501

        If the log is an error, do not retry to push before this timestamp  # noqa: E501

        :return: The next_try of this WebhookLog.  # noqa: E501
        :rtype: datetime
        """
        return self._next_try

    @next_try.setter
    def next_try(self, next_try):
        """Sets the next_try of this WebhookLog.

        If the log is an error, do not retry to push before this timestamp  # noqa: E501

        :param next_try: The next_try of this WebhookLog.  # noqa: E501
        :type: datetime
        """

        self._next_try = next_try

    @property
    def response_code(self):
        """Gets the response_code of this WebhookLog.  # noqa: E501

        Return code of the reply to the hook  # noqa: E501

        :return: The response_code of this WebhookLog.  # noqa: E501
        :rtype: int
        """
        return self._response_code

    @response_code.setter
    def response_code(self, response_code):
        """Sets the response_code of this WebhookLog.

        Return code of the reply to the hook  # noqa: E501

        :param response_code: The response_code of this WebhookLog.  # noqa: E501
        :type: int
        """

        self._response_code = response_code

    @property
    def response_date(self):
        """Gets the response_date of this WebhookLog.  # noqa: E501

        Timestamp of the reply to the hook  # noqa: E501

        :return: The response_date of this WebhookLog.  # noqa: E501
        :rtype: datetime
        """
        return self._response_date

    @response_date.setter
    def response_date(self, response_date):
        """Sets the response_date of this WebhookLog.

        Timestamp of the reply to the hook  # noqa: E501

        :param response_date: The response_date of this WebhookLog.  # noqa: E501
        :type: datetime
        """

        self._response_date = response_date

    @property
    def timestamp(self):
        """Gets the timestamp of this WebhookLog.  # noqa: E501

        Timestamp when the hook was sent  # noqa: E501

        :return: The timestamp of this WebhookLog.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this WebhookLog.

        Timestamp when the hook was sent  # noqa: E501

        :param timestamp: The timestamp of this WebhookLog.  # noqa: E501
        :type: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WebhookLog):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
