# coding: utf-8

"""
    Budgea API Documentation

    see https://www.budget-insight.com/budgea-api  # noqa: E501

    OpenAPI spec version: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Connector(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'auth_mechanism': 'str',
        'beta': 'bool',
        'charged': 'bool',
        'code': 'str',
        'color': 'str',
        'hidden': 'bool',
        'id': 'int',
        'id_weboob': 'str',
        'months_to_fetch': 'int',
        'name': 'str',
        'siret': 'str',
        'slug': 'str',
        'sync_frequency': 'float',
        'uuid': 'str'
    }

    attribute_map = {
        'auth_mechanism': 'auth_mechanism',
        'beta': 'beta',
        'charged': 'charged',
        'code': 'code',
        'color': 'color',
        'hidden': 'hidden',
        'id': 'id',
        'id_weboob': 'id_weboob',
        'months_to_fetch': 'months_to_fetch',
        'name': 'name',
        'siret': 'siret',
        'slug': 'slug',
        'sync_frequency': 'sync_frequency',
        'uuid': 'uuid'
    }

    def __init__(self, auth_mechanism=None, beta=False, charged=True, code=None, color=None, hidden=False, id=None, id_weboob=None, months_to_fetch=None, name=None, siret=None, slug=None, sync_frequency=None, uuid=None):  # noqa: E501
        """Connector - a model defined in OpenAPI"""  # noqa: E501

        self._auth_mechanism = None
        self._beta = None
        self._charged = None
        self._code = None
        self._color = None
        self._hidden = None
        self._id = None
        self._id_weboob = None
        self._months_to_fetch = None
        self._name = None
        self._siret = None
        self._slug = None
        self._sync_frequency = None
        self._uuid = None
        self.discriminator = None

        if auth_mechanism is not None:
            self.auth_mechanism = auth_mechanism
        self.beta = beta
        self.charged = charged
        if code is not None:
            self.code = code
        if color is not None:
            self.color = color
        if hidden is not None:
            self.hidden = hidden
        self.id = id
        if id_weboob is not None:
            self.id_weboob = id_weboob
        if months_to_fetch is not None:
            self.months_to_fetch = months_to_fetch
        self.name = name
        if siret is not None:
            self.siret = siret
        if slug is not None:
            self.slug = slug
        if sync_frequency is not None:
            self.sync_frequency = sync_frequency
        self.uuid = uuid

    @property
    def auth_mechanism(self):
        """Gets the auth_mechanism of this Connector.  # noqa: E501

        Authentication mechanism to use  # noqa: E501

        :return: The auth_mechanism of this Connector.  # noqa: E501
        :rtype: str
        """
        return self._auth_mechanism

    @auth_mechanism.setter
    def auth_mechanism(self, auth_mechanism):
        """Sets the auth_mechanism of this Connector.

        Authentication mechanism to use  # noqa: E501

        :param auth_mechanism: The auth_mechanism of this Connector.  # noqa: E501
        :type: str
        """

        self._auth_mechanism = auth_mechanism

    @property
    def beta(self):
        """Gets the beta of this Connector.  # noqa: E501

        If true, this connector is perhaps unstable :)  # noqa: E501

        :return: The beta of this Connector.  # noqa: E501
        :rtype: bool
        """
        return self._beta

    @beta.setter
    def beta(self, beta):
        """Sets the beta of this Connector.

        If true, this connector is perhaps unstable :)  # noqa: E501

        :param beta: The beta of this Connector.  # noqa: E501
        :type: bool
        """
        if beta is None:
            raise ValueError("Invalid value for `beta`, must not be `None`")  # noqa: E501

        self._beta = beta

    @property
    def charged(self):
        """Gets the charged of this Connector.  # noqa: E501

        Usage of this connector is charged  # noqa: E501

        :return: The charged of this Connector.  # noqa: E501
        :rtype: bool
        """
        return self._charged

    @charged.setter
    def charged(self, charged):
        """Sets the charged of this Connector.

        Usage of this connector is charged  # noqa: E501

        :param charged: The charged of this Connector.  # noqa: E501
        :type: bool
        """
        if charged is None:
            raise ValueError("Invalid value for `charged`, must not be `None`")  # noqa: E501

        self._charged = charged

    @property
    def code(self):
        """Gets the code of this Connector.  # noqa: E501

        Bank code  # noqa: E501

        :return: The code of this Connector.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Connector.

        Bank code  # noqa: E501

        :param code: The code of this Connector.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def color(self):
        """Gets the color of this Connector.  # noqa: E501

        Main color of the bank or provider  # noqa: E501

        :return: The color of this Connector.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this Connector.

        Main color of the bank or provider  # noqa: E501

        :param color: The color of this Connector.  # noqa: E501
        :type: str
        """

        self._color = color

    @property
    def hidden(self):
        """Gets the hidden of this Connector.  # noqa: E501

        This connector is hidden from your users  # noqa: E501

        :return: The hidden of this Connector.  # noqa: E501
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this Connector.

        This connector is hidden from your users  # noqa: E501

        :param hidden: The hidden of this Connector.  # noqa: E501
        :type: bool
        """

        self._hidden = hidden

    @property
    def id(self):
        """Gets the id of this Connector.  # noqa: E501

        ID of the connector  # noqa: E501

        :return: The id of this Connector.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Connector.

        ID of the connector  # noqa: E501

        :param id: The id of this Connector.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def id_weboob(self):
        """Gets the id_weboob of this Connector.  # noqa: E501


        :return: The id_weboob of this Connector.  # noqa: E501
        :rtype: str
        """
        return self._id_weboob

    @id_weboob.setter
    def id_weboob(self, id_weboob):
        """Sets the id_weboob of this Connector.


        :param id_weboob: The id_weboob of this Connector.  # noqa: E501
        :type: str
        """

        self._id_weboob = id_weboob

    @property
    def months_to_fetch(self):
        """Gets the months_to_fetch of this Connector.  # noqa: E501

        How many months of history to fetch  # noqa: E501

        :return: The months_to_fetch of this Connector.  # noqa: E501
        :rtype: int
        """
        return self._months_to_fetch

    @months_to_fetch.setter
    def months_to_fetch(self, months_to_fetch):
        """Sets the months_to_fetch of this Connector.

        How many months of history to fetch  # noqa: E501

        :param months_to_fetch: The months_to_fetch of this Connector.  # noqa: E501
        :type: int
        """

        self._months_to_fetch = months_to_fetch

    @property
    def name(self):
        """Gets the name of this Connector.  # noqa: E501

        Name of the bank or provider  # noqa: E501

        :return: The name of this Connector.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Connector.

        Name of the bank or provider  # noqa: E501

        :param name: The name of this Connector.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def siret(self):
        """Gets the siret of this Connector.  # noqa: E501

        SIRET code for Bill modules  # noqa: E501

        :return: The siret of this Connector.  # noqa: E501
        :rtype: str
        """
        return self._siret

    @siret.setter
    def siret(self, siret):
        """Sets the siret of this Connector.

        SIRET code for Bill modules  # noqa: E501

        :param siret: The siret of this Connector.  # noqa: E501
        :type: str
        """

        self._siret = siret

    @property
    def slug(self):
        """Gets the slug of this Connector.  # noqa: E501


        :return: The slug of this Connector.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this Connector.


        :param slug: The slug of this Connector.  # noqa: E501
        :type: str
        """

        self._slug = slug

    @property
    def sync_frequency(self):
        """Gets the sync_frequency of this Connector.  # noqa: E501

        How many days to wait between syncs  # noqa: E501

        :return: The sync_frequency of this Connector.  # noqa: E501
        :rtype: float
        """
        return self._sync_frequency

    @sync_frequency.setter
    def sync_frequency(self, sync_frequency):
        """Sets the sync_frequency of this Connector.

        How many days to wait between syncs  # noqa: E501

        :param sync_frequency: The sync_frequency of this Connector.  # noqa: E501
        :type: float
        """

        self._sync_frequency = sync_frequency

    @property
    def uuid(self):
        """Gets the uuid of this Connector.  # noqa: E501

        Unique connector identifier  # noqa: E501

        :return: The uuid of this Connector.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Connector.

        Unique connector identifier  # noqa: E501

        :param uuid: The uuid of this Connector.  # noqa: E501
        :type: str
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Connector):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
