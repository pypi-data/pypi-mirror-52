# coding: utf-8

"""
    Budgea API Documentation

    see https://www.budget-insight.com/budgea-api  # noqa: E501

    OpenAPI spec version: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Security(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'code': 'str',
        'id': 'int',
        'id_type': 'int',
        'last_update': 'datetime',
        'name': 'str'
    }

    attribute_map = {
        'code': 'code',
        'id': 'id',
        'id_type': 'id_type',
        'last_update': 'last_update',
        'name': 'name'
    }

    def __init__(self, code=None, id=None, id_type=None, last_update=None, name=None):  # noqa: E501
        """Security - a model defined in OpenAPI"""  # noqa: E501

        self._code = None
        self._id = None
        self._id_type = None
        self._last_update = None
        self._name = None
        self.discriminator = None

        if code is not None:
            self.code = code
        self.id = id
        if id_type is not None:
            self.id_type = id_type
        if last_update is not None:
            self.last_update = last_update
        self.name = name

    @property
    def code(self):
        """Gets the code of this Security.  # noqa: E501

        ISIN code of the security  # noqa: E501

        :return: The code of this Security.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Security.

        ISIN code of the security  # noqa: E501

        :param code: The code of this Security.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def id(self):
        """Gets the id of this Security.  # noqa: E501

        ID of the security  # noqa: E501

        :return: The id of this Security.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Security.

        ID of the security  # noqa: E501

        :param id: The id of this Security.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def id_type(self):
        """Gets the id_type of this Security.  # noqa: E501

        ID of the security type  # noqa: E501

        :return: The id_type of this Security.  # noqa: E501
        :rtype: int
        """
        return self._id_type

    @id_type.setter
    def id_type(self, id_type):
        """Sets the id_type of this Security.

        ID of the security type  # noqa: E501

        :param id_type: The id_type of this Security.  # noqa: E501
        :type: int
        """

        self._id_type = id_type

    @property
    def last_update(self):
        """Gets the last_update of this Security.  # noqa: E501

        Last update of the security  # noqa: E501

        :return: The last_update of this Security.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update

    @last_update.setter
    def last_update(self, last_update):
        """Sets the last_update of this Security.

        Last update of the security  # noqa: E501

        :param last_update: The last_update of this Security.  # noqa: E501
        :type: datetime
        """

        self._last_update = last_update

    @property
    def name(self):
        """Gets the name of this Security.  # noqa: E501

        Name of the security  # noqa: E501

        :return: The name of this Security.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Security.

        Name of the security  # noqa: E501

        :param name: The name of this Security.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Security):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
