# coding: utf-8

"""
    Budgea API Documentation

    see https://www.budget-insight.com/budgea-api  # noqa: E501

    OpenAPI spec version: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Currency(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'crypto': 'bool',
        'datetime': 'datetime',
        'id': 'str',
        'marketcap': 'float',
        'precision': 'int',
        'prefix': 'bool',
        'symbol': 'str'
    }

    attribute_map = {
        'crypto': 'crypto',
        'datetime': 'datetime',
        'id': 'id',
        'marketcap': 'marketcap',
        'precision': 'precision',
        'prefix': 'prefix',
        'symbol': 'symbol'
    }

    def __init__(self, crypto=False, datetime=None, id=None, marketcap=None, precision=None, prefix=False, symbol=None):  # noqa: E501
        """Currency - a model defined in OpenAPI"""  # noqa: E501

        self._crypto = None
        self._datetime = None
        self._id = None
        self._marketcap = None
        self._precision = None
        self._prefix = None
        self._symbol = None
        self.discriminator = None

        if crypto is not None:
            self.crypto = crypto
        if datetime is not None:
            self.datetime = datetime
        self.id = id
        if marketcap is not None:
            self.marketcap = marketcap
        if precision is not None:
            self.precision = precision
        self.prefix = prefix
        self.symbol = symbol

    @property
    def crypto(self):
        """Gets the crypto of this Currency.  # noqa: E501

        It is a crypto currency or not  # noqa: E501

        :return: The crypto of this Currency.  # noqa: E501
        :rtype: bool
        """
        return self._crypto

    @crypto.setter
    def crypto(self, crypto):
        """Sets the crypto of this Currency.

        It is a crypto currency or not  # noqa: E501

        :param crypto: The crypto of this Currency.  # noqa: E501
        :type: bool
        """

        self._crypto = crypto

    @property
    def datetime(self):
        """Gets the datetime of this Currency.  # noqa: E501

        Time and date of Market Cap (for cryptos)  # noqa: E501

        :return: The datetime of this Currency.  # noqa: E501
        :rtype: datetime
        """
        return self._datetime

    @datetime.setter
    def datetime(self, datetime):
        """Sets the datetime of this Currency.

        Time and date of Market Cap (for cryptos)  # noqa: E501

        :param datetime: The datetime of this Currency.  # noqa: E501
        :type: datetime
        """

        self._datetime = datetime

    @property
    def id(self):
        """Gets the id of this Currency.  # noqa: E501

        ISO 4217 code used as ID  # noqa: E501

        :return: The id of this Currency.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Currency.

        ISO 4217 code used as ID  # noqa: E501

        :param id: The id of this Currency.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def marketcap(self):
        """Gets the marketcap of this Currency.  # noqa: E501

        Market Capitalization in EUR  # noqa: E501

        :return: The marketcap of this Currency.  # noqa: E501
        :rtype: float
        """
        return self._marketcap

    @marketcap.setter
    def marketcap(self, marketcap):
        """Sets the marketcap of this Currency.

        Market Capitalization in EUR  # noqa: E501

        :param marketcap: The marketcap of this Currency.  # noqa: E501
        :type: float
        """

        self._marketcap = marketcap

    @property
    def precision(self):
        """Gets the precision of this Currency.  # noqa: E501

        Numbers of significant digits  # noqa: E501

        :return: The precision of this Currency.  # noqa: E501
        :rtype: int
        """
        return self._precision

    @precision.setter
    def precision(self, precision):
        """Sets the precision of this Currency.

        Numbers of significant digits  # noqa: E501

        :param precision: The precision of this Currency.  # noqa: E501
        :type: int
        """

        self._precision = precision

    @property
    def prefix(self):
        """Gets the prefix of this Currency.  # noqa: E501

        Amount is prefixed or not by the currency  # noqa: E501

        :return: The prefix of this Currency.  # noqa: E501
        :rtype: bool
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this Currency.

        Amount is prefixed or not by the currency  # noqa: E501

        :param prefix: The prefix of this Currency.  # noqa: E501
        :type: bool
        """
        if prefix is None:
            raise ValueError("Invalid value for `prefix`, must not be `None`")  # noqa: E501

        self._prefix = prefix

    @property
    def symbol(self):
        """Gets the symbol of this Currency.  # noqa: E501

        Symbol representing the currency  # noqa: E501

        :return: The symbol of this Currency.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this Currency.

        Symbol representing the currency  # noqa: E501

        :param symbol: The symbol of this Currency.  # noqa: E501
        :type: str
        """
        if symbol is None:
            raise ValueError("Invalid value for `symbol`, must not be `None`")  # noqa: E501

        self._symbol = symbol

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Currency):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
