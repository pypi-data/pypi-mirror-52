# coding: utf-8

"""
    Budgea API Documentation

    see https://www.budget-insight.com/budgea-api  # noqa: E501

    OpenAPI spec version: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Client(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'config': 'str',
        'id': 'int',
        'id_logo': 'int',
        'name': 'str',
        'private_key': 'str',
        'pro': 'bool',
        'public_key': 'str',
        'redirect_uri': 'str',
        'secret': 'str'
    }

    attribute_map = {
        'config': 'config',
        'id': 'id',
        'id_logo': 'id_logo',
        'name': 'name',
        'private_key': 'private_key',
        'pro': 'pro',
        'public_key': 'public_key',
        'redirect_uri': 'redirect_uri',
        'secret': 'secret'
    }

    def __init__(self, config=None, id=None, id_logo=None, name=None, private_key=None, pro=False, public_key=None, redirect_uri=None, secret=None):  # noqa: E501
        """Client - a model defined in OpenAPI"""  # noqa: E501

        self._config = None
        self._id = None
        self._id_logo = None
        self._name = None
        self._private_key = None
        self._pro = None
        self._public_key = None
        self._redirect_uri = None
        self._secret = None
        self.discriminator = None

        if config is not None:
            self.config = config
        self.id = id
        if id_logo is not None:
            self.id_logo = id_logo
        self.name = name
        if private_key is not None:
            self.private_key = private_key
        self.pro = pro
        if public_key is not None:
            self.public_key = public_key
        self.redirect_uri = redirect_uri
        self.secret = secret

    @property
    def config(self):
        """Gets the config of this Client.  # noqa: E501

        customizable config  # noqa: E501

        :return: The config of this Client.  # noqa: E501
        :rtype: str
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this Client.

        customizable config  # noqa: E501

        :param config: The config of this Client.  # noqa: E501
        :type: str
        """

        self._config = config

    @property
    def id(self):
        """Gets the id of this Client.  # noqa: E501


        :return: The id of this Client.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Client.


        :param id: The id of this Client.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def id_logo(self):
        """Gets the id_logo of this Client.  # noqa: E501


        :return: The id_logo of this Client.  # noqa: E501
        :rtype: int
        """
        return self._id_logo

    @id_logo.setter
    def id_logo(self, id_logo):
        """Sets the id_logo of this Client.


        :param id_logo: The id_logo of this Client.  # noqa: E501
        :type: int
        """

        self._id_logo = id_logo

    @property
    def name(self):
        """Gets the name of this Client.  # noqa: E501


        :return: The name of this Client.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Client.


        :param name: The name of this Client.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def private_key(self):
        """Gets the private_key of this Client.  # noqa: E501


        :return: The private_key of this Client.  # noqa: E501
        :rtype: str
        """
        return self._private_key

    @private_key.setter
    def private_key(self, private_key):
        """Sets the private_key of this Client.


        :param private_key: The private_key of this Client.  # noqa: E501
        :type: str
        """

        self._private_key = private_key

    @property
    def pro(self):
        """Gets the pro of this Client.  # noqa: E501

        Should the client display the company manager page.  # noqa: E501

        :return: The pro of this Client.  # noqa: E501
        :rtype: bool
        """
        return self._pro

    @pro.setter
    def pro(self, pro):
        """Sets the pro of this Client.

        Should the client display the company manager page.  # noqa: E501

        :param pro: The pro of this Client.  # noqa: E501
        :type: bool
        """
        if pro is None:
            raise ValueError("Invalid value for `pro`, must not be `None`")  # noqa: E501

        self._pro = pro

    @property
    def public_key(self):
        """Gets the public_key of this Client.  # noqa: E501


        :return: The public_key of this Client.  # noqa: E501
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this Client.


        :param public_key: The public_key of this Client.  # noqa: E501
        :type: str
        """

        self._public_key = public_key

    @property
    def redirect_uri(self):
        """Gets the redirect_uri of this Client.  # noqa: E501


        :return: The redirect_uri of this Client.  # noqa: E501
        :rtype: str
        """
        return self._redirect_uri

    @redirect_uri.setter
    def redirect_uri(self, redirect_uri):
        """Sets the redirect_uri of this Client.


        :param redirect_uri: The redirect_uri of this Client.  # noqa: E501
        :type: str
        """
        if redirect_uri is None:
            raise ValueError("Invalid value for `redirect_uri`, must not be `None`")  # noqa: E501

        self._redirect_uri = redirect_uri

    @property
    def secret(self):
        """Gets the secret of this Client.  # noqa: E501


        :return: The secret of this Client.  # noqa: E501
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this Client.


        :param secret: The secret of this Client.  # noqa: E501
        :type: str
        """
        if secret is None:
            raise ValueError("Invalid value for `secret`, must not be `None`")  # noqa: E501

        self._secret = secret

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Client):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
