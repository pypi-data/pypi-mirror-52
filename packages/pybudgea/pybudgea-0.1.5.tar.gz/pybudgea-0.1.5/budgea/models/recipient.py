# coding: utf-8

"""
    Budgea API Documentation

    see https://www.budget-insight.com/budgea-api  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: rienafairefr@gmail.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Recipient(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'add_verified': 'bool',
        'bank_name': 'str',
        'category': 'str',
        'currency': 'object',
        'deleted': 'datetime',
        'enabled_at': 'datetime',
        'error': 'str',
        'expire': 'datetime',
        'fields': 'str',
        'iban': 'str',
        'id': 'int',
        'id_account': 'int',
        'id_target_account': 'int',
        'label': 'str',
        'last_update': 'datetime',
        'state': 'str',
        'time_scraped': 'datetime',
        'webid': 'str'
    }

    attribute_map = {
        'add_verified': 'add_verified',
        'bank_name': 'bank_name',
        'category': 'category',
        'currency': 'currency',
        'deleted': 'deleted',
        'enabled_at': 'enabled_at',
        'error': 'error',
        'expire': 'expire',
        'fields': 'fields',
        'iban': 'iban',
        'id': 'id',
        'id_account': 'id_account',
        'id_target_account': 'id_target_account',
        'label': 'label',
        'last_update': 'last_update',
        'state': 'state',
        'time_scraped': 'time_scraped',
        'webid': 'webid'
    }

    def __init__(self, add_verified=None, bank_name=None, category=None, currency=None, deleted=None, enabled_at=None, error=None, expire=None, fields=None, iban=None, id=None, id_account=None, id_target_account=None, label=None, last_update=None, state=None, time_scraped=None, webid=None):  # noqa: E501
        """Recipient - a model defined in OpenAPI"""  # noqa: E501

        self._add_verified = None
        self._bank_name = None
        self._category = None
        self._currency = None
        self._deleted = None
        self._enabled_at = None
        self._error = None
        self._expire = None
        self._fields = None
        self._iban = None
        self._id = None
        self._id_account = None
        self._id_target_account = None
        self._label = None
        self._last_update = None
        self._state = None
        self._time_scraped = None
        self._webid = None
        self.discriminator = None

        if add_verified is not None:
            self.add_verified = add_verified
        if bank_name is not None:
            self.bank_name = bank_name
        self.category = category
        if currency is not None:
            self.currency = currency
        if deleted is not None:
            self.deleted = deleted
        if enabled_at is not None:
            self.enabled_at = enabled_at
        if error is not None:
            self.error = error
        if expire is not None:
            self.expire = expire
        if fields is not None:
            self.fields = fields
        if iban is not None:
            self.iban = iban
        self.id = id
        self.id_account = id_account
        if id_target_account is not None:
            self.id_target_account = id_target_account
        self.label = label
        self.last_update = last_update
        if state is not None:
            self.state = state
        if time_scraped is not None:
            self.time_scraped = time_scraped
        if webid is not None:
            self.webid = webid

    @property
    def add_verified(self):
        """Gets the add_verified of this Recipient.  # noqa: E501

        Was the recipient adding authorized  # noqa: E501

        :return: The add_verified of this Recipient.  # noqa: E501
        :rtype: bool
        """
        return self._add_verified

    @add_verified.setter
    def add_verified(self, add_verified):
        """Sets the add_verified of this Recipient.

        Was the recipient adding authorized  # noqa: E501

        :param add_verified: The add_verified of this Recipient.  # noqa: E501
        :type: bool
        """

        self._add_verified = add_verified

    @property
    def bank_name(self):
        """Gets the bank_name of this Recipient.  # noqa: E501

        Bank of the recipient  # noqa: E501

        :return: The bank_name of this Recipient.  # noqa: E501
        :rtype: str
        """
        return self._bank_name

    @bank_name.setter
    def bank_name(self, bank_name):
        """Sets the bank_name of this Recipient.

        Bank of the recipient  # noqa: E501

        :param bank_name: The bank_name of this Recipient.  # noqa: E501
        :type: str
        """

        self._bank_name = bank_name

    @property
    def category(self):
        """Gets the category of this Recipient.  # noqa: E501

        Category in which the recipient is  # noqa: E501

        :return: The category of this Recipient.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Recipient.

        Category in which the recipient is  # noqa: E501

        :param category: The category of this Recipient.  # noqa: E501
        :type: str
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")  # noqa: E501

        self._category = category

    @property
    def currency(self):
        """Gets the currency of this Recipient.  # noqa: E501

        Currency of the object  # noqa: E501

        :return: The currency of this Recipient.  # noqa: E501
        :rtype: object
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Recipient.

        Currency of the object  # noqa: E501

        :param currency: The currency of this Recipient.  # noqa: E501
        :type: object
        """

        self._currency = currency

    @property
    def deleted(self):
        """Gets the deleted of this Recipient.  # noqa: E501

        The recipient isn't found anymore on the bank  # noqa: E501

        :return: The deleted of this Recipient.  # noqa: E501
        :rtype: datetime
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Recipient.

        The recipient isn't found anymore on the bank  # noqa: E501

        :param deleted: The deleted of this Recipient.  # noqa: E501
        :type: datetime
        """

        self._deleted = deleted

    @property
    def enabled_at(self):
        """Gets the enabled_at of this Recipient.  # noqa: E501

        It will be possible to do transfers to this recipient at this date  # noqa: E501

        :return: The enabled_at of this Recipient.  # noqa: E501
        :rtype: datetime
        """
        return self._enabled_at

    @enabled_at.setter
    def enabled_at(self, enabled_at):
        """Sets the enabled_at of this Recipient.

        It will be possible to do transfers to this recipient at this date  # noqa: E501

        :param enabled_at: The enabled_at of this Recipient.  # noqa: E501
        :type: datetime
        """

        self._enabled_at = enabled_at

    @property
    def error(self):
        """Gets the error of this Recipient.  # noqa: E501

        Error message  # noqa: E501

        :return: The error of this Recipient.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this Recipient.

        Error message  # noqa: E501

        :param error: The error of this Recipient.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def expire(self):
        """Gets the expire of this Recipient.  # noqa: E501


        :return: The expire of this Recipient.  # noqa: E501
        :rtype: datetime
        """
        return self._expire

    @expire.setter
    def expire(self, expire):
        """Sets the expire of this Recipient.


        :param expire: The expire of this Recipient.  # noqa: E501
        :type: datetime
        """

        self._expire = expire

    @property
    def fields(self):
        """Gets the fields of this Recipient.  # noqa: E501

        Fields for recipient with additionalInformationNeeded state  # noqa: E501

        :return: The fields of this Recipient.  # noqa: E501
        :rtype: str
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this Recipient.

        Fields for recipient with additionalInformationNeeded state  # noqa: E501

        :param fields: The fields of this Recipient.  # noqa: E501
        :type: str
        """

        self._fields = fields

    @property
    def iban(self):
        """Gets the iban of this Recipient.  # noqa: E501

        IBAN of the recipient  # noqa: E501

        :return: The iban of this Recipient.  # noqa: E501
        :rtype: str
        """
        return self._iban

    @iban.setter
    def iban(self, iban):
        """Sets the iban of this Recipient.

        IBAN of the recipient  # noqa: E501

        :param iban: The iban of this Recipient.  # noqa: E501
        :type: str
        """

        self._iban = iban

    @property
    def id(self):
        """Gets the id of this Recipient.  # noqa: E501

        ID of the recipient  # noqa: E501

        :return: The id of this Recipient.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Recipient.

        ID of the recipient  # noqa: E501

        :param id: The id of this Recipient.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def id_account(self):
        """Gets the id_account of this Recipient.  # noqa: E501

        ID of the related account  # noqa: E501

        :return: The id_account of this Recipient.  # noqa: E501
        :rtype: int
        """
        return self._id_account

    @id_account.setter
    def id_account(self, id_account):
        """Sets the id_account of this Recipient.

        ID of the related account  # noqa: E501

        :param id_account: The id_account of this Recipient.  # noqa: E501
        :type: int
        """
        if id_account is None:
            raise ValueError("Invalid value for `id_account`, must not be `None`")  # noqa: E501

        self._id_account = id_account

    @property
    def id_target_account(self):
        """Gets the id_target_account of this Recipient.  # noqa: E501

        ID of the target account, in case of internal recipient  # noqa: E501

        :return: The id_target_account of this Recipient.  # noqa: E501
        :rtype: int
        """
        return self._id_target_account

    @id_target_account.setter
    def id_target_account(self, id_target_account):
        """Sets the id_target_account of this Recipient.

        ID of the target account, in case of internal recipient  # noqa: E501

        :param id_target_account: The id_target_account of this Recipient.  # noqa: E501
        :type: int
        """

        self._id_target_account = id_target_account

    @property
    def label(self):
        """Gets the label of this Recipient.  # noqa: E501

        Label of the recipient  # noqa: E501

        :return: The label of this Recipient.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Recipient.

        Label of the recipient  # noqa: E501

        :param label: The label of this Recipient.  # noqa: E501
        :type: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")  # noqa: E501

        self._label = label

    @property
    def last_update(self):
        """Gets the last_update of this Recipient.  # noqa: E501

        Last time we have fetched this recipient  # noqa: E501

        :return: The last_update of this Recipient.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update

    @last_update.setter
    def last_update(self, last_update):
        """Sets the last_update of this Recipient.

        Last time we have fetched this recipient  # noqa: E501

        :param last_update: The last_update of this Recipient.  # noqa: E501
        :type: datetime
        """
        if last_update is None:
            raise ValueError("Invalid value for `last_update`, must not be `None`")  # noqa: E501

        self._last_update = last_update

    @property
    def state(self):
        """Gets the state of this Recipient.  # noqa: E501

        State of recipient  # noqa: E501

        :return: The state of this Recipient.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Recipient.

        State of recipient  # noqa: E501

        :param state: The state of this Recipient.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def time_scraped(self):
        """Gets the time_scraped of this Recipient.  # noqa: E501

        First time we've seen this recipient  # noqa: E501

        :return: The time_scraped of this Recipient.  # noqa: E501
        :rtype: datetime
        """
        return self._time_scraped

    @time_scraped.setter
    def time_scraped(self, time_scraped):
        """Sets the time_scraped of this Recipient.

        First time we've seen this recipient  # noqa: E501

        :param time_scraped: The time_scraped of this Recipient.  # noqa: E501
        :type: datetime
        """

        self._time_scraped = time_scraped

    @property
    def webid(self):
        """Gets the webid of this Recipient.  # noqa: E501

        Webid of the recipient  # noqa: E501

        :return: The webid of this Recipient.  # noqa: E501
        :rtype: str
        """
        return self._webid

    @webid.setter
    def webid(self, webid):
        """Sets the webid of this Recipient.

        Webid of the recipient  # noqa: E501

        :param webid: The webid of this Recipient.  # noqa: E501
        :type: str
        """

        self._webid = webid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Recipient):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
