# coding: utf-8

"""
    Budgea API Documentation

    see https://www.budget-insight.com/budgea-api  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: rienafairefr@gmail.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Profile(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'admin': 'bool',
        'conf': 'str',
        'email': 'str',
        'id': 'int',
        'id_user': 'int',
        'lang': 'str',
        'role': 'str',
        'statut': 'int'
    }

    attribute_map = {
        'admin': 'admin',
        'conf': 'conf',
        'email': 'email',
        'id': 'id',
        'id_user': 'id_user',
        'lang': 'lang',
        'role': 'role',
        'statut': 'statut'
    }

    def __init__(self, admin=False, conf=None, email=None, id=None, id_user=None, lang=None, role='admin', statut=None):  # noqa: E501
        """Profile - a model defined in OpenAPI"""  # noqa: E501

        self._admin = None
        self._conf = None
        self._email = None
        self._id = None
        self._id_user = None
        self._lang = None
        self._role = None
        self._statut = None
        self.discriminator = None

        self.admin = admin
        if conf is not None:
            self.conf = conf
        self.email = email
        self.id = id
        self.id_user = id_user
        if lang is not None:
            self.lang = lang
        self.role = role
        self.statut = statut

    @property
    def admin(self):
        """Gets the admin of this Profile.  # noqa: E501


        :return: The admin of this Profile.  # noqa: E501
        :rtype: bool
        """
        return self._admin

    @admin.setter
    def admin(self, admin):
        """Sets the admin of this Profile.


        :param admin: The admin of this Profile.  # noqa: E501
        :type: bool
        """
        if admin is None:
            raise ValueError("Invalid value for `admin`, must not be `None`")  # noqa: E501

        self._admin = admin

    @property
    def conf(self):
        """Gets the conf of this Profile.  # noqa: E501


        :return: The conf of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._conf

    @conf.setter
    def conf(self, conf):
        """Sets the conf of this Profile.


        :param conf: The conf of this Profile.  # noqa: E501
        :type: str
        """

        self._conf = conf

    @property
    def email(self):
        """Gets the email of this Profile.  # noqa: E501


        :return: The email of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Profile.


        :param email: The email of this Profile.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def id(self):
        """Gets the id of this Profile.  # noqa: E501


        :return: The id of this Profile.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Profile.


        :param id: The id of this Profile.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def id_user(self):
        """Gets the id_user of this Profile.  # noqa: E501


        :return: The id_user of this Profile.  # noqa: E501
        :rtype: int
        """
        return self._id_user

    @id_user.setter
    def id_user(self, id_user):
        """Sets the id_user of this Profile.


        :param id_user: The id_user of this Profile.  # noqa: E501
        :type: int
        """
        if id_user is None:
            raise ValueError("Invalid value for `id_user`, must not be `None`")  # noqa: E501

        self._id_user = id_user

    @property
    def lang(self):
        """Gets the lang of this Profile.  # noqa: E501


        :return: The lang of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._lang

    @lang.setter
    def lang(self, lang):
        """Sets the lang of this Profile.


        :param lang: The lang of this Profile.  # noqa: E501
        :type: str
        """

        self._lang = lang

    @property
    def role(self):
        """Gets the role of this Profile.  # noqa: E501


        :return: The role of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this Profile.


        :param role: The role of this Profile.  # noqa: E501
        :type: str
        """
        if role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")  # noqa: E501
        allowed_values = ["admin", "ser"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"  # noqa: E501
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def statut(self):
        """Gets the statut of this Profile.  # noqa: E501


        :return: The statut of this Profile.  # noqa: E501
        :rtype: int
        """
        return self._statut

    @statut.setter
    def statut(self, statut):
        """Sets the statut of this Profile.


        :param statut: The statut of this Profile.  # noqa: E501
        :type: int
        """
        if statut is None:
            raise ValueError("Invalid value for `statut`, must not be `None`")  # noqa: E501

        self._statut = statut

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Profile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
