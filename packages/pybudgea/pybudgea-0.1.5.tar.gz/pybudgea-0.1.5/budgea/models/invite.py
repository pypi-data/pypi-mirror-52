# coding: utf-8

"""
    Budgea API Documentation

    see https://www.budget-insight.com/budgea-api  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: rienafairefr@gmail.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Invite(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'email_invited': 'str',
        'id': 'int',
        'id_unsubscribe': 'int',
        'id_user_invited': 'int',
        'id_user_inviting': 'int',
        'timestamp': 'datetime'
    }

    attribute_map = {
        'email_invited': 'email_invited',
        'id': 'id',
        'id_unsubscribe': 'id_unsubscribe',
        'id_user_invited': 'id_user_invited',
        'id_user_inviting': 'id_user_inviting',
        'timestamp': 'timestamp'
    }

    def __init__(self, email_invited=None, id=None, id_unsubscribe=None, id_user_invited=None, id_user_inviting=None, timestamp=None):  # noqa: E501
        """Invite - a model defined in OpenAPI"""  # noqa: E501

        self._email_invited = None
        self._id = None
        self._id_unsubscribe = None
        self._id_user_invited = None
        self._id_user_inviting = None
        self._timestamp = None
        self.discriminator = None

        if email_invited is not None:
            self.email_invited = email_invited
        self.id = id
        if id_unsubscribe is not None:
            self.id_unsubscribe = id_unsubscribe
        if id_user_invited is not None:
            self.id_user_invited = id_user_invited
        self.id_user_inviting = id_user_inviting
        if timestamp is not None:
            self.timestamp = timestamp

    @property
    def email_invited(self):
        """Gets the email_invited of this Invite.  # noqa: E501


        :return: The email_invited of this Invite.  # noqa: E501
        :rtype: str
        """
        return self._email_invited

    @email_invited.setter
    def email_invited(self, email_invited):
        """Sets the email_invited of this Invite.


        :param email_invited: The email_invited of this Invite.  # noqa: E501
        :type: str
        """

        self._email_invited = email_invited

    @property
    def id(self):
        """Gets the id of this Invite.  # noqa: E501


        :return: The id of this Invite.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Invite.


        :param id: The id of this Invite.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def id_unsubscribe(self):
        """Gets the id_unsubscribe of this Invite.  # noqa: E501


        :return: The id_unsubscribe of this Invite.  # noqa: E501
        :rtype: int
        """
        return self._id_unsubscribe

    @id_unsubscribe.setter
    def id_unsubscribe(self, id_unsubscribe):
        """Sets the id_unsubscribe of this Invite.


        :param id_unsubscribe: The id_unsubscribe of this Invite.  # noqa: E501
        :type: int
        """

        self._id_unsubscribe = id_unsubscribe

    @property
    def id_user_invited(self):
        """Gets the id_user_invited of this Invite.  # noqa: E501


        :return: The id_user_invited of this Invite.  # noqa: E501
        :rtype: int
        """
        return self._id_user_invited

    @id_user_invited.setter
    def id_user_invited(self, id_user_invited):
        """Sets the id_user_invited of this Invite.


        :param id_user_invited: The id_user_invited of this Invite.  # noqa: E501
        :type: int
        """

        self._id_user_invited = id_user_invited

    @property
    def id_user_inviting(self):
        """Gets the id_user_inviting of this Invite.  # noqa: E501


        :return: The id_user_inviting of this Invite.  # noqa: E501
        :rtype: int
        """
        return self._id_user_inviting

    @id_user_inviting.setter
    def id_user_inviting(self, id_user_inviting):
        """Sets the id_user_inviting of this Invite.


        :param id_user_inviting: The id_user_inviting of this Invite.  # noqa: E501
        :type: int
        """
        if id_user_inviting is None:
            raise ValueError("Invalid value for `id_user_inviting`, must not be `None`")  # noqa: E501

        self._id_user_inviting = id_user_inviting

    @property
    def timestamp(self):
        """Gets the timestamp of this Invite.  # noqa: E501


        :return: The timestamp of this Invite.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Invite.


        :param timestamp: The timestamp of this Invite.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Invite):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
