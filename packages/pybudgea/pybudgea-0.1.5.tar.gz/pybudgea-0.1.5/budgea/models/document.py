# coding: utf-8

"""
    Budgea API Documentation

    see https://www.budget-insight.com/budgea-api  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: rienafairefr@gmail.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Document(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'currency': 'object',
        'date': 'datetime',
        'duedate': 'date',
        'has_file_on_website': 'bool',
        'id': 'int',
        'id_category': 'int',
        'id_file': 'int',
        'id_subscription': 'int',
        'id_thumbnail': 'int',
        'id_type': 'int',
        'id_user': 'int',
        'income': 'bool',
        'issuer': 'str',
        'last_update': 'datetime',
        'name': 'str',
        'number': 'str',
        'readonly': 'bool',
        'timestamp': 'datetime',
        'total_amount': 'float',
        'untaxed_amount': 'float',
        'vat': 'float'
    }

    attribute_map = {
        'currency': 'currency',
        'date': 'date',
        'duedate': 'duedate',
        'has_file_on_website': 'has_file_on_website',
        'id': 'id',
        'id_category': 'id_category',
        'id_file': 'id_file',
        'id_subscription': 'id_subscription',
        'id_thumbnail': 'id_thumbnail',
        'id_type': 'id_type',
        'id_user': 'id_user',
        'income': 'income',
        'issuer': 'issuer',
        'last_update': 'last_update',
        'name': 'name',
        'number': 'number',
        'readonly': 'readonly',
        'timestamp': 'timestamp',
        'total_amount': 'total_amount',
        'untaxed_amount': 'untaxed_amount',
        'vat': 'vat'
    }

    def __init__(self, currency=None, date=None, duedate=None, has_file_on_website=True, id=None, id_category=None, id_file=None, id_subscription=None, id_thumbnail=None, id_type=None, id_user=None, income=True, issuer=None, last_update=None, name=None, number=None, readonly=True, timestamp=None, total_amount=None, untaxed_amount=None, vat=None):  # noqa: E501
        """Document - a model defined in OpenAPI"""  # noqa: E501

        self._currency = None
        self._date = None
        self._duedate = None
        self._has_file_on_website = None
        self._id = None
        self._id_category = None
        self._id_file = None
        self._id_subscription = None
        self._id_thumbnail = None
        self._id_type = None
        self._id_user = None
        self._income = None
        self._issuer = None
        self._last_update = None
        self._name = None
        self._number = None
        self._readonly = None
        self._timestamp = None
        self._total_amount = None
        self._untaxed_amount = None
        self._vat = None
        self.discriminator = None

        if currency is not None:
            self.currency = currency
        if date is not None:
            self.date = date
        if duedate is not None:
            self.duedate = duedate
        self.has_file_on_website = has_file_on_website
        self.id = id
        if id_category is not None:
            self.id_category = id_category
        if id_file is not None:
            self.id_file = id_file
        if id_subscription is not None:
            self.id_subscription = id_subscription
        if id_thumbnail is not None:
            self.id_thumbnail = id_thumbnail
        if id_type is not None:
            self.id_type = id_type
        self.id_user = id_user
        if income is not None:
            self.income = income
        if issuer is not None:
            self.issuer = issuer
        if last_update is not None:
            self.last_update = last_update
        if name is not None:
            self.name = name
        if number is not None:
            self.number = number
        self.readonly = readonly
        self.timestamp = timestamp
        if total_amount is not None:
            self.total_amount = total_amount
        if untaxed_amount is not None:
            self.untaxed_amount = untaxed_amount
        if vat is not None:
            self.vat = vat

    @property
    def currency(self):
        """Gets the currency of this Document.  # noqa: E501

        Document currency  # noqa: E501

        :return: The currency of this Document.  # noqa: E501
        :rtype: object
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Document.

        Document currency  # noqa: E501

        :param currency: The currency of this Document.  # noqa: E501
        :type: object
        """

        self._currency = currency

    @property
    def date(self):
        """Gets the date of this Document.  # noqa: E501


        :return: The date of this Document.  # noqa: E501
        :rtype: datetime
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this Document.


        :param date: The date of this Document.  # noqa: E501
        :type: datetime
        """

        self._date = date

    @property
    def duedate(self):
        """Gets the duedate of this Document.  # noqa: E501


        :return: The duedate of this Document.  # noqa: E501
        :rtype: date
        """
        return self._duedate

    @duedate.setter
    def duedate(self, duedate):
        """Sets the duedate of this Document.


        :param duedate: The duedate of this Document.  # noqa: E501
        :type: date
        """

        self._duedate = duedate

    @property
    def has_file_on_website(self):
        """Gets the has_file_on_website of this Document.  # noqa: E501

        Boolean to set if file is available on website  # noqa: E501

        :return: The has_file_on_website of this Document.  # noqa: E501
        :rtype: bool
        """
        return self._has_file_on_website

    @has_file_on_website.setter
    def has_file_on_website(self, has_file_on_website):
        """Sets the has_file_on_website of this Document.

        Boolean to set if file is available on website  # noqa: E501

        :param has_file_on_website: The has_file_on_website of this Document.  # noqa: E501
        :type: bool
        """
        if has_file_on_website is None:
            raise ValueError("Invalid value for `has_file_on_website`, must not be `None`")  # noqa: E501

        self._has_file_on_website = has_file_on_website

    @property
    def id(self):
        """Gets the id of this Document.  # noqa: E501


        :return: The id of this Document.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Document.


        :param id: The id of this Document.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def id_category(self):
        """Gets the id_category of this Document.  # noqa: E501


        :return: The id_category of this Document.  # noqa: E501
        :rtype: int
        """
        return self._id_category

    @id_category.setter
    def id_category(self, id_category):
        """Sets the id_category of this Document.


        :param id_category: The id_category of this Document.  # noqa: E501
        :type: int
        """

        self._id_category = id_category

    @property
    def id_file(self):
        """Gets the id_file of this Document.  # noqa: E501


        :return: The id_file of this Document.  # noqa: E501
        :rtype: int
        """
        return self._id_file

    @id_file.setter
    def id_file(self, id_file):
        """Sets the id_file of this Document.


        :param id_file: The id_file of this Document.  # noqa: E501
        :type: int
        """

        self._id_file = id_file

    @property
    def id_subscription(self):
        """Gets the id_subscription of this Document.  # noqa: E501


        :return: The id_subscription of this Document.  # noqa: E501
        :rtype: int
        """
        return self._id_subscription

    @id_subscription.setter
    def id_subscription(self, id_subscription):
        """Sets the id_subscription of this Document.


        :param id_subscription: The id_subscription of this Document.  # noqa: E501
        :type: int
        """

        self._id_subscription = id_subscription

    @property
    def id_thumbnail(self):
        """Gets the id_thumbnail of this Document.  # noqa: E501


        :return: The id_thumbnail of this Document.  # noqa: E501
        :rtype: int
        """
        return self._id_thumbnail

    @id_thumbnail.setter
    def id_thumbnail(self, id_thumbnail):
        """Sets the id_thumbnail of this Document.


        :param id_thumbnail: The id_thumbnail of this Document.  # noqa: E501
        :type: int
        """

        self._id_thumbnail = id_thumbnail

    @property
    def id_type(self):
        """Gets the id_type of this Document.  # noqa: E501


        :return: The id_type of this Document.  # noqa: E501
        :rtype: int
        """
        return self._id_type

    @id_type.setter
    def id_type(self, id_type):
        """Sets the id_type of this Document.


        :param id_type: The id_type of this Document.  # noqa: E501
        :type: int
        """

        self._id_type = id_type

    @property
    def id_user(self):
        """Gets the id_user of this Document.  # noqa: E501


        :return: The id_user of this Document.  # noqa: E501
        :rtype: int
        """
        return self._id_user

    @id_user.setter
    def id_user(self, id_user):
        """Sets the id_user of this Document.


        :param id_user: The id_user of this Document.  # noqa: E501
        :type: int
        """
        if id_user is None:
            raise ValueError("Invalid value for `id_user`, must not be `None`")  # noqa: E501

        self._id_user = id_user

    @property
    def income(self):
        """Gets the income of this Document.  # noqa: E501


        :return: The income of this Document.  # noqa: E501
        :rtype: bool
        """
        return self._income

    @income.setter
    def income(self, income):
        """Sets the income of this Document.


        :param income: The income of this Document.  # noqa: E501
        :type: bool
        """

        self._income = income

    @property
    def issuer(self):
        """Gets the issuer of this Document.  # noqa: E501


        :return: The issuer of this Document.  # noqa: E501
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this Document.


        :param issuer: The issuer of this Document.  # noqa: E501
        :type: str
        """

        self._issuer = issuer

    @property
    def last_update(self):
        """Gets the last_update of this Document.  # noqa: E501

        Last successful update of the document  # noqa: E501

        :return: The last_update of this Document.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update

    @last_update.setter
    def last_update(self, last_update):
        """Sets the last_update of this Document.

        Last successful update of the document  # noqa: E501

        :param last_update: The last_update of this Document.  # noqa: E501
        :type: datetime
        """

        self._last_update = last_update

    @property
    def name(self):
        """Gets the name of this Document.  # noqa: E501


        :return: The name of this Document.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Document.


        :param name: The name of this Document.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def number(self):
        """Gets the number of this Document.  # noqa: E501


        :return: The number of this Document.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this Document.


        :param number: The number of this Document.  # noqa: E501
        :type: str
        """

        self._number = number

    @property
    def readonly(self):
        """Gets the readonly of this Document.  # noqa: E501


        :return: The readonly of this Document.  # noqa: E501
        :rtype: bool
        """
        return self._readonly

    @readonly.setter
    def readonly(self, readonly):
        """Sets the readonly of this Document.


        :param readonly: The readonly of this Document.  # noqa: E501
        :type: bool
        """
        if readonly is None:
            raise ValueError("Invalid value for `readonly`, must not be `None`")  # noqa: E501

        self._readonly = readonly

    @property
    def timestamp(self):
        """Gets the timestamp of this Document.  # noqa: E501


        :return: The timestamp of this Document.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Document.


        :param timestamp: The timestamp of this Document.  # noqa: E501
        :type: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def total_amount(self):
        """Gets the total_amount of this Document.  # noqa: E501


        :return: The total_amount of this Document.  # noqa: E501
        :rtype: float
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this Document.


        :param total_amount: The total_amount of this Document.  # noqa: E501
        :type: float
        """

        self._total_amount = total_amount

    @property
    def untaxed_amount(self):
        """Gets the untaxed_amount of this Document.  # noqa: E501


        :return: The untaxed_amount of this Document.  # noqa: E501
        :rtype: float
        """
        return self._untaxed_amount

    @untaxed_amount.setter
    def untaxed_amount(self, untaxed_amount):
        """Sets the untaxed_amount of this Document.


        :param untaxed_amount: The untaxed_amount of this Document.  # noqa: E501
        :type: float
        """

        self._untaxed_amount = untaxed_amount

    @property
    def vat(self):
        """Gets the vat of this Document.  # noqa: E501


        :return: The vat of this Document.  # noqa: E501
        :rtype: float
        """
        return self._vat

    @vat.setter
    def vat(self, vat):
        """Sets the vat of this Document.


        :param vat: The vat of this Document.  # noqa: E501
        :type: float
        """

        self._vat = vat

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Document):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
