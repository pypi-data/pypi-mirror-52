# coding: utf-8

"""
    Budgea API Documentation

    see https://www.budget-insight.com/budgea-api  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: rienafairefr@gmail.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from budgea.api_client import ApiClient
from budgea.exceptions import (
    ApiTypeError,
    ApiValueError
)


class ProvidersApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def banks_get(self, **kwargs):  # noqa: E501
        """Get list of connectors  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.banks_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: InlineResponse20037
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.banks_get_with_http_info(**kwargs)  # noqa: E501

    def banks_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get list of connectors  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.banks_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(InlineResponse20037, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method banks_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/banks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20037',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def banks_id_connector_logos_get(self, id_connector, **kwargs):  # noqa: E501
        """Get all links to the files associated with this connector.  # noqa: E501

        This endpoint returns all links to files associated with this connector.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.banks_id_connector_logos_get(id_connector, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int id_connector: (required)
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ConnectorLogosList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.banks_id_connector_logos_get_with_http_info(id_connector, **kwargs)  # noqa: E501

    def banks_id_connector_logos_get_with_http_info(self, id_connector, **kwargs):  # noqa: E501
        """Get all links to the files associated with this connector.  # noqa: E501

        This endpoint returns all links to files associated with this connector.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.banks_id_connector_logos_get_with_http_info(id_connector, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int id_connector: (required)
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ConnectorLogosList, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_connector', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method banks_id_connector_logos_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_connector' is set
        if ('id_connector' not in local_var_params or
                local_var_params['id_connector'] is None):
            raise ApiValueError("Missing the required parameter `id_connector` when calling `banks_id_connector_logos_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_connector' in local_var_params:
            path_params['id_connector'] = local_var_params['id_connector']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/banks/{id_connector}/logos', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConnectorLogosList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def banks_id_connector_logos_main_get(self, id_connector, **kwargs):  # noqa: E501
        """Get all links to the files associated with this connector.  # noqa: E501

        This endpoint returns all links to files associated with this connector.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.banks_id_connector_logos_main_get(id_connector, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int id_connector: (required)
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ConnectorLogosList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.banks_id_connector_logos_main_get_with_http_info(id_connector, **kwargs)  # noqa: E501

    def banks_id_connector_logos_main_get_with_http_info(self, id_connector, **kwargs):  # noqa: E501
        """Get all links to the files associated with this connector.  # noqa: E501

        This endpoint returns all links to files associated with this connector.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.banks_id_connector_logos_main_get_with_http_info(id_connector, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int id_connector: (required)
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ConnectorLogosList, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_connector', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method banks_id_connector_logos_main_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_connector' is set
        if ('id_connector' not in local_var_params or
                local_var_params['id_connector'] is None):
            raise ApiValueError("Missing the required parameter `id_connector` when calling `banks_id_connector_logos_main_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_connector' in local_var_params:
            path_params['id_connector'] = local_var_params['id_connector']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/banks/{id_connector}/logos/main', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConnectorLogosList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def banks_id_connector_logos_thumbnail_get(self, id_connector, **kwargs):  # noqa: E501
        """Get all links to the files associated with this connector.  # noqa: E501

        This endpoint returns all links to files associated with this connector.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.banks_id_connector_logos_thumbnail_get(id_connector, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int id_connector: (required)
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ConnectorLogosList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.banks_id_connector_logos_thumbnail_get_with_http_info(id_connector, **kwargs)  # noqa: E501

    def banks_id_connector_logos_thumbnail_get_with_http_info(self, id_connector, **kwargs):  # noqa: E501
        """Get all links to the files associated with this connector.  # noqa: E501

        This endpoint returns all links to files associated with this connector.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.banks_id_connector_logos_thumbnail_get_with_http_info(id_connector, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int id_connector: (required)
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ConnectorLogosList, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_connector', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method banks_id_connector_logos_thumbnail_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_connector' is set
        if ('id_connector' not in local_var_params or
                local_var_params['id_connector'] is None):
            raise ApiValueError("Missing the required parameter `id_connector` when calling `banks_id_connector_logos_thumbnail_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_connector' in local_var_params:
            path_params['id_connector'] = local_var_params['id_connector']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/banks/{id_connector}/logos/thumbnail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConnectorLogosList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def connections_get(self, **kwargs):  # noqa: E501
        """Get connections without a user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.connections_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ConnectionsList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.connections_get_with_http_info(**kwargs)  # noqa: E501

    def connections_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get connections without a user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.connections_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ConnectionsList, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method connections_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/connections', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConnectionsList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def connectors_get(self, **kwargs):  # noqa: E501
        """Get list of connectors  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.connectors_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.connectors_get_with_http_info(**kwargs)  # noqa: E501

    def connectors_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get list of connectors  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.connectors_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(InlineResponse200, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method connectors_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/connectors', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def connectors_id_connector_logos_get(self, id_connector, **kwargs):  # noqa: E501
        """Get all links to the files associated with this connector.  # noqa: E501

        This endpoint returns all links to files associated with this connector.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.connectors_id_connector_logos_get(id_connector, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int id_connector: (required)
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ConnectorLogosList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.connectors_id_connector_logos_get_with_http_info(id_connector, **kwargs)  # noqa: E501

    def connectors_id_connector_logos_get_with_http_info(self, id_connector, **kwargs):  # noqa: E501
        """Get all links to the files associated with this connector.  # noqa: E501

        This endpoint returns all links to files associated with this connector.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.connectors_id_connector_logos_get_with_http_info(id_connector, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int id_connector: (required)
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ConnectorLogosList, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_connector', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method connectors_id_connector_logos_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_connector' is set
        if ('id_connector' not in local_var_params or
                local_var_params['id_connector'] is None):
            raise ApiValueError("Missing the required parameter `id_connector` when calling `connectors_id_connector_logos_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_connector' in local_var_params:
            path_params['id_connector'] = local_var_params['id_connector']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/connectors/{id_connector}/logos', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConnectorLogosList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def connectors_id_connector_logos_id_logo_delete(self, id_connector, id_logo, **kwargs):  # noqa: E501
        """Delete a single Logo object.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.connectors_id_connector_logos_id_logo_delete(id_connector, id_logo, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int id_connector: (required)
        :param int id_logo: (required)
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ConnectorLogo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.connectors_id_connector_logos_id_logo_delete_with_http_info(id_connector, id_logo, **kwargs)  # noqa: E501

    def connectors_id_connector_logos_id_logo_delete_with_http_info(self, id_connector, id_logo, **kwargs):  # noqa: E501
        """Delete a single Logo object.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.connectors_id_connector_logos_id_logo_delete_with_http_info(id_connector, id_logo, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int id_connector: (required)
        :param int id_logo: (required)
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ConnectorLogo, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_connector', 'id_logo', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method connectors_id_connector_logos_id_logo_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_connector' is set
        if ('id_connector' not in local_var_params or
                local_var_params['id_connector'] is None):
            raise ApiValueError("Missing the required parameter `id_connector` when calling `connectors_id_connector_logos_id_logo_delete`")  # noqa: E501
        # verify the required parameter 'id_logo' is set
        if ('id_logo' not in local_var_params or
                local_var_params['id_logo'] is None):
            raise ApiValueError("Missing the required parameter `id_logo` when calling `connectors_id_connector_logos_id_logo_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_connector' in local_var_params:
            path_params['id_connector'] = local_var_params['id_connector']  # noqa: E501
        if 'id_logo' in local_var_params:
            path_params['id_logo'] = local_var_params['id_logo']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/connectors/{id_connector}/logos/{id_logo}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConnectorLogo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def connectors_id_connector_logos_id_logo_put(self, id_connector, id_logo, **kwargs):  # noqa: E501
        """Create or Update a connector Logo.  # noqa: E501

        This endpoint creates or update a connector logo. This logo is a mapping between a file (/file route) and a connector (/connectors route) or a provider (/providers route).<br><br>Form params: - id_file (integer): The id of the file to link with that connector.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.connectors_id_connector_logos_id_logo_put(id_connector, id_logo, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int id_connector: (required)
        :param int id_logo: (required)
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ConnectorLogo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.connectors_id_connector_logos_id_logo_put_with_http_info(id_connector, id_logo, **kwargs)  # noqa: E501

    def connectors_id_connector_logos_id_logo_put_with_http_info(self, id_connector, id_logo, **kwargs):  # noqa: E501
        """Create or Update a connector Logo.  # noqa: E501

        This endpoint creates or update a connector logo. This logo is a mapping between a file (/file route) and a connector (/connectors route) or a provider (/providers route).<br><br>Form params: - id_file (integer): The id of the file to link with that connector.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.connectors_id_connector_logos_id_logo_put_with_http_info(id_connector, id_logo, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int id_connector: (required)
        :param int id_logo: (required)
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ConnectorLogo, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_connector', 'id_logo', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method connectors_id_connector_logos_id_logo_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_connector' is set
        if ('id_connector' not in local_var_params or
                local_var_params['id_connector'] is None):
            raise ApiValueError("Missing the required parameter `id_connector` when calling `connectors_id_connector_logos_id_logo_put`")  # noqa: E501
        # verify the required parameter 'id_logo' is set
        if ('id_logo' not in local_var_params or
                local_var_params['id_logo'] is None):
            raise ApiValueError("Missing the required parameter `id_logo` when calling `connectors_id_connector_logos_id_logo_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_connector' in local_var_params:
            path_params['id_connector'] = local_var_params['id_connector']  # noqa: E501
        if 'id_logo' in local_var_params:
            path_params['id_logo'] = local_var_params['id_logo']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/connectors/{id_connector}/logos/{id_logo}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConnectorLogo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def connectors_id_connector_logos_main_get(self, id_connector, **kwargs):  # noqa: E501
        """Get all links to the files associated with this connector.  # noqa: E501

        This endpoint returns all links to files associated with this connector.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.connectors_id_connector_logos_main_get(id_connector, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int id_connector: (required)
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ConnectorLogosList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.connectors_id_connector_logos_main_get_with_http_info(id_connector, **kwargs)  # noqa: E501

    def connectors_id_connector_logos_main_get_with_http_info(self, id_connector, **kwargs):  # noqa: E501
        """Get all links to the files associated with this connector.  # noqa: E501

        This endpoint returns all links to files associated with this connector.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.connectors_id_connector_logos_main_get_with_http_info(id_connector, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int id_connector: (required)
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ConnectorLogosList, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_connector', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method connectors_id_connector_logos_main_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_connector' is set
        if ('id_connector' not in local_var_params or
                local_var_params['id_connector'] is None):
            raise ApiValueError("Missing the required parameter `id_connector` when calling `connectors_id_connector_logos_main_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_connector' in local_var_params:
            path_params['id_connector'] = local_var_params['id_connector']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/connectors/{id_connector}/logos/main', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConnectorLogosList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def connectors_id_connector_logos_post(self, id_connector, **kwargs):  # noqa: E501
        """Create a connector Logo  # noqa: E501

        This endpoint creates a connector logo. You can either pass a file to as a parameter to insert and link it with the connector or pass an id_file to link a connector with an existing file. Will fail if the file is already linked with that connector.<br><br>Form params: - id_file (integer): The id of the file to link with that connector. - img (string): Path to the image to link with that connector.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.connectors_id_connector_logos_post(id_connector, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int id_connector: (required)
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ConnectorLogo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.connectors_id_connector_logos_post_with_http_info(id_connector, **kwargs)  # noqa: E501

    def connectors_id_connector_logos_post_with_http_info(self, id_connector, **kwargs):  # noqa: E501
        """Create a connector Logo  # noqa: E501

        This endpoint creates a connector logo. You can either pass a file to as a parameter to insert and link it with the connector or pass an id_file to link a connector with an existing file. Will fail if the file is already linked with that connector.<br><br>Form params: - id_file (integer): The id of the file to link with that connector. - img (string): Path to the image to link with that connector.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.connectors_id_connector_logos_post_with_http_info(id_connector, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int id_connector: (required)
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ConnectorLogo, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_connector', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method connectors_id_connector_logos_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_connector' is set
        if ('id_connector' not in local_var_params or
                local_var_params['id_connector'] is None):
            raise ApiValueError("Missing the required parameter `id_connector` when calling `connectors_id_connector_logos_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_connector' in local_var_params:
            path_params['id_connector'] = local_var_params['id_connector']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/connectors/{id_connector}/logos', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConnectorLogo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def connectors_id_connector_logos_put(self, id_connector, **kwargs):  # noqa: E501
        """Create or Update a connector Logo  # noqa: E501

        This endpoint creates or update a connector logo. This logo is a mapping between a file (/file route) and a connector (/connectors route) or a provider (/providers route).<br><br>Form params: - id_file (integer): The id of the file to link with that connector.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.connectors_id_connector_logos_put(id_connector, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int id_connector: (required)
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ConnectorLogo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.connectors_id_connector_logos_put_with_http_info(id_connector, **kwargs)  # noqa: E501

    def connectors_id_connector_logos_put_with_http_info(self, id_connector, **kwargs):  # noqa: E501
        """Create or Update a connector Logo  # noqa: E501

        This endpoint creates or update a connector logo. This logo is a mapping between a file (/file route) and a connector (/connectors route) or a provider (/providers route).<br><br>Form params: - id_file (integer): The id of the file to link with that connector.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.connectors_id_connector_logos_put_with_http_info(id_connector, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int id_connector: (required)
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ConnectorLogo, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_connector', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method connectors_id_connector_logos_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_connector' is set
        if ('id_connector' not in local_var_params or
                local_var_params['id_connector'] is None):
            raise ApiValueError("Missing the required parameter `id_connector` when calling `connectors_id_connector_logos_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_connector' in local_var_params:
            path_params['id_connector'] = local_var_params['id_connector']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/connectors/{id_connector}/logos', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConnectorLogo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def connectors_id_connector_logos_thumbnail_get(self, id_connector, **kwargs):  # noqa: E501
        """Get all links to the files associated with this connector.  # noqa: E501

        This endpoint returns all links to files associated with this connector.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.connectors_id_connector_logos_thumbnail_get(id_connector, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int id_connector: (required)
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ConnectorLogosList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.connectors_id_connector_logos_thumbnail_get_with_http_info(id_connector, **kwargs)  # noqa: E501

    def connectors_id_connector_logos_thumbnail_get_with_http_info(self, id_connector, **kwargs):  # noqa: E501
        """Get all links to the files associated with this connector.  # noqa: E501

        This endpoint returns all links to files associated with this connector.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.connectors_id_connector_logos_thumbnail_get_with_http_info(id_connector, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int id_connector: (required)
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ConnectorLogosList, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_connector', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method connectors_id_connector_logos_thumbnail_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_connector' is set
        if ('id_connector' not in local_var_params or
                local_var_params['id_connector'] is None):
            raise ApiValueError("Missing the required parameter `id_connector` when calling `connectors_id_connector_logos_thumbnail_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_connector' in local_var_params:
            path_params['id_connector'] = local_var_params['id_connector']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/connectors/{id_connector}/logos/thumbnail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConnectorLogosList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def connectors_post(self, login, name, password, **kwargs):  # noqa: E501
        """Request a new connector  # noqa: E501

        Send a request to add a new connector<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.connectors_post(login, name, password, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str login: Users login (required)
        :param str name: Name of the bank or provider (required)
        :param str password: Users password (required)
        :param str expand:
        :param str comment: Optionnal comment
        :param str email: Email of the user
        :param bool sendmail: if set, send an email to user
        :param str types: Type of connector, eg. banks or providers
        :param str url: Url of the bank
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Connector
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.connectors_post_with_http_info(login, name, password, **kwargs)  # noqa: E501

    def connectors_post_with_http_info(self, login, name, password, **kwargs):  # noqa: E501
        """Request a new connector  # noqa: E501

        Send a request to add a new connector<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.connectors_post_with_http_info(login, name, password, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str login: Users login (required)
        :param str name: Name of the bank or provider (required)
        :param str password: Users password (required)
        :param str expand:
        :param str comment: Optionnal comment
        :param str email: Email of the user
        :param bool sendmail: if set, send an email to user
        :param str types: Type of connector, eg. banks or providers
        :param str url: Url of the bank
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Connector, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['login', 'name', 'password', 'expand', 'comment', 'email', 'sendmail', 'types', 'url']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method connectors_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'login' is set
        if ('login' not in local_var_params or
                local_var_params['login'] is None):
            raise ApiValueError("Missing the required parameter `login` when calling `connectors_post`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in local_var_params or
                local_var_params['name'] is None):
            raise ApiValueError("Missing the required parameter `name` when calling `connectors_post`")  # noqa: E501
        # verify the required parameter 'password' is set
        if ('password' not in local_var_params or
                local_var_params['password'] is None):
            raise ApiValueError("Missing the required parameter `password` when calling `connectors_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'comment' in local_var_params:
            form_params.append(('comment', local_var_params['comment']))  # noqa: E501
        if 'email' in local_var_params:
            form_params.append(('email', local_var_params['email']))  # noqa: E501
        if 'login' in local_var_params:
            form_params.append(('login', local_var_params['login']))  # noqa: E501
        if 'name' in local_var_params:
            form_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'password' in local_var_params:
            form_params.append(('password', local_var_params['password']))  # noqa: E501
        if 'sendmail' in local_var_params:
            form_params.append(('sendmail', local_var_params['sendmail']))  # noqa: E501
        if 'types' in local_var_params:
            form_params.append(('types', local_var_params['types']))  # noqa: E501
        if 'url' in local_var_params:
            form_params.append(('url', local_var_params['url']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/connectors', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Connector',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def documenttypes_get(self, **kwargs):  # noqa: E501
        """Get document types  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.documenttypes_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: InlineResponse20032
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.documenttypes_get_with_http_info(**kwargs)  # noqa: E501

    def documenttypes_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get document types  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.documenttypes_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(InlineResponse20032, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method documenttypes_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/documenttypes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20032',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def documenttypes_id_documenttype_put(self, id_documenttype, attacheable, name, **kwargs):  # noqa: E501
        """Edit a document type  # noqa: E501

        Change value of a document type.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.documenttypes_id_documenttype_put(id_documenttype, attacheable, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int id_documenttype: (required)
        :param int attacheable: If true, documents of this type can be attached to a transaction, and have amount related meta-data (required)
        :param str name: Displayed name of document type (required)
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DocumentType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.documenttypes_id_documenttype_put_with_http_info(id_documenttype, attacheable, name, **kwargs)  # noqa: E501

    def documenttypes_id_documenttype_put_with_http_info(self, id_documenttype, attacheable, name, **kwargs):  # noqa: E501
        """Edit a document type  # noqa: E501

        Change value of a document type.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.documenttypes_id_documenttype_put_with_http_info(id_documenttype, attacheable, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int id_documenttype: (required)
        :param int attacheable: If true, documents of this type can be attached to a transaction, and have amount related meta-data (required)
        :param str name: Displayed name of document type (required)
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DocumentType, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_documenttype', 'attacheable', 'name', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method documenttypes_id_documenttype_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_documenttype' is set
        if ('id_documenttype' not in local_var_params or
                local_var_params['id_documenttype'] is None):
            raise ApiValueError("Missing the required parameter `id_documenttype` when calling `documenttypes_id_documenttype_put`")  # noqa: E501
        # verify the required parameter 'attacheable' is set
        if ('attacheable' not in local_var_params or
                local_var_params['attacheable'] is None):
            raise ApiValueError("Missing the required parameter `attacheable` when calling `documenttypes_id_documenttype_put`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in local_var_params or
                local_var_params['name'] is None):
            raise ApiValueError("Missing the required parameter `name` when calling `documenttypes_id_documenttype_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_documenttype' in local_var_params:
            path_params['id_documenttype'] = local_var_params['id_documenttype']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'attacheable' in local_var_params:
            form_params.append(('attacheable', local_var_params['attacheable']))  # noqa: E501
        if 'name' in local_var_params:
            form_params.append(('name', local_var_params['name']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/documenttypes/{id_documenttype}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DocumentType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def logs_get(self, **kwargs):  # noqa: E501
        """Get connection logs  # noqa: E501

        Get logs about connections.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.logs_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: limit number of results
        :param int offset: offset of first result
        :param date min_date: minimal date
        :param date max_date: maximum date
        :param int state: state of user
        :param str period: period to group logs
        :param int id_user: ID of a user
        :param int id_connection: ID of a connection
        :param int id_connector: ID of a connector
        :param bool charged: consider only logs for charged connectors
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.logs_get_with_http_info(**kwargs)  # noqa: E501

    def logs_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get connection logs  # noqa: E501

        Get logs about connections.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.logs_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: limit number of results
        :param int offset: offset of first result
        :param date min_date: minimal date
        :param date max_date: maximum date
        :param int state: state of user
        :param str period: period to group logs
        :param int id_user: ID of a user
        :param int id_connection: ID of a connection
        :param int id_connector: ID of a connector
        :param bool charged: consider only logs for charged connectors
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(InlineResponse2008, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['limit', 'offset', 'min_date', 'max_date', 'state', 'period', 'id_user', 'id_connection', 'id_connector', 'charged', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method logs_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params:
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'min_date' in local_var_params:
            query_params.append(('min_date', local_var_params['min_date']))  # noqa: E501
        if 'max_date' in local_var_params:
            query_params.append(('max_date', local_var_params['max_date']))  # noqa: E501
        if 'state' in local_var_params:
            query_params.append(('state', local_var_params['state']))  # noqa: E501
        if 'period' in local_var_params:
            query_params.append(('period', local_var_params['period']))  # noqa: E501
        if 'id_user' in local_var_params:
            query_params.append(('id_user', local_var_params['id_user']))  # noqa: E501
        if 'id_connection' in local_var_params:
            query_params.append(('id_connection', local_var_params['id_connection']))  # noqa: E501
        if 'id_connector' in local_var_params:
            query_params.append(('id_connector', local_var_params['id_connector']))  # noqa: E501
        if 'charged' in local_var_params:
            query_params.append(('charged', local_var_params['charged']))  # noqa: E501
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/logs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2008',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ocr_post(self, file, **kwargs):  # noqa: E501
        """Post an image with OCR  # noqa: E501

        Post an image and apply OCR on it to obtain found meta-data.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ocr_post(file, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param file file: File of the document (required)
        :param int id_transaction: Transaction used to help OCR to find data
        :param str name: Name of the document
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.ocr_post_with_http_info(file, **kwargs)  # noqa: E501

    def ocr_post_with_http_info(self, file, **kwargs):  # noqa: E501
        """Post an image with OCR  # noqa: E501

        Post an image and apply OCR on it to obtain found meta-data.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ocr_post_with_http_info(file, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param file file: File of the document (required)
        :param int id_transaction: Transaction used to help OCR to find data
        :param str name: Name of the document
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['file', 'id_transaction', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ocr_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'file' is set
        if ('file' not in local_var_params or
                local_var_params['file'] is None):
            raise ApiValueError("Missing the required parameter `file` when calling `ocr_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501
        if 'id_transaction' in local_var_params:
            form_params.append(('id_transaction', local_var_params['id_transaction']))  # noqa: E501
        if 'name' in local_var_params:
            form_params.append(('name', local_var_params['name']))  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/ocr', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def providers_get(self, **kwargs):  # noqa: E501
        """Get list of connectors  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.providers_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: InlineResponse20039
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.providers_get_with_http_info(**kwargs)  # noqa: E501

    def providers_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get list of connectors  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.providers_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(InlineResponse20039, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method providers_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/providers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20039',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def providers_id_connector_logos_get(self, id_connector, **kwargs):  # noqa: E501
        """Get all links to the files associated with this connector.  # noqa: E501

        This endpoint returns all links to files associated with this connector.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.providers_id_connector_logos_get(id_connector, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int id_connector: (required)
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ConnectorLogosList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.providers_id_connector_logos_get_with_http_info(id_connector, **kwargs)  # noqa: E501

    def providers_id_connector_logos_get_with_http_info(self, id_connector, **kwargs):  # noqa: E501
        """Get all links to the files associated with this connector.  # noqa: E501

        This endpoint returns all links to files associated with this connector.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.providers_id_connector_logos_get_with_http_info(id_connector, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int id_connector: (required)
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ConnectorLogosList, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_connector', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method providers_id_connector_logos_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_connector' is set
        if ('id_connector' not in local_var_params or
                local_var_params['id_connector'] is None):
            raise ApiValueError("Missing the required parameter `id_connector` when calling `providers_id_connector_logos_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_connector' in local_var_params:
            path_params['id_connector'] = local_var_params['id_connector']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/providers/{id_connector}/logos', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConnectorLogosList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def providers_id_connector_logos_main_get(self, id_connector, **kwargs):  # noqa: E501
        """Get all links to the files associated with this connector.  # noqa: E501

        This endpoint returns all links to files associated with this connector.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.providers_id_connector_logos_main_get(id_connector, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int id_connector: (required)
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ConnectorLogosList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.providers_id_connector_logos_main_get_with_http_info(id_connector, **kwargs)  # noqa: E501

    def providers_id_connector_logos_main_get_with_http_info(self, id_connector, **kwargs):  # noqa: E501
        """Get all links to the files associated with this connector.  # noqa: E501

        This endpoint returns all links to files associated with this connector.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.providers_id_connector_logos_main_get_with_http_info(id_connector, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int id_connector: (required)
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ConnectorLogosList, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_connector', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method providers_id_connector_logos_main_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_connector' is set
        if ('id_connector' not in local_var_params or
                local_var_params['id_connector'] is None):
            raise ApiValueError("Missing the required parameter `id_connector` when calling `providers_id_connector_logos_main_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_connector' in local_var_params:
            path_params['id_connector'] = local_var_params['id_connector']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/providers/{id_connector}/logos/main', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConnectorLogosList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def providers_id_connector_logos_thumbnail_get(self, id_connector, **kwargs):  # noqa: E501
        """Get all links to the files associated with this connector.  # noqa: E501

        This endpoint returns all links to files associated with this connector.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.providers_id_connector_logos_thumbnail_get(id_connector, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int id_connector: (required)
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ConnectorLogosList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.providers_id_connector_logos_thumbnail_get_with_http_info(id_connector, **kwargs)  # noqa: E501

    def providers_id_connector_logos_thumbnail_get_with_http_info(self, id_connector, **kwargs):  # noqa: E501
        """Get all links to the files associated with this connector.  # noqa: E501

        This endpoint returns all links to files associated with this connector.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.providers_id_connector_logos_thumbnail_get_with_http_info(id_connector, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int id_connector: (required)
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ConnectorLogosList, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_connector', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method providers_id_connector_logos_thumbnail_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_connector' is set
        if ('id_connector' not in local_var_params or
                local_var_params['id_connector'] is None):
            raise ApiValueError("Missing the required parameter `id_connector` when calling `providers_id_connector_logos_thumbnail_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_connector' in local_var_params:
            path_params['id_connector'] = local_var_params['id_connector']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/providers/{id_connector}/logos/thumbnail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConnectorLogosList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_accounts_id_account_transactions_id_transaction_documents_delete(self, id_user, id_account, id_transaction, **kwargs):  # noqa: E501
        """Delete documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_transactions_id_transaction_documents_delete(id_user, id_account, id_transaction, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param int id_transaction: (required)
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_accounts_id_account_transactions_id_transaction_documents_delete_with_http_info(id_user, id_account, id_transaction, **kwargs)  # noqa: E501

    def users_id_user_accounts_id_account_transactions_id_transaction_documents_delete_with_http_info(self, id_user, id_account, id_transaction, **kwargs):  # noqa: E501
        """Delete documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_transactions_id_transaction_documents_delete_with_http_info(id_user, id_account, id_transaction, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param int id_transaction: (required)
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Document, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_account', 'id_transaction', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_accounts_id_account_transactions_id_transaction_documents_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_accounts_id_account_transactions_id_transaction_documents_delete`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ApiValueError("Missing the required parameter `id_account` when calling `users_id_user_accounts_id_account_transactions_id_transaction_documents_delete`")  # noqa: E501
        # verify the required parameter 'id_transaction' is set
        if ('id_transaction' not in local_var_params or
                local_var_params['id_transaction'] is None):
            raise ApiValueError("Missing the required parameter `id_transaction` when calling `users_id_user_accounts_id_account_transactions_id_transaction_documents_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501
        if 'id_transaction' in local_var_params:
            path_params['id_transaction'] = local_var_params['id_transaction']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/accounts/{id_account}/transactions/{id_transaction}/documents', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_accounts_id_account_transactions_id_transaction_documents_get(self, id_user, id_account, id_transaction, **kwargs):  # noqa: E501
        """Get documents  # noqa: E501

        Get list of documents<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_transactions_id_transaction_documents_get(id_user, id_account, id_transaction, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param int id_transaction: (required)
        :param int limit: limit number of results
        :param int offset: offset of first result
        :param date min_date: minimal (inclusive) date
        :param date max_date: maximum (inclusive) date
        :param float min_amount: minimal (inclusive) amount
        :param float max_amount: maximumd (inclusive) amount
        :param float min_timestamp: minimal (inclusive) timestamp
        :param float max_timestamp: maximum (inclusive) timestamp
        :param int id_type: filter with a document type
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_accounts_id_account_transactions_id_transaction_documents_get_with_http_info(id_user, id_account, id_transaction, **kwargs)  # noqa: E501

    def users_id_user_accounts_id_account_transactions_id_transaction_documents_get_with_http_info(self, id_user, id_account, id_transaction, **kwargs):  # noqa: E501
        """Get documents  # noqa: E501

        Get list of documents<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_transactions_id_transaction_documents_get_with_http_info(id_user, id_account, id_transaction, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param int id_transaction: (required)
        :param int limit: limit number of results
        :param int offset: offset of first result
        :param date min_date: minimal (inclusive) date
        :param date max_date: maximum (inclusive) date
        :param float min_amount: minimal (inclusive) amount
        :param float max_amount: maximumd (inclusive) amount
        :param float min_timestamp: minimal (inclusive) timestamp
        :param float max_timestamp: maximum (inclusive) timestamp
        :param int id_type: filter with a document type
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(InlineResponse20015, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_account', 'id_transaction', 'limit', 'offset', 'min_date', 'max_date', 'min_amount', 'max_amount', 'min_timestamp', 'max_timestamp', 'id_type', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_accounts_id_account_transactions_id_transaction_documents_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_accounts_id_account_transactions_id_transaction_documents_get`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ApiValueError("Missing the required parameter `id_account` when calling `users_id_user_accounts_id_account_transactions_id_transaction_documents_get`")  # noqa: E501
        # verify the required parameter 'id_transaction' is set
        if ('id_transaction' not in local_var_params or
                local_var_params['id_transaction'] is None):
            raise ApiValueError("Missing the required parameter `id_transaction` when calling `users_id_user_accounts_id_account_transactions_id_transaction_documents_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501
        if 'id_transaction' in local_var_params:
            path_params['id_transaction'] = local_var_params['id_transaction']  # noqa: E501

        query_params = []
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params:
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'min_date' in local_var_params:
            query_params.append(('min_date', local_var_params['min_date']))  # noqa: E501
        if 'max_date' in local_var_params:
            query_params.append(('max_date', local_var_params['max_date']))  # noqa: E501
        if 'min_amount' in local_var_params:
            query_params.append(('min_amount', local_var_params['min_amount']))  # noqa: E501
        if 'max_amount' in local_var_params:
            query_params.append(('max_amount', local_var_params['max_amount']))  # noqa: E501
        if 'min_timestamp' in local_var_params:
            query_params.append(('min_timestamp', local_var_params['min_timestamp']))  # noqa: E501
        if 'max_timestamp' in local_var_params:
            query_params.append(('max_timestamp', local_var_params['max_timestamp']))  # noqa: E501
        if 'id_type' in local_var_params:
            query_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/accounts/{id_account}/transactions/{id_transaction}/documents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20015',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_accounts_id_account_transactions_id_transaction_documents_id_document_delete(self, id_user, id_account, id_transaction, id_document, **kwargs):  # noqa: E501
        """Delete a document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_transactions_id_transaction_documents_id_document_delete(id_user, id_account, id_transaction, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param int id_transaction: (required)
        :param int id_document: (required)
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_accounts_id_account_transactions_id_transaction_documents_id_document_delete_with_http_info(id_user, id_account, id_transaction, id_document, **kwargs)  # noqa: E501

    def users_id_user_accounts_id_account_transactions_id_transaction_documents_id_document_delete_with_http_info(self, id_user, id_account, id_transaction, id_document, **kwargs):  # noqa: E501
        """Delete a document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_transactions_id_transaction_documents_id_document_delete_with_http_info(id_user, id_account, id_transaction, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param int id_transaction: (required)
        :param int id_document: (required)
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Document, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_account', 'id_transaction', 'id_document', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_accounts_id_account_transactions_id_transaction_documents_id_document_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_accounts_id_account_transactions_id_transaction_documents_id_document_delete`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ApiValueError("Missing the required parameter `id_account` when calling `users_id_user_accounts_id_account_transactions_id_transaction_documents_id_document_delete`")  # noqa: E501
        # verify the required parameter 'id_transaction' is set
        if ('id_transaction' not in local_var_params or
                local_var_params['id_transaction'] is None):
            raise ApiValueError("Missing the required parameter `id_transaction` when calling `users_id_user_accounts_id_account_transactions_id_transaction_documents_id_document_delete`")  # noqa: E501
        # verify the required parameter 'id_document' is set
        if ('id_document' not in local_var_params or
                local_var_params['id_document'] is None):
            raise ApiValueError("Missing the required parameter `id_document` when calling `users_id_user_accounts_id_account_transactions_id_transaction_documents_id_document_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501
        if 'id_transaction' in local_var_params:
            path_params['id_transaction'] = local_var_params['id_transaction']  # noqa: E501
        if 'id_document' in local_var_params:
            path_params['id_document'] = local_var_params['id_document']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/accounts/{id_account}/transactions/{id_transaction}/documents/{id_document}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_accounts_id_account_transactions_id_transaction_documents_id_document_put(self, id_user, id_account, id_transaction, id_document, **kwargs):  # noqa: E501
        """Edit a document  # noqa: E501

        Edit meta-data of a specific document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_transactions_id_transaction_documents_id_document_put(id_user, id_account, id_transaction, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param int id_transaction: (required)
        :param int id_document: (required)
        :param str expand:
        :param date date: Date of document
        :param date duedate: Due date of document
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_type: Type of this document
        :param int income: Is an income or an outcome
        :param str name: Name of the document
        :param int readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_accounts_id_account_transactions_id_transaction_documents_id_document_put_with_http_info(id_user, id_account, id_transaction, id_document, **kwargs)  # noqa: E501

    def users_id_user_accounts_id_account_transactions_id_transaction_documents_id_document_put_with_http_info(self, id_user, id_account, id_transaction, id_document, **kwargs):  # noqa: E501
        """Edit a document  # noqa: E501

        Edit meta-data of a specific document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_transactions_id_transaction_documents_id_document_put_with_http_info(id_user, id_account, id_transaction, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param int id_transaction: (required)
        :param int id_document: (required)
        :param str expand:
        :param date date: Date of document
        :param date duedate: Due date of document
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_type: Type of this document
        :param int income: Is an income or an outcome
        :param str name: Name of the document
        :param int readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Document, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_account', 'id_transaction', 'id_document', 'expand', 'date', 'duedate', 'file', 'id_category', 'id_type', 'income', 'name', 'readonly', 'total_amount', 'untaxed_amount', 'vat']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_accounts_id_account_transactions_id_transaction_documents_id_document_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_accounts_id_account_transactions_id_transaction_documents_id_document_put`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ApiValueError("Missing the required parameter `id_account` when calling `users_id_user_accounts_id_account_transactions_id_transaction_documents_id_document_put`")  # noqa: E501
        # verify the required parameter 'id_transaction' is set
        if ('id_transaction' not in local_var_params or
                local_var_params['id_transaction'] is None):
            raise ApiValueError("Missing the required parameter `id_transaction` when calling `users_id_user_accounts_id_account_transactions_id_transaction_documents_id_document_put`")  # noqa: E501
        # verify the required parameter 'id_document' is set
        if ('id_document' not in local_var_params or
                local_var_params['id_document'] is None):
            raise ApiValueError("Missing the required parameter `id_document` when calling `users_id_user_accounts_id_account_transactions_id_transaction_documents_id_document_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501
        if 'id_transaction' in local_var_params:
            path_params['id_transaction'] = local_var_params['id_transaction']  # noqa: E501
        if 'id_document' in local_var_params:
            path_params['id_document'] = local_var_params['id_document']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'date' in local_var_params:
            form_params.append(('date', local_var_params['date']))  # noqa: E501
        if 'duedate' in local_var_params:
            form_params.append(('duedate', local_var_params['duedate']))  # noqa: E501
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501
        if 'id_category' in local_var_params:
            form_params.append(('id_category', local_var_params['id_category']))  # noqa: E501
        if 'id_type' in local_var_params:
            form_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'income' in local_var_params:
            form_params.append(('income', local_var_params['income']))  # noqa: E501
        if 'name' in local_var_params:
            form_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'readonly' in local_var_params:
            form_params.append(('readonly', local_var_params['readonly']))  # noqa: E501
        if 'total_amount' in local_var_params:
            form_params.append(('total_amount', local_var_params['total_amount']))  # noqa: E501
        if 'untaxed_amount' in local_var_params:
            form_params.append(('untaxed_amount', local_var_params['untaxed_amount']))  # noqa: E501
        if 'vat' in local_var_params:
            form_params.append(('vat', local_var_params['vat']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/accounts/{id_account}/transactions/{id_transaction}/documents/{id_document}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_accounts_id_account_transactions_id_transaction_documents_post(self, id_user, id_account, id_transaction, date, duedate, **kwargs):  # noqa: E501
        """Add a new document  # noqa: E501

        Add a new document<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_transactions_id_transaction_documents_post(id_user, id_account, id_transaction, date, duedate, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param int id_transaction: (required)
        :param date date: Date of document (required)
        :param date duedate: Due date of document (required)
        :param str expand:
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_ocr: Related OCR process
        :param int id_type: Type of this document
        :param bool income: Is an income or an outcome
        :param str name: Name of the document
        :param bool readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_accounts_id_account_transactions_id_transaction_documents_post_with_http_info(id_user, id_account, id_transaction, date, duedate, **kwargs)  # noqa: E501

    def users_id_user_accounts_id_account_transactions_id_transaction_documents_post_with_http_info(self, id_user, id_account, id_transaction, date, duedate, **kwargs):  # noqa: E501
        """Add a new document  # noqa: E501

        Add a new document<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_transactions_id_transaction_documents_post_with_http_info(id_user, id_account, id_transaction, date, duedate, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param int id_transaction: (required)
        :param date date: Date of document (required)
        :param date duedate: Due date of document (required)
        :param str expand:
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_ocr: Related OCR process
        :param int id_type: Type of this document
        :param bool income: Is an income or an outcome
        :param str name: Name of the document
        :param bool readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Document, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_account', 'id_transaction', 'date', 'duedate', 'expand', 'file', 'id_category', 'id_ocr', 'id_type', 'income', 'name', 'readonly', 'total_amount', 'untaxed_amount', 'vat']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_accounts_id_account_transactions_id_transaction_documents_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_accounts_id_account_transactions_id_transaction_documents_post`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ApiValueError("Missing the required parameter `id_account` when calling `users_id_user_accounts_id_account_transactions_id_transaction_documents_post`")  # noqa: E501
        # verify the required parameter 'id_transaction' is set
        if ('id_transaction' not in local_var_params or
                local_var_params['id_transaction'] is None):
            raise ApiValueError("Missing the required parameter `id_transaction` when calling `users_id_user_accounts_id_account_transactions_id_transaction_documents_post`")  # noqa: E501
        # verify the required parameter 'date' is set
        if ('date' not in local_var_params or
                local_var_params['date'] is None):
            raise ApiValueError("Missing the required parameter `date` when calling `users_id_user_accounts_id_account_transactions_id_transaction_documents_post`")  # noqa: E501
        # verify the required parameter 'duedate' is set
        if ('duedate' not in local_var_params or
                local_var_params['duedate'] is None):
            raise ApiValueError("Missing the required parameter `duedate` when calling `users_id_user_accounts_id_account_transactions_id_transaction_documents_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501
        if 'id_transaction' in local_var_params:
            path_params['id_transaction'] = local_var_params['id_transaction']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'date' in local_var_params:
            form_params.append(('date', local_var_params['date']))  # noqa: E501
        if 'duedate' in local_var_params:
            form_params.append(('duedate', local_var_params['duedate']))  # noqa: E501
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501
        if 'id_category' in local_var_params:
            form_params.append(('id_category', local_var_params['id_category']))  # noqa: E501
        if 'id_ocr' in local_var_params:
            form_params.append(('id_ocr', local_var_params['id_ocr']))  # noqa: E501
        if 'id_type' in local_var_params:
            form_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'income' in local_var_params:
            form_params.append(('income', local_var_params['income']))  # noqa: E501
        if 'name' in local_var_params:
            form_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'readonly' in local_var_params:
            form_params.append(('readonly', local_var_params['readonly']))  # noqa: E501
        if 'total_amount' in local_var_params:
            form_params.append(('total_amount', local_var_params['total_amount']))  # noqa: E501
        if 'untaxed_amount' in local_var_params:
            form_params.append(('untaxed_amount', local_var_params['untaxed_amount']))  # noqa: E501
        if 'vat' in local_var_params:
            form_params.append(('vat', local_var_params['vat']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/accounts/{id_account}/transactions/{id_transaction}/documents', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_accounts_id_account_transactions_id_transaction_documents_put(self, id_user, id_account, id_transaction, id_document, **kwargs):  # noqa: E501
        """Attach an existing document to a transaction or a transactions_cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_transactions_id_transaction_documents_put(id_user, id_account, id_transaction, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param int id_transaction: (required)
        :param int id_document: id of the document you want to attach the file to (required)
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_accounts_id_account_transactions_id_transaction_documents_put_with_http_info(id_user, id_account, id_transaction, id_document, **kwargs)  # noqa: E501

    def users_id_user_accounts_id_account_transactions_id_transaction_documents_put_with_http_info(self, id_user, id_account, id_transaction, id_document, **kwargs):  # noqa: E501
        """Attach an existing document to a transaction or a transactions_cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_transactions_id_transaction_documents_put_with_http_info(id_user, id_account, id_transaction, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param int id_transaction: (required)
        :param int id_document: id of the document you want to attach the file to (required)
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Document, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_account', 'id_transaction', 'id_document', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_accounts_id_account_transactions_id_transaction_documents_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_accounts_id_account_transactions_id_transaction_documents_put`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ApiValueError("Missing the required parameter `id_account` when calling `users_id_user_accounts_id_account_transactions_id_transaction_documents_put`")  # noqa: E501
        # verify the required parameter 'id_transaction' is set
        if ('id_transaction' not in local_var_params or
                local_var_params['id_transaction'] is None):
            raise ApiValueError("Missing the required parameter `id_transaction` when calling `users_id_user_accounts_id_account_transactions_id_transaction_documents_put`")  # noqa: E501
        # verify the required parameter 'id_document' is set
        if ('id_document' not in local_var_params or
                local_var_params['id_document'] is None):
            raise ApiValueError("Missing the required parameter `id_document` when calling `users_id_user_accounts_id_account_transactions_id_transaction_documents_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501
        if 'id_transaction' in local_var_params:
            path_params['id_transaction'] = local_var_params['id_transaction']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'id_document' in local_var_params:
            form_params.append(('id_document', local_var_params['id_document']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/accounts/{id_account}/transactions/{id_transaction}/documents', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_delete(self, id_user, id_account, id_transactions_cluster, **kwargs):  # noqa: E501
        """Delete documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_delete(id_user, id_account, id_transactions_cluster, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param int id_transactions_cluster: (required)
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_delete_with_http_info(id_user, id_account, id_transactions_cluster, **kwargs)  # noqa: E501

    def users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_delete_with_http_info(self, id_user, id_account, id_transactions_cluster, **kwargs):  # noqa: E501
        """Delete documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_delete_with_http_info(id_user, id_account, id_transactions_cluster, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param int id_transactions_cluster: (required)
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Document, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_account', 'id_transactions_cluster', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_delete`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ApiValueError("Missing the required parameter `id_account` when calling `users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_delete`")  # noqa: E501
        # verify the required parameter 'id_transactions_cluster' is set
        if ('id_transactions_cluster' not in local_var_params or
                local_var_params['id_transactions_cluster'] is None):
            raise ApiValueError("Missing the required parameter `id_transactions_cluster` when calling `users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501
        if 'id_transactions_cluster' in local_var_params:
            path_params['id_transactions_cluster'] = local_var_params['id_transactions_cluster']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/accounts/{id_account}/transactionsclusters/{id_transactions_cluster}/documents', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_get(self, id_user, id_account, id_transactions_cluster, **kwargs):  # noqa: E501
        """Get documents  # noqa: E501

        Get list of documents<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_get(id_user, id_account, id_transactions_cluster, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param int id_transactions_cluster: (required)
        :param int limit: limit number of results
        :param int offset: offset of first result
        :param date min_date: minimal (inclusive) date
        :param date max_date: maximum (inclusive) date
        :param float min_amount: minimal (inclusive) amount
        :param float max_amount: maximumd (inclusive) amount
        :param float min_timestamp: minimal (inclusive) timestamp
        :param float max_timestamp: maximum (inclusive) timestamp
        :param int id_type: filter with a document type
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_get_with_http_info(id_user, id_account, id_transactions_cluster, **kwargs)  # noqa: E501

    def users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_get_with_http_info(self, id_user, id_account, id_transactions_cluster, **kwargs):  # noqa: E501
        """Get documents  # noqa: E501

        Get list of documents<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_get_with_http_info(id_user, id_account, id_transactions_cluster, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param int id_transactions_cluster: (required)
        :param int limit: limit number of results
        :param int offset: offset of first result
        :param date min_date: minimal (inclusive) date
        :param date max_date: maximum (inclusive) date
        :param float min_amount: minimal (inclusive) amount
        :param float max_amount: maximumd (inclusive) amount
        :param float min_timestamp: minimal (inclusive) timestamp
        :param float max_timestamp: maximum (inclusive) timestamp
        :param int id_type: filter with a document type
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(InlineResponse20015, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_account', 'id_transactions_cluster', 'limit', 'offset', 'min_date', 'max_date', 'min_amount', 'max_amount', 'min_timestamp', 'max_timestamp', 'id_type', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_get`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ApiValueError("Missing the required parameter `id_account` when calling `users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_get`")  # noqa: E501
        # verify the required parameter 'id_transactions_cluster' is set
        if ('id_transactions_cluster' not in local_var_params or
                local_var_params['id_transactions_cluster'] is None):
            raise ApiValueError("Missing the required parameter `id_transactions_cluster` when calling `users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501
        if 'id_transactions_cluster' in local_var_params:
            path_params['id_transactions_cluster'] = local_var_params['id_transactions_cluster']  # noqa: E501

        query_params = []
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params:
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'min_date' in local_var_params:
            query_params.append(('min_date', local_var_params['min_date']))  # noqa: E501
        if 'max_date' in local_var_params:
            query_params.append(('max_date', local_var_params['max_date']))  # noqa: E501
        if 'min_amount' in local_var_params:
            query_params.append(('min_amount', local_var_params['min_amount']))  # noqa: E501
        if 'max_amount' in local_var_params:
            query_params.append(('max_amount', local_var_params['max_amount']))  # noqa: E501
        if 'min_timestamp' in local_var_params:
            query_params.append(('min_timestamp', local_var_params['min_timestamp']))  # noqa: E501
        if 'max_timestamp' in local_var_params:
            query_params.append(('max_timestamp', local_var_params['max_timestamp']))  # noqa: E501
        if 'id_type' in local_var_params:
            query_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/accounts/{id_account}/transactionsclusters/{id_transactions_cluster}/documents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20015',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_delete(self, id_user, id_account, id_transactions_cluster, id_document, **kwargs):  # noqa: E501
        """Delete a document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_delete(id_user, id_account, id_transactions_cluster, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param int id_transactions_cluster: (required)
        :param int id_document: (required)
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_delete_with_http_info(id_user, id_account, id_transactions_cluster, id_document, **kwargs)  # noqa: E501

    def users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_delete_with_http_info(self, id_user, id_account, id_transactions_cluster, id_document, **kwargs):  # noqa: E501
        """Delete a document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_delete_with_http_info(id_user, id_account, id_transactions_cluster, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param int id_transactions_cluster: (required)
        :param int id_document: (required)
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Document, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_account', 'id_transactions_cluster', 'id_document', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_delete`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ApiValueError("Missing the required parameter `id_account` when calling `users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_delete`")  # noqa: E501
        # verify the required parameter 'id_transactions_cluster' is set
        if ('id_transactions_cluster' not in local_var_params or
                local_var_params['id_transactions_cluster'] is None):
            raise ApiValueError("Missing the required parameter `id_transactions_cluster` when calling `users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_delete`")  # noqa: E501
        # verify the required parameter 'id_document' is set
        if ('id_document' not in local_var_params or
                local_var_params['id_document'] is None):
            raise ApiValueError("Missing the required parameter `id_document` when calling `users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501
        if 'id_transactions_cluster' in local_var_params:
            path_params['id_transactions_cluster'] = local_var_params['id_transactions_cluster']  # noqa: E501
        if 'id_document' in local_var_params:
            path_params['id_document'] = local_var_params['id_document']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/accounts/{id_account}/transactionsclusters/{id_transactions_cluster}/documents/{id_document}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_put(self, id_user, id_account, id_transactions_cluster, id_document, **kwargs):  # noqa: E501
        """Edit a document  # noqa: E501

        Edit meta-data of a specific document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_put(id_user, id_account, id_transactions_cluster, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param int id_transactions_cluster: (required)
        :param int id_document: (required)
        :param str expand:
        :param date date: Date of document
        :param date duedate: Due date of document
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_type: Type of this document
        :param int income: Is an income or an outcome
        :param str name: Name of the document
        :param int readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_put_with_http_info(id_user, id_account, id_transactions_cluster, id_document, **kwargs)  # noqa: E501

    def users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_put_with_http_info(self, id_user, id_account, id_transactions_cluster, id_document, **kwargs):  # noqa: E501
        """Edit a document  # noqa: E501

        Edit meta-data of a specific document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_put_with_http_info(id_user, id_account, id_transactions_cluster, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param int id_transactions_cluster: (required)
        :param int id_document: (required)
        :param str expand:
        :param date date: Date of document
        :param date duedate: Due date of document
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_type: Type of this document
        :param int income: Is an income or an outcome
        :param str name: Name of the document
        :param int readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Document, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_account', 'id_transactions_cluster', 'id_document', 'expand', 'date', 'duedate', 'file', 'id_category', 'id_type', 'income', 'name', 'readonly', 'total_amount', 'untaxed_amount', 'vat']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_put`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ApiValueError("Missing the required parameter `id_account` when calling `users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_put`")  # noqa: E501
        # verify the required parameter 'id_transactions_cluster' is set
        if ('id_transactions_cluster' not in local_var_params or
                local_var_params['id_transactions_cluster'] is None):
            raise ApiValueError("Missing the required parameter `id_transactions_cluster` when calling `users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_put`")  # noqa: E501
        # verify the required parameter 'id_document' is set
        if ('id_document' not in local_var_params or
                local_var_params['id_document'] is None):
            raise ApiValueError("Missing the required parameter `id_document` when calling `users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501
        if 'id_transactions_cluster' in local_var_params:
            path_params['id_transactions_cluster'] = local_var_params['id_transactions_cluster']  # noqa: E501
        if 'id_document' in local_var_params:
            path_params['id_document'] = local_var_params['id_document']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'date' in local_var_params:
            form_params.append(('date', local_var_params['date']))  # noqa: E501
        if 'duedate' in local_var_params:
            form_params.append(('duedate', local_var_params['duedate']))  # noqa: E501
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501
        if 'id_category' in local_var_params:
            form_params.append(('id_category', local_var_params['id_category']))  # noqa: E501
        if 'id_type' in local_var_params:
            form_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'income' in local_var_params:
            form_params.append(('income', local_var_params['income']))  # noqa: E501
        if 'name' in local_var_params:
            form_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'readonly' in local_var_params:
            form_params.append(('readonly', local_var_params['readonly']))  # noqa: E501
        if 'total_amount' in local_var_params:
            form_params.append(('total_amount', local_var_params['total_amount']))  # noqa: E501
        if 'untaxed_amount' in local_var_params:
            form_params.append(('untaxed_amount', local_var_params['untaxed_amount']))  # noqa: E501
        if 'vat' in local_var_params:
            form_params.append(('vat', local_var_params['vat']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/accounts/{id_account}/transactionsclusters/{id_transactions_cluster}/documents/{id_document}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_post(self, id_user, id_account, id_transactions_cluster, date, duedate, **kwargs):  # noqa: E501
        """Add a new document  # noqa: E501

        Add a new document<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_post(id_user, id_account, id_transactions_cluster, date, duedate, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param int id_transactions_cluster: (required)
        :param date date: Date of document (required)
        :param date duedate: Due date of document (required)
        :param str expand:
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_ocr: Related OCR process
        :param int id_type: Type of this document
        :param bool income: Is an income or an outcome
        :param str name: Name of the document
        :param bool readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_post_with_http_info(id_user, id_account, id_transactions_cluster, date, duedate, **kwargs)  # noqa: E501

    def users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_post_with_http_info(self, id_user, id_account, id_transactions_cluster, date, duedate, **kwargs):  # noqa: E501
        """Add a new document  # noqa: E501

        Add a new document<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_post_with_http_info(id_user, id_account, id_transactions_cluster, date, duedate, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param int id_transactions_cluster: (required)
        :param date date: Date of document (required)
        :param date duedate: Due date of document (required)
        :param str expand:
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_ocr: Related OCR process
        :param int id_type: Type of this document
        :param bool income: Is an income or an outcome
        :param str name: Name of the document
        :param bool readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Document, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_account', 'id_transactions_cluster', 'date', 'duedate', 'expand', 'file', 'id_category', 'id_ocr', 'id_type', 'income', 'name', 'readonly', 'total_amount', 'untaxed_amount', 'vat']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_post`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ApiValueError("Missing the required parameter `id_account` when calling `users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_post`")  # noqa: E501
        # verify the required parameter 'id_transactions_cluster' is set
        if ('id_transactions_cluster' not in local_var_params or
                local_var_params['id_transactions_cluster'] is None):
            raise ApiValueError("Missing the required parameter `id_transactions_cluster` when calling `users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_post`")  # noqa: E501
        # verify the required parameter 'date' is set
        if ('date' not in local_var_params or
                local_var_params['date'] is None):
            raise ApiValueError("Missing the required parameter `date` when calling `users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_post`")  # noqa: E501
        # verify the required parameter 'duedate' is set
        if ('duedate' not in local_var_params or
                local_var_params['duedate'] is None):
            raise ApiValueError("Missing the required parameter `duedate` when calling `users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501
        if 'id_transactions_cluster' in local_var_params:
            path_params['id_transactions_cluster'] = local_var_params['id_transactions_cluster']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'date' in local_var_params:
            form_params.append(('date', local_var_params['date']))  # noqa: E501
        if 'duedate' in local_var_params:
            form_params.append(('duedate', local_var_params['duedate']))  # noqa: E501
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501
        if 'id_category' in local_var_params:
            form_params.append(('id_category', local_var_params['id_category']))  # noqa: E501
        if 'id_ocr' in local_var_params:
            form_params.append(('id_ocr', local_var_params['id_ocr']))  # noqa: E501
        if 'id_type' in local_var_params:
            form_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'income' in local_var_params:
            form_params.append(('income', local_var_params['income']))  # noqa: E501
        if 'name' in local_var_params:
            form_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'readonly' in local_var_params:
            form_params.append(('readonly', local_var_params['readonly']))  # noqa: E501
        if 'total_amount' in local_var_params:
            form_params.append(('total_amount', local_var_params['total_amount']))  # noqa: E501
        if 'untaxed_amount' in local_var_params:
            form_params.append(('untaxed_amount', local_var_params['untaxed_amount']))  # noqa: E501
        if 'vat' in local_var_params:
            form_params.append(('vat', local_var_params['vat']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/accounts/{id_account}/transactionsclusters/{id_transactions_cluster}/documents', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_put(self, id_user, id_account, id_transactions_cluster, id_document, **kwargs):  # noqa: E501
        """Attach an existing document to a transaction or a transactions_cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_put(id_user, id_account, id_transactions_cluster, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param int id_transactions_cluster: (required)
        :param int id_document: id of the document you want to attach the file to (required)
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_put_with_http_info(id_user, id_account, id_transactions_cluster, id_document, **kwargs)  # noqa: E501

    def users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_put_with_http_info(self, id_user, id_account, id_transactions_cluster, id_document, **kwargs):  # noqa: E501
        """Attach an existing document to a transaction or a transactions_cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_put_with_http_info(id_user, id_account, id_transactions_cluster, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param int id_transactions_cluster: (required)
        :param int id_document: id of the document you want to attach the file to (required)
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Document, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_account', 'id_transactions_cluster', 'id_document', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_put`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ApiValueError("Missing the required parameter `id_account` when calling `users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_put`")  # noqa: E501
        # verify the required parameter 'id_transactions_cluster' is set
        if ('id_transactions_cluster' not in local_var_params or
                local_var_params['id_transactions_cluster'] is None):
            raise ApiValueError("Missing the required parameter `id_transactions_cluster` when calling `users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_put`")  # noqa: E501
        # verify the required parameter 'id_document' is set
        if ('id_document' not in local_var_params or
                local_var_params['id_document'] is None):
            raise ApiValueError("Missing the required parameter `id_document` when calling `users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501
        if 'id_transactions_cluster' in local_var_params:
            path_params['id_transactions_cluster'] = local_var_params['id_transactions_cluster']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'id_document' in local_var_params:
            form_params.append(('id_document', local_var_params['id_document']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/accounts/{id_account}/transactionsclusters/{id_transactions_cluster}/documents', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_delete(self, id_user, **kwargs):  # noqa: E501
        """Delete all connections  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_delete(id_user, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Connection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_connections_delete_with_http_info(id_user, **kwargs)  # noqa: E501

    def users_id_user_connections_delete_with_http_info(self, id_user, **kwargs):  # noqa: E501
        """Delete all connections  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_delete_with_http_info(id_user, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Connection, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Connection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_get(self, id_user, **kwargs):  # noqa: E501
        """Get connections  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_get(id_user, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ConnectionsList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_connections_get_with_http_info(id_user, **kwargs)  # noqa: E501

    def users_id_user_connections_get_with_http_info(self, id_user, **kwargs):  # noqa: E501
        """Get connections  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_get_with_http_info(id_user, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ConnectionsList, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConnectionsList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_delete(self, id_user, id_connection, id_account, id_transaction, **kwargs):  # noqa: E501
        """Delete documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_delete(id_user, id_connection, id_account, id_transaction, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param int id_transaction: (required)
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_delete_with_http_info(id_user, id_connection, id_account, id_transaction, **kwargs)  # noqa: E501

    def users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_delete_with_http_info(self, id_user, id_connection, id_account, id_transaction, **kwargs):  # noqa: E501
        """Delete documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_delete_with_http_info(id_user, id_connection, id_account, id_transaction, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param int id_transaction: (required)
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Document, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_account', 'id_transaction', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_delete`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ApiValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_delete`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ApiValueError("Missing the required parameter `id_account` when calling `users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_delete`")  # noqa: E501
        # verify the required parameter 'id_transaction' is set
        if ('id_transaction' not in local_var_params or
                local_var_params['id_transaction'] is None):
            raise ApiValueError("Missing the required parameter `id_transaction` when calling `users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501
        if 'id_transaction' in local_var_params:
            path_params['id_transaction'] = local_var_params['id_transaction']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/accounts/{id_account}/transactions/{id_transaction}/documents', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_get(self, id_user, id_connection, id_account, id_transaction, **kwargs):  # noqa: E501
        """Get documents  # noqa: E501

        Get list of documents<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_get(id_user, id_connection, id_account, id_transaction, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param int id_transaction: (required)
        :param int limit: limit number of results
        :param int offset: offset of first result
        :param date min_date: minimal (inclusive) date
        :param date max_date: maximum (inclusive) date
        :param float min_amount: minimal (inclusive) amount
        :param float max_amount: maximumd (inclusive) amount
        :param float min_timestamp: minimal (inclusive) timestamp
        :param float max_timestamp: maximum (inclusive) timestamp
        :param int id_type: filter with a document type
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_get_with_http_info(id_user, id_connection, id_account, id_transaction, **kwargs)  # noqa: E501

    def users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_get_with_http_info(self, id_user, id_connection, id_account, id_transaction, **kwargs):  # noqa: E501
        """Get documents  # noqa: E501

        Get list of documents<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_get_with_http_info(id_user, id_connection, id_account, id_transaction, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param int id_transaction: (required)
        :param int limit: limit number of results
        :param int offset: offset of first result
        :param date min_date: minimal (inclusive) date
        :param date max_date: maximum (inclusive) date
        :param float min_amount: minimal (inclusive) amount
        :param float max_amount: maximumd (inclusive) amount
        :param float min_timestamp: minimal (inclusive) timestamp
        :param float max_timestamp: maximum (inclusive) timestamp
        :param int id_type: filter with a document type
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(InlineResponse20015, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_account', 'id_transaction', 'limit', 'offset', 'min_date', 'max_date', 'min_amount', 'max_amount', 'min_timestamp', 'max_timestamp', 'id_type', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_get`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ApiValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_get`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ApiValueError("Missing the required parameter `id_account` when calling `users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_get`")  # noqa: E501
        # verify the required parameter 'id_transaction' is set
        if ('id_transaction' not in local_var_params or
                local_var_params['id_transaction'] is None):
            raise ApiValueError("Missing the required parameter `id_transaction` when calling `users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501
        if 'id_transaction' in local_var_params:
            path_params['id_transaction'] = local_var_params['id_transaction']  # noqa: E501

        query_params = []
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params:
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'min_date' in local_var_params:
            query_params.append(('min_date', local_var_params['min_date']))  # noqa: E501
        if 'max_date' in local_var_params:
            query_params.append(('max_date', local_var_params['max_date']))  # noqa: E501
        if 'min_amount' in local_var_params:
            query_params.append(('min_amount', local_var_params['min_amount']))  # noqa: E501
        if 'max_amount' in local_var_params:
            query_params.append(('max_amount', local_var_params['max_amount']))  # noqa: E501
        if 'min_timestamp' in local_var_params:
            query_params.append(('min_timestamp', local_var_params['min_timestamp']))  # noqa: E501
        if 'max_timestamp' in local_var_params:
            query_params.append(('max_timestamp', local_var_params['max_timestamp']))  # noqa: E501
        if 'id_type' in local_var_params:
            query_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/accounts/{id_account}/transactions/{id_transaction}/documents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20015',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_id_document_delete(self, id_user, id_connection, id_account, id_transaction, id_document, **kwargs):  # noqa: E501
        """Delete a document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_id_document_delete(id_user, id_connection, id_account, id_transaction, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param int id_transaction: (required)
        :param int id_document: (required)
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_id_document_delete_with_http_info(id_user, id_connection, id_account, id_transaction, id_document, **kwargs)  # noqa: E501

    def users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_id_document_delete_with_http_info(self, id_user, id_connection, id_account, id_transaction, id_document, **kwargs):  # noqa: E501
        """Delete a document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_id_document_delete_with_http_info(id_user, id_connection, id_account, id_transaction, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param int id_transaction: (required)
        :param int id_document: (required)
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Document, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_account', 'id_transaction', 'id_document', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_id_document_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_id_document_delete`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ApiValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_id_document_delete`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ApiValueError("Missing the required parameter `id_account` when calling `users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_id_document_delete`")  # noqa: E501
        # verify the required parameter 'id_transaction' is set
        if ('id_transaction' not in local_var_params or
                local_var_params['id_transaction'] is None):
            raise ApiValueError("Missing the required parameter `id_transaction` when calling `users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_id_document_delete`")  # noqa: E501
        # verify the required parameter 'id_document' is set
        if ('id_document' not in local_var_params or
                local_var_params['id_document'] is None):
            raise ApiValueError("Missing the required parameter `id_document` when calling `users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_id_document_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501
        if 'id_transaction' in local_var_params:
            path_params['id_transaction'] = local_var_params['id_transaction']  # noqa: E501
        if 'id_document' in local_var_params:
            path_params['id_document'] = local_var_params['id_document']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/accounts/{id_account}/transactions/{id_transaction}/documents/{id_document}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_id_document_put(self, id_user, id_connection, id_account, id_transaction, id_document, **kwargs):  # noqa: E501
        """Edit a document  # noqa: E501

        Edit meta-data of a specific document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_id_document_put(id_user, id_connection, id_account, id_transaction, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param int id_transaction: (required)
        :param int id_document: (required)
        :param str expand:
        :param date date: Date of document
        :param date duedate: Due date of document
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_type: Type of this document
        :param int income: Is an income or an outcome
        :param str name: Name of the document
        :param int readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_id_document_put_with_http_info(id_user, id_connection, id_account, id_transaction, id_document, **kwargs)  # noqa: E501

    def users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_id_document_put_with_http_info(self, id_user, id_connection, id_account, id_transaction, id_document, **kwargs):  # noqa: E501
        """Edit a document  # noqa: E501

        Edit meta-data of a specific document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_id_document_put_with_http_info(id_user, id_connection, id_account, id_transaction, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param int id_transaction: (required)
        :param int id_document: (required)
        :param str expand:
        :param date date: Date of document
        :param date duedate: Due date of document
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_type: Type of this document
        :param int income: Is an income or an outcome
        :param str name: Name of the document
        :param int readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Document, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_account', 'id_transaction', 'id_document', 'expand', 'date', 'duedate', 'file', 'id_category', 'id_type', 'income', 'name', 'readonly', 'total_amount', 'untaxed_amount', 'vat']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_id_document_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_id_document_put`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ApiValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_id_document_put`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ApiValueError("Missing the required parameter `id_account` when calling `users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_id_document_put`")  # noqa: E501
        # verify the required parameter 'id_transaction' is set
        if ('id_transaction' not in local_var_params or
                local_var_params['id_transaction'] is None):
            raise ApiValueError("Missing the required parameter `id_transaction` when calling `users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_id_document_put`")  # noqa: E501
        # verify the required parameter 'id_document' is set
        if ('id_document' not in local_var_params or
                local_var_params['id_document'] is None):
            raise ApiValueError("Missing the required parameter `id_document` when calling `users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_id_document_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501
        if 'id_transaction' in local_var_params:
            path_params['id_transaction'] = local_var_params['id_transaction']  # noqa: E501
        if 'id_document' in local_var_params:
            path_params['id_document'] = local_var_params['id_document']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'date' in local_var_params:
            form_params.append(('date', local_var_params['date']))  # noqa: E501
        if 'duedate' in local_var_params:
            form_params.append(('duedate', local_var_params['duedate']))  # noqa: E501
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501
        if 'id_category' in local_var_params:
            form_params.append(('id_category', local_var_params['id_category']))  # noqa: E501
        if 'id_type' in local_var_params:
            form_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'income' in local_var_params:
            form_params.append(('income', local_var_params['income']))  # noqa: E501
        if 'name' in local_var_params:
            form_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'readonly' in local_var_params:
            form_params.append(('readonly', local_var_params['readonly']))  # noqa: E501
        if 'total_amount' in local_var_params:
            form_params.append(('total_amount', local_var_params['total_amount']))  # noqa: E501
        if 'untaxed_amount' in local_var_params:
            form_params.append(('untaxed_amount', local_var_params['untaxed_amount']))  # noqa: E501
        if 'vat' in local_var_params:
            form_params.append(('vat', local_var_params['vat']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/accounts/{id_account}/transactions/{id_transaction}/documents/{id_document}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_post(self, id_user, id_connection, id_account, id_transaction, date, duedate, **kwargs):  # noqa: E501
        """Add a new document  # noqa: E501

        Add a new document<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_post(id_user, id_connection, id_account, id_transaction, date, duedate, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param int id_transaction: (required)
        :param date date: Date of document (required)
        :param date duedate: Due date of document (required)
        :param str expand:
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_ocr: Related OCR process
        :param int id_type: Type of this document
        :param bool income: Is an income or an outcome
        :param str name: Name of the document
        :param bool readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_post_with_http_info(id_user, id_connection, id_account, id_transaction, date, duedate, **kwargs)  # noqa: E501

    def users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_post_with_http_info(self, id_user, id_connection, id_account, id_transaction, date, duedate, **kwargs):  # noqa: E501
        """Add a new document  # noqa: E501

        Add a new document<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_post_with_http_info(id_user, id_connection, id_account, id_transaction, date, duedate, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param int id_transaction: (required)
        :param date date: Date of document (required)
        :param date duedate: Due date of document (required)
        :param str expand:
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_ocr: Related OCR process
        :param int id_type: Type of this document
        :param bool income: Is an income or an outcome
        :param str name: Name of the document
        :param bool readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Document, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_account', 'id_transaction', 'date', 'duedate', 'expand', 'file', 'id_category', 'id_ocr', 'id_type', 'income', 'name', 'readonly', 'total_amount', 'untaxed_amount', 'vat']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_post`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ApiValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_post`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ApiValueError("Missing the required parameter `id_account` when calling `users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_post`")  # noqa: E501
        # verify the required parameter 'id_transaction' is set
        if ('id_transaction' not in local_var_params or
                local_var_params['id_transaction'] is None):
            raise ApiValueError("Missing the required parameter `id_transaction` when calling `users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_post`")  # noqa: E501
        # verify the required parameter 'date' is set
        if ('date' not in local_var_params or
                local_var_params['date'] is None):
            raise ApiValueError("Missing the required parameter `date` when calling `users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_post`")  # noqa: E501
        # verify the required parameter 'duedate' is set
        if ('duedate' not in local_var_params or
                local_var_params['duedate'] is None):
            raise ApiValueError("Missing the required parameter `duedate` when calling `users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501
        if 'id_transaction' in local_var_params:
            path_params['id_transaction'] = local_var_params['id_transaction']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'date' in local_var_params:
            form_params.append(('date', local_var_params['date']))  # noqa: E501
        if 'duedate' in local_var_params:
            form_params.append(('duedate', local_var_params['duedate']))  # noqa: E501
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501
        if 'id_category' in local_var_params:
            form_params.append(('id_category', local_var_params['id_category']))  # noqa: E501
        if 'id_ocr' in local_var_params:
            form_params.append(('id_ocr', local_var_params['id_ocr']))  # noqa: E501
        if 'id_type' in local_var_params:
            form_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'income' in local_var_params:
            form_params.append(('income', local_var_params['income']))  # noqa: E501
        if 'name' in local_var_params:
            form_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'readonly' in local_var_params:
            form_params.append(('readonly', local_var_params['readonly']))  # noqa: E501
        if 'total_amount' in local_var_params:
            form_params.append(('total_amount', local_var_params['total_amount']))  # noqa: E501
        if 'untaxed_amount' in local_var_params:
            form_params.append(('untaxed_amount', local_var_params['untaxed_amount']))  # noqa: E501
        if 'vat' in local_var_params:
            form_params.append(('vat', local_var_params['vat']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/accounts/{id_account}/transactions/{id_transaction}/documents', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_put(self, id_user, id_connection, id_account, id_transaction, id_document, **kwargs):  # noqa: E501
        """Attach an existing document to a transaction or a transactions_cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_put(id_user, id_connection, id_account, id_transaction, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param int id_transaction: (required)
        :param int id_document: id of the document you want to attach the file to (required)
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_put_with_http_info(id_user, id_connection, id_account, id_transaction, id_document, **kwargs)  # noqa: E501

    def users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_put_with_http_info(self, id_user, id_connection, id_account, id_transaction, id_document, **kwargs):  # noqa: E501
        """Attach an existing document to a transaction or a transactions_cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_put_with_http_info(id_user, id_connection, id_account, id_transaction, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param int id_transaction: (required)
        :param int id_document: id of the document you want to attach the file to (required)
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Document, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_account', 'id_transaction', 'id_document', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_put`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ApiValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_put`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ApiValueError("Missing the required parameter `id_account` when calling `users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_put`")  # noqa: E501
        # verify the required parameter 'id_transaction' is set
        if ('id_transaction' not in local_var_params or
                local_var_params['id_transaction'] is None):
            raise ApiValueError("Missing the required parameter `id_transaction` when calling `users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_put`")  # noqa: E501
        # verify the required parameter 'id_document' is set
        if ('id_document' not in local_var_params or
                local_var_params['id_document'] is None):
            raise ApiValueError("Missing the required parameter `id_document` when calling `users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501
        if 'id_transaction' in local_var_params:
            path_params['id_transaction'] = local_var_params['id_transaction']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'id_document' in local_var_params:
            form_params.append(('id_document', local_var_params['id_document']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/accounts/{id_account}/transactions/{id_transaction}/documents', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_delete(self, id_user, id_connection, id_account, id_transactions_cluster, **kwargs):  # noqa: E501
        """Delete documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_delete(id_user, id_connection, id_account, id_transactions_cluster, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param int id_transactions_cluster: (required)
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_delete_with_http_info(id_user, id_connection, id_account, id_transactions_cluster, **kwargs)  # noqa: E501

    def users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_delete_with_http_info(self, id_user, id_connection, id_account, id_transactions_cluster, **kwargs):  # noqa: E501
        """Delete documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_delete_with_http_info(id_user, id_connection, id_account, id_transactions_cluster, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param int id_transactions_cluster: (required)
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Document, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_account', 'id_transactions_cluster', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_delete`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ApiValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_delete`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ApiValueError("Missing the required parameter `id_account` when calling `users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_delete`")  # noqa: E501
        # verify the required parameter 'id_transactions_cluster' is set
        if ('id_transactions_cluster' not in local_var_params or
                local_var_params['id_transactions_cluster'] is None):
            raise ApiValueError("Missing the required parameter `id_transactions_cluster` when calling `users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501
        if 'id_transactions_cluster' in local_var_params:
            path_params['id_transactions_cluster'] = local_var_params['id_transactions_cluster']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/accounts/{id_account}/transactionsclusters/{id_transactions_cluster}/documents', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_get(self, id_user, id_connection, id_account, id_transactions_cluster, **kwargs):  # noqa: E501
        """Get documents  # noqa: E501

        Get list of documents<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_get(id_user, id_connection, id_account, id_transactions_cluster, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param int id_transactions_cluster: (required)
        :param int limit: limit number of results
        :param int offset: offset of first result
        :param date min_date: minimal (inclusive) date
        :param date max_date: maximum (inclusive) date
        :param float min_amount: minimal (inclusive) amount
        :param float max_amount: maximumd (inclusive) amount
        :param float min_timestamp: minimal (inclusive) timestamp
        :param float max_timestamp: maximum (inclusive) timestamp
        :param int id_type: filter with a document type
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_get_with_http_info(id_user, id_connection, id_account, id_transactions_cluster, **kwargs)  # noqa: E501

    def users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_get_with_http_info(self, id_user, id_connection, id_account, id_transactions_cluster, **kwargs):  # noqa: E501
        """Get documents  # noqa: E501

        Get list of documents<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_get_with_http_info(id_user, id_connection, id_account, id_transactions_cluster, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param int id_transactions_cluster: (required)
        :param int limit: limit number of results
        :param int offset: offset of first result
        :param date min_date: minimal (inclusive) date
        :param date max_date: maximum (inclusive) date
        :param float min_amount: minimal (inclusive) amount
        :param float max_amount: maximumd (inclusive) amount
        :param float min_timestamp: minimal (inclusive) timestamp
        :param float max_timestamp: maximum (inclusive) timestamp
        :param int id_type: filter with a document type
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(InlineResponse20015, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_account', 'id_transactions_cluster', 'limit', 'offset', 'min_date', 'max_date', 'min_amount', 'max_amount', 'min_timestamp', 'max_timestamp', 'id_type', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_get`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ApiValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_get`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ApiValueError("Missing the required parameter `id_account` when calling `users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_get`")  # noqa: E501
        # verify the required parameter 'id_transactions_cluster' is set
        if ('id_transactions_cluster' not in local_var_params or
                local_var_params['id_transactions_cluster'] is None):
            raise ApiValueError("Missing the required parameter `id_transactions_cluster` when calling `users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501
        if 'id_transactions_cluster' in local_var_params:
            path_params['id_transactions_cluster'] = local_var_params['id_transactions_cluster']  # noqa: E501

        query_params = []
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params:
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'min_date' in local_var_params:
            query_params.append(('min_date', local_var_params['min_date']))  # noqa: E501
        if 'max_date' in local_var_params:
            query_params.append(('max_date', local_var_params['max_date']))  # noqa: E501
        if 'min_amount' in local_var_params:
            query_params.append(('min_amount', local_var_params['min_amount']))  # noqa: E501
        if 'max_amount' in local_var_params:
            query_params.append(('max_amount', local_var_params['max_amount']))  # noqa: E501
        if 'min_timestamp' in local_var_params:
            query_params.append(('min_timestamp', local_var_params['min_timestamp']))  # noqa: E501
        if 'max_timestamp' in local_var_params:
            query_params.append(('max_timestamp', local_var_params['max_timestamp']))  # noqa: E501
        if 'id_type' in local_var_params:
            query_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/accounts/{id_account}/transactionsclusters/{id_transactions_cluster}/documents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20015',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_delete(self, id_user, id_connection, id_account, id_transactions_cluster, id_document, **kwargs):  # noqa: E501
        """Delete a document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_delete(id_user, id_connection, id_account, id_transactions_cluster, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param int id_transactions_cluster: (required)
        :param int id_document: (required)
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_delete_with_http_info(id_user, id_connection, id_account, id_transactions_cluster, id_document, **kwargs)  # noqa: E501

    def users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_delete_with_http_info(self, id_user, id_connection, id_account, id_transactions_cluster, id_document, **kwargs):  # noqa: E501
        """Delete a document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_delete_with_http_info(id_user, id_connection, id_account, id_transactions_cluster, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param int id_transactions_cluster: (required)
        :param int id_document: (required)
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Document, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_account', 'id_transactions_cluster', 'id_document', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_delete`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ApiValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_delete`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ApiValueError("Missing the required parameter `id_account` when calling `users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_delete`")  # noqa: E501
        # verify the required parameter 'id_transactions_cluster' is set
        if ('id_transactions_cluster' not in local_var_params or
                local_var_params['id_transactions_cluster'] is None):
            raise ApiValueError("Missing the required parameter `id_transactions_cluster` when calling `users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_delete`")  # noqa: E501
        # verify the required parameter 'id_document' is set
        if ('id_document' not in local_var_params or
                local_var_params['id_document'] is None):
            raise ApiValueError("Missing the required parameter `id_document` when calling `users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501
        if 'id_transactions_cluster' in local_var_params:
            path_params['id_transactions_cluster'] = local_var_params['id_transactions_cluster']  # noqa: E501
        if 'id_document' in local_var_params:
            path_params['id_document'] = local_var_params['id_document']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/accounts/{id_account}/transactionsclusters/{id_transactions_cluster}/documents/{id_document}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_put(self, id_user, id_connection, id_account, id_transactions_cluster, id_document, **kwargs):  # noqa: E501
        """Edit a document  # noqa: E501

        Edit meta-data of a specific document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_put(id_user, id_connection, id_account, id_transactions_cluster, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param int id_transactions_cluster: (required)
        :param int id_document: (required)
        :param str expand:
        :param date date: Date of document
        :param date duedate: Due date of document
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_type: Type of this document
        :param int income: Is an income or an outcome
        :param str name: Name of the document
        :param int readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_put_with_http_info(id_user, id_connection, id_account, id_transactions_cluster, id_document, **kwargs)  # noqa: E501

    def users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_put_with_http_info(self, id_user, id_connection, id_account, id_transactions_cluster, id_document, **kwargs):  # noqa: E501
        """Edit a document  # noqa: E501

        Edit meta-data of a specific document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_put_with_http_info(id_user, id_connection, id_account, id_transactions_cluster, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param int id_transactions_cluster: (required)
        :param int id_document: (required)
        :param str expand:
        :param date date: Date of document
        :param date duedate: Due date of document
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_type: Type of this document
        :param int income: Is an income or an outcome
        :param str name: Name of the document
        :param int readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Document, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_account', 'id_transactions_cluster', 'id_document', 'expand', 'date', 'duedate', 'file', 'id_category', 'id_type', 'income', 'name', 'readonly', 'total_amount', 'untaxed_amount', 'vat']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_put`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ApiValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_put`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ApiValueError("Missing the required parameter `id_account` when calling `users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_put`")  # noqa: E501
        # verify the required parameter 'id_transactions_cluster' is set
        if ('id_transactions_cluster' not in local_var_params or
                local_var_params['id_transactions_cluster'] is None):
            raise ApiValueError("Missing the required parameter `id_transactions_cluster` when calling `users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_put`")  # noqa: E501
        # verify the required parameter 'id_document' is set
        if ('id_document' not in local_var_params or
                local_var_params['id_document'] is None):
            raise ApiValueError("Missing the required parameter `id_document` when calling `users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501
        if 'id_transactions_cluster' in local_var_params:
            path_params['id_transactions_cluster'] = local_var_params['id_transactions_cluster']  # noqa: E501
        if 'id_document' in local_var_params:
            path_params['id_document'] = local_var_params['id_document']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'date' in local_var_params:
            form_params.append(('date', local_var_params['date']))  # noqa: E501
        if 'duedate' in local_var_params:
            form_params.append(('duedate', local_var_params['duedate']))  # noqa: E501
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501
        if 'id_category' in local_var_params:
            form_params.append(('id_category', local_var_params['id_category']))  # noqa: E501
        if 'id_type' in local_var_params:
            form_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'income' in local_var_params:
            form_params.append(('income', local_var_params['income']))  # noqa: E501
        if 'name' in local_var_params:
            form_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'readonly' in local_var_params:
            form_params.append(('readonly', local_var_params['readonly']))  # noqa: E501
        if 'total_amount' in local_var_params:
            form_params.append(('total_amount', local_var_params['total_amount']))  # noqa: E501
        if 'untaxed_amount' in local_var_params:
            form_params.append(('untaxed_amount', local_var_params['untaxed_amount']))  # noqa: E501
        if 'vat' in local_var_params:
            form_params.append(('vat', local_var_params['vat']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/accounts/{id_account}/transactionsclusters/{id_transactions_cluster}/documents/{id_document}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_post(self, id_user, id_connection, id_account, id_transactions_cluster, date, duedate, **kwargs):  # noqa: E501
        """Add a new document  # noqa: E501

        Add a new document<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_post(id_user, id_connection, id_account, id_transactions_cluster, date, duedate, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param int id_transactions_cluster: (required)
        :param date date: Date of document (required)
        :param date duedate: Due date of document (required)
        :param str expand:
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_ocr: Related OCR process
        :param int id_type: Type of this document
        :param bool income: Is an income or an outcome
        :param str name: Name of the document
        :param bool readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_post_with_http_info(id_user, id_connection, id_account, id_transactions_cluster, date, duedate, **kwargs)  # noqa: E501

    def users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_post_with_http_info(self, id_user, id_connection, id_account, id_transactions_cluster, date, duedate, **kwargs):  # noqa: E501
        """Add a new document  # noqa: E501

        Add a new document<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_post_with_http_info(id_user, id_connection, id_account, id_transactions_cluster, date, duedate, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param int id_transactions_cluster: (required)
        :param date date: Date of document (required)
        :param date duedate: Due date of document (required)
        :param str expand:
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_ocr: Related OCR process
        :param int id_type: Type of this document
        :param bool income: Is an income or an outcome
        :param str name: Name of the document
        :param bool readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Document, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_account', 'id_transactions_cluster', 'date', 'duedate', 'expand', 'file', 'id_category', 'id_ocr', 'id_type', 'income', 'name', 'readonly', 'total_amount', 'untaxed_amount', 'vat']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_post`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ApiValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_post`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ApiValueError("Missing the required parameter `id_account` when calling `users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_post`")  # noqa: E501
        # verify the required parameter 'id_transactions_cluster' is set
        if ('id_transactions_cluster' not in local_var_params or
                local_var_params['id_transactions_cluster'] is None):
            raise ApiValueError("Missing the required parameter `id_transactions_cluster` when calling `users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_post`")  # noqa: E501
        # verify the required parameter 'date' is set
        if ('date' not in local_var_params or
                local_var_params['date'] is None):
            raise ApiValueError("Missing the required parameter `date` when calling `users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_post`")  # noqa: E501
        # verify the required parameter 'duedate' is set
        if ('duedate' not in local_var_params or
                local_var_params['duedate'] is None):
            raise ApiValueError("Missing the required parameter `duedate` when calling `users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501
        if 'id_transactions_cluster' in local_var_params:
            path_params['id_transactions_cluster'] = local_var_params['id_transactions_cluster']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'date' in local_var_params:
            form_params.append(('date', local_var_params['date']))  # noqa: E501
        if 'duedate' in local_var_params:
            form_params.append(('duedate', local_var_params['duedate']))  # noqa: E501
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501
        if 'id_category' in local_var_params:
            form_params.append(('id_category', local_var_params['id_category']))  # noqa: E501
        if 'id_ocr' in local_var_params:
            form_params.append(('id_ocr', local_var_params['id_ocr']))  # noqa: E501
        if 'id_type' in local_var_params:
            form_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'income' in local_var_params:
            form_params.append(('income', local_var_params['income']))  # noqa: E501
        if 'name' in local_var_params:
            form_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'readonly' in local_var_params:
            form_params.append(('readonly', local_var_params['readonly']))  # noqa: E501
        if 'total_amount' in local_var_params:
            form_params.append(('total_amount', local_var_params['total_amount']))  # noqa: E501
        if 'untaxed_amount' in local_var_params:
            form_params.append(('untaxed_amount', local_var_params['untaxed_amount']))  # noqa: E501
        if 'vat' in local_var_params:
            form_params.append(('vat', local_var_params['vat']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/accounts/{id_account}/transactionsclusters/{id_transactions_cluster}/documents', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_put(self, id_user, id_connection, id_account, id_transactions_cluster, id_document, **kwargs):  # noqa: E501
        """Attach an existing document to a transaction or a transactions_cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_put(id_user, id_connection, id_account, id_transactions_cluster, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param int id_transactions_cluster: (required)
        :param int id_document: id of the document you want to attach the file to (required)
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_put_with_http_info(id_user, id_connection, id_account, id_transactions_cluster, id_document, **kwargs)  # noqa: E501

    def users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_put_with_http_info(self, id_user, id_connection, id_account, id_transactions_cluster, id_document, **kwargs):  # noqa: E501
        """Attach an existing document to a transaction or a transactions_cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_put_with_http_info(id_user, id_connection, id_account, id_transactions_cluster, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param int id_transactions_cluster: (required)
        :param int id_document: id of the document you want to attach the file to (required)
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Document, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_account', 'id_transactions_cluster', 'id_document', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_put`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ApiValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_put`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ApiValueError("Missing the required parameter `id_account` when calling `users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_put`")  # noqa: E501
        # verify the required parameter 'id_transactions_cluster' is set
        if ('id_transactions_cluster' not in local_var_params or
                local_var_params['id_transactions_cluster'] is None):
            raise ApiValueError("Missing the required parameter `id_transactions_cluster` when calling `users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_put`")  # noqa: E501
        # verify the required parameter 'id_document' is set
        if ('id_document' not in local_var_params or
                local_var_params['id_document'] is None):
            raise ApiValueError("Missing the required parameter `id_document` when calling `users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501
        if 'id_transactions_cluster' in local_var_params:
            path_params['id_transactions_cluster'] = local_var_params['id_transactions_cluster']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'id_document' in local_var_params:
            form_params.append(('id_document', local_var_params['id_document']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/accounts/{id_account}/transactionsclusters/{id_transactions_cluster}/documents', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_delete(self, id_user, id_connection, **kwargs):  # noqa: E501
        """Delete a connection.  # noqa: E501

        This endpoint deletes a connection and all related accounts and transactions.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_delete(id_user, id_connection, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Connection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_connections_id_connection_delete_with_http_info(id_user, id_connection, **kwargs)  # noqa: E501

    def users_id_user_connections_id_connection_delete_with_http_info(self, id_user, id_connection, **kwargs):  # noqa: E501
        """Delete a connection.  # noqa: E501

        This endpoint deletes a connection and all related accounts and transactions.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_delete_with_http_info(id_user, id_connection, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Connection, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_delete`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ApiValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Connection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_documents_delete(self, id_user, id_connection, **kwargs):  # noqa: E501
        """Delete documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_documents_delete(id_user, id_connection, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_connections_id_connection_documents_delete_with_http_info(id_user, id_connection, **kwargs)  # noqa: E501

    def users_id_user_connections_id_connection_documents_delete_with_http_info(self, id_user, id_connection, **kwargs):  # noqa: E501
        """Delete documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_documents_delete_with_http_info(id_user, id_connection, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Document, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_documents_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_documents_delete`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ApiValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_documents_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/documents', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_documents_get(self, id_user, id_connection, **kwargs):  # noqa: E501
        """Get documents  # noqa: E501

        Get list of documents<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_documents_get(id_user, id_connection, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int limit: limit number of results
        :param int offset: offset of first result
        :param date min_date: minimal (inclusive) date
        :param date max_date: maximum (inclusive) date
        :param float min_amount: minimal (inclusive) amount
        :param float max_amount: maximumd (inclusive) amount
        :param float min_timestamp: minimal (inclusive) timestamp
        :param float max_timestamp: maximum (inclusive) timestamp
        :param int id_type: filter with a document type
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_connections_id_connection_documents_get_with_http_info(id_user, id_connection, **kwargs)  # noqa: E501

    def users_id_user_connections_id_connection_documents_get_with_http_info(self, id_user, id_connection, **kwargs):  # noqa: E501
        """Get documents  # noqa: E501

        Get list of documents<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_documents_get_with_http_info(id_user, id_connection, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int limit: limit number of results
        :param int offset: offset of first result
        :param date min_date: minimal (inclusive) date
        :param date max_date: maximum (inclusive) date
        :param float min_amount: minimal (inclusive) amount
        :param float max_amount: maximumd (inclusive) amount
        :param float min_timestamp: minimal (inclusive) timestamp
        :param float max_timestamp: maximum (inclusive) timestamp
        :param int id_type: filter with a document type
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(InlineResponse20015, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'limit', 'offset', 'min_date', 'max_date', 'min_amount', 'max_amount', 'min_timestamp', 'max_timestamp', 'id_type', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_documents_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_documents_get`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ApiValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_documents_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501

        query_params = []
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params:
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'min_date' in local_var_params:
            query_params.append(('min_date', local_var_params['min_date']))  # noqa: E501
        if 'max_date' in local_var_params:
            query_params.append(('max_date', local_var_params['max_date']))  # noqa: E501
        if 'min_amount' in local_var_params:
            query_params.append(('min_amount', local_var_params['min_amount']))  # noqa: E501
        if 'max_amount' in local_var_params:
            query_params.append(('max_amount', local_var_params['max_amount']))  # noqa: E501
        if 'min_timestamp' in local_var_params:
            query_params.append(('min_timestamp', local_var_params['min_timestamp']))  # noqa: E501
        if 'max_timestamp' in local_var_params:
            query_params.append(('max_timestamp', local_var_params['max_timestamp']))  # noqa: E501
        if 'id_type' in local_var_params:
            query_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/documents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20015',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_documents_id_document_delete(self, id_user, id_connection, id_document, **kwargs):  # noqa: E501
        """Delete a document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_documents_id_document_delete(id_user, id_connection, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_document: (required)
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_connections_id_connection_documents_id_document_delete_with_http_info(id_user, id_connection, id_document, **kwargs)  # noqa: E501

    def users_id_user_connections_id_connection_documents_id_document_delete_with_http_info(self, id_user, id_connection, id_document, **kwargs):  # noqa: E501
        """Delete a document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_documents_id_document_delete_with_http_info(id_user, id_connection, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_document: (required)
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Document, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_document', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_documents_id_document_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_documents_id_document_delete`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ApiValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_documents_id_document_delete`")  # noqa: E501
        # verify the required parameter 'id_document' is set
        if ('id_document' not in local_var_params or
                local_var_params['id_document'] is None):
            raise ApiValueError("Missing the required parameter `id_document` when calling `users_id_user_connections_id_connection_documents_id_document_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_document' in local_var_params:
            path_params['id_document'] = local_var_params['id_document']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/documents/{id_document}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_documents_id_document_put(self, id_user, id_connection, id_document, **kwargs):  # noqa: E501
        """Edit a document  # noqa: E501

        Edit meta-data of a specific document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_documents_id_document_put(id_user, id_connection, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_document: (required)
        :param str expand:
        :param date date: Date of document
        :param date duedate: Due date of document
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_type: Type of this document
        :param int income: Is an income or an outcome
        :param str name: Name of the document
        :param int readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_connections_id_connection_documents_id_document_put_with_http_info(id_user, id_connection, id_document, **kwargs)  # noqa: E501

    def users_id_user_connections_id_connection_documents_id_document_put_with_http_info(self, id_user, id_connection, id_document, **kwargs):  # noqa: E501
        """Edit a document  # noqa: E501

        Edit meta-data of a specific document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_documents_id_document_put_with_http_info(id_user, id_connection, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_document: (required)
        :param str expand:
        :param date date: Date of document
        :param date duedate: Due date of document
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_type: Type of this document
        :param int income: Is an income or an outcome
        :param str name: Name of the document
        :param int readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Document, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_document', 'expand', 'date', 'duedate', 'file', 'id_category', 'id_type', 'income', 'name', 'readonly', 'total_amount', 'untaxed_amount', 'vat']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_documents_id_document_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_documents_id_document_put`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ApiValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_documents_id_document_put`")  # noqa: E501
        # verify the required parameter 'id_document' is set
        if ('id_document' not in local_var_params or
                local_var_params['id_document'] is None):
            raise ApiValueError("Missing the required parameter `id_document` when calling `users_id_user_connections_id_connection_documents_id_document_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_document' in local_var_params:
            path_params['id_document'] = local_var_params['id_document']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'date' in local_var_params:
            form_params.append(('date', local_var_params['date']))  # noqa: E501
        if 'duedate' in local_var_params:
            form_params.append(('duedate', local_var_params['duedate']))  # noqa: E501
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501
        if 'id_category' in local_var_params:
            form_params.append(('id_category', local_var_params['id_category']))  # noqa: E501
        if 'id_type' in local_var_params:
            form_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'income' in local_var_params:
            form_params.append(('income', local_var_params['income']))  # noqa: E501
        if 'name' in local_var_params:
            form_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'readonly' in local_var_params:
            form_params.append(('readonly', local_var_params['readonly']))  # noqa: E501
        if 'total_amount' in local_var_params:
            form_params.append(('total_amount', local_var_params['total_amount']))  # noqa: E501
        if 'untaxed_amount' in local_var_params:
            form_params.append(('untaxed_amount', local_var_params['untaxed_amount']))  # noqa: E501
        if 'vat' in local_var_params:
            form_params.append(('vat', local_var_params['vat']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/documents/{id_document}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_documents_post(self, id_user, id_connection, date, duedate, **kwargs):  # noqa: E501
        """Add a new document  # noqa: E501

        Add a new document<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_documents_post(id_user, id_connection, date, duedate, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param date date: Date of document (required)
        :param date duedate: Due date of document (required)
        :param str expand:
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_ocr: Related OCR process
        :param int id_type: Type of this document
        :param bool income: Is an income or an outcome
        :param str name: Name of the document
        :param bool readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_connections_id_connection_documents_post_with_http_info(id_user, id_connection, date, duedate, **kwargs)  # noqa: E501

    def users_id_user_connections_id_connection_documents_post_with_http_info(self, id_user, id_connection, date, duedate, **kwargs):  # noqa: E501
        """Add a new document  # noqa: E501

        Add a new document<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_documents_post_with_http_info(id_user, id_connection, date, duedate, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param date date: Date of document (required)
        :param date duedate: Due date of document (required)
        :param str expand:
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_ocr: Related OCR process
        :param int id_type: Type of this document
        :param bool income: Is an income or an outcome
        :param str name: Name of the document
        :param bool readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Document, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'date', 'duedate', 'expand', 'file', 'id_category', 'id_ocr', 'id_type', 'income', 'name', 'readonly', 'total_amount', 'untaxed_amount', 'vat']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_documents_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_documents_post`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ApiValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_documents_post`")  # noqa: E501
        # verify the required parameter 'date' is set
        if ('date' not in local_var_params or
                local_var_params['date'] is None):
            raise ApiValueError("Missing the required parameter `date` when calling `users_id_user_connections_id_connection_documents_post`")  # noqa: E501
        # verify the required parameter 'duedate' is set
        if ('duedate' not in local_var_params or
                local_var_params['duedate'] is None):
            raise ApiValueError("Missing the required parameter `duedate` when calling `users_id_user_connections_id_connection_documents_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'date' in local_var_params:
            form_params.append(('date', local_var_params['date']))  # noqa: E501
        if 'duedate' in local_var_params:
            form_params.append(('duedate', local_var_params['duedate']))  # noqa: E501
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501
        if 'id_category' in local_var_params:
            form_params.append(('id_category', local_var_params['id_category']))  # noqa: E501
        if 'id_ocr' in local_var_params:
            form_params.append(('id_ocr', local_var_params['id_ocr']))  # noqa: E501
        if 'id_type' in local_var_params:
            form_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'income' in local_var_params:
            form_params.append(('income', local_var_params['income']))  # noqa: E501
        if 'name' in local_var_params:
            form_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'readonly' in local_var_params:
            form_params.append(('readonly', local_var_params['readonly']))  # noqa: E501
        if 'total_amount' in local_var_params:
            form_params.append(('total_amount', local_var_params['total_amount']))  # noqa: E501
        if 'untaxed_amount' in local_var_params:
            form_params.append(('untaxed_amount', local_var_params['untaxed_amount']))  # noqa: E501
        if 'vat' in local_var_params:
            form_params.append(('vat', local_var_params['vat']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/documents', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_documents_put(self, id_user, id_connection, id_document, **kwargs):  # noqa: E501
        """Attach an existing document to a transaction or a transactions_cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_documents_put(id_user, id_connection, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_document: id of the document you want to attach the file to (required)
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_connections_id_connection_documents_put_with_http_info(id_user, id_connection, id_document, **kwargs)  # noqa: E501

    def users_id_user_connections_id_connection_documents_put_with_http_info(self, id_user, id_connection, id_document, **kwargs):  # noqa: E501
        """Attach an existing document to a transaction or a transactions_cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_documents_put_with_http_info(id_user, id_connection, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_document: id of the document you want to attach the file to (required)
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Document, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_document', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_documents_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_documents_put`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ApiValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_documents_put`")  # noqa: E501
        # verify the required parameter 'id_document' is set
        if ('id_document' not in local_var_params or
                local_var_params['id_document'] is None):
            raise ApiValueError("Missing the required parameter `id_document` when calling `users_id_user_connections_id_connection_documents_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'id_document' in local_var_params:
            form_params.append(('id_document', local_var_params['id_document']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/documents', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_informations_get(self, id_user, id_connection, **kwargs):  # noqa: E501
        """Get connection additionnal informations  # noqa: E501

        <br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_informations_get(id_user, id_connection, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_connections_id_connection_informations_get_with_http_info(id_user, id_connection, **kwargs)  # noqa: E501

    def users_id_user_connections_id_connection_informations_get_with_http_info(self, id_user, id_connection, **kwargs):  # noqa: E501
        """Get connection additionnal informations  # noqa: E501

        <br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_informations_get_with_http_info(id_user, id_connection, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(InlineResponse2009, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_informations_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_informations_get`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ApiValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_informations_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/informations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2009',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_logs_get(self, id_user, id_connection, **kwargs):  # noqa: E501
        """Get connection logs  # noqa: E501

        Get logs about connections.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_logs_get(id_user, id_connection, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int limit: limit number of results
        :param int offset: offset of first result
        :param date min_date: minimal date
        :param date max_date: maximum date
        :param int state: state of user
        :param str period: period to group logs
        :param int id_user2: ID of a user
        :param int id_connection2: ID of a connection
        :param int id_connector: ID of a connector
        :param bool charged: consider only logs for charged connectors
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_connections_id_connection_logs_get_with_http_info(id_user, id_connection, **kwargs)  # noqa: E501

    def users_id_user_connections_id_connection_logs_get_with_http_info(self, id_user, id_connection, **kwargs):  # noqa: E501
        """Get connection logs  # noqa: E501

        Get logs about connections.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_logs_get_with_http_info(id_user, id_connection, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int limit: limit number of results
        :param int offset: offset of first result
        :param date min_date: minimal date
        :param date max_date: maximum date
        :param int state: state of user
        :param str period: period to group logs
        :param int id_user2: ID of a user
        :param int id_connection2: ID of a connection
        :param int id_connector: ID of a connector
        :param bool charged: consider only logs for charged connectors
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(InlineResponse2008, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'limit', 'offset', 'min_date', 'max_date', 'state', 'period', 'id_user2', 'id_connection2', 'id_connector', 'charged', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_logs_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_logs_get`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ApiValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_logs_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501

        query_params = []
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params:
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'min_date' in local_var_params:
            query_params.append(('min_date', local_var_params['min_date']))  # noqa: E501
        if 'max_date' in local_var_params:
            query_params.append(('max_date', local_var_params['max_date']))  # noqa: E501
        if 'state' in local_var_params:
            query_params.append(('state', local_var_params['state']))  # noqa: E501
        if 'period' in local_var_params:
            query_params.append(('period', local_var_params['period']))  # noqa: E501
        if 'id_user2' in local_var_params:
            query_params.append(('id_user', local_var_params['id_user2']))  # noqa: E501
        if 'id_connection2' in local_var_params:
            query_params.append(('id_connection', local_var_params['id_connection2']))  # noqa: E501
        if 'id_connector' in local_var_params:
            query_params.append(('id_connector', local_var_params['id_connector']))  # noqa: E501
        if 'charged' in local_var_params:
            query_params.append(('charged', local_var_params['charged']))  # noqa: E501
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/logs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2008',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_post(self, id_user, id_connection, **kwargs):  # noqa: E501
        """Update a connection.  # noqa: E501

        Give new parameters to change on the configuration of this connection (for example \"password\").<br><br>It tests connection to website, and if it fails, a 400 response is given with the error code \"wrongpass\" or \"websiteUnavailable\".<br><br>You can also supply meta-parameters on connection, like 'active' or 'expire'.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_post(id_user, id_connection, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param str expand:
        :param bool active: Set if the connection synchronisation is active
        :param bool decoupled: Try to update a connection with the decoupled error
        :param datetime expire: Set expiration of the connection to this date
        :param str login: Set login to this new login
        :param str password: Set password to this new password
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Connection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_connections_id_connection_post_with_http_info(id_user, id_connection, **kwargs)  # noqa: E501

    def users_id_user_connections_id_connection_post_with_http_info(self, id_user, id_connection, **kwargs):  # noqa: E501
        """Update a connection.  # noqa: E501

        Give new parameters to change on the configuration of this connection (for example \"password\").<br><br>It tests connection to website, and if it fails, a 400 response is given with the error code \"wrongpass\" or \"websiteUnavailable\".<br><br>You can also supply meta-parameters on connection, like 'active' or 'expire'.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_post_with_http_info(id_user, id_connection, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param str expand:
        :param bool active: Set if the connection synchronisation is active
        :param bool decoupled: Try to update a connection with the decoupled error
        :param datetime expire: Set expiration of the connection to this date
        :param str login: Set login to this new login
        :param str password: Set password to this new password
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Connection, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'expand', 'active', 'decoupled', 'expire', 'login', 'password']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_post`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ApiValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'active' in local_var_params:
            form_params.append(('active', local_var_params['active']))  # noqa: E501
        if 'decoupled' in local_var_params:
            form_params.append(('decoupled', local_var_params['decoupled']))  # noqa: E501
        if 'expire' in local_var_params:
            form_params.append(('expire', local_var_params['expire']))  # noqa: E501
        if 'login' in local_var_params:
            form_params.append(('login', local_var_params['login']))  # noqa: E501
        if 'password' in local_var_params:
            form_params.append(('password', local_var_params['password']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Connection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_put(self, id_user, id_connection, **kwargs):  # noqa: E501
        """Force synchronisation of a connection.  # noqa: E501

        We suggest to pass parameter expand=accounts[transactions] to get all *new* and *updated* transactions.<br><br>Query params: - expand (string): fields to expand - last_update (dateTime): if supplied, get transactions inserted since this date<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_put(id_user, id_connection, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Connection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_connections_id_connection_put_with_http_info(id_user, id_connection, **kwargs)  # noqa: E501

    def users_id_user_connections_id_connection_put_with_http_info(self, id_user, id_connection, **kwargs):  # noqa: E501
        """Force synchronisation of a connection.  # noqa: E501

        We suggest to pass parameter expand=accounts[transactions] to get all *new* and *updated* transactions.<br><br>Query params: - expand (string): fields to expand - last_update (dateTime): if supplied, get transactions inserted since this date<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_put_with_http_info(id_user, id_connection, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Connection, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_put`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ApiValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Connection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_subscriptions_id_subscription_delete(self, id_user, id_connection, id_subscription, **kwargs):  # noqa: E501
        """Delete a subscription.  # noqa: E501

        It deletes a specific subscription.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_subscriptions_id_subscription_delete(id_user, id_connection, id_subscription, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_subscription: (required)
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Subscription
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_connections_id_connection_subscriptions_id_subscription_delete_with_http_info(id_user, id_connection, id_subscription, **kwargs)  # noqa: E501

    def users_id_user_connections_id_connection_subscriptions_id_subscription_delete_with_http_info(self, id_user, id_connection, id_subscription, **kwargs):  # noqa: E501
        """Delete a subscription.  # noqa: E501

        It deletes a specific subscription.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_subscriptions_id_subscription_delete_with_http_info(id_user, id_connection, id_subscription, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_subscription: (required)
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Subscription, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_subscription', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_subscriptions_id_subscription_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_subscriptions_id_subscription_delete`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ApiValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_subscriptions_id_subscription_delete`")  # noqa: E501
        # verify the required parameter 'id_subscription' is set
        if ('id_subscription' not in local_var_params or
                local_var_params['id_subscription'] is None):
            raise ApiValueError("Missing the required parameter `id_subscription` when calling `users_id_user_connections_id_connection_subscriptions_id_subscription_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_subscription' in local_var_params:
            path_params['id_subscription'] = local_var_params['id_subscription']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/subscriptions/{id_subscription}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Subscription',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_subscriptions_id_subscription_documents_delete(self, id_user, id_connection, id_subscription, **kwargs):  # noqa: E501
        """Delete documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_subscriptions_id_subscription_documents_delete(id_user, id_connection, id_subscription, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_subscription: (required)
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_connections_id_connection_subscriptions_id_subscription_documents_delete_with_http_info(id_user, id_connection, id_subscription, **kwargs)  # noqa: E501

    def users_id_user_connections_id_connection_subscriptions_id_subscription_documents_delete_with_http_info(self, id_user, id_connection, id_subscription, **kwargs):  # noqa: E501
        """Delete documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_subscriptions_id_subscription_documents_delete_with_http_info(id_user, id_connection, id_subscription, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_subscription: (required)
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Document, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_subscription', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_subscriptions_id_subscription_documents_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_subscriptions_id_subscription_documents_delete`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ApiValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_subscriptions_id_subscription_documents_delete`")  # noqa: E501
        # verify the required parameter 'id_subscription' is set
        if ('id_subscription' not in local_var_params or
                local_var_params['id_subscription'] is None):
            raise ApiValueError("Missing the required parameter `id_subscription` when calling `users_id_user_connections_id_connection_subscriptions_id_subscription_documents_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_subscription' in local_var_params:
            path_params['id_subscription'] = local_var_params['id_subscription']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/subscriptions/{id_subscription}/documents', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_subscriptions_id_subscription_documents_get(self, id_user, id_connection, id_subscription, **kwargs):  # noqa: E501
        """Get documents  # noqa: E501

        Get list of documents<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_subscriptions_id_subscription_documents_get(id_user, id_connection, id_subscription, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_subscription: (required)
        :param int limit: limit number of results
        :param int offset: offset of first result
        :param date min_date: minimal (inclusive) date
        :param date max_date: maximum (inclusive) date
        :param float min_amount: minimal (inclusive) amount
        :param float max_amount: maximumd (inclusive) amount
        :param float min_timestamp: minimal (inclusive) timestamp
        :param float max_timestamp: maximum (inclusive) timestamp
        :param int id_type: filter with a document type
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_connections_id_connection_subscriptions_id_subscription_documents_get_with_http_info(id_user, id_connection, id_subscription, **kwargs)  # noqa: E501

    def users_id_user_connections_id_connection_subscriptions_id_subscription_documents_get_with_http_info(self, id_user, id_connection, id_subscription, **kwargs):  # noqa: E501
        """Get documents  # noqa: E501

        Get list of documents<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_subscriptions_id_subscription_documents_get_with_http_info(id_user, id_connection, id_subscription, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_subscription: (required)
        :param int limit: limit number of results
        :param int offset: offset of first result
        :param date min_date: minimal (inclusive) date
        :param date max_date: maximum (inclusive) date
        :param float min_amount: minimal (inclusive) amount
        :param float max_amount: maximumd (inclusive) amount
        :param float min_timestamp: minimal (inclusive) timestamp
        :param float max_timestamp: maximum (inclusive) timestamp
        :param int id_type: filter with a document type
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(InlineResponse20015, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_subscription', 'limit', 'offset', 'min_date', 'max_date', 'min_amount', 'max_amount', 'min_timestamp', 'max_timestamp', 'id_type', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_subscriptions_id_subscription_documents_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_subscriptions_id_subscription_documents_get`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ApiValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_subscriptions_id_subscription_documents_get`")  # noqa: E501
        # verify the required parameter 'id_subscription' is set
        if ('id_subscription' not in local_var_params or
                local_var_params['id_subscription'] is None):
            raise ApiValueError("Missing the required parameter `id_subscription` when calling `users_id_user_connections_id_connection_subscriptions_id_subscription_documents_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_subscription' in local_var_params:
            path_params['id_subscription'] = local_var_params['id_subscription']  # noqa: E501

        query_params = []
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params:
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'min_date' in local_var_params:
            query_params.append(('min_date', local_var_params['min_date']))  # noqa: E501
        if 'max_date' in local_var_params:
            query_params.append(('max_date', local_var_params['max_date']))  # noqa: E501
        if 'min_amount' in local_var_params:
            query_params.append(('min_amount', local_var_params['min_amount']))  # noqa: E501
        if 'max_amount' in local_var_params:
            query_params.append(('max_amount', local_var_params['max_amount']))  # noqa: E501
        if 'min_timestamp' in local_var_params:
            query_params.append(('min_timestamp', local_var_params['min_timestamp']))  # noqa: E501
        if 'max_timestamp' in local_var_params:
            query_params.append(('max_timestamp', local_var_params['max_timestamp']))  # noqa: E501
        if 'id_type' in local_var_params:
            query_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/subscriptions/{id_subscription}/documents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20015',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_subscriptions_id_subscription_documents_id_document_delete(self, id_user, id_connection, id_subscription, id_document, **kwargs):  # noqa: E501
        """Delete a document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_subscriptions_id_subscription_documents_id_document_delete(id_user, id_connection, id_subscription, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_subscription: (required)
        :param int id_document: (required)
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_connections_id_connection_subscriptions_id_subscription_documents_id_document_delete_with_http_info(id_user, id_connection, id_subscription, id_document, **kwargs)  # noqa: E501

    def users_id_user_connections_id_connection_subscriptions_id_subscription_documents_id_document_delete_with_http_info(self, id_user, id_connection, id_subscription, id_document, **kwargs):  # noqa: E501
        """Delete a document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_subscriptions_id_subscription_documents_id_document_delete_with_http_info(id_user, id_connection, id_subscription, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_subscription: (required)
        :param int id_document: (required)
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Document, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_subscription', 'id_document', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_subscriptions_id_subscription_documents_id_document_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_subscriptions_id_subscription_documents_id_document_delete`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ApiValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_subscriptions_id_subscription_documents_id_document_delete`")  # noqa: E501
        # verify the required parameter 'id_subscription' is set
        if ('id_subscription' not in local_var_params or
                local_var_params['id_subscription'] is None):
            raise ApiValueError("Missing the required parameter `id_subscription` when calling `users_id_user_connections_id_connection_subscriptions_id_subscription_documents_id_document_delete`")  # noqa: E501
        # verify the required parameter 'id_document' is set
        if ('id_document' not in local_var_params or
                local_var_params['id_document'] is None):
            raise ApiValueError("Missing the required parameter `id_document` when calling `users_id_user_connections_id_connection_subscriptions_id_subscription_documents_id_document_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_subscription' in local_var_params:
            path_params['id_subscription'] = local_var_params['id_subscription']  # noqa: E501
        if 'id_document' in local_var_params:
            path_params['id_document'] = local_var_params['id_document']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/subscriptions/{id_subscription}/documents/{id_document}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_subscriptions_id_subscription_documents_id_document_put(self, id_user, id_connection, id_subscription, id_document, **kwargs):  # noqa: E501
        """Edit a document  # noqa: E501

        Edit meta-data of a specific document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_subscriptions_id_subscription_documents_id_document_put(id_user, id_connection, id_subscription, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_subscription: (required)
        :param int id_document: (required)
        :param str expand:
        :param date date: Date of document
        :param date duedate: Due date of document
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_type: Type of this document
        :param int income: Is an income or an outcome
        :param str name: Name of the document
        :param int readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_connections_id_connection_subscriptions_id_subscription_documents_id_document_put_with_http_info(id_user, id_connection, id_subscription, id_document, **kwargs)  # noqa: E501

    def users_id_user_connections_id_connection_subscriptions_id_subscription_documents_id_document_put_with_http_info(self, id_user, id_connection, id_subscription, id_document, **kwargs):  # noqa: E501
        """Edit a document  # noqa: E501

        Edit meta-data of a specific document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_subscriptions_id_subscription_documents_id_document_put_with_http_info(id_user, id_connection, id_subscription, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_subscription: (required)
        :param int id_document: (required)
        :param str expand:
        :param date date: Date of document
        :param date duedate: Due date of document
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_type: Type of this document
        :param int income: Is an income or an outcome
        :param str name: Name of the document
        :param int readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Document, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_subscription', 'id_document', 'expand', 'date', 'duedate', 'file', 'id_category', 'id_type', 'income', 'name', 'readonly', 'total_amount', 'untaxed_amount', 'vat']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_subscriptions_id_subscription_documents_id_document_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_subscriptions_id_subscription_documents_id_document_put`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ApiValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_subscriptions_id_subscription_documents_id_document_put`")  # noqa: E501
        # verify the required parameter 'id_subscription' is set
        if ('id_subscription' not in local_var_params or
                local_var_params['id_subscription'] is None):
            raise ApiValueError("Missing the required parameter `id_subscription` when calling `users_id_user_connections_id_connection_subscriptions_id_subscription_documents_id_document_put`")  # noqa: E501
        # verify the required parameter 'id_document' is set
        if ('id_document' not in local_var_params or
                local_var_params['id_document'] is None):
            raise ApiValueError("Missing the required parameter `id_document` when calling `users_id_user_connections_id_connection_subscriptions_id_subscription_documents_id_document_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_subscription' in local_var_params:
            path_params['id_subscription'] = local_var_params['id_subscription']  # noqa: E501
        if 'id_document' in local_var_params:
            path_params['id_document'] = local_var_params['id_document']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'date' in local_var_params:
            form_params.append(('date', local_var_params['date']))  # noqa: E501
        if 'duedate' in local_var_params:
            form_params.append(('duedate', local_var_params['duedate']))  # noqa: E501
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501
        if 'id_category' in local_var_params:
            form_params.append(('id_category', local_var_params['id_category']))  # noqa: E501
        if 'id_type' in local_var_params:
            form_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'income' in local_var_params:
            form_params.append(('income', local_var_params['income']))  # noqa: E501
        if 'name' in local_var_params:
            form_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'readonly' in local_var_params:
            form_params.append(('readonly', local_var_params['readonly']))  # noqa: E501
        if 'total_amount' in local_var_params:
            form_params.append(('total_amount', local_var_params['total_amount']))  # noqa: E501
        if 'untaxed_amount' in local_var_params:
            form_params.append(('untaxed_amount', local_var_params['untaxed_amount']))  # noqa: E501
        if 'vat' in local_var_params:
            form_params.append(('vat', local_var_params['vat']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/subscriptions/{id_subscription}/documents/{id_document}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_subscriptions_id_subscription_documents_post(self, id_user, id_connection, id_subscription, date, duedate, **kwargs):  # noqa: E501
        """Add a new document  # noqa: E501

        Add a new document<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_subscriptions_id_subscription_documents_post(id_user, id_connection, id_subscription, date, duedate, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_subscription: (required)
        :param date date: Date of document (required)
        :param date duedate: Due date of document (required)
        :param str expand:
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_ocr: Related OCR process
        :param int id_type: Type of this document
        :param bool income: Is an income or an outcome
        :param str name: Name of the document
        :param bool readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_connections_id_connection_subscriptions_id_subscription_documents_post_with_http_info(id_user, id_connection, id_subscription, date, duedate, **kwargs)  # noqa: E501

    def users_id_user_connections_id_connection_subscriptions_id_subscription_documents_post_with_http_info(self, id_user, id_connection, id_subscription, date, duedate, **kwargs):  # noqa: E501
        """Add a new document  # noqa: E501

        Add a new document<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_subscriptions_id_subscription_documents_post_with_http_info(id_user, id_connection, id_subscription, date, duedate, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_subscription: (required)
        :param date date: Date of document (required)
        :param date duedate: Due date of document (required)
        :param str expand:
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_ocr: Related OCR process
        :param int id_type: Type of this document
        :param bool income: Is an income or an outcome
        :param str name: Name of the document
        :param bool readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Document, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_subscription', 'date', 'duedate', 'expand', 'file', 'id_category', 'id_ocr', 'id_type', 'income', 'name', 'readonly', 'total_amount', 'untaxed_amount', 'vat']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_subscriptions_id_subscription_documents_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_subscriptions_id_subscription_documents_post`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ApiValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_subscriptions_id_subscription_documents_post`")  # noqa: E501
        # verify the required parameter 'id_subscription' is set
        if ('id_subscription' not in local_var_params or
                local_var_params['id_subscription'] is None):
            raise ApiValueError("Missing the required parameter `id_subscription` when calling `users_id_user_connections_id_connection_subscriptions_id_subscription_documents_post`")  # noqa: E501
        # verify the required parameter 'date' is set
        if ('date' not in local_var_params or
                local_var_params['date'] is None):
            raise ApiValueError("Missing the required parameter `date` when calling `users_id_user_connections_id_connection_subscriptions_id_subscription_documents_post`")  # noqa: E501
        # verify the required parameter 'duedate' is set
        if ('duedate' not in local_var_params or
                local_var_params['duedate'] is None):
            raise ApiValueError("Missing the required parameter `duedate` when calling `users_id_user_connections_id_connection_subscriptions_id_subscription_documents_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_subscription' in local_var_params:
            path_params['id_subscription'] = local_var_params['id_subscription']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'date' in local_var_params:
            form_params.append(('date', local_var_params['date']))  # noqa: E501
        if 'duedate' in local_var_params:
            form_params.append(('duedate', local_var_params['duedate']))  # noqa: E501
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501
        if 'id_category' in local_var_params:
            form_params.append(('id_category', local_var_params['id_category']))  # noqa: E501
        if 'id_ocr' in local_var_params:
            form_params.append(('id_ocr', local_var_params['id_ocr']))  # noqa: E501
        if 'id_type' in local_var_params:
            form_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'income' in local_var_params:
            form_params.append(('income', local_var_params['income']))  # noqa: E501
        if 'name' in local_var_params:
            form_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'readonly' in local_var_params:
            form_params.append(('readonly', local_var_params['readonly']))  # noqa: E501
        if 'total_amount' in local_var_params:
            form_params.append(('total_amount', local_var_params['total_amount']))  # noqa: E501
        if 'untaxed_amount' in local_var_params:
            form_params.append(('untaxed_amount', local_var_params['untaxed_amount']))  # noqa: E501
        if 'vat' in local_var_params:
            form_params.append(('vat', local_var_params['vat']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/subscriptions/{id_subscription}/documents', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_subscriptions_id_subscription_documents_put(self, id_user, id_connection, id_subscription, id_document, **kwargs):  # noqa: E501
        """Attach an existing document to a transaction or a transactions_cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_subscriptions_id_subscription_documents_put(id_user, id_connection, id_subscription, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_subscription: (required)
        :param int id_document: id of the document you want to attach the file to (required)
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_connections_id_connection_subscriptions_id_subscription_documents_put_with_http_info(id_user, id_connection, id_subscription, id_document, **kwargs)  # noqa: E501

    def users_id_user_connections_id_connection_subscriptions_id_subscription_documents_put_with_http_info(self, id_user, id_connection, id_subscription, id_document, **kwargs):  # noqa: E501
        """Attach an existing document to a transaction or a transactions_cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_subscriptions_id_subscription_documents_put_with_http_info(id_user, id_connection, id_subscription, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_subscription: (required)
        :param int id_document: id of the document you want to attach the file to (required)
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Document, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_subscription', 'id_document', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_subscriptions_id_subscription_documents_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_subscriptions_id_subscription_documents_put`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ApiValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_subscriptions_id_subscription_documents_put`")  # noqa: E501
        # verify the required parameter 'id_subscription' is set
        if ('id_subscription' not in local_var_params or
                local_var_params['id_subscription'] is None):
            raise ApiValueError("Missing the required parameter `id_subscription` when calling `users_id_user_connections_id_connection_subscriptions_id_subscription_documents_put`")  # noqa: E501
        # verify the required parameter 'id_document' is set
        if ('id_document' not in local_var_params or
                local_var_params['id_document'] is None):
            raise ApiValueError("Missing the required parameter `id_document` when calling `users_id_user_connections_id_connection_subscriptions_id_subscription_documents_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_subscription' in local_var_params:
            path_params['id_subscription'] = local_var_params['id_subscription']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'id_document' in local_var_params:
            form_params.append(('id_document', local_var_params['id_document']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/subscriptions/{id_subscription}/documents', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_subscriptions_id_subscription_put(self, id_user, id_connection, id_subscription, **kwargs):  # noqa: E501
        """Update a subscription  # noqa: E501

        It updates a specific subscription<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_subscriptions_id_subscription_put(id_user, id_connection, id_subscription, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_subscription: (required)
        :param str expand:
        :param bool disabled: If the subscription is disabled (not synchronized)
        :param str name: Label of the subscription
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Subscription
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_connections_id_connection_subscriptions_id_subscription_put_with_http_info(id_user, id_connection, id_subscription, **kwargs)  # noqa: E501

    def users_id_user_connections_id_connection_subscriptions_id_subscription_put_with_http_info(self, id_user, id_connection, id_subscription, **kwargs):  # noqa: E501
        """Update a subscription  # noqa: E501

        It updates a specific subscription<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_subscriptions_id_subscription_put_with_http_info(id_user, id_connection, id_subscription, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_subscription: (required)
        :param str expand:
        :param bool disabled: If the subscription is disabled (not synchronized)
        :param str name: Label of the subscription
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Subscription, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_subscription', 'expand', 'disabled', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_subscriptions_id_subscription_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_subscriptions_id_subscription_put`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ApiValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_subscriptions_id_subscription_put`")  # noqa: E501
        # verify the required parameter 'id_subscription' is set
        if ('id_subscription' not in local_var_params or
                local_var_params['id_subscription'] is None):
            raise ApiValueError("Missing the required parameter `id_subscription` when calling `users_id_user_connections_id_connection_subscriptions_id_subscription_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_subscription' in local_var_params:
            path_params['id_subscription'] = local_var_params['id_subscription']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'disabled' in local_var_params:
            form_params.append(('disabled', local_var_params['disabled']))  # noqa: E501
        if 'name' in local_var_params:
            form_params.append(('name', local_var_params['name']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/subscriptions/{id_subscription}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Subscription',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_transactions_id_transaction_documents_delete(self, id_user, id_connection, id_transaction, **kwargs):  # noqa: E501
        """Delete documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_transactions_id_transaction_documents_delete(id_user, id_connection, id_transaction, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_transaction: (required)
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_connections_id_connection_transactions_id_transaction_documents_delete_with_http_info(id_user, id_connection, id_transaction, **kwargs)  # noqa: E501

    def users_id_user_connections_id_connection_transactions_id_transaction_documents_delete_with_http_info(self, id_user, id_connection, id_transaction, **kwargs):  # noqa: E501
        """Delete documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_transactions_id_transaction_documents_delete_with_http_info(id_user, id_connection, id_transaction, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_transaction: (required)
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Document, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_transaction', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_transactions_id_transaction_documents_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_transactions_id_transaction_documents_delete`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ApiValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_transactions_id_transaction_documents_delete`")  # noqa: E501
        # verify the required parameter 'id_transaction' is set
        if ('id_transaction' not in local_var_params or
                local_var_params['id_transaction'] is None):
            raise ApiValueError("Missing the required parameter `id_transaction` when calling `users_id_user_connections_id_connection_transactions_id_transaction_documents_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_transaction' in local_var_params:
            path_params['id_transaction'] = local_var_params['id_transaction']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/transactions/{id_transaction}/documents', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_transactions_id_transaction_documents_get(self, id_user, id_connection, id_transaction, **kwargs):  # noqa: E501
        """Get documents  # noqa: E501

        Get list of documents<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_transactions_id_transaction_documents_get(id_user, id_connection, id_transaction, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_transaction: (required)
        :param int limit: limit number of results
        :param int offset: offset of first result
        :param date min_date: minimal (inclusive) date
        :param date max_date: maximum (inclusive) date
        :param float min_amount: minimal (inclusive) amount
        :param float max_amount: maximumd (inclusive) amount
        :param float min_timestamp: minimal (inclusive) timestamp
        :param float max_timestamp: maximum (inclusive) timestamp
        :param int id_type: filter with a document type
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_connections_id_connection_transactions_id_transaction_documents_get_with_http_info(id_user, id_connection, id_transaction, **kwargs)  # noqa: E501

    def users_id_user_connections_id_connection_transactions_id_transaction_documents_get_with_http_info(self, id_user, id_connection, id_transaction, **kwargs):  # noqa: E501
        """Get documents  # noqa: E501

        Get list of documents<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_transactions_id_transaction_documents_get_with_http_info(id_user, id_connection, id_transaction, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_transaction: (required)
        :param int limit: limit number of results
        :param int offset: offset of first result
        :param date min_date: minimal (inclusive) date
        :param date max_date: maximum (inclusive) date
        :param float min_amount: minimal (inclusive) amount
        :param float max_amount: maximumd (inclusive) amount
        :param float min_timestamp: minimal (inclusive) timestamp
        :param float max_timestamp: maximum (inclusive) timestamp
        :param int id_type: filter with a document type
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(InlineResponse20015, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_transaction', 'limit', 'offset', 'min_date', 'max_date', 'min_amount', 'max_amount', 'min_timestamp', 'max_timestamp', 'id_type', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_transactions_id_transaction_documents_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_transactions_id_transaction_documents_get`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ApiValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_transactions_id_transaction_documents_get`")  # noqa: E501
        # verify the required parameter 'id_transaction' is set
        if ('id_transaction' not in local_var_params or
                local_var_params['id_transaction'] is None):
            raise ApiValueError("Missing the required parameter `id_transaction` when calling `users_id_user_connections_id_connection_transactions_id_transaction_documents_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_transaction' in local_var_params:
            path_params['id_transaction'] = local_var_params['id_transaction']  # noqa: E501

        query_params = []
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params:
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'min_date' in local_var_params:
            query_params.append(('min_date', local_var_params['min_date']))  # noqa: E501
        if 'max_date' in local_var_params:
            query_params.append(('max_date', local_var_params['max_date']))  # noqa: E501
        if 'min_amount' in local_var_params:
            query_params.append(('min_amount', local_var_params['min_amount']))  # noqa: E501
        if 'max_amount' in local_var_params:
            query_params.append(('max_amount', local_var_params['max_amount']))  # noqa: E501
        if 'min_timestamp' in local_var_params:
            query_params.append(('min_timestamp', local_var_params['min_timestamp']))  # noqa: E501
        if 'max_timestamp' in local_var_params:
            query_params.append(('max_timestamp', local_var_params['max_timestamp']))  # noqa: E501
        if 'id_type' in local_var_params:
            query_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/transactions/{id_transaction}/documents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20015',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_transactions_id_transaction_documents_id_document_delete(self, id_user, id_connection, id_transaction, id_document, **kwargs):  # noqa: E501
        """Delete a document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_transactions_id_transaction_documents_id_document_delete(id_user, id_connection, id_transaction, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_transaction: (required)
        :param int id_document: (required)
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_connections_id_connection_transactions_id_transaction_documents_id_document_delete_with_http_info(id_user, id_connection, id_transaction, id_document, **kwargs)  # noqa: E501

    def users_id_user_connections_id_connection_transactions_id_transaction_documents_id_document_delete_with_http_info(self, id_user, id_connection, id_transaction, id_document, **kwargs):  # noqa: E501
        """Delete a document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_transactions_id_transaction_documents_id_document_delete_with_http_info(id_user, id_connection, id_transaction, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_transaction: (required)
        :param int id_document: (required)
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Document, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_transaction', 'id_document', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_transactions_id_transaction_documents_id_document_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_transactions_id_transaction_documents_id_document_delete`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ApiValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_transactions_id_transaction_documents_id_document_delete`")  # noqa: E501
        # verify the required parameter 'id_transaction' is set
        if ('id_transaction' not in local_var_params or
                local_var_params['id_transaction'] is None):
            raise ApiValueError("Missing the required parameter `id_transaction` when calling `users_id_user_connections_id_connection_transactions_id_transaction_documents_id_document_delete`")  # noqa: E501
        # verify the required parameter 'id_document' is set
        if ('id_document' not in local_var_params or
                local_var_params['id_document'] is None):
            raise ApiValueError("Missing the required parameter `id_document` when calling `users_id_user_connections_id_connection_transactions_id_transaction_documents_id_document_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_transaction' in local_var_params:
            path_params['id_transaction'] = local_var_params['id_transaction']  # noqa: E501
        if 'id_document' in local_var_params:
            path_params['id_document'] = local_var_params['id_document']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/transactions/{id_transaction}/documents/{id_document}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_transactions_id_transaction_documents_id_document_put(self, id_user, id_connection, id_transaction, id_document, **kwargs):  # noqa: E501
        """Edit a document  # noqa: E501

        Edit meta-data of a specific document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_transactions_id_transaction_documents_id_document_put(id_user, id_connection, id_transaction, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_transaction: (required)
        :param int id_document: (required)
        :param str expand:
        :param date date: Date of document
        :param date duedate: Due date of document
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_type: Type of this document
        :param int income: Is an income or an outcome
        :param str name: Name of the document
        :param int readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_connections_id_connection_transactions_id_transaction_documents_id_document_put_with_http_info(id_user, id_connection, id_transaction, id_document, **kwargs)  # noqa: E501

    def users_id_user_connections_id_connection_transactions_id_transaction_documents_id_document_put_with_http_info(self, id_user, id_connection, id_transaction, id_document, **kwargs):  # noqa: E501
        """Edit a document  # noqa: E501

        Edit meta-data of a specific document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_transactions_id_transaction_documents_id_document_put_with_http_info(id_user, id_connection, id_transaction, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_transaction: (required)
        :param int id_document: (required)
        :param str expand:
        :param date date: Date of document
        :param date duedate: Due date of document
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_type: Type of this document
        :param int income: Is an income or an outcome
        :param str name: Name of the document
        :param int readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Document, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_transaction', 'id_document', 'expand', 'date', 'duedate', 'file', 'id_category', 'id_type', 'income', 'name', 'readonly', 'total_amount', 'untaxed_amount', 'vat']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_transactions_id_transaction_documents_id_document_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_transactions_id_transaction_documents_id_document_put`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ApiValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_transactions_id_transaction_documents_id_document_put`")  # noqa: E501
        # verify the required parameter 'id_transaction' is set
        if ('id_transaction' not in local_var_params or
                local_var_params['id_transaction'] is None):
            raise ApiValueError("Missing the required parameter `id_transaction` when calling `users_id_user_connections_id_connection_transactions_id_transaction_documents_id_document_put`")  # noqa: E501
        # verify the required parameter 'id_document' is set
        if ('id_document' not in local_var_params or
                local_var_params['id_document'] is None):
            raise ApiValueError("Missing the required parameter `id_document` when calling `users_id_user_connections_id_connection_transactions_id_transaction_documents_id_document_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_transaction' in local_var_params:
            path_params['id_transaction'] = local_var_params['id_transaction']  # noqa: E501
        if 'id_document' in local_var_params:
            path_params['id_document'] = local_var_params['id_document']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'date' in local_var_params:
            form_params.append(('date', local_var_params['date']))  # noqa: E501
        if 'duedate' in local_var_params:
            form_params.append(('duedate', local_var_params['duedate']))  # noqa: E501
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501
        if 'id_category' in local_var_params:
            form_params.append(('id_category', local_var_params['id_category']))  # noqa: E501
        if 'id_type' in local_var_params:
            form_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'income' in local_var_params:
            form_params.append(('income', local_var_params['income']))  # noqa: E501
        if 'name' in local_var_params:
            form_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'readonly' in local_var_params:
            form_params.append(('readonly', local_var_params['readonly']))  # noqa: E501
        if 'total_amount' in local_var_params:
            form_params.append(('total_amount', local_var_params['total_amount']))  # noqa: E501
        if 'untaxed_amount' in local_var_params:
            form_params.append(('untaxed_amount', local_var_params['untaxed_amount']))  # noqa: E501
        if 'vat' in local_var_params:
            form_params.append(('vat', local_var_params['vat']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/transactions/{id_transaction}/documents/{id_document}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_transactions_id_transaction_documents_post(self, id_user, id_connection, id_transaction, date, duedate, **kwargs):  # noqa: E501
        """Add a new document  # noqa: E501

        Add a new document<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_transactions_id_transaction_documents_post(id_user, id_connection, id_transaction, date, duedate, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_transaction: (required)
        :param date date: Date of document (required)
        :param date duedate: Due date of document (required)
        :param str expand:
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_ocr: Related OCR process
        :param int id_type: Type of this document
        :param bool income: Is an income or an outcome
        :param str name: Name of the document
        :param bool readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_connections_id_connection_transactions_id_transaction_documents_post_with_http_info(id_user, id_connection, id_transaction, date, duedate, **kwargs)  # noqa: E501

    def users_id_user_connections_id_connection_transactions_id_transaction_documents_post_with_http_info(self, id_user, id_connection, id_transaction, date, duedate, **kwargs):  # noqa: E501
        """Add a new document  # noqa: E501

        Add a new document<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_transactions_id_transaction_documents_post_with_http_info(id_user, id_connection, id_transaction, date, duedate, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_transaction: (required)
        :param date date: Date of document (required)
        :param date duedate: Due date of document (required)
        :param str expand:
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_ocr: Related OCR process
        :param int id_type: Type of this document
        :param bool income: Is an income or an outcome
        :param str name: Name of the document
        :param bool readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Document, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_transaction', 'date', 'duedate', 'expand', 'file', 'id_category', 'id_ocr', 'id_type', 'income', 'name', 'readonly', 'total_amount', 'untaxed_amount', 'vat']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_transactions_id_transaction_documents_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_transactions_id_transaction_documents_post`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ApiValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_transactions_id_transaction_documents_post`")  # noqa: E501
        # verify the required parameter 'id_transaction' is set
        if ('id_transaction' not in local_var_params or
                local_var_params['id_transaction'] is None):
            raise ApiValueError("Missing the required parameter `id_transaction` when calling `users_id_user_connections_id_connection_transactions_id_transaction_documents_post`")  # noqa: E501
        # verify the required parameter 'date' is set
        if ('date' not in local_var_params or
                local_var_params['date'] is None):
            raise ApiValueError("Missing the required parameter `date` when calling `users_id_user_connections_id_connection_transactions_id_transaction_documents_post`")  # noqa: E501
        # verify the required parameter 'duedate' is set
        if ('duedate' not in local_var_params or
                local_var_params['duedate'] is None):
            raise ApiValueError("Missing the required parameter `duedate` when calling `users_id_user_connections_id_connection_transactions_id_transaction_documents_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_transaction' in local_var_params:
            path_params['id_transaction'] = local_var_params['id_transaction']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'date' in local_var_params:
            form_params.append(('date', local_var_params['date']))  # noqa: E501
        if 'duedate' in local_var_params:
            form_params.append(('duedate', local_var_params['duedate']))  # noqa: E501
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501
        if 'id_category' in local_var_params:
            form_params.append(('id_category', local_var_params['id_category']))  # noqa: E501
        if 'id_ocr' in local_var_params:
            form_params.append(('id_ocr', local_var_params['id_ocr']))  # noqa: E501
        if 'id_type' in local_var_params:
            form_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'income' in local_var_params:
            form_params.append(('income', local_var_params['income']))  # noqa: E501
        if 'name' in local_var_params:
            form_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'readonly' in local_var_params:
            form_params.append(('readonly', local_var_params['readonly']))  # noqa: E501
        if 'total_amount' in local_var_params:
            form_params.append(('total_amount', local_var_params['total_amount']))  # noqa: E501
        if 'untaxed_amount' in local_var_params:
            form_params.append(('untaxed_amount', local_var_params['untaxed_amount']))  # noqa: E501
        if 'vat' in local_var_params:
            form_params.append(('vat', local_var_params['vat']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/transactions/{id_transaction}/documents', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_transactions_id_transaction_documents_put(self, id_user, id_connection, id_transaction, id_document, **kwargs):  # noqa: E501
        """Attach an existing document to a transaction or a transactions_cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_transactions_id_transaction_documents_put(id_user, id_connection, id_transaction, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_transaction: (required)
        :param int id_document: id of the document you want to attach the file to (required)
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_connections_id_connection_transactions_id_transaction_documents_put_with_http_info(id_user, id_connection, id_transaction, id_document, **kwargs)  # noqa: E501

    def users_id_user_connections_id_connection_transactions_id_transaction_documents_put_with_http_info(self, id_user, id_connection, id_transaction, id_document, **kwargs):  # noqa: E501
        """Attach an existing document to a transaction or a transactions_cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_transactions_id_transaction_documents_put_with_http_info(id_user, id_connection, id_transaction, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_transaction: (required)
        :param int id_document: id of the document you want to attach the file to (required)
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Document, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_transaction', 'id_document', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_transactions_id_transaction_documents_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_transactions_id_transaction_documents_put`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ApiValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_transactions_id_transaction_documents_put`")  # noqa: E501
        # verify the required parameter 'id_transaction' is set
        if ('id_transaction' not in local_var_params or
                local_var_params['id_transaction'] is None):
            raise ApiValueError("Missing the required parameter `id_transaction` when calling `users_id_user_connections_id_connection_transactions_id_transaction_documents_put`")  # noqa: E501
        # verify the required parameter 'id_document' is set
        if ('id_document' not in local_var_params or
                local_var_params['id_document'] is None):
            raise ApiValueError("Missing the required parameter `id_document` when calling `users_id_user_connections_id_connection_transactions_id_transaction_documents_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_transaction' in local_var_params:
            path_params['id_transaction'] = local_var_params['id_transaction']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'id_document' in local_var_params:
            form_params.append(('id_document', local_var_params['id_document']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/transactions/{id_transaction}/documents', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_delete(self, id_user, id_connection, id_transactions_cluster, **kwargs):  # noqa: E501
        """Delete documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_delete(id_user, id_connection, id_transactions_cluster, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_transactions_cluster: (required)
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_delete_with_http_info(id_user, id_connection, id_transactions_cluster, **kwargs)  # noqa: E501

    def users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_delete_with_http_info(self, id_user, id_connection, id_transactions_cluster, **kwargs):  # noqa: E501
        """Delete documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_delete_with_http_info(id_user, id_connection, id_transactions_cluster, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_transactions_cluster: (required)
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Document, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_transactions_cluster', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_delete`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ApiValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_delete`")  # noqa: E501
        # verify the required parameter 'id_transactions_cluster' is set
        if ('id_transactions_cluster' not in local_var_params or
                local_var_params['id_transactions_cluster'] is None):
            raise ApiValueError("Missing the required parameter `id_transactions_cluster` when calling `users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_transactions_cluster' in local_var_params:
            path_params['id_transactions_cluster'] = local_var_params['id_transactions_cluster']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/transactionsclusters/{id_transactions_cluster}/documents', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_get(self, id_user, id_connection, id_transactions_cluster, **kwargs):  # noqa: E501
        """Get documents  # noqa: E501

        Get list of documents<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_get(id_user, id_connection, id_transactions_cluster, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_transactions_cluster: (required)
        :param int limit: limit number of results
        :param int offset: offset of first result
        :param date min_date: minimal (inclusive) date
        :param date max_date: maximum (inclusive) date
        :param float min_amount: minimal (inclusive) amount
        :param float max_amount: maximumd (inclusive) amount
        :param float min_timestamp: minimal (inclusive) timestamp
        :param float max_timestamp: maximum (inclusive) timestamp
        :param int id_type: filter with a document type
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_get_with_http_info(id_user, id_connection, id_transactions_cluster, **kwargs)  # noqa: E501

    def users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_get_with_http_info(self, id_user, id_connection, id_transactions_cluster, **kwargs):  # noqa: E501
        """Get documents  # noqa: E501

        Get list of documents<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_get_with_http_info(id_user, id_connection, id_transactions_cluster, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_transactions_cluster: (required)
        :param int limit: limit number of results
        :param int offset: offset of first result
        :param date min_date: minimal (inclusive) date
        :param date max_date: maximum (inclusive) date
        :param float min_amount: minimal (inclusive) amount
        :param float max_amount: maximumd (inclusive) amount
        :param float min_timestamp: minimal (inclusive) timestamp
        :param float max_timestamp: maximum (inclusive) timestamp
        :param int id_type: filter with a document type
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(InlineResponse20015, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_transactions_cluster', 'limit', 'offset', 'min_date', 'max_date', 'min_amount', 'max_amount', 'min_timestamp', 'max_timestamp', 'id_type', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_get`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ApiValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_get`")  # noqa: E501
        # verify the required parameter 'id_transactions_cluster' is set
        if ('id_transactions_cluster' not in local_var_params or
                local_var_params['id_transactions_cluster'] is None):
            raise ApiValueError("Missing the required parameter `id_transactions_cluster` when calling `users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_transactions_cluster' in local_var_params:
            path_params['id_transactions_cluster'] = local_var_params['id_transactions_cluster']  # noqa: E501

        query_params = []
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params:
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'min_date' in local_var_params:
            query_params.append(('min_date', local_var_params['min_date']))  # noqa: E501
        if 'max_date' in local_var_params:
            query_params.append(('max_date', local_var_params['max_date']))  # noqa: E501
        if 'min_amount' in local_var_params:
            query_params.append(('min_amount', local_var_params['min_amount']))  # noqa: E501
        if 'max_amount' in local_var_params:
            query_params.append(('max_amount', local_var_params['max_amount']))  # noqa: E501
        if 'min_timestamp' in local_var_params:
            query_params.append(('min_timestamp', local_var_params['min_timestamp']))  # noqa: E501
        if 'max_timestamp' in local_var_params:
            query_params.append(('max_timestamp', local_var_params['max_timestamp']))  # noqa: E501
        if 'id_type' in local_var_params:
            query_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/transactionsclusters/{id_transactions_cluster}/documents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20015',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_id_document_delete(self, id_user, id_connection, id_transactions_cluster, id_document, **kwargs):  # noqa: E501
        """Delete a document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_id_document_delete(id_user, id_connection, id_transactions_cluster, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_transactions_cluster: (required)
        :param int id_document: (required)
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_id_document_delete_with_http_info(id_user, id_connection, id_transactions_cluster, id_document, **kwargs)  # noqa: E501

    def users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_id_document_delete_with_http_info(self, id_user, id_connection, id_transactions_cluster, id_document, **kwargs):  # noqa: E501
        """Delete a document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_id_document_delete_with_http_info(id_user, id_connection, id_transactions_cluster, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_transactions_cluster: (required)
        :param int id_document: (required)
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Document, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_transactions_cluster', 'id_document', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_id_document_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_id_document_delete`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ApiValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_id_document_delete`")  # noqa: E501
        # verify the required parameter 'id_transactions_cluster' is set
        if ('id_transactions_cluster' not in local_var_params or
                local_var_params['id_transactions_cluster'] is None):
            raise ApiValueError("Missing the required parameter `id_transactions_cluster` when calling `users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_id_document_delete`")  # noqa: E501
        # verify the required parameter 'id_document' is set
        if ('id_document' not in local_var_params or
                local_var_params['id_document'] is None):
            raise ApiValueError("Missing the required parameter `id_document` when calling `users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_id_document_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_transactions_cluster' in local_var_params:
            path_params['id_transactions_cluster'] = local_var_params['id_transactions_cluster']  # noqa: E501
        if 'id_document' in local_var_params:
            path_params['id_document'] = local_var_params['id_document']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/transactionsclusters/{id_transactions_cluster}/documents/{id_document}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_id_document_put(self, id_user, id_connection, id_transactions_cluster, id_document, **kwargs):  # noqa: E501
        """Edit a document  # noqa: E501

        Edit meta-data of a specific document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_id_document_put(id_user, id_connection, id_transactions_cluster, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_transactions_cluster: (required)
        :param int id_document: (required)
        :param str expand:
        :param date date: Date of document
        :param date duedate: Due date of document
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_type: Type of this document
        :param int income: Is an income or an outcome
        :param str name: Name of the document
        :param int readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_id_document_put_with_http_info(id_user, id_connection, id_transactions_cluster, id_document, **kwargs)  # noqa: E501

    def users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_id_document_put_with_http_info(self, id_user, id_connection, id_transactions_cluster, id_document, **kwargs):  # noqa: E501
        """Edit a document  # noqa: E501

        Edit meta-data of a specific document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_id_document_put_with_http_info(id_user, id_connection, id_transactions_cluster, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_transactions_cluster: (required)
        :param int id_document: (required)
        :param str expand:
        :param date date: Date of document
        :param date duedate: Due date of document
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_type: Type of this document
        :param int income: Is an income or an outcome
        :param str name: Name of the document
        :param int readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Document, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_transactions_cluster', 'id_document', 'expand', 'date', 'duedate', 'file', 'id_category', 'id_type', 'income', 'name', 'readonly', 'total_amount', 'untaxed_amount', 'vat']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_id_document_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_id_document_put`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ApiValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_id_document_put`")  # noqa: E501
        # verify the required parameter 'id_transactions_cluster' is set
        if ('id_transactions_cluster' not in local_var_params or
                local_var_params['id_transactions_cluster'] is None):
            raise ApiValueError("Missing the required parameter `id_transactions_cluster` when calling `users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_id_document_put`")  # noqa: E501
        # verify the required parameter 'id_document' is set
        if ('id_document' not in local_var_params or
                local_var_params['id_document'] is None):
            raise ApiValueError("Missing the required parameter `id_document` when calling `users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_id_document_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_transactions_cluster' in local_var_params:
            path_params['id_transactions_cluster'] = local_var_params['id_transactions_cluster']  # noqa: E501
        if 'id_document' in local_var_params:
            path_params['id_document'] = local_var_params['id_document']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'date' in local_var_params:
            form_params.append(('date', local_var_params['date']))  # noqa: E501
        if 'duedate' in local_var_params:
            form_params.append(('duedate', local_var_params['duedate']))  # noqa: E501
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501
        if 'id_category' in local_var_params:
            form_params.append(('id_category', local_var_params['id_category']))  # noqa: E501
        if 'id_type' in local_var_params:
            form_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'income' in local_var_params:
            form_params.append(('income', local_var_params['income']))  # noqa: E501
        if 'name' in local_var_params:
            form_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'readonly' in local_var_params:
            form_params.append(('readonly', local_var_params['readonly']))  # noqa: E501
        if 'total_amount' in local_var_params:
            form_params.append(('total_amount', local_var_params['total_amount']))  # noqa: E501
        if 'untaxed_amount' in local_var_params:
            form_params.append(('untaxed_amount', local_var_params['untaxed_amount']))  # noqa: E501
        if 'vat' in local_var_params:
            form_params.append(('vat', local_var_params['vat']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/transactionsclusters/{id_transactions_cluster}/documents/{id_document}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_post(self, id_user, id_connection, id_transactions_cluster, date, duedate, **kwargs):  # noqa: E501
        """Add a new document  # noqa: E501

        Add a new document<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_post(id_user, id_connection, id_transactions_cluster, date, duedate, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_transactions_cluster: (required)
        :param date date: Date of document (required)
        :param date duedate: Due date of document (required)
        :param str expand:
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_ocr: Related OCR process
        :param int id_type: Type of this document
        :param bool income: Is an income or an outcome
        :param str name: Name of the document
        :param bool readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_post_with_http_info(id_user, id_connection, id_transactions_cluster, date, duedate, **kwargs)  # noqa: E501

    def users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_post_with_http_info(self, id_user, id_connection, id_transactions_cluster, date, duedate, **kwargs):  # noqa: E501
        """Add a new document  # noqa: E501

        Add a new document<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_post_with_http_info(id_user, id_connection, id_transactions_cluster, date, duedate, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_transactions_cluster: (required)
        :param date date: Date of document (required)
        :param date duedate: Due date of document (required)
        :param str expand:
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_ocr: Related OCR process
        :param int id_type: Type of this document
        :param bool income: Is an income or an outcome
        :param str name: Name of the document
        :param bool readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Document, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_transactions_cluster', 'date', 'duedate', 'expand', 'file', 'id_category', 'id_ocr', 'id_type', 'income', 'name', 'readonly', 'total_amount', 'untaxed_amount', 'vat']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_post`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ApiValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_post`")  # noqa: E501
        # verify the required parameter 'id_transactions_cluster' is set
        if ('id_transactions_cluster' not in local_var_params or
                local_var_params['id_transactions_cluster'] is None):
            raise ApiValueError("Missing the required parameter `id_transactions_cluster` when calling `users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_post`")  # noqa: E501
        # verify the required parameter 'date' is set
        if ('date' not in local_var_params or
                local_var_params['date'] is None):
            raise ApiValueError("Missing the required parameter `date` when calling `users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_post`")  # noqa: E501
        # verify the required parameter 'duedate' is set
        if ('duedate' not in local_var_params or
                local_var_params['duedate'] is None):
            raise ApiValueError("Missing the required parameter `duedate` when calling `users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_transactions_cluster' in local_var_params:
            path_params['id_transactions_cluster'] = local_var_params['id_transactions_cluster']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'date' in local_var_params:
            form_params.append(('date', local_var_params['date']))  # noqa: E501
        if 'duedate' in local_var_params:
            form_params.append(('duedate', local_var_params['duedate']))  # noqa: E501
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501
        if 'id_category' in local_var_params:
            form_params.append(('id_category', local_var_params['id_category']))  # noqa: E501
        if 'id_ocr' in local_var_params:
            form_params.append(('id_ocr', local_var_params['id_ocr']))  # noqa: E501
        if 'id_type' in local_var_params:
            form_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'income' in local_var_params:
            form_params.append(('income', local_var_params['income']))  # noqa: E501
        if 'name' in local_var_params:
            form_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'readonly' in local_var_params:
            form_params.append(('readonly', local_var_params['readonly']))  # noqa: E501
        if 'total_amount' in local_var_params:
            form_params.append(('total_amount', local_var_params['total_amount']))  # noqa: E501
        if 'untaxed_amount' in local_var_params:
            form_params.append(('untaxed_amount', local_var_params['untaxed_amount']))  # noqa: E501
        if 'vat' in local_var_params:
            form_params.append(('vat', local_var_params['vat']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/transactionsclusters/{id_transactions_cluster}/documents', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_put(self, id_user, id_connection, id_transactions_cluster, id_document, **kwargs):  # noqa: E501
        """Attach an existing document to a transaction or a transactions_cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_put(id_user, id_connection, id_transactions_cluster, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_transactions_cluster: (required)
        :param int id_document: id of the document you want to attach the file to (required)
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_put_with_http_info(id_user, id_connection, id_transactions_cluster, id_document, **kwargs)  # noqa: E501

    def users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_put_with_http_info(self, id_user, id_connection, id_transactions_cluster, id_document, **kwargs):  # noqa: E501
        """Attach an existing document to a transaction or a transactions_cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_put_with_http_info(id_user, id_connection, id_transactions_cluster, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_transactions_cluster: (required)
        :param int id_document: id of the document you want to attach the file to (required)
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Document, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_transactions_cluster', 'id_document', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_put`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ApiValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_put`")  # noqa: E501
        # verify the required parameter 'id_transactions_cluster' is set
        if ('id_transactions_cluster' not in local_var_params or
                local_var_params['id_transactions_cluster'] is None):
            raise ApiValueError("Missing the required parameter `id_transactions_cluster` when calling `users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_put`")  # noqa: E501
        # verify the required parameter 'id_document' is set
        if ('id_document' not in local_var_params or
                local_var_params['id_document'] is None):
            raise ApiValueError("Missing the required parameter `id_document` when calling `users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_transactions_cluster' in local_var_params:
            path_params['id_transactions_cluster'] = local_var_params['id_transactions_cluster']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'id_document' in local_var_params:
            form_params.append(('id_document', local_var_params['id_document']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/transactionsclusters/{id_transactions_cluster}/documents', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_post(self, id_user, **kwargs):  # noqa: E501
        """Add a new connection.  # noqa: E501

        Create a new connection to a given bank or provider. You have to give all needed parameters (use /banks/ID/fields or /providers/ID/fields to get them).<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_post(id_user, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param str expand:
        :param str connector_uuid: optional uuid of the connector (replaces id_connector)
        :param int id_connector: ID of the connector
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Connection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_connections_post_with_http_info(id_user, **kwargs)  # noqa: E501

    def users_id_user_connections_post_with_http_info(self, id_user, **kwargs):  # noqa: E501
        """Add a new connection.  # noqa: E501

        Create a new connection to a given bank or provider. You have to give all needed parameters (use /banks/ID/fields or /providers/ID/fields to get them).<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_post_with_http_info(id_user, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param str expand:
        :param str connector_uuid: optional uuid of the connector (replaces id_connector)
        :param int id_connector: ID of the connector
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Connection, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'expand', 'connector_uuid', 'id_connector']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'connector_uuid' in local_var_params:
            form_params.append(('connector_uuid', local_var_params['connector_uuid']))  # noqa: E501
        if 'id_connector' in local_var_params:
            form_params.append(('id_connector', local_var_params['id_connector']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Connection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_documents_delete(self, id_user, **kwargs):  # noqa: E501
        """Delete documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_documents_delete(id_user, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_documents_delete_with_http_info(id_user, **kwargs)  # noqa: E501

    def users_id_user_documents_delete_with_http_info(self, id_user, **kwargs):  # noqa: E501
        """Delete documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_documents_delete_with_http_info(id_user, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Document, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_documents_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_documents_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/documents', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_documents_get(self, id_user, **kwargs):  # noqa: E501
        """Get documents  # noqa: E501

        Get list of documents<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_documents_get(id_user, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int limit: limit number of results
        :param int offset: offset of first result
        :param date min_date: minimal (inclusive) date
        :param date max_date: maximum (inclusive) date
        :param float min_amount: minimal (inclusive) amount
        :param float max_amount: maximumd (inclusive) amount
        :param float min_timestamp: minimal (inclusive) timestamp
        :param float max_timestamp: maximum (inclusive) timestamp
        :param int id_type: filter with a document type
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_documents_get_with_http_info(id_user, **kwargs)  # noqa: E501

    def users_id_user_documents_get_with_http_info(self, id_user, **kwargs):  # noqa: E501
        """Get documents  # noqa: E501

        Get list of documents<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_documents_get_with_http_info(id_user, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int limit: limit number of results
        :param int offset: offset of first result
        :param date min_date: minimal (inclusive) date
        :param date max_date: maximum (inclusive) date
        :param float min_amount: minimal (inclusive) amount
        :param float max_amount: maximumd (inclusive) amount
        :param float min_timestamp: minimal (inclusive) timestamp
        :param float max_timestamp: maximum (inclusive) timestamp
        :param int id_type: filter with a document type
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(InlineResponse20015, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'limit', 'offset', 'min_date', 'max_date', 'min_amount', 'max_amount', 'min_timestamp', 'max_timestamp', 'id_type', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_documents_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_documents_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501

        query_params = []
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params:
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'min_date' in local_var_params:
            query_params.append(('min_date', local_var_params['min_date']))  # noqa: E501
        if 'max_date' in local_var_params:
            query_params.append(('max_date', local_var_params['max_date']))  # noqa: E501
        if 'min_amount' in local_var_params:
            query_params.append(('min_amount', local_var_params['min_amount']))  # noqa: E501
        if 'max_amount' in local_var_params:
            query_params.append(('max_amount', local_var_params['max_amount']))  # noqa: E501
        if 'min_timestamp' in local_var_params:
            query_params.append(('min_timestamp', local_var_params['min_timestamp']))  # noqa: E501
        if 'max_timestamp' in local_var_params:
            query_params.append(('max_timestamp', local_var_params['max_timestamp']))  # noqa: E501
        if 'id_type' in local_var_params:
            query_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/documents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20015',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_documents_id_document_delete(self, id_user, id_document, **kwargs):  # noqa: E501
        """Delete a document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_documents_id_document_delete(id_user, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_document: (required)
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_documents_id_document_delete_with_http_info(id_user, id_document, **kwargs)  # noqa: E501

    def users_id_user_documents_id_document_delete_with_http_info(self, id_user, id_document, **kwargs):  # noqa: E501
        """Delete a document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_documents_id_document_delete_with_http_info(id_user, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_document: (required)
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Document, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_document', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_documents_id_document_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_documents_id_document_delete`")  # noqa: E501
        # verify the required parameter 'id_document' is set
        if ('id_document' not in local_var_params or
                local_var_params['id_document'] is None):
            raise ApiValueError("Missing the required parameter `id_document` when calling `users_id_user_documents_id_document_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_document' in local_var_params:
            path_params['id_document'] = local_var_params['id_document']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/documents/{id_document}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_documents_id_document_put(self, id_user, id_document, **kwargs):  # noqa: E501
        """Edit a document  # noqa: E501

        Edit meta-data of a specific document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_documents_id_document_put(id_user, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_document: (required)
        :param str expand:
        :param date date: Date of document
        :param date duedate: Due date of document
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_type: Type of this document
        :param int income: Is an income or an outcome
        :param str name: Name of the document
        :param int readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_documents_id_document_put_with_http_info(id_user, id_document, **kwargs)  # noqa: E501

    def users_id_user_documents_id_document_put_with_http_info(self, id_user, id_document, **kwargs):  # noqa: E501
        """Edit a document  # noqa: E501

        Edit meta-data of a specific document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_documents_id_document_put_with_http_info(id_user, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_document: (required)
        :param str expand:
        :param date date: Date of document
        :param date duedate: Due date of document
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_type: Type of this document
        :param int income: Is an income or an outcome
        :param str name: Name of the document
        :param int readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Document, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_document', 'expand', 'date', 'duedate', 'file', 'id_category', 'id_type', 'income', 'name', 'readonly', 'total_amount', 'untaxed_amount', 'vat']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_documents_id_document_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_documents_id_document_put`")  # noqa: E501
        # verify the required parameter 'id_document' is set
        if ('id_document' not in local_var_params or
                local_var_params['id_document'] is None):
            raise ApiValueError("Missing the required parameter `id_document` when calling `users_id_user_documents_id_document_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_document' in local_var_params:
            path_params['id_document'] = local_var_params['id_document']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'date' in local_var_params:
            form_params.append(('date', local_var_params['date']))  # noqa: E501
        if 'duedate' in local_var_params:
            form_params.append(('duedate', local_var_params['duedate']))  # noqa: E501
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501
        if 'id_category' in local_var_params:
            form_params.append(('id_category', local_var_params['id_category']))  # noqa: E501
        if 'id_type' in local_var_params:
            form_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'income' in local_var_params:
            form_params.append(('income', local_var_params['income']))  # noqa: E501
        if 'name' in local_var_params:
            form_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'readonly' in local_var_params:
            form_params.append(('readonly', local_var_params['readonly']))  # noqa: E501
        if 'total_amount' in local_var_params:
            form_params.append(('total_amount', local_var_params['total_amount']))  # noqa: E501
        if 'untaxed_amount' in local_var_params:
            form_params.append(('untaxed_amount', local_var_params['untaxed_amount']))  # noqa: E501
        if 'vat' in local_var_params:
            form_params.append(('vat', local_var_params['vat']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/documents/{id_document}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_documents_post(self, id_user, date, duedate, **kwargs):  # noqa: E501
        """Add a new document  # noqa: E501

        Add a new document<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_documents_post(id_user, date, duedate, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param date date: Date of document (required)
        :param date duedate: Due date of document (required)
        :param str expand:
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_ocr: Related OCR process
        :param int id_type: Type of this document
        :param bool income: Is an income or an outcome
        :param str name: Name of the document
        :param bool readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_documents_post_with_http_info(id_user, date, duedate, **kwargs)  # noqa: E501

    def users_id_user_documents_post_with_http_info(self, id_user, date, duedate, **kwargs):  # noqa: E501
        """Add a new document  # noqa: E501

        Add a new document<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_documents_post_with_http_info(id_user, date, duedate, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param date date: Date of document (required)
        :param date duedate: Due date of document (required)
        :param str expand:
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_ocr: Related OCR process
        :param int id_type: Type of this document
        :param bool income: Is an income or an outcome
        :param str name: Name of the document
        :param bool readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Document, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'date', 'duedate', 'expand', 'file', 'id_category', 'id_ocr', 'id_type', 'income', 'name', 'readonly', 'total_amount', 'untaxed_amount', 'vat']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_documents_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_documents_post`")  # noqa: E501
        # verify the required parameter 'date' is set
        if ('date' not in local_var_params or
                local_var_params['date'] is None):
            raise ApiValueError("Missing the required parameter `date` when calling `users_id_user_documents_post`")  # noqa: E501
        # verify the required parameter 'duedate' is set
        if ('duedate' not in local_var_params or
                local_var_params['duedate'] is None):
            raise ApiValueError("Missing the required parameter `duedate` when calling `users_id_user_documents_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'date' in local_var_params:
            form_params.append(('date', local_var_params['date']))  # noqa: E501
        if 'duedate' in local_var_params:
            form_params.append(('duedate', local_var_params['duedate']))  # noqa: E501
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501
        if 'id_category' in local_var_params:
            form_params.append(('id_category', local_var_params['id_category']))  # noqa: E501
        if 'id_ocr' in local_var_params:
            form_params.append(('id_ocr', local_var_params['id_ocr']))  # noqa: E501
        if 'id_type' in local_var_params:
            form_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'income' in local_var_params:
            form_params.append(('income', local_var_params['income']))  # noqa: E501
        if 'name' in local_var_params:
            form_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'readonly' in local_var_params:
            form_params.append(('readonly', local_var_params['readonly']))  # noqa: E501
        if 'total_amount' in local_var_params:
            form_params.append(('total_amount', local_var_params['total_amount']))  # noqa: E501
        if 'untaxed_amount' in local_var_params:
            form_params.append(('untaxed_amount', local_var_params['untaxed_amount']))  # noqa: E501
        if 'vat' in local_var_params:
            form_params.append(('vat', local_var_params['vat']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/documents', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_documents_put(self, id_user, id_document, **kwargs):  # noqa: E501
        """Attach an existing document to a transaction or a transactions_cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_documents_put(id_user, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_document: id of the document you want to attach the file to (required)
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_documents_put_with_http_info(id_user, id_document, **kwargs)  # noqa: E501

    def users_id_user_documents_put_with_http_info(self, id_user, id_document, **kwargs):  # noqa: E501
        """Attach an existing document to a transaction or a transactions_cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_documents_put_with_http_info(id_user, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_document: id of the document you want to attach the file to (required)
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Document, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_document', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_documents_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_documents_put`")  # noqa: E501
        # verify the required parameter 'id_document' is set
        if ('id_document' not in local_var_params or
                local_var_params['id_document'] is None):
            raise ApiValueError("Missing the required parameter `id_document` when calling `users_id_user_documents_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'id_document' in local_var_params:
            form_params.append(('id_document', local_var_params['id_document']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/documents', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_logs_get(self, id_user, **kwargs):  # noqa: E501
        """Get connection logs  # noqa: E501

        Get logs about connections.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_logs_get(id_user, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int limit: limit number of results
        :param int offset: offset of first result
        :param date min_date: minimal date
        :param date max_date: maximum date
        :param int state: state of user
        :param str period: period to group logs
        :param int id_user2: ID of a user
        :param int id_connection: ID of a connection
        :param int id_connector: ID of a connector
        :param bool charged: consider only logs for charged connectors
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_logs_get_with_http_info(id_user, **kwargs)  # noqa: E501

    def users_id_user_logs_get_with_http_info(self, id_user, **kwargs):  # noqa: E501
        """Get connection logs  # noqa: E501

        Get logs about connections.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_logs_get_with_http_info(id_user, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int limit: limit number of results
        :param int offset: offset of first result
        :param date min_date: minimal date
        :param date max_date: maximum date
        :param int state: state of user
        :param str period: period to group logs
        :param int id_user2: ID of a user
        :param int id_connection: ID of a connection
        :param int id_connector: ID of a connector
        :param bool charged: consider only logs for charged connectors
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(InlineResponse2008, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'limit', 'offset', 'min_date', 'max_date', 'state', 'period', 'id_user2', 'id_connection', 'id_connector', 'charged', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_logs_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_logs_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501

        query_params = []
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params:
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'min_date' in local_var_params:
            query_params.append(('min_date', local_var_params['min_date']))  # noqa: E501
        if 'max_date' in local_var_params:
            query_params.append(('max_date', local_var_params['max_date']))  # noqa: E501
        if 'state' in local_var_params:
            query_params.append(('state', local_var_params['state']))  # noqa: E501
        if 'period' in local_var_params:
            query_params.append(('period', local_var_params['period']))  # noqa: E501
        if 'id_user2' in local_var_params:
            query_params.append(('id_user', local_var_params['id_user2']))  # noqa: E501
        if 'id_connection' in local_var_params:
            query_params.append(('id_connection', local_var_params['id_connection']))  # noqa: E501
        if 'id_connector' in local_var_params:
            query_params.append(('id_connector', local_var_params['id_connector']))  # noqa: E501
        if 'charged' in local_var_params:
            query_params.append(('charged', local_var_params['charged']))  # noqa: E501
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/logs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2008',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_ocr_post(self, id_user, file, **kwargs):  # noqa: E501
        """Post an image with OCR  # noqa: E501

        Post an image and apply OCR on it to obtain found meta-data.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_ocr_post(id_user, file, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param file file: File of the document (required)
        :param int id_transaction: Transaction used to help OCR to find data
        :param str name: Name of the document
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_ocr_post_with_http_info(id_user, file, **kwargs)  # noqa: E501

    def users_id_user_ocr_post_with_http_info(self, id_user, file, **kwargs):  # noqa: E501
        """Post an image with OCR  # noqa: E501

        Post an image and apply OCR on it to obtain found meta-data.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_ocr_post_with_http_info(id_user, file, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param file file: File of the document (required)
        :param int id_transaction: Transaction used to help OCR to find data
        :param str name: Name of the document
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'file', 'id_transaction', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_ocr_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_ocr_post`")  # noqa: E501
        # verify the required parameter 'file' is set
        if ('file' not in local_var_params or
                local_var_params['file'] is None):
            raise ApiValueError("Missing the required parameter `file` when calling `users_id_user_ocr_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501
        if 'id_transaction' in local_var_params:
            form_params.append(('id_transaction', local_var_params['id_transaction']))  # noqa: E501
        if 'name' in local_var_params:
            form_params.append(('name', local_var_params['name']))  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/ocr', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_subscriptions_id_subscription_delete(self, id_user, id_subscription, **kwargs):  # noqa: E501
        """Delete a subscription.  # noqa: E501

        It deletes a specific subscription.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_subscriptions_id_subscription_delete(id_user, id_subscription, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_subscription: (required)
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Subscription
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_subscriptions_id_subscription_delete_with_http_info(id_user, id_subscription, **kwargs)  # noqa: E501

    def users_id_user_subscriptions_id_subscription_delete_with_http_info(self, id_user, id_subscription, **kwargs):  # noqa: E501
        """Delete a subscription.  # noqa: E501

        It deletes a specific subscription.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_subscriptions_id_subscription_delete_with_http_info(id_user, id_subscription, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_subscription: (required)
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Subscription, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_subscription', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_subscriptions_id_subscription_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_subscriptions_id_subscription_delete`")  # noqa: E501
        # verify the required parameter 'id_subscription' is set
        if ('id_subscription' not in local_var_params or
                local_var_params['id_subscription'] is None):
            raise ApiValueError("Missing the required parameter `id_subscription` when calling `users_id_user_subscriptions_id_subscription_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_subscription' in local_var_params:
            path_params['id_subscription'] = local_var_params['id_subscription']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/subscriptions/{id_subscription}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Subscription',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_subscriptions_id_subscription_documents_delete(self, id_user, id_subscription, **kwargs):  # noqa: E501
        """Delete documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_subscriptions_id_subscription_documents_delete(id_user, id_subscription, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_subscription: (required)
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_subscriptions_id_subscription_documents_delete_with_http_info(id_user, id_subscription, **kwargs)  # noqa: E501

    def users_id_user_subscriptions_id_subscription_documents_delete_with_http_info(self, id_user, id_subscription, **kwargs):  # noqa: E501
        """Delete documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_subscriptions_id_subscription_documents_delete_with_http_info(id_user, id_subscription, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_subscription: (required)
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Document, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_subscription', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_subscriptions_id_subscription_documents_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_subscriptions_id_subscription_documents_delete`")  # noqa: E501
        # verify the required parameter 'id_subscription' is set
        if ('id_subscription' not in local_var_params or
                local_var_params['id_subscription'] is None):
            raise ApiValueError("Missing the required parameter `id_subscription` when calling `users_id_user_subscriptions_id_subscription_documents_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_subscription' in local_var_params:
            path_params['id_subscription'] = local_var_params['id_subscription']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/subscriptions/{id_subscription}/documents', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_subscriptions_id_subscription_documents_get(self, id_user, id_subscription, **kwargs):  # noqa: E501
        """Get documents  # noqa: E501

        Get list of documents<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_subscriptions_id_subscription_documents_get(id_user, id_subscription, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_subscription: (required)
        :param int limit: limit number of results
        :param int offset: offset of first result
        :param date min_date: minimal (inclusive) date
        :param date max_date: maximum (inclusive) date
        :param float min_amount: minimal (inclusive) amount
        :param float max_amount: maximumd (inclusive) amount
        :param float min_timestamp: minimal (inclusive) timestamp
        :param float max_timestamp: maximum (inclusive) timestamp
        :param int id_type: filter with a document type
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_subscriptions_id_subscription_documents_get_with_http_info(id_user, id_subscription, **kwargs)  # noqa: E501

    def users_id_user_subscriptions_id_subscription_documents_get_with_http_info(self, id_user, id_subscription, **kwargs):  # noqa: E501
        """Get documents  # noqa: E501

        Get list of documents<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_subscriptions_id_subscription_documents_get_with_http_info(id_user, id_subscription, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_subscription: (required)
        :param int limit: limit number of results
        :param int offset: offset of first result
        :param date min_date: minimal (inclusive) date
        :param date max_date: maximum (inclusive) date
        :param float min_amount: minimal (inclusive) amount
        :param float max_amount: maximumd (inclusive) amount
        :param float min_timestamp: minimal (inclusive) timestamp
        :param float max_timestamp: maximum (inclusive) timestamp
        :param int id_type: filter with a document type
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(InlineResponse20015, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_subscription', 'limit', 'offset', 'min_date', 'max_date', 'min_amount', 'max_amount', 'min_timestamp', 'max_timestamp', 'id_type', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_subscriptions_id_subscription_documents_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_subscriptions_id_subscription_documents_get`")  # noqa: E501
        # verify the required parameter 'id_subscription' is set
        if ('id_subscription' not in local_var_params or
                local_var_params['id_subscription'] is None):
            raise ApiValueError("Missing the required parameter `id_subscription` when calling `users_id_user_subscriptions_id_subscription_documents_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_subscription' in local_var_params:
            path_params['id_subscription'] = local_var_params['id_subscription']  # noqa: E501

        query_params = []
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params:
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'min_date' in local_var_params:
            query_params.append(('min_date', local_var_params['min_date']))  # noqa: E501
        if 'max_date' in local_var_params:
            query_params.append(('max_date', local_var_params['max_date']))  # noqa: E501
        if 'min_amount' in local_var_params:
            query_params.append(('min_amount', local_var_params['min_amount']))  # noqa: E501
        if 'max_amount' in local_var_params:
            query_params.append(('max_amount', local_var_params['max_amount']))  # noqa: E501
        if 'min_timestamp' in local_var_params:
            query_params.append(('min_timestamp', local_var_params['min_timestamp']))  # noqa: E501
        if 'max_timestamp' in local_var_params:
            query_params.append(('max_timestamp', local_var_params['max_timestamp']))  # noqa: E501
        if 'id_type' in local_var_params:
            query_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/subscriptions/{id_subscription}/documents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20015',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_subscriptions_id_subscription_documents_id_document_delete(self, id_user, id_subscription, id_document, **kwargs):  # noqa: E501
        """Delete a document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_subscriptions_id_subscription_documents_id_document_delete(id_user, id_subscription, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_subscription: (required)
        :param int id_document: (required)
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_subscriptions_id_subscription_documents_id_document_delete_with_http_info(id_user, id_subscription, id_document, **kwargs)  # noqa: E501

    def users_id_user_subscriptions_id_subscription_documents_id_document_delete_with_http_info(self, id_user, id_subscription, id_document, **kwargs):  # noqa: E501
        """Delete a document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_subscriptions_id_subscription_documents_id_document_delete_with_http_info(id_user, id_subscription, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_subscription: (required)
        :param int id_document: (required)
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Document, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_subscription', 'id_document', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_subscriptions_id_subscription_documents_id_document_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_subscriptions_id_subscription_documents_id_document_delete`")  # noqa: E501
        # verify the required parameter 'id_subscription' is set
        if ('id_subscription' not in local_var_params or
                local_var_params['id_subscription'] is None):
            raise ApiValueError("Missing the required parameter `id_subscription` when calling `users_id_user_subscriptions_id_subscription_documents_id_document_delete`")  # noqa: E501
        # verify the required parameter 'id_document' is set
        if ('id_document' not in local_var_params or
                local_var_params['id_document'] is None):
            raise ApiValueError("Missing the required parameter `id_document` when calling `users_id_user_subscriptions_id_subscription_documents_id_document_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_subscription' in local_var_params:
            path_params['id_subscription'] = local_var_params['id_subscription']  # noqa: E501
        if 'id_document' in local_var_params:
            path_params['id_document'] = local_var_params['id_document']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/subscriptions/{id_subscription}/documents/{id_document}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_subscriptions_id_subscription_documents_id_document_put(self, id_user, id_subscription, id_document, **kwargs):  # noqa: E501
        """Edit a document  # noqa: E501

        Edit meta-data of a specific document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_subscriptions_id_subscription_documents_id_document_put(id_user, id_subscription, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_subscription: (required)
        :param int id_document: (required)
        :param str expand:
        :param date date: Date of document
        :param date duedate: Due date of document
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_type: Type of this document
        :param int income: Is an income or an outcome
        :param str name: Name of the document
        :param int readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_subscriptions_id_subscription_documents_id_document_put_with_http_info(id_user, id_subscription, id_document, **kwargs)  # noqa: E501

    def users_id_user_subscriptions_id_subscription_documents_id_document_put_with_http_info(self, id_user, id_subscription, id_document, **kwargs):  # noqa: E501
        """Edit a document  # noqa: E501

        Edit meta-data of a specific document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_subscriptions_id_subscription_documents_id_document_put_with_http_info(id_user, id_subscription, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_subscription: (required)
        :param int id_document: (required)
        :param str expand:
        :param date date: Date of document
        :param date duedate: Due date of document
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_type: Type of this document
        :param int income: Is an income or an outcome
        :param str name: Name of the document
        :param int readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Document, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_subscription', 'id_document', 'expand', 'date', 'duedate', 'file', 'id_category', 'id_type', 'income', 'name', 'readonly', 'total_amount', 'untaxed_amount', 'vat']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_subscriptions_id_subscription_documents_id_document_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_subscriptions_id_subscription_documents_id_document_put`")  # noqa: E501
        # verify the required parameter 'id_subscription' is set
        if ('id_subscription' not in local_var_params or
                local_var_params['id_subscription'] is None):
            raise ApiValueError("Missing the required parameter `id_subscription` when calling `users_id_user_subscriptions_id_subscription_documents_id_document_put`")  # noqa: E501
        # verify the required parameter 'id_document' is set
        if ('id_document' not in local_var_params or
                local_var_params['id_document'] is None):
            raise ApiValueError("Missing the required parameter `id_document` when calling `users_id_user_subscriptions_id_subscription_documents_id_document_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_subscription' in local_var_params:
            path_params['id_subscription'] = local_var_params['id_subscription']  # noqa: E501
        if 'id_document' in local_var_params:
            path_params['id_document'] = local_var_params['id_document']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'date' in local_var_params:
            form_params.append(('date', local_var_params['date']))  # noqa: E501
        if 'duedate' in local_var_params:
            form_params.append(('duedate', local_var_params['duedate']))  # noqa: E501
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501
        if 'id_category' in local_var_params:
            form_params.append(('id_category', local_var_params['id_category']))  # noqa: E501
        if 'id_type' in local_var_params:
            form_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'income' in local_var_params:
            form_params.append(('income', local_var_params['income']))  # noqa: E501
        if 'name' in local_var_params:
            form_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'readonly' in local_var_params:
            form_params.append(('readonly', local_var_params['readonly']))  # noqa: E501
        if 'total_amount' in local_var_params:
            form_params.append(('total_amount', local_var_params['total_amount']))  # noqa: E501
        if 'untaxed_amount' in local_var_params:
            form_params.append(('untaxed_amount', local_var_params['untaxed_amount']))  # noqa: E501
        if 'vat' in local_var_params:
            form_params.append(('vat', local_var_params['vat']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/subscriptions/{id_subscription}/documents/{id_document}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_subscriptions_id_subscription_documents_post(self, id_user, id_subscription, date, duedate, **kwargs):  # noqa: E501
        """Add a new document  # noqa: E501

        Add a new document<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_subscriptions_id_subscription_documents_post(id_user, id_subscription, date, duedate, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_subscription: (required)
        :param date date: Date of document (required)
        :param date duedate: Due date of document (required)
        :param str expand:
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_ocr: Related OCR process
        :param int id_type: Type of this document
        :param bool income: Is an income or an outcome
        :param str name: Name of the document
        :param bool readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_subscriptions_id_subscription_documents_post_with_http_info(id_user, id_subscription, date, duedate, **kwargs)  # noqa: E501

    def users_id_user_subscriptions_id_subscription_documents_post_with_http_info(self, id_user, id_subscription, date, duedate, **kwargs):  # noqa: E501
        """Add a new document  # noqa: E501

        Add a new document<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_subscriptions_id_subscription_documents_post_with_http_info(id_user, id_subscription, date, duedate, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_subscription: (required)
        :param date date: Date of document (required)
        :param date duedate: Due date of document (required)
        :param str expand:
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_ocr: Related OCR process
        :param int id_type: Type of this document
        :param bool income: Is an income or an outcome
        :param str name: Name of the document
        :param bool readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Document, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_subscription', 'date', 'duedate', 'expand', 'file', 'id_category', 'id_ocr', 'id_type', 'income', 'name', 'readonly', 'total_amount', 'untaxed_amount', 'vat']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_subscriptions_id_subscription_documents_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_subscriptions_id_subscription_documents_post`")  # noqa: E501
        # verify the required parameter 'id_subscription' is set
        if ('id_subscription' not in local_var_params or
                local_var_params['id_subscription'] is None):
            raise ApiValueError("Missing the required parameter `id_subscription` when calling `users_id_user_subscriptions_id_subscription_documents_post`")  # noqa: E501
        # verify the required parameter 'date' is set
        if ('date' not in local_var_params or
                local_var_params['date'] is None):
            raise ApiValueError("Missing the required parameter `date` when calling `users_id_user_subscriptions_id_subscription_documents_post`")  # noqa: E501
        # verify the required parameter 'duedate' is set
        if ('duedate' not in local_var_params or
                local_var_params['duedate'] is None):
            raise ApiValueError("Missing the required parameter `duedate` when calling `users_id_user_subscriptions_id_subscription_documents_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_subscription' in local_var_params:
            path_params['id_subscription'] = local_var_params['id_subscription']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'date' in local_var_params:
            form_params.append(('date', local_var_params['date']))  # noqa: E501
        if 'duedate' in local_var_params:
            form_params.append(('duedate', local_var_params['duedate']))  # noqa: E501
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501
        if 'id_category' in local_var_params:
            form_params.append(('id_category', local_var_params['id_category']))  # noqa: E501
        if 'id_ocr' in local_var_params:
            form_params.append(('id_ocr', local_var_params['id_ocr']))  # noqa: E501
        if 'id_type' in local_var_params:
            form_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'income' in local_var_params:
            form_params.append(('income', local_var_params['income']))  # noqa: E501
        if 'name' in local_var_params:
            form_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'readonly' in local_var_params:
            form_params.append(('readonly', local_var_params['readonly']))  # noqa: E501
        if 'total_amount' in local_var_params:
            form_params.append(('total_amount', local_var_params['total_amount']))  # noqa: E501
        if 'untaxed_amount' in local_var_params:
            form_params.append(('untaxed_amount', local_var_params['untaxed_amount']))  # noqa: E501
        if 'vat' in local_var_params:
            form_params.append(('vat', local_var_params['vat']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/subscriptions/{id_subscription}/documents', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_subscriptions_id_subscription_documents_put(self, id_user, id_subscription, id_document, **kwargs):  # noqa: E501
        """Attach an existing document to a transaction or a transactions_cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_subscriptions_id_subscription_documents_put(id_user, id_subscription, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_subscription: (required)
        :param int id_document: id of the document you want to attach the file to (required)
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_subscriptions_id_subscription_documents_put_with_http_info(id_user, id_subscription, id_document, **kwargs)  # noqa: E501

    def users_id_user_subscriptions_id_subscription_documents_put_with_http_info(self, id_user, id_subscription, id_document, **kwargs):  # noqa: E501
        """Attach an existing document to a transaction or a transactions_cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_subscriptions_id_subscription_documents_put_with_http_info(id_user, id_subscription, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_subscription: (required)
        :param int id_document: id of the document you want to attach the file to (required)
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Document, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_subscription', 'id_document', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_subscriptions_id_subscription_documents_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_subscriptions_id_subscription_documents_put`")  # noqa: E501
        # verify the required parameter 'id_subscription' is set
        if ('id_subscription' not in local_var_params or
                local_var_params['id_subscription'] is None):
            raise ApiValueError("Missing the required parameter `id_subscription` when calling `users_id_user_subscriptions_id_subscription_documents_put`")  # noqa: E501
        # verify the required parameter 'id_document' is set
        if ('id_document' not in local_var_params or
                local_var_params['id_document'] is None):
            raise ApiValueError("Missing the required parameter `id_document` when calling `users_id_user_subscriptions_id_subscription_documents_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_subscription' in local_var_params:
            path_params['id_subscription'] = local_var_params['id_subscription']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'id_document' in local_var_params:
            form_params.append(('id_document', local_var_params['id_document']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/subscriptions/{id_subscription}/documents', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_subscriptions_id_subscription_put(self, id_user, id_subscription, **kwargs):  # noqa: E501
        """Update a subscription  # noqa: E501

        It updates a specific subscription<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_subscriptions_id_subscription_put(id_user, id_subscription, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_subscription: (required)
        :param str expand:
        :param bool disabled: If the subscription is disabled (not synchronized)
        :param str name: Label of the subscription
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Subscription
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_subscriptions_id_subscription_put_with_http_info(id_user, id_subscription, **kwargs)  # noqa: E501

    def users_id_user_subscriptions_id_subscription_put_with_http_info(self, id_user, id_subscription, **kwargs):  # noqa: E501
        """Update a subscription  # noqa: E501

        It updates a specific subscription<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_subscriptions_id_subscription_put_with_http_info(id_user, id_subscription, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_subscription: (required)
        :param str expand:
        :param bool disabled: If the subscription is disabled (not synchronized)
        :param str name: Label of the subscription
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Subscription, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_subscription', 'expand', 'disabled', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_subscriptions_id_subscription_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_subscriptions_id_subscription_put`")  # noqa: E501
        # verify the required parameter 'id_subscription' is set
        if ('id_subscription' not in local_var_params or
                local_var_params['id_subscription'] is None):
            raise ApiValueError("Missing the required parameter `id_subscription` when calling `users_id_user_subscriptions_id_subscription_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_subscription' in local_var_params:
            path_params['id_subscription'] = local_var_params['id_subscription']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'disabled' in local_var_params:
            form_params.append(('disabled', local_var_params['disabled']))  # noqa: E501
        if 'name' in local_var_params:
            form_params.append(('name', local_var_params['name']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/subscriptions/{id_subscription}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Subscription',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_transactions_id_transaction_documents_delete(self, id_user, id_transaction, **kwargs):  # noqa: E501
        """Delete documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_transactions_id_transaction_documents_delete(id_user, id_transaction, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_transaction: (required)
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_transactions_id_transaction_documents_delete_with_http_info(id_user, id_transaction, **kwargs)  # noqa: E501

    def users_id_user_transactions_id_transaction_documents_delete_with_http_info(self, id_user, id_transaction, **kwargs):  # noqa: E501
        """Delete documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_transactions_id_transaction_documents_delete_with_http_info(id_user, id_transaction, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_transaction: (required)
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Document, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_transaction', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_transactions_id_transaction_documents_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_transactions_id_transaction_documents_delete`")  # noqa: E501
        # verify the required parameter 'id_transaction' is set
        if ('id_transaction' not in local_var_params or
                local_var_params['id_transaction'] is None):
            raise ApiValueError("Missing the required parameter `id_transaction` when calling `users_id_user_transactions_id_transaction_documents_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_transaction' in local_var_params:
            path_params['id_transaction'] = local_var_params['id_transaction']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/transactions/{id_transaction}/documents', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_transactions_id_transaction_documents_get(self, id_user, id_transaction, **kwargs):  # noqa: E501
        """Get documents  # noqa: E501

        Get list of documents<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_transactions_id_transaction_documents_get(id_user, id_transaction, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_transaction: (required)
        :param int limit: limit number of results
        :param int offset: offset of first result
        :param date min_date: minimal (inclusive) date
        :param date max_date: maximum (inclusive) date
        :param float min_amount: minimal (inclusive) amount
        :param float max_amount: maximumd (inclusive) amount
        :param float min_timestamp: minimal (inclusive) timestamp
        :param float max_timestamp: maximum (inclusive) timestamp
        :param int id_type: filter with a document type
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_transactions_id_transaction_documents_get_with_http_info(id_user, id_transaction, **kwargs)  # noqa: E501

    def users_id_user_transactions_id_transaction_documents_get_with_http_info(self, id_user, id_transaction, **kwargs):  # noqa: E501
        """Get documents  # noqa: E501

        Get list of documents<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_transactions_id_transaction_documents_get_with_http_info(id_user, id_transaction, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_transaction: (required)
        :param int limit: limit number of results
        :param int offset: offset of first result
        :param date min_date: minimal (inclusive) date
        :param date max_date: maximum (inclusive) date
        :param float min_amount: minimal (inclusive) amount
        :param float max_amount: maximumd (inclusive) amount
        :param float min_timestamp: minimal (inclusive) timestamp
        :param float max_timestamp: maximum (inclusive) timestamp
        :param int id_type: filter with a document type
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(InlineResponse20015, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_transaction', 'limit', 'offset', 'min_date', 'max_date', 'min_amount', 'max_amount', 'min_timestamp', 'max_timestamp', 'id_type', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_transactions_id_transaction_documents_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_transactions_id_transaction_documents_get`")  # noqa: E501
        # verify the required parameter 'id_transaction' is set
        if ('id_transaction' not in local_var_params or
                local_var_params['id_transaction'] is None):
            raise ApiValueError("Missing the required parameter `id_transaction` when calling `users_id_user_transactions_id_transaction_documents_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_transaction' in local_var_params:
            path_params['id_transaction'] = local_var_params['id_transaction']  # noqa: E501

        query_params = []
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params:
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'min_date' in local_var_params:
            query_params.append(('min_date', local_var_params['min_date']))  # noqa: E501
        if 'max_date' in local_var_params:
            query_params.append(('max_date', local_var_params['max_date']))  # noqa: E501
        if 'min_amount' in local_var_params:
            query_params.append(('min_amount', local_var_params['min_amount']))  # noqa: E501
        if 'max_amount' in local_var_params:
            query_params.append(('max_amount', local_var_params['max_amount']))  # noqa: E501
        if 'min_timestamp' in local_var_params:
            query_params.append(('min_timestamp', local_var_params['min_timestamp']))  # noqa: E501
        if 'max_timestamp' in local_var_params:
            query_params.append(('max_timestamp', local_var_params['max_timestamp']))  # noqa: E501
        if 'id_type' in local_var_params:
            query_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/transactions/{id_transaction}/documents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20015',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_transactions_id_transaction_documents_id_document_delete(self, id_user, id_transaction, id_document, **kwargs):  # noqa: E501
        """Delete a document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_transactions_id_transaction_documents_id_document_delete(id_user, id_transaction, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_transaction: (required)
        :param int id_document: (required)
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_transactions_id_transaction_documents_id_document_delete_with_http_info(id_user, id_transaction, id_document, **kwargs)  # noqa: E501

    def users_id_user_transactions_id_transaction_documents_id_document_delete_with_http_info(self, id_user, id_transaction, id_document, **kwargs):  # noqa: E501
        """Delete a document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_transactions_id_transaction_documents_id_document_delete_with_http_info(id_user, id_transaction, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_transaction: (required)
        :param int id_document: (required)
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Document, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_transaction', 'id_document', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_transactions_id_transaction_documents_id_document_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_transactions_id_transaction_documents_id_document_delete`")  # noqa: E501
        # verify the required parameter 'id_transaction' is set
        if ('id_transaction' not in local_var_params or
                local_var_params['id_transaction'] is None):
            raise ApiValueError("Missing the required parameter `id_transaction` when calling `users_id_user_transactions_id_transaction_documents_id_document_delete`")  # noqa: E501
        # verify the required parameter 'id_document' is set
        if ('id_document' not in local_var_params or
                local_var_params['id_document'] is None):
            raise ApiValueError("Missing the required parameter `id_document` when calling `users_id_user_transactions_id_transaction_documents_id_document_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_transaction' in local_var_params:
            path_params['id_transaction'] = local_var_params['id_transaction']  # noqa: E501
        if 'id_document' in local_var_params:
            path_params['id_document'] = local_var_params['id_document']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/transactions/{id_transaction}/documents/{id_document}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_transactions_id_transaction_documents_id_document_put(self, id_user, id_transaction, id_document, **kwargs):  # noqa: E501
        """Edit a document  # noqa: E501

        Edit meta-data of a specific document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_transactions_id_transaction_documents_id_document_put(id_user, id_transaction, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_transaction: (required)
        :param int id_document: (required)
        :param str expand:
        :param date date: Date of document
        :param date duedate: Due date of document
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_type: Type of this document
        :param int income: Is an income or an outcome
        :param str name: Name of the document
        :param int readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_transactions_id_transaction_documents_id_document_put_with_http_info(id_user, id_transaction, id_document, **kwargs)  # noqa: E501

    def users_id_user_transactions_id_transaction_documents_id_document_put_with_http_info(self, id_user, id_transaction, id_document, **kwargs):  # noqa: E501
        """Edit a document  # noqa: E501

        Edit meta-data of a specific document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_transactions_id_transaction_documents_id_document_put_with_http_info(id_user, id_transaction, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_transaction: (required)
        :param int id_document: (required)
        :param str expand:
        :param date date: Date of document
        :param date duedate: Due date of document
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_type: Type of this document
        :param int income: Is an income or an outcome
        :param str name: Name of the document
        :param int readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Document, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_transaction', 'id_document', 'expand', 'date', 'duedate', 'file', 'id_category', 'id_type', 'income', 'name', 'readonly', 'total_amount', 'untaxed_amount', 'vat']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_transactions_id_transaction_documents_id_document_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_transactions_id_transaction_documents_id_document_put`")  # noqa: E501
        # verify the required parameter 'id_transaction' is set
        if ('id_transaction' not in local_var_params or
                local_var_params['id_transaction'] is None):
            raise ApiValueError("Missing the required parameter `id_transaction` when calling `users_id_user_transactions_id_transaction_documents_id_document_put`")  # noqa: E501
        # verify the required parameter 'id_document' is set
        if ('id_document' not in local_var_params or
                local_var_params['id_document'] is None):
            raise ApiValueError("Missing the required parameter `id_document` when calling `users_id_user_transactions_id_transaction_documents_id_document_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_transaction' in local_var_params:
            path_params['id_transaction'] = local_var_params['id_transaction']  # noqa: E501
        if 'id_document' in local_var_params:
            path_params['id_document'] = local_var_params['id_document']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'date' in local_var_params:
            form_params.append(('date', local_var_params['date']))  # noqa: E501
        if 'duedate' in local_var_params:
            form_params.append(('duedate', local_var_params['duedate']))  # noqa: E501
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501
        if 'id_category' in local_var_params:
            form_params.append(('id_category', local_var_params['id_category']))  # noqa: E501
        if 'id_type' in local_var_params:
            form_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'income' in local_var_params:
            form_params.append(('income', local_var_params['income']))  # noqa: E501
        if 'name' in local_var_params:
            form_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'readonly' in local_var_params:
            form_params.append(('readonly', local_var_params['readonly']))  # noqa: E501
        if 'total_amount' in local_var_params:
            form_params.append(('total_amount', local_var_params['total_amount']))  # noqa: E501
        if 'untaxed_amount' in local_var_params:
            form_params.append(('untaxed_amount', local_var_params['untaxed_amount']))  # noqa: E501
        if 'vat' in local_var_params:
            form_params.append(('vat', local_var_params['vat']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/transactions/{id_transaction}/documents/{id_document}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_transactions_id_transaction_documents_post(self, id_user, id_transaction, date, duedate, **kwargs):  # noqa: E501
        """Add a new document  # noqa: E501

        Add a new document<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_transactions_id_transaction_documents_post(id_user, id_transaction, date, duedate, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_transaction: (required)
        :param date date: Date of document (required)
        :param date duedate: Due date of document (required)
        :param str expand:
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_ocr: Related OCR process
        :param int id_type: Type of this document
        :param bool income: Is an income or an outcome
        :param str name: Name of the document
        :param bool readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_transactions_id_transaction_documents_post_with_http_info(id_user, id_transaction, date, duedate, **kwargs)  # noqa: E501

    def users_id_user_transactions_id_transaction_documents_post_with_http_info(self, id_user, id_transaction, date, duedate, **kwargs):  # noqa: E501
        """Add a new document  # noqa: E501

        Add a new document<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_transactions_id_transaction_documents_post_with_http_info(id_user, id_transaction, date, duedate, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_transaction: (required)
        :param date date: Date of document (required)
        :param date duedate: Due date of document (required)
        :param str expand:
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_ocr: Related OCR process
        :param int id_type: Type of this document
        :param bool income: Is an income or an outcome
        :param str name: Name of the document
        :param bool readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Document, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_transaction', 'date', 'duedate', 'expand', 'file', 'id_category', 'id_ocr', 'id_type', 'income', 'name', 'readonly', 'total_amount', 'untaxed_amount', 'vat']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_transactions_id_transaction_documents_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_transactions_id_transaction_documents_post`")  # noqa: E501
        # verify the required parameter 'id_transaction' is set
        if ('id_transaction' not in local_var_params or
                local_var_params['id_transaction'] is None):
            raise ApiValueError("Missing the required parameter `id_transaction` when calling `users_id_user_transactions_id_transaction_documents_post`")  # noqa: E501
        # verify the required parameter 'date' is set
        if ('date' not in local_var_params or
                local_var_params['date'] is None):
            raise ApiValueError("Missing the required parameter `date` when calling `users_id_user_transactions_id_transaction_documents_post`")  # noqa: E501
        # verify the required parameter 'duedate' is set
        if ('duedate' not in local_var_params or
                local_var_params['duedate'] is None):
            raise ApiValueError("Missing the required parameter `duedate` when calling `users_id_user_transactions_id_transaction_documents_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_transaction' in local_var_params:
            path_params['id_transaction'] = local_var_params['id_transaction']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'date' in local_var_params:
            form_params.append(('date', local_var_params['date']))  # noqa: E501
        if 'duedate' in local_var_params:
            form_params.append(('duedate', local_var_params['duedate']))  # noqa: E501
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501
        if 'id_category' in local_var_params:
            form_params.append(('id_category', local_var_params['id_category']))  # noqa: E501
        if 'id_ocr' in local_var_params:
            form_params.append(('id_ocr', local_var_params['id_ocr']))  # noqa: E501
        if 'id_type' in local_var_params:
            form_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'income' in local_var_params:
            form_params.append(('income', local_var_params['income']))  # noqa: E501
        if 'name' in local_var_params:
            form_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'readonly' in local_var_params:
            form_params.append(('readonly', local_var_params['readonly']))  # noqa: E501
        if 'total_amount' in local_var_params:
            form_params.append(('total_amount', local_var_params['total_amount']))  # noqa: E501
        if 'untaxed_amount' in local_var_params:
            form_params.append(('untaxed_amount', local_var_params['untaxed_amount']))  # noqa: E501
        if 'vat' in local_var_params:
            form_params.append(('vat', local_var_params['vat']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/transactions/{id_transaction}/documents', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_transactions_id_transaction_documents_put(self, id_user, id_transaction, id_document, **kwargs):  # noqa: E501
        """Attach an existing document to a transaction or a transactions_cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_transactions_id_transaction_documents_put(id_user, id_transaction, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_transaction: (required)
        :param int id_document: id of the document you want to attach the file to (required)
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_transactions_id_transaction_documents_put_with_http_info(id_user, id_transaction, id_document, **kwargs)  # noqa: E501

    def users_id_user_transactions_id_transaction_documents_put_with_http_info(self, id_user, id_transaction, id_document, **kwargs):  # noqa: E501
        """Attach an existing document to a transaction or a transactions_cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_transactions_id_transaction_documents_put_with_http_info(id_user, id_transaction, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_transaction: (required)
        :param int id_document: id of the document you want to attach the file to (required)
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Document, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_transaction', 'id_document', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_transactions_id_transaction_documents_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_transactions_id_transaction_documents_put`")  # noqa: E501
        # verify the required parameter 'id_transaction' is set
        if ('id_transaction' not in local_var_params or
                local_var_params['id_transaction'] is None):
            raise ApiValueError("Missing the required parameter `id_transaction` when calling `users_id_user_transactions_id_transaction_documents_put`")  # noqa: E501
        # verify the required parameter 'id_document' is set
        if ('id_document' not in local_var_params or
                local_var_params['id_document'] is None):
            raise ApiValueError("Missing the required parameter `id_document` when calling `users_id_user_transactions_id_transaction_documents_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_transaction' in local_var_params:
            path_params['id_transaction'] = local_var_params['id_transaction']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'id_document' in local_var_params:
            form_params.append(('id_document', local_var_params['id_document']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/transactions/{id_transaction}/documents', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_transactionsclusters_id_transactions_cluster_documents_delete(self, id_user, id_transactions_cluster, **kwargs):  # noqa: E501
        """Delete documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_transactionsclusters_id_transactions_cluster_documents_delete(id_user, id_transactions_cluster, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_transactions_cluster: (required)
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_transactionsclusters_id_transactions_cluster_documents_delete_with_http_info(id_user, id_transactions_cluster, **kwargs)  # noqa: E501

    def users_id_user_transactionsclusters_id_transactions_cluster_documents_delete_with_http_info(self, id_user, id_transactions_cluster, **kwargs):  # noqa: E501
        """Delete documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_transactionsclusters_id_transactions_cluster_documents_delete_with_http_info(id_user, id_transactions_cluster, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_transactions_cluster: (required)
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Document, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_transactions_cluster', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_transactionsclusters_id_transactions_cluster_documents_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_transactionsclusters_id_transactions_cluster_documents_delete`")  # noqa: E501
        # verify the required parameter 'id_transactions_cluster' is set
        if ('id_transactions_cluster' not in local_var_params or
                local_var_params['id_transactions_cluster'] is None):
            raise ApiValueError("Missing the required parameter `id_transactions_cluster` when calling `users_id_user_transactionsclusters_id_transactions_cluster_documents_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_transactions_cluster' in local_var_params:
            path_params['id_transactions_cluster'] = local_var_params['id_transactions_cluster']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/transactionsclusters/{id_transactions_cluster}/documents', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_transactionsclusters_id_transactions_cluster_documents_get(self, id_user, id_transactions_cluster, **kwargs):  # noqa: E501
        """Get documents  # noqa: E501

        Get list of documents<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_transactionsclusters_id_transactions_cluster_documents_get(id_user, id_transactions_cluster, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_transactions_cluster: (required)
        :param int limit: limit number of results
        :param int offset: offset of first result
        :param date min_date: minimal (inclusive) date
        :param date max_date: maximum (inclusive) date
        :param float min_amount: minimal (inclusive) amount
        :param float max_amount: maximumd (inclusive) amount
        :param float min_timestamp: minimal (inclusive) timestamp
        :param float max_timestamp: maximum (inclusive) timestamp
        :param int id_type: filter with a document type
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_transactionsclusters_id_transactions_cluster_documents_get_with_http_info(id_user, id_transactions_cluster, **kwargs)  # noqa: E501

    def users_id_user_transactionsclusters_id_transactions_cluster_documents_get_with_http_info(self, id_user, id_transactions_cluster, **kwargs):  # noqa: E501
        """Get documents  # noqa: E501

        Get list of documents<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_transactionsclusters_id_transactions_cluster_documents_get_with_http_info(id_user, id_transactions_cluster, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_transactions_cluster: (required)
        :param int limit: limit number of results
        :param int offset: offset of first result
        :param date min_date: minimal (inclusive) date
        :param date max_date: maximum (inclusive) date
        :param float min_amount: minimal (inclusive) amount
        :param float max_amount: maximumd (inclusive) amount
        :param float min_timestamp: minimal (inclusive) timestamp
        :param float max_timestamp: maximum (inclusive) timestamp
        :param int id_type: filter with a document type
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(InlineResponse20015, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_transactions_cluster', 'limit', 'offset', 'min_date', 'max_date', 'min_amount', 'max_amount', 'min_timestamp', 'max_timestamp', 'id_type', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_transactionsclusters_id_transactions_cluster_documents_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_transactionsclusters_id_transactions_cluster_documents_get`")  # noqa: E501
        # verify the required parameter 'id_transactions_cluster' is set
        if ('id_transactions_cluster' not in local_var_params or
                local_var_params['id_transactions_cluster'] is None):
            raise ApiValueError("Missing the required parameter `id_transactions_cluster` when calling `users_id_user_transactionsclusters_id_transactions_cluster_documents_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_transactions_cluster' in local_var_params:
            path_params['id_transactions_cluster'] = local_var_params['id_transactions_cluster']  # noqa: E501

        query_params = []
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params:
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'min_date' in local_var_params:
            query_params.append(('min_date', local_var_params['min_date']))  # noqa: E501
        if 'max_date' in local_var_params:
            query_params.append(('max_date', local_var_params['max_date']))  # noqa: E501
        if 'min_amount' in local_var_params:
            query_params.append(('min_amount', local_var_params['min_amount']))  # noqa: E501
        if 'max_amount' in local_var_params:
            query_params.append(('max_amount', local_var_params['max_amount']))  # noqa: E501
        if 'min_timestamp' in local_var_params:
            query_params.append(('min_timestamp', local_var_params['min_timestamp']))  # noqa: E501
        if 'max_timestamp' in local_var_params:
            query_params.append(('max_timestamp', local_var_params['max_timestamp']))  # noqa: E501
        if 'id_type' in local_var_params:
            query_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/transactionsclusters/{id_transactions_cluster}/documents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20015',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_transactionsclusters_id_transactions_cluster_documents_id_document_delete(self, id_user, id_transactions_cluster, id_document, **kwargs):  # noqa: E501
        """Delete a document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_transactionsclusters_id_transactions_cluster_documents_id_document_delete(id_user, id_transactions_cluster, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_transactions_cluster: (required)
        :param int id_document: (required)
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_transactionsclusters_id_transactions_cluster_documents_id_document_delete_with_http_info(id_user, id_transactions_cluster, id_document, **kwargs)  # noqa: E501

    def users_id_user_transactionsclusters_id_transactions_cluster_documents_id_document_delete_with_http_info(self, id_user, id_transactions_cluster, id_document, **kwargs):  # noqa: E501
        """Delete a document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_transactionsclusters_id_transactions_cluster_documents_id_document_delete_with_http_info(id_user, id_transactions_cluster, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_transactions_cluster: (required)
        :param int id_document: (required)
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Document, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_transactions_cluster', 'id_document', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_transactionsclusters_id_transactions_cluster_documents_id_document_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_transactionsclusters_id_transactions_cluster_documents_id_document_delete`")  # noqa: E501
        # verify the required parameter 'id_transactions_cluster' is set
        if ('id_transactions_cluster' not in local_var_params or
                local_var_params['id_transactions_cluster'] is None):
            raise ApiValueError("Missing the required parameter `id_transactions_cluster` when calling `users_id_user_transactionsclusters_id_transactions_cluster_documents_id_document_delete`")  # noqa: E501
        # verify the required parameter 'id_document' is set
        if ('id_document' not in local_var_params or
                local_var_params['id_document'] is None):
            raise ApiValueError("Missing the required parameter `id_document` when calling `users_id_user_transactionsclusters_id_transactions_cluster_documents_id_document_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_transactions_cluster' in local_var_params:
            path_params['id_transactions_cluster'] = local_var_params['id_transactions_cluster']  # noqa: E501
        if 'id_document' in local_var_params:
            path_params['id_document'] = local_var_params['id_document']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/transactionsclusters/{id_transactions_cluster}/documents/{id_document}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_transactionsclusters_id_transactions_cluster_documents_id_document_put(self, id_user, id_transactions_cluster, id_document, **kwargs):  # noqa: E501
        """Edit a document  # noqa: E501

        Edit meta-data of a specific document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_transactionsclusters_id_transactions_cluster_documents_id_document_put(id_user, id_transactions_cluster, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_transactions_cluster: (required)
        :param int id_document: (required)
        :param str expand:
        :param date date: Date of document
        :param date duedate: Due date of document
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_type: Type of this document
        :param int income: Is an income or an outcome
        :param str name: Name of the document
        :param int readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_transactionsclusters_id_transactions_cluster_documents_id_document_put_with_http_info(id_user, id_transactions_cluster, id_document, **kwargs)  # noqa: E501

    def users_id_user_transactionsclusters_id_transactions_cluster_documents_id_document_put_with_http_info(self, id_user, id_transactions_cluster, id_document, **kwargs):  # noqa: E501
        """Edit a document  # noqa: E501

        Edit meta-data of a specific document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_transactionsclusters_id_transactions_cluster_documents_id_document_put_with_http_info(id_user, id_transactions_cluster, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_transactions_cluster: (required)
        :param int id_document: (required)
        :param str expand:
        :param date date: Date of document
        :param date duedate: Due date of document
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_type: Type of this document
        :param int income: Is an income or an outcome
        :param str name: Name of the document
        :param int readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Document, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_transactions_cluster', 'id_document', 'expand', 'date', 'duedate', 'file', 'id_category', 'id_type', 'income', 'name', 'readonly', 'total_amount', 'untaxed_amount', 'vat']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_transactionsclusters_id_transactions_cluster_documents_id_document_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_transactionsclusters_id_transactions_cluster_documents_id_document_put`")  # noqa: E501
        # verify the required parameter 'id_transactions_cluster' is set
        if ('id_transactions_cluster' not in local_var_params or
                local_var_params['id_transactions_cluster'] is None):
            raise ApiValueError("Missing the required parameter `id_transactions_cluster` when calling `users_id_user_transactionsclusters_id_transactions_cluster_documents_id_document_put`")  # noqa: E501
        # verify the required parameter 'id_document' is set
        if ('id_document' not in local_var_params or
                local_var_params['id_document'] is None):
            raise ApiValueError("Missing the required parameter `id_document` when calling `users_id_user_transactionsclusters_id_transactions_cluster_documents_id_document_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_transactions_cluster' in local_var_params:
            path_params['id_transactions_cluster'] = local_var_params['id_transactions_cluster']  # noqa: E501
        if 'id_document' in local_var_params:
            path_params['id_document'] = local_var_params['id_document']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'date' in local_var_params:
            form_params.append(('date', local_var_params['date']))  # noqa: E501
        if 'duedate' in local_var_params:
            form_params.append(('duedate', local_var_params['duedate']))  # noqa: E501
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501
        if 'id_category' in local_var_params:
            form_params.append(('id_category', local_var_params['id_category']))  # noqa: E501
        if 'id_type' in local_var_params:
            form_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'income' in local_var_params:
            form_params.append(('income', local_var_params['income']))  # noqa: E501
        if 'name' in local_var_params:
            form_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'readonly' in local_var_params:
            form_params.append(('readonly', local_var_params['readonly']))  # noqa: E501
        if 'total_amount' in local_var_params:
            form_params.append(('total_amount', local_var_params['total_amount']))  # noqa: E501
        if 'untaxed_amount' in local_var_params:
            form_params.append(('untaxed_amount', local_var_params['untaxed_amount']))  # noqa: E501
        if 'vat' in local_var_params:
            form_params.append(('vat', local_var_params['vat']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/transactionsclusters/{id_transactions_cluster}/documents/{id_document}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_transactionsclusters_id_transactions_cluster_documents_post(self, id_user, id_transactions_cluster, date, duedate, **kwargs):  # noqa: E501
        """Add a new document  # noqa: E501

        Add a new document<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_transactionsclusters_id_transactions_cluster_documents_post(id_user, id_transactions_cluster, date, duedate, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_transactions_cluster: (required)
        :param date date: Date of document (required)
        :param date duedate: Due date of document (required)
        :param str expand:
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_ocr: Related OCR process
        :param int id_type: Type of this document
        :param bool income: Is an income or an outcome
        :param str name: Name of the document
        :param bool readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_transactionsclusters_id_transactions_cluster_documents_post_with_http_info(id_user, id_transactions_cluster, date, duedate, **kwargs)  # noqa: E501

    def users_id_user_transactionsclusters_id_transactions_cluster_documents_post_with_http_info(self, id_user, id_transactions_cluster, date, duedate, **kwargs):  # noqa: E501
        """Add a new document  # noqa: E501

        Add a new document<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_transactionsclusters_id_transactions_cluster_documents_post_with_http_info(id_user, id_transactions_cluster, date, duedate, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_transactions_cluster: (required)
        :param date date: Date of document (required)
        :param date duedate: Due date of document (required)
        :param str expand:
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_ocr: Related OCR process
        :param int id_type: Type of this document
        :param bool income: Is an income or an outcome
        :param str name: Name of the document
        :param bool readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Document, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_transactions_cluster', 'date', 'duedate', 'expand', 'file', 'id_category', 'id_ocr', 'id_type', 'income', 'name', 'readonly', 'total_amount', 'untaxed_amount', 'vat']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_transactionsclusters_id_transactions_cluster_documents_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_transactionsclusters_id_transactions_cluster_documents_post`")  # noqa: E501
        # verify the required parameter 'id_transactions_cluster' is set
        if ('id_transactions_cluster' not in local_var_params or
                local_var_params['id_transactions_cluster'] is None):
            raise ApiValueError("Missing the required parameter `id_transactions_cluster` when calling `users_id_user_transactionsclusters_id_transactions_cluster_documents_post`")  # noqa: E501
        # verify the required parameter 'date' is set
        if ('date' not in local_var_params or
                local_var_params['date'] is None):
            raise ApiValueError("Missing the required parameter `date` when calling `users_id_user_transactionsclusters_id_transactions_cluster_documents_post`")  # noqa: E501
        # verify the required parameter 'duedate' is set
        if ('duedate' not in local_var_params or
                local_var_params['duedate'] is None):
            raise ApiValueError("Missing the required parameter `duedate` when calling `users_id_user_transactionsclusters_id_transactions_cluster_documents_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_transactions_cluster' in local_var_params:
            path_params['id_transactions_cluster'] = local_var_params['id_transactions_cluster']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'date' in local_var_params:
            form_params.append(('date', local_var_params['date']))  # noqa: E501
        if 'duedate' in local_var_params:
            form_params.append(('duedate', local_var_params['duedate']))  # noqa: E501
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501
        if 'id_category' in local_var_params:
            form_params.append(('id_category', local_var_params['id_category']))  # noqa: E501
        if 'id_ocr' in local_var_params:
            form_params.append(('id_ocr', local_var_params['id_ocr']))  # noqa: E501
        if 'id_type' in local_var_params:
            form_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'income' in local_var_params:
            form_params.append(('income', local_var_params['income']))  # noqa: E501
        if 'name' in local_var_params:
            form_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'readonly' in local_var_params:
            form_params.append(('readonly', local_var_params['readonly']))  # noqa: E501
        if 'total_amount' in local_var_params:
            form_params.append(('total_amount', local_var_params['total_amount']))  # noqa: E501
        if 'untaxed_amount' in local_var_params:
            form_params.append(('untaxed_amount', local_var_params['untaxed_amount']))  # noqa: E501
        if 'vat' in local_var_params:
            form_params.append(('vat', local_var_params['vat']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/transactionsclusters/{id_transactions_cluster}/documents', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_transactionsclusters_id_transactions_cluster_documents_put(self, id_user, id_transactions_cluster, id_document, **kwargs):  # noqa: E501
        """Attach an existing document to a transaction or a transactions_cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_transactionsclusters_id_transactions_cluster_documents_put(id_user, id_transactions_cluster, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_transactions_cluster: (required)
        :param int id_document: id of the document you want to attach the file to (required)
        :param str expand:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_user_transactionsclusters_id_transactions_cluster_documents_put_with_http_info(id_user, id_transactions_cluster, id_document, **kwargs)  # noqa: E501

    def users_id_user_transactionsclusters_id_transactions_cluster_documents_put_with_http_info(self, id_user, id_transactions_cluster, id_document, **kwargs):  # noqa: E501
        """Attach an existing document to a transaction or a transactions_cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_transactionsclusters_id_transactions_cluster_documents_put_with_http_info(id_user, id_transactions_cluster, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_transactions_cluster: (required)
        :param int id_document: id of the document you want to attach the file to (required)
        :param str expand:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Document, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_transactions_cluster', 'id_document', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_transactionsclusters_id_transactions_cluster_documents_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ApiValueError("Missing the required parameter `id_user` when calling `users_id_user_transactionsclusters_id_transactions_cluster_documents_put`")  # noqa: E501
        # verify the required parameter 'id_transactions_cluster' is set
        if ('id_transactions_cluster' not in local_var_params or
                local_var_params['id_transactions_cluster'] is None):
            raise ApiValueError("Missing the required parameter `id_transactions_cluster` when calling `users_id_user_transactionsclusters_id_transactions_cluster_documents_put`")  # noqa: E501
        # verify the required parameter 'id_document' is set
        if ('id_document' not in local_var_params or
                local_var_params['id_document'] is None):
            raise ApiValueError("Missing the required parameter `id_document` when calling `users_id_user_transactionsclusters_id_transactions_cluster_documents_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_transactions_cluster' in local_var_params:
            path_params['id_transactions_cluster'] = local_var_params['id_transactions_cluster']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'id_document' in local_var_params:
            form_params.append(('id_document', local_var_params['id_document']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/transactionsclusters/{id_transactions_cluster}/documents', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
