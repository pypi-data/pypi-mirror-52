# coding: utf-8

"""
    Budgea API Documentation

    see https://www.budget-insight.com/budgea-api  # noqa: E501

    OpenAPI spec version: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from budgea.api_client import ApiClient


class TransfersApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def users_id_user_accounts_id_account_recipients_get(self, id_user, id_account, **kwargs):  # noqa: E501
        """Returns the list of recipients.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_recipients_get(id_user, id_account, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param str expand:
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_accounts_id_account_recipients_get_with_http_info(id_user, id_account, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_accounts_id_account_recipients_get_with_http_info(id_user, id_account, **kwargs)  # noqa: E501
            return data

    def users_id_user_accounts_id_account_recipients_get_with_http_info(self, id_user, id_account, **kwargs):  # noqa: E501
        """Returns the list of recipients.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_recipients_get_with_http_info(id_user, id_account, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param str expand:
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_account', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_accounts_id_account_recipients_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_accounts_id_account_recipients_get`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ValueError("Missing the required parameter `id_account` when calling `users_id_user_accounts_id_account_recipients_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/accounts/{id_account}/recipients', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20027',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_accounts_id_account_recipients_id_recipient_post(self, id_user, id_account, id_recipient, **kwargs):  # noqa: E501
        """Continue addition of a recipient.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_recipients_id_recipient_post(id_user, id_account, id_recipient, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param int id_recipient: (required)
        :param bool background: if true, do synchronization in background
        :param str expand:
        :return: Recipient
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_accounts_id_account_recipients_id_recipient_post_with_http_info(id_user, id_account, id_recipient, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_accounts_id_account_recipients_id_recipient_post_with_http_info(id_user, id_account, id_recipient, **kwargs)  # noqa: E501
            return data

    def users_id_user_accounts_id_account_recipients_id_recipient_post_with_http_info(self, id_user, id_account, id_recipient, **kwargs):  # noqa: E501
        """Continue addition of a recipient.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_recipients_id_recipient_post_with_http_info(id_user, id_account, id_recipient, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param int id_recipient: (required)
        :param bool background: if true, do synchronization in background
        :param str expand:
        :return: Recipient
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_account', 'id_recipient', 'background', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_accounts_id_account_recipients_id_recipient_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_accounts_id_account_recipients_id_recipient_post`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ValueError("Missing the required parameter `id_account` when calling `users_id_user_accounts_id_account_recipients_id_recipient_post`")  # noqa: E501
        # verify the required parameter 'id_recipient' is set
        if ('id_recipient' not in local_var_params or
                local_var_params['id_recipient'] is None):
            raise ValueError("Missing the required parameter `id_recipient` when calling `users_id_user_accounts_id_account_recipients_id_recipient_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501
        if 'id_recipient' in local_var_params:
            path_params['id_recipient'] = local_var_params['id_recipient']  # noqa: E501

        query_params = []
        if 'background' in local_var_params:
            query_params.append(('background', local_var_params['background']))  # noqa: E501
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/accounts/{id_account}/recipients/{id_recipient}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Recipient',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_accounts_id_account_recipients_id_recipient_transfers_get(self, id_user, id_account, id_recipient, **kwargs):  # noqa: E501
        """Get transfers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_recipients_id_recipient_transfers_get(id_user, id_account, id_recipient, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param int id_recipient: (required)
        :param str period: period to group logs
        :param str expand:
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_accounts_id_account_recipients_id_recipient_transfers_get_with_http_info(id_user, id_account, id_recipient, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_accounts_id_account_recipients_id_recipient_transfers_get_with_http_info(id_user, id_account, id_recipient, **kwargs)  # noqa: E501
            return data

    def users_id_user_accounts_id_account_recipients_id_recipient_transfers_get_with_http_info(self, id_user, id_account, id_recipient, **kwargs):  # noqa: E501
        """Get transfers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_recipients_id_recipient_transfers_get_with_http_info(id_user, id_account, id_recipient, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param int id_recipient: (required)
        :param str period: period to group logs
        :param str expand:
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_account', 'id_recipient', 'period', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_accounts_id_account_recipients_id_recipient_transfers_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_accounts_id_account_recipients_id_recipient_transfers_get`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ValueError("Missing the required parameter `id_account` when calling `users_id_user_accounts_id_account_recipients_id_recipient_transfers_get`")  # noqa: E501
        # verify the required parameter 'id_recipient' is set
        if ('id_recipient' not in local_var_params or
                local_var_params['id_recipient'] is None):
            raise ValueError("Missing the required parameter `id_recipient` when calling `users_id_user_accounts_id_account_recipients_id_recipient_transfers_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501
        if 'id_recipient' in local_var_params:
            path_params['id_recipient'] = local_var_params['id_recipient']  # noqa: E501

        query_params = []
        if 'period' in local_var_params:
            query_params.append(('period', local_var_params['period']))  # noqa: E501
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/accounts/{id_account}/recipients/{id_recipient}/transfers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20028',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_accounts_id_account_recipients_id_recipient_transfers_id_transfer_delete(self, id_user, id_account, id_recipient, id_transfer, **kwargs):  # noqa: E501
        """Cancel a transfer.  # noqa: E501

        It is possible to cancel only a transfer in state 'created'.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_recipients_id_recipient_transfers_id_transfer_delete(id_user, id_account, id_recipient, id_transfer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param int id_recipient: (required)
        :param int id_transfer: (required)
        :param str expand:
        :return: Transfer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_accounts_id_account_recipients_id_recipient_transfers_id_transfer_delete_with_http_info(id_user, id_account, id_recipient, id_transfer, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_accounts_id_account_recipients_id_recipient_transfers_id_transfer_delete_with_http_info(id_user, id_account, id_recipient, id_transfer, **kwargs)  # noqa: E501
            return data

    def users_id_user_accounts_id_account_recipients_id_recipient_transfers_id_transfer_delete_with_http_info(self, id_user, id_account, id_recipient, id_transfer, **kwargs):  # noqa: E501
        """Cancel a transfer.  # noqa: E501

        It is possible to cancel only a transfer in state 'created'.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_recipients_id_recipient_transfers_id_transfer_delete_with_http_info(id_user, id_account, id_recipient, id_transfer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param int id_recipient: (required)
        :param int id_transfer: (required)
        :param str expand:
        :return: Transfer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_account', 'id_recipient', 'id_transfer', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_accounts_id_account_recipients_id_recipient_transfers_id_transfer_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_accounts_id_account_recipients_id_recipient_transfers_id_transfer_delete`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ValueError("Missing the required parameter `id_account` when calling `users_id_user_accounts_id_account_recipients_id_recipient_transfers_id_transfer_delete`")  # noqa: E501
        # verify the required parameter 'id_recipient' is set
        if ('id_recipient' not in local_var_params or
                local_var_params['id_recipient'] is None):
            raise ValueError("Missing the required parameter `id_recipient` when calling `users_id_user_accounts_id_account_recipients_id_recipient_transfers_id_transfer_delete`")  # noqa: E501
        # verify the required parameter 'id_transfer' is set
        if ('id_transfer' not in local_var_params or
                local_var_params['id_transfer'] is None):
            raise ValueError("Missing the required parameter `id_transfer` when calling `users_id_user_accounts_id_account_recipients_id_recipient_transfers_id_transfer_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501
        if 'id_recipient' in local_var_params:
            path_params['id_recipient'] = local_var_params['id_recipient']  # noqa: E501
        if 'id_transfer' in local_var_params:
            path_params['id_transfer'] = local_var_params['id_transfer']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/accounts/{id_account}/recipients/{id_recipient}/transfers/{id_transfer}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Transfer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_accounts_id_account_recipients_id_recipient_transfers_id_transfer_post(self, id_user, id_account, id_recipient, id_transfer, **kwargs):  # noqa: E501
        """Execute or edit a Transfer.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_recipients_id_recipient_transfers_id_transfer_post(id_user, id_account, id_recipient, id_transfer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param int id_recipient: (required)
        :param int id_transfer: (required)
        :param str expand:
        :param UNKNOWN_BASE_TYPE unknown_base_type:
        :return: Transfer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_accounts_id_account_recipients_id_recipient_transfers_id_transfer_post_with_http_info(id_user, id_account, id_recipient, id_transfer, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_accounts_id_account_recipients_id_recipient_transfers_id_transfer_post_with_http_info(id_user, id_account, id_recipient, id_transfer, **kwargs)  # noqa: E501
            return data

    def users_id_user_accounts_id_account_recipients_id_recipient_transfers_id_transfer_post_with_http_info(self, id_user, id_account, id_recipient, id_transfer, **kwargs):  # noqa: E501
        """Execute or edit a Transfer.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_recipients_id_recipient_transfers_id_transfer_post_with_http_info(id_user, id_account, id_recipient, id_transfer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param int id_recipient: (required)
        :param int id_transfer: (required)
        :param str expand:
        :param UNKNOWN_BASE_TYPE unknown_base_type:
        :return: Transfer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_account', 'id_recipient', 'id_transfer', 'expand', 'unknown_base_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_accounts_id_account_recipients_id_recipient_transfers_id_transfer_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_accounts_id_account_recipients_id_recipient_transfers_id_transfer_post`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ValueError("Missing the required parameter `id_account` when calling `users_id_user_accounts_id_account_recipients_id_recipient_transfers_id_transfer_post`")  # noqa: E501
        # verify the required parameter 'id_recipient' is set
        if ('id_recipient' not in local_var_params or
                local_var_params['id_recipient'] is None):
            raise ValueError("Missing the required parameter `id_recipient` when calling `users_id_user_accounts_id_account_recipients_id_recipient_transfers_id_transfer_post`")  # noqa: E501
        # verify the required parameter 'id_transfer' is set
        if ('id_transfer' not in local_var_params or
                local_var_params['id_transfer'] is None):
            raise ValueError("Missing the required parameter `id_transfer` when calling `users_id_user_accounts_id_account_recipients_id_recipient_transfers_id_transfer_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501
        if 'id_recipient' in local_var_params:
            path_params['id_recipient'] = local_var_params['id_recipient']  # noqa: E501
        if 'id_transfer' in local_var_params:
            path_params['id_transfer'] = local_var_params['id_transfer']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'unknown_base_type' in local_var_params:
            body_params = local_var_params['unknown_base_type']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/accounts/{id_account}/recipients/{id_recipient}/transfers/{id_transfer}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Transfer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_accounts_id_account_recipients_id_recipient_transfers_post(self, id_user, id_account, id_recipient, unknown_base_type, **kwargs):  # noqa: E501
        """Create a transfer object.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_recipients_id_recipient_transfers_post(id_user, id_account, id_recipient, unknown_base_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param int id_recipient: (required)
        :param UNKNOWN_BASE_TYPE unknown_base_type: (required)
        :param str expand:
        :return: Transfer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_accounts_id_account_recipients_id_recipient_transfers_post_with_http_info(id_user, id_account, id_recipient, unknown_base_type, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_accounts_id_account_recipients_id_recipient_transfers_post_with_http_info(id_user, id_account, id_recipient, unknown_base_type, **kwargs)  # noqa: E501
            return data

    def users_id_user_accounts_id_account_recipients_id_recipient_transfers_post_with_http_info(self, id_user, id_account, id_recipient, unknown_base_type, **kwargs):  # noqa: E501
        """Create a transfer object.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_recipients_id_recipient_transfers_post_with_http_info(id_user, id_account, id_recipient, unknown_base_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param int id_recipient: (required)
        :param UNKNOWN_BASE_TYPE unknown_base_type: (required)
        :param str expand:
        :return: Transfer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_account', 'id_recipient', 'unknown_base_type', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_accounts_id_account_recipients_id_recipient_transfers_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_accounts_id_account_recipients_id_recipient_transfers_post`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ValueError("Missing the required parameter `id_account` when calling `users_id_user_accounts_id_account_recipients_id_recipient_transfers_post`")  # noqa: E501
        # verify the required parameter 'id_recipient' is set
        if ('id_recipient' not in local_var_params or
                local_var_params['id_recipient'] is None):
            raise ValueError("Missing the required parameter `id_recipient` when calling `users_id_user_accounts_id_account_recipients_id_recipient_transfers_post`")  # noqa: E501
        # verify the required parameter 'unknown_base_type' is set
        if ('unknown_base_type' not in local_var_params or
                local_var_params['unknown_base_type'] is None):
            raise ValueError("Missing the required parameter `unknown_base_type` when calling `users_id_user_accounts_id_account_recipients_id_recipient_transfers_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501
        if 'id_recipient' in local_var_params:
            path_params['id_recipient'] = local_var_params['id_recipient']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'unknown_base_type' in local_var_params:
            body_params = local_var_params['unknown_base_type']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/accounts/{id_account}/recipients/{id_recipient}/transfers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Transfer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_accounts_id_account_transfers_get(self, id_user, id_account, **kwargs):  # noqa: E501
        """Get transfers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_transfers_get(id_user, id_account, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param str period: period to group logs
        :param str expand:
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_accounts_id_account_transfers_get_with_http_info(id_user, id_account, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_accounts_id_account_transfers_get_with_http_info(id_user, id_account, **kwargs)  # noqa: E501
            return data

    def users_id_user_accounts_id_account_transfers_get_with_http_info(self, id_user, id_account, **kwargs):  # noqa: E501
        """Get transfers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_transfers_get_with_http_info(id_user, id_account, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param str period: period to group logs
        :param str expand:
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_account', 'period', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_accounts_id_account_transfers_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_accounts_id_account_transfers_get`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ValueError("Missing the required parameter `id_account` when calling `users_id_user_accounts_id_account_transfers_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501

        query_params = []
        if 'period' in local_var_params:
            query_params.append(('period', local_var_params['period']))  # noqa: E501
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/accounts/{id_account}/transfers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20028',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_accounts_id_account_transfers_id_transfer_delete(self, id_user, id_account, id_transfer, **kwargs):  # noqa: E501
        """Cancel a transfer.  # noqa: E501

        It is possible to cancel only a transfer in state 'created'.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_transfers_id_transfer_delete(id_user, id_account, id_transfer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param int id_transfer: (required)
        :param str expand:
        :return: Transfer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_accounts_id_account_transfers_id_transfer_delete_with_http_info(id_user, id_account, id_transfer, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_accounts_id_account_transfers_id_transfer_delete_with_http_info(id_user, id_account, id_transfer, **kwargs)  # noqa: E501
            return data

    def users_id_user_accounts_id_account_transfers_id_transfer_delete_with_http_info(self, id_user, id_account, id_transfer, **kwargs):  # noqa: E501
        """Cancel a transfer.  # noqa: E501

        It is possible to cancel only a transfer in state 'created'.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_transfers_id_transfer_delete_with_http_info(id_user, id_account, id_transfer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param int id_transfer: (required)
        :param str expand:
        :return: Transfer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_account', 'id_transfer', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_accounts_id_account_transfers_id_transfer_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_accounts_id_account_transfers_id_transfer_delete`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ValueError("Missing the required parameter `id_account` when calling `users_id_user_accounts_id_account_transfers_id_transfer_delete`")  # noqa: E501
        # verify the required parameter 'id_transfer' is set
        if ('id_transfer' not in local_var_params or
                local_var_params['id_transfer'] is None):
            raise ValueError("Missing the required parameter `id_transfer` when calling `users_id_user_accounts_id_account_transfers_id_transfer_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501
        if 'id_transfer' in local_var_params:
            path_params['id_transfer'] = local_var_params['id_transfer']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/accounts/{id_account}/transfers/{id_transfer}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Transfer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_accounts_id_account_transfers_id_transfer_post(self, id_user, id_account, id_transfer, **kwargs):  # noqa: E501
        """Execute or edit a Transfer.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_transfers_id_transfer_post(id_user, id_account, id_transfer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param int id_transfer: (required)
        :param str expand:
        :param UNKNOWN_BASE_TYPE unknown_base_type:
        :return: Transfer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_accounts_id_account_transfers_id_transfer_post_with_http_info(id_user, id_account, id_transfer, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_accounts_id_account_transfers_id_transfer_post_with_http_info(id_user, id_account, id_transfer, **kwargs)  # noqa: E501
            return data

    def users_id_user_accounts_id_account_transfers_id_transfer_post_with_http_info(self, id_user, id_account, id_transfer, **kwargs):  # noqa: E501
        """Execute or edit a Transfer.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_transfers_id_transfer_post_with_http_info(id_user, id_account, id_transfer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param int id_transfer: (required)
        :param str expand:
        :param UNKNOWN_BASE_TYPE unknown_base_type:
        :return: Transfer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_account', 'id_transfer', 'expand', 'unknown_base_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_accounts_id_account_transfers_id_transfer_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_accounts_id_account_transfers_id_transfer_post`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ValueError("Missing the required parameter `id_account` when calling `users_id_user_accounts_id_account_transfers_id_transfer_post`")  # noqa: E501
        # verify the required parameter 'id_transfer' is set
        if ('id_transfer' not in local_var_params or
                local_var_params['id_transfer'] is None):
            raise ValueError("Missing the required parameter `id_transfer` when calling `users_id_user_accounts_id_account_transfers_id_transfer_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501
        if 'id_transfer' in local_var_params:
            path_params['id_transfer'] = local_var_params['id_transfer']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'unknown_base_type' in local_var_params:
            body_params = local_var_params['unknown_base_type']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/accounts/{id_account}/transfers/{id_transfer}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Transfer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_accounts_id_account_transfers_post(self, id_user, id_account, unknown_base_type, **kwargs):  # noqa: E501
        """Create a transfer object.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_transfers_post(id_user, id_account, unknown_base_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param UNKNOWN_BASE_TYPE unknown_base_type: (required)
        :param str expand:
        :return: Transfer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_accounts_id_account_transfers_post_with_http_info(id_user, id_account, unknown_base_type, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_accounts_id_account_transfers_post_with_http_info(id_user, id_account, unknown_base_type, **kwargs)  # noqa: E501
            return data

    def users_id_user_accounts_id_account_transfers_post_with_http_info(self, id_user, id_account, unknown_base_type, **kwargs):  # noqa: E501
        """Create a transfer object.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_transfers_post_with_http_info(id_user, id_account, unknown_base_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param UNKNOWN_BASE_TYPE unknown_base_type: (required)
        :param str expand:
        :return: Transfer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_account', 'unknown_base_type', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_accounts_id_account_transfers_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_accounts_id_account_transfers_post`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ValueError("Missing the required parameter `id_account` when calling `users_id_user_accounts_id_account_transfers_post`")  # noqa: E501
        # verify the required parameter 'unknown_base_type' is set
        if ('unknown_base_type' not in local_var_params or
                local_var_params['unknown_base_type'] is None):
            raise ValueError("Missing the required parameter `unknown_base_type` when calling `users_id_user_accounts_id_account_transfers_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'unknown_base_type' in local_var_params:
            body_params = local_var_params['unknown_base_type']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/accounts/{id_account}/transfers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Transfer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_accounts_id_account_recipients_get(self, id_user, id_connection, id_account, **kwargs):  # noqa: E501
        """Returns the list of recipients.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_recipients_get(id_user, id_connection, id_account, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param str expand:
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_connections_id_connection_accounts_id_account_recipients_get_with_http_info(id_user, id_connection, id_account, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_connections_id_connection_accounts_id_account_recipients_get_with_http_info(id_user, id_connection, id_account, **kwargs)  # noqa: E501
            return data

    def users_id_user_connections_id_connection_accounts_id_account_recipients_get_with_http_info(self, id_user, id_connection, id_account, **kwargs):  # noqa: E501
        """Returns the list of recipients.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_recipients_get_with_http_info(id_user, id_connection, id_account, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param str expand:
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_account', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_accounts_id_account_recipients_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_accounts_id_account_recipients_get`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_accounts_id_account_recipients_get`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ValueError("Missing the required parameter `id_account` when calling `users_id_user_connections_id_connection_accounts_id_account_recipients_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/accounts/{id_account}/recipients', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20027',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_accounts_id_account_recipients_id_recipient_post(self, id_user, id_connection, id_account, id_recipient, **kwargs):  # noqa: E501
        """Continue addition of a recipient.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_recipients_id_recipient_post(id_user, id_connection, id_account, id_recipient, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param int id_recipient: (required)
        :param bool background: if true, do synchronization in background
        :param str expand:
        :return: Recipient
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_connections_id_connection_accounts_id_account_recipients_id_recipient_post_with_http_info(id_user, id_connection, id_account, id_recipient, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_connections_id_connection_accounts_id_account_recipients_id_recipient_post_with_http_info(id_user, id_connection, id_account, id_recipient, **kwargs)  # noqa: E501
            return data

    def users_id_user_connections_id_connection_accounts_id_account_recipients_id_recipient_post_with_http_info(self, id_user, id_connection, id_account, id_recipient, **kwargs):  # noqa: E501
        """Continue addition of a recipient.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_recipients_id_recipient_post_with_http_info(id_user, id_connection, id_account, id_recipient, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param int id_recipient: (required)
        :param bool background: if true, do synchronization in background
        :param str expand:
        :return: Recipient
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_account', 'id_recipient', 'background', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_accounts_id_account_recipients_id_recipient_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_accounts_id_account_recipients_id_recipient_post`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_accounts_id_account_recipients_id_recipient_post`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ValueError("Missing the required parameter `id_account` when calling `users_id_user_connections_id_connection_accounts_id_account_recipients_id_recipient_post`")  # noqa: E501
        # verify the required parameter 'id_recipient' is set
        if ('id_recipient' not in local_var_params or
                local_var_params['id_recipient'] is None):
            raise ValueError("Missing the required parameter `id_recipient` when calling `users_id_user_connections_id_connection_accounts_id_account_recipients_id_recipient_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501
        if 'id_recipient' in local_var_params:
            path_params['id_recipient'] = local_var_params['id_recipient']  # noqa: E501

        query_params = []
        if 'background' in local_var_params:
            query_params.append(('background', local_var_params['background']))  # noqa: E501
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/accounts/{id_account}/recipients/{id_recipient}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Recipient',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_accounts_id_account_recipients_id_recipient_transfers_get(self, id_user, id_connection, id_account, id_recipient, **kwargs):  # noqa: E501
        """Get transfers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_recipients_id_recipient_transfers_get(id_user, id_connection, id_account, id_recipient, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param int id_recipient: (required)
        :param str period: period to group logs
        :param str expand:
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_connections_id_connection_accounts_id_account_recipients_id_recipient_transfers_get_with_http_info(id_user, id_connection, id_account, id_recipient, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_connections_id_connection_accounts_id_account_recipients_id_recipient_transfers_get_with_http_info(id_user, id_connection, id_account, id_recipient, **kwargs)  # noqa: E501
            return data

    def users_id_user_connections_id_connection_accounts_id_account_recipients_id_recipient_transfers_get_with_http_info(self, id_user, id_connection, id_account, id_recipient, **kwargs):  # noqa: E501
        """Get transfers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_recipients_id_recipient_transfers_get_with_http_info(id_user, id_connection, id_account, id_recipient, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param int id_recipient: (required)
        :param str period: period to group logs
        :param str expand:
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_account', 'id_recipient', 'period', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_accounts_id_account_recipients_id_recipient_transfers_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_accounts_id_account_recipients_id_recipient_transfers_get`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_accounts_id_account_recipients_id_recipient_transfers_get`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ValueError("Missing the required parameter `id_account` when calling `users_id_user_connections_id_connection_accounts_id_account_recipients_id_recipient_transfers_get`")  # noqa: E501
        # verify the required parameter 'id_recipient' is set
        if ('id_recipient' not in local_var_params or
                local_var_params['id_recipient'] is None):
            raise ValueError("Missing the required parameter `id_recipient` when calling `users_id_user_connections_id_connection_accounts_id_account_recipients_id_recipient_transfers_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501
        if 'id_recipient' in local_var_params:
            path_params['id_recipient'] = local_var_params['id_recipient']  # noqa: E501

        query_params = []
        if 'period' in local_var_params:
            query_params.append(('period', local_var_params['period']))  # noqa: E501
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/accounts/{id_account}/recipients/{id_recipient}/transfers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20028',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_accounts_id_account_recipients_id_recipient_transfers_id_transfer_delete(self, id_user, id_connection, id_account, id_recipient, id_transfer, **kwargs):  # noqa: E501
        """Cancel a transfer.  # noqa: E501

        It is possible to cancel only a transfer in state 'created'.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_recipients_id_recipient_transfers_id_transfer_delete(id_user, id_connection, id_account, id_recipient, id_transfer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param int id_recipient: (required)
        :param int id_transfer: (required)
        :param str expand:
        :return: Transfer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_connections_id_connection_accounts_id_account_recipients_id_recipient_transfers_id_transfer_delete_with_http_info(id_user, id_connection, id_account, id_recipient, id_transfer, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_connections_id_connection_accounts_id_account_recipients_id_recipient_transfers_id_transfer_delete_with_http_info(id_user, id_connection, id_account, id_recipient, id_transfer, **kwargs)  # noqa: E501
            return data

    def users_id_user_connections_id_connection_accounts_id_account_recipients_id_recipient_transfers_id_transfer_delete_with_http_info(self, id_user, id_connection, id_account, id_recipient, id_transfer, **kwargs):  # noqa: E501
        """Cancel a transfer.  # noqa: E501

        It is possible to cancel only a transfer in state 'created'.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_recipients_id_recipient_transfers_id_transfer_delete_with_http_info(id_user, id_connection, id_account, id_recipient, id_transfer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param int id_recipient: (required)
        :param int id_transfer: (required)
        :param str expand:
        :return: Transfer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_account', 'id_recipient', 'id_transfer', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_accounts_id_account_recipients_id_recipient_transfers_id_transfer_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_accounts_id_account_recipients_id_recipient_transfers_id_transfer_delete`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_accounts_id_account_recipients_id_recipient_transfers_id_transfer_delete`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ValueError("Missing the required parameter `id_account` when calling `users_id_user_connections_id_connection_accounts_id_account_recipients_id_recipient_transfers_id_transfer_delete`")  # noqa: E501
        # verify the required parameter 'id_recipient' is set
        if ('id_recipient' not in local_var_params or
                local_var_params['id_recipient'] is None):
            raise ValueError("Missing the required parameter `id_recipient` when calling `users_id_user_connections_id_connection_accounts_id_account_recipients_id_recipient_transfers_id_transfer_delete`")  # noqa: E501
        # verify the required parameter 'id_transfer' is set
        if ('id_transfer' not in local_var_params or
                local_var_params['id_transfer'] is None):
            raise ValueError("Missing the required parameter `id_transfer` when calling `users_id_user_connections_id_connection_accounts_id_account_recipients_id_recipient_transfers_id_transfer_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501
        if 'id_recipient' in local_var_params:
            path_params['id_recipient'] = local_var_params['id_recipient']  # noqa: E501
        if 'id_transfer' in local_var_params:
            path_params['id_transfer'] = local_var_params['id_transfer']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/accounts/{id_account}/recipients/{id_recipient}/transfers/{id_transfer}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Transfer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_accounts_id_account_recipients_id_recipient_transfers_id_transfer_post(self, id_user, id_connection, id_account, id_recipient, id_transfer, **kwargs):  # noqa: E501
        """Execute or edit a Transfer.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_recipients_id_recipient_transfers_id_transfer_post(id_user, id_connection, id_account, id_recipient, id_transfer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param int id_recipient: (required)
        :param int id_transfer: (required)
        :param str expand:
        :param UNKNOWN_BASE_TYPE unknown_base_type:
        :return: Transfer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_connections_id_connection_accounts_id_account_recipients_id_recipient_transfers_id_transfer_post_with_http_info(id_user, id_connection, id_account, id_recipient, id_transfer, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_connections_id_connection_accounts_id_account_recipients_id_recipient_transfers_id_transfer_post_with_http_info(id_user, id_connection, id_account, id_recipient, id_transfer, **kwargs)  # noqa: E501
            return data

    def users_id_user_connections_id_connection_accounts_id_account_recipients_id_recipient_transfers_id_transfer_post_with_http_info(self, id_user, id_connection, id_account, id_recipient, id_transfer, **kwargs):  # noqa: E501
        """Execute or edit a Transfer.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_recipients_id_recipient_transfers_id_transfer_post_with_http_info(id_user, id_connection, id_account, id_recipient, id_transfer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param int id_recipient: (required)
        :param int id_transfer: (required)
        :param str expand:
        :param UNKNOWN_BASE_TYPE unknown_base_type:
        :return: Transfer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_account', 'id_recipient', 'id_transfer', 'expand', 'unknown_base_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_accounts_id_account_recipients_id_recipient_transfers_id_transfer_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_accounts_id_account_recipients_id_recipient_transfers_id_transfer_post`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_accounts_id_account_recipients_id_recipient_transfers_id_transfer_post`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ValueError("Missing the required parameter `id_account` when calling `users_id_user_connections_id_connection_accounts_id_account_recipients_id_recipient_transfers_id_transfer_post`")  # noqa: E501
        # verify the required parameter 'id_recipient' is set
        if ('id_recipient' not in local_var_params or
                local_var_params['id_recipient'] is None):
            raise ValueError("Missing the required parameter `id_recipient` when calling `users_id_user_connections_id_connection_accounts_id_account_recipients_id_recipient_transfers_id_transfer_post`")  # noqa: E501
        # verify the required parameter 'id_transfer' is set
        if ('id_transfer' not in local_var_params or
                local_var_params['id_transfer'] is None):
            raise ValueError("Missing the required parameter `id_transfer` when calling `users_id_user_connections_id_connection_accounts_id_account_recipients_id_recipient_transfers_id_transfer_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501
        if 'id_recipient' in local_var_params:
            path_params['id_recipient'] = local_var_params['id_recipient']  # noqa: E501
        if 'id_transfer' in local_var_params:
            path_params['id_transfer'] = local_var_params['id_transfer']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'unknown_base_type' in local_var_params:
            body_params = local_var_params['unknown_base_type']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/accounts/{id_account}/recipients/{id_recipient}/transfers/{id_transfer}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Transfer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_accounts_id_account_recipients_id_recipient_transfers_post(self, id_user, id_connection, id_account, id_recipient, unknown_base_type, **kwargs):  # noqa: E501
        """Create a transfer object.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_recipients_id_recipient_transfers_post(id_user, id_connection, id_account, id_recipient, unknown_base_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param int id_recipient: (required)
        :param UNKNOWN_BASE_TYPE unknown_base_type: (required)
        :param str expand:
        :return: Transfer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_connections_id_connection_accounts_id_account_recipients_id_recipient_transfers_post_with_http_info(id_user, id_connection, id_account, id_recipient, unknown_base_type, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_connections_id_connection_accounts_id_account_recipients_id_recipient_transfers_post_with_http_info(id_user, id_connection, id_account, id_recipient, unknown_base_type, **kwargs)  # noqa: E501
            return data

    def users_id_user_connections_id_connection_accounts_id_account_recipients_id_recipient_transfers_post_with_http_info(self, id_user, id_connection, id_account, id_recipient, unknown_base_type, **kwargs):  # noqa: E501
        """Create a transfer object.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_recipients_id_recipient_transfers_post_with_http_info(id_user, id_connection, id_account, id_recipient, unknown_base_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param int id_recipient: (required)
        :param UNKNOWN_BASE_TYPE unknown_base_type: (required)
        :param str expand:
        :return: Transfer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_account', 'id_recipient', 'unknown_base_type', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_accounts_id_account_recipients_id_recipient_transfers_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_accounts_id_account_recipients_id_recipient_transfers_post`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_accounts_id_account_recipients_id_recipient_transfers_post`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ValueError("Missing the required parameter `id_account` when calling `users_id_user_connections_id_connection_accounts_id_account_recipients_id_recipient_transfers_post`")  # noqa: E501
        # verify the required parameter 'id_recipient' is set
        if ('id_recipient' not in local_var_params or
                local_var_params['id_recipient'] is None):
            raise ValueError("Missing the required parameter `id_recipient` when calling `users_id_user_connections_id_connection_accounts_id_account_recipients_id_recipient_transfers_post`")  # noqa: E501
        # verify the required parameter 'unknown_base_type' is set
        if ('unknown_base_type' not in local_var_params or
                local_var_params['unknown_base_type'] is None):
            raise ValueError("Missing the required parameter `unknown_base_type` when calling `users_id_user_connections_id_connection_accounts_id_account_recipients_id_recipient_transfers_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501
        if 'id_recipient' in local_var_params:
            path_params['id_recipient'] = local_var_params['id_recipient']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'unknown_base_type' in local_var_params:
            body_params = local_var_params['unknown_base_type']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/accounts/{id_account}/recipients/{id_recipient}/transfers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Transfer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_accounts_id_account_transfers_get(self, id_user, id_connection, id_account, **kwargs):  # noqa: E501
        """Get transfers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_transfers_get(id_user, id_connection, id_account, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param str period: period to group logs
        :param str expand:
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_connections_id_connection_accounts_id_account_transfers_get_with_http_info(id_user, id_connection, id_account, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_connections_id_connection_accounts_id_account_transfers_get_with_http_info(id_user, id_connection, id_account, **kwargs)  # noqa: E501
            return data

    def users_id_user_connections_id_connection_accounts_id_account_transfers_get_with_http_info(self, id_user, id_connection, id_account, **kwargs):  # noqa: E501
        """Get transfers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_transfers_get_with_http_info(id_user, id_connection, id_account, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param str period: period to group logs
        :param str expand:
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_account', 'period', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_accounts_id_account_transfers_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_accounts_id_account_transfers_get`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_accounts_id_account_transfers_get`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ValueError("Missing the required parameter `id_account` when calling `users_id_user_connections_id_connection_accounts_id_account_transfers_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501

        query_params = []
        if 'period' in local_var_params:
            query_params.append(('period', local_var_params['period']))  # noqa: E501
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/accounts/{id_account}/transfers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20028',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_accounts_id_account_transfers_id_transfer_delete(self, id_user, id_connection, id_account, id_transfer, **kwargs):  # noqa: E501
        """Cancel a transfer.  # noqa: E501

        It is possible to cancel only a transfer in state 'created'.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_transfers_id_transfer_delete(id_user, id_connection, id_account, id_transfer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param int id_transfer: (required)
        :param str expand:
        :return: Transfer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_connections_id_connection_accounts_id_account_transfers_id_transfer_delete_with_http_info(id_user, id_connection, id_account, id_transfer, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_connections_id_connection_accounts_id_account_transfers_id_transfer_delete_with_http_info(id_user, id_connection, id_account, id_transfer, **kwargs)  # noqa: E501
            return data

    def users_id_user_connections_id_connection_accounts_id_account_transfers_id_transfer_delete_with_http_info(self, id_user, id_connection, id_account, id_transfer, **kwargs):  # noqa: E501
        """Cancel a transfer.  # noqa: E501

        It is possible to cancel only a transfer in state 'created'.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_transfers_id_transfer_delete_with_http_info(id_user, id_connection, id_account, id_transfer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param int id_transfer: (required)
        :param str expand:
        :return: Transfer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_account', 'id_transfer', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_accounts_id_account_transfers_id_transfer_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_accounts_id_account_transfers_id_transfer_delete`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_accounts_id_account_transfers_id_transfer_delete`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ValueError("Missing the required parameter `id_account` when calling `users_id_user_connections_id_connection_accounts_id_account_transfers_id_transfer_delete`")  # noqa: E501
        # verify the required parameter 'id_transfer' is set
        if ('id_transfer' not in local_var_params or
                local_var_params['id_transfer'] is None):
            raise ValueError("Missing the required parameter `id_transfer` when calling `users_id_user_connections_id_connection_accounts_id_account_transfers_id_transfer_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501
        if 'id_transfer' in local_var_params:
            path_params['id_transfer'] = local_var_params['id_transfer']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/accounts/{id_account}/transfers/{id_transfer}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Transfer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_accounts_id_account_transfers_id_transfer_post(self, id_user, id_connection, id_account, id_transfer, **kwargs):  # noqa: E501
        """Execute or edit a Transfer.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_transfers_id_transfer_post(id_user, id_connection, id_account, id_transfer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param int id_transfer: (required)
        :param str expand:
        :param UNKNOWN_BASE_TYPE unknown_base_type:
        :return: Transfer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_connections_id_connection_accounts_id_account_transfers_id_transfer_post_with_http_info(id_user, id_connection, id_account, id_transfer, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_connections_id_connection_accounts_id_account_transfers_id_transfer_post_with_http_info(id_user, id_connection, id_account, id_transfer, **kwargs)  # noqa: E501
            return data

    def users_id_user_connections_id_connection_accounts_id_account_transfers_id_transfer_post_with_http_info(self, id_user, id_connection, id_account, id_transfer, **kwargs):  # noqa: E501
        """Execute or edit a Transfer.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_transfers_id_transfer_post_with_http_info(id_user, id_connection, id_account, id_transfer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param int id_transfer: (required)
        :param str expand:
        :param UNKNOWN_BASE_TYPE unknown_base_type:
        :return: Transfer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_account', 'id_transfer', 'expand', 'unknown_base_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_accounts_id_account_transfers_id_transfer_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_accounts_id_account_transfers_id_transfer_post`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_accounts_id_account_transfers_id_transfer_post`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ValueError("Missing the required parameter `id_account` when calling `users_id_user_connections_id_connection_accounts_id_account_transfers_id_transfer_post`")  # noqa: E501
        # verify the required parameter 'id_transfer' is set
        if ('id_transfer' not in local_var_params or
                local_var_params['id_transfer'] is None):
            raise ValueError("Missing the required parameter `id_transfer` when calling `users_id_user_connections_id_connection_accounts_id_account_transfers_id_transfer_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501
        if 'id_transfer' in local_var_params:
            path_params['id_transfer'] = local_var_params['id_transfer']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'unknown_base_type' in local_var_params:
            body_params = local_var_params['unknown_base_type']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/accounts/{id_account}/transfers/{id_transfer}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Transfer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_accounts_id_account_transfers_post(self, id_user, id_connection, id_account, unknown_base_type, **kwargs):  # noqa: E501
        """Create a transfer object.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_transfers_post(id_user, id_connection, id_account, unknown_base_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param UNKNOWN_BASE_TYPE unknown_base_type: (required)
        :param str expand:
        :return: Transfer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_connections_id_connection_accounts_id_account_transfers_post_with_http_info(id_user, id_connection, id_account, unknown_base_type, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_connections_id_connection_accounts_id_account_transfers_post_with_http_info(id_user, id_connection, id_account, unknown_base_type, **kwargs)  # noqa: E501
            return data

    def users_id_user_connections_id_connection_accounts_id_account_transfers_post_with_http_info(self, id_user, id_connection, id_account, unknown_base_type, **kwargs):  # noqa: E501
        """Create a transfer object.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_transfers_post_with_http_info(id_user, id_connection, id_account, unknown_base_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param UNKNOWN_BASE_TYPE unknown_base_type: (required)
        :param str expand:
        :return: Transfer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_account', 'unknown_base_type', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_accounts_id_account_transfers_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_accounts_id_account_transfers_post`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_accounts_id_account_transfers_post`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ValueError("Missing the required parameter `id_account` when calling `users_id_user_connections_id_connection_accounts_id_account_transfers_post`")  # noqa: E501
        # verify the required parameter 'unknown_base_type' is set
        if ('unknown_base_type' not in local_var_params or
                local_var_params['unknown_base_type'] is None):
            raise ValueError("Missing the required parameter `unknown_base_type` when calling `users_id_user_connections_id_connection_accounts_id_account_transfers_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'unknown_base_type' in local_var_params:
            body_params = local_var_params['unknown_base_type']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/accounts/{id_account}/transfers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Transfer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_recipients_get(self, id_user, id_connection, **kwargs):  # noqa: E501
        """Returns the list of recipients.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_recipients_get(id_user, id_connection, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param str expand:
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_connections_id_connection_recipients_get_with_http_info(id_user, id_connection, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_connections_id_connection_recipients_get_with_http_info(id_user, id_connection, **kwargs)  # noqa: E501
            return data

    def users_id_user_connections_id_connection_recipients_get_with_http_info(self, id_user, id_connection, **kwargs):  # noqa: E501
        """Returns the list of recipients.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_recipients_get_with_http_info(id_user, id_connection, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param str expand:
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_recipients_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_recipients_get`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_recipients_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/recipients', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20027',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_recipients_id_recipient_post(self, id_user, id_connection, id_recipient, **kwargs):  # noqa: E501
        """Continue addition of a recipient.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_recipients_id_recipient_post(id_user, id_connection, id_recipient, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_recipient: (required)
        :param bool background: if true, do synchronization in background
        :param str expand:
        :return: Recipient
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_connections_id_connection_recipients_id_recipient_post_with_http_info(id_user, id_connection, id_recipient, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_connections_id_connection_recipients_id_recipient_post_with_http_info(id_user, id_connection, id_recipient, **kwargs)  # noqa: E501
            return data

    def users_id_user_connections_id_connection_recipients_id_recipient_post_with_http_info(self, id_user, id_connection, id_recipient, **kwargs):  # noqa: E501
        """Continue addition of a recipient.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_recipients_id_recipient_post_with_http_info(id_user, id_connection, id_recipient, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_recipient: (required)
        :param bool background: if true, do synchronization in background
        :param str expand:
        :return: Recipient
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_recipient', 'background', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_recipients_id_recipient_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_recipients_id_recipient_post`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_recipients_id_recipient_post`")  # noqa: E501
        # verify the required parameter 'id_recipient' is set
        if ('id_recipient' not in local_var_params or
                local_var_params['id_recipient'] is None):
            raise ValueError("Missing the required parameter `id_recipient` when calling `users_id_user_connections_id_connection_recipients_id_recipient_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_recipient' in local_var_params:
            path_params['id_recipient'] = local_var_params['id_recipient']  # noqa: E501

        query_params = []
        if 'background' in local_var_params:
            query_params.append(('background', local_var_params['background']))  # noqa: E501
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/recipients/{id_recipient}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Recipient',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_recipients_id_recipient_transfers_get(self, id_user, id_connection, id_recipient, **kwargs):  # noqa: E501
        """Get transfers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_recipients_id_recipient_transfers_get(id_user, id_connection, id_recipient, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_recipient: (required)
        :param str period: period to group logs
        :param str expand:
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_connections_id_connection_recipients_id_recipient_transfers_get_with_http_info(id_user, id_connection, id_recipient, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_connections_id_connection_recipients_id_recipient_transfers_get_with_http_info(id_user, id_connection, id_recipient, **kwargs)  # noqa: E501
            return data

    def users_id_user_connections_id_connection_recipients_id_recipient_transfers_get_with_http_info(self, id_user, id_connection, id_recipient, **kwargs):  # noqa: E501
        """Get transfers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_recipients_id_recipient_transfers_get_with_http_info(id_user, id_connection, id_recipient, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_recipient: (required)
        :param str period: period to group logs
        :param str expand:
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_recipient', 'period', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_recipients_id_recipient_transfers_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_recipients_id_recipient_transfers_get`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_recipients_id_recipient_transfers_get`")  # noqa: E501
        # verify the required parameter 'id_recipient' is set
        if ('id_recipient' not in local_var_params or
                local_var_params['id_recipient'] is None):
            raise ValueError("Missing the required parameter `id_recipient` when calling `users_id_user_connections_id_connection_recipients_id_recipient_transfers_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_recipient' in local_var_params:
            path_params['id_recipient'] = local_var_params['id_recipient']  # noqa: E501

        query_params = []
        if 'period' in local_var_params:
            query_params.append(('period', local_var_params['period']))  # noqa: E501
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/recipients/{id_recipient}/transfers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20028',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_recipients_id_recipient_transfers_id_transfer_delete(self, id_user, id_connection, id_recipient, id_transfer, **kwargs):  # noqa: E501
        """Cancel a transfer.  # noqa: E501

        It is possible to cancel only a transfer in state 'created'.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_recipients_id_recipient_transfers_id_transfer_delete(id_user, id_connection, id_recipient, id_transfer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_recipient: (required)
        :param int id_transfer: (required)
        :param str expand:
        :return: Transfer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_connections_id_connection_recipients_id_recipient_transfers_id_transfer_delete_with_http_info(id_user, id_connection, id_recipient, id_transfer, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_connections_id_connection_recipients_id_recipient_transfers_id_transfer_delete_with_http_info(id_user, id_connection, id_recipient, id_transfer, **kwargs)  # noqa: E501
            return data

    def users_id_user_connections_id_connection_recipients_id_recipient_transfers_id_transfer_delete_with_http_info(self, id_user, id_connection, id_recipient, id_transfer, **kwargs):  # noqa: E501
        """Cancel a transfer.  # noqa: E501

        It is possible to cancel only a transfer in state 'created'.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_recipients_id_recipient_transfers_id_transfer_delete_with_http_info(id_user, id_connection, id_recipient, id_transfer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_recipient: (required)
        :param int id_transfer: (required)
        :param str expand:
        :return: Transfer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_recipient', 'id_transfer', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_recipients_id_recipient_transfers_id_transfer_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_recipients_id_recipient_transfers_id_transfer_delete`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_recipients_id_recipient_transfers_id_transfer_delete`")  # noqa: E501
        # verify the required parameter 'id_recipient' is set
        if ('id_recipient' not in local_var_params or
                local_var_params['id_recipient'] is None):
            raise ValueError("Missing the required parameter `id_recipient` when calling `users_id_user_connections_id_connection_recipients_id_recipient_transfers_id_transfer_delete`")  # noqa: E501
        # verify the required parameter 'id_transfer' is set
        if ('id_transfer' not in local_var_params or
                local_var_params['id_transfer'] is None):
            raise ValueError("Missing the required parameter `id_transfer` when calling `users_id_user_connections_id_connection_recipients_id_recipient_transfers_id_transfer_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_recipient' in local_var_params:
            path_params['id_recipient'] = local_var_params['id_recipient']  # noqa: E501
        if 'id_transfer' in local_var_params:
            path_params['id_transfer'] = local_var_params['id_transfer']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/recipients/{id_recipient}/transfers/{id_transfer}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Transfer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_recipients_id_recipient_transfers_id_transfer_post(self, id_user, id_connection, id_recipient, id_transfer, **kwargs):  # noqa: E501
        """Execute or edit a Transfer.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_recipients_id_recipient_transfers_id_transfer_post(id_user, id_connection, id_recipient, id_transfer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_recipient: (required)
        :param int id_transfer: (required)
        :param str expand:
        :param UNKNOWN_BASE_TYPE unknown_base_type:
        :return: Transfer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_connections_id_connection_recipients_id_recipient_transfers_id_transfer_post_with_http_info(id_user, id_connection, id_recipient, id_transfer, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_connections_id_connection_recipients_id_recipient_transfers_id_transfer_post_with_http_info(id_user, id_connection, id_recipient, id_transfer, **kwargs)  # noqa: E501
            return data

    def users_id_user_connections_id_connection_recipients_id_recipient_transfers_id_transfer_post_with_http_info(self, id_user, id_connection, id_recipient, id_transfer, **kwargs):  # noqa: E501
        """Execute or edit a Transfer.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_recipients_id_recipient_transfers_id_transfer_post_with_http_info(id_user, id_connection, id_recipient, id_transfer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_recipient: (required)
        :param int id_transfer: (required)
        :param str expand:
        :param UNKNOWN_BASE_TYPE unknown_base_type:
        :return: Transfer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_recipient', 'id_transfer', 'expand', 'unknown_base_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_recipients_id_recipient_transfers_id_transfer_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_recipients_id_recipient_transfers_id_transfer_post`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_recipients_id_recipient_transfers_id_transfer_post`")  # noqa: E501
        # verify the required parameter 'id_recipient' is set
        if ('id_recipient' not in local_var_params or
                local_var_params['id_recipient'] is None):
            raise ValueError("Missing the required parameter `id_recipient` when calling `users_id_user_connections_id_connection_recipients_id_recipient_transfers_id_transfer_post`")  # noqa: E501
        # verify the required parameter 'id_transfer' is set
        if ('id_transfer' not in local_var_params or
                local_var_params['id_transfer'] is None):
            raise ValueError("Missing the required parameter `id_transfer` when calling `users_id_user_connections_id_connection_recipients_id_recipient_transfers_id_transfer_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_recipient' in local_var_params:
            path_params['id_recipient'] = local_var_params['id_recipient']  # noqa: E501
        if 'id_transfer' in local_var_params:
            path_params['id_transfer'] = local_var_params['id_transfer']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'unknown_base_type' in local_var_params:
            body_params = local_var_params['unknown_base_type']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/recipients/{id_recipient}/transfers/{id_transfer}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Transfer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_recipients_id_recipient_transfers_post(self, id_user, id_connection, id_recipient, unknown_base_type, **kwargs):  # noqa: E501
        """Create a transfer object.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_recipients_id_recipient_transfers_post(id_user, id_connection, id_recipient, unknown_base_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_recipient: (required)
        :param UNKNOWN_BASE_TYPE unknown_base_type: (required)
        :param str expand:
        :return: Transfer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_connections_id_connection_recipients_id_recipient_transfers_post_with_http_info(id_user, id_connection, id_recipient, unknown_base_type, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_connections_id_connection_recipients_id_recipient_transfers_post_with_http_info(id_user, id_connection, id_recipient, unknown_base_type, **kwargs)  # noqa: E501
            return data

    def users_id_user_connections_id_connection_recipients_id_recipient_transfers_post_with_http_info(self, id_user, id_connection, id_recipient, unknown_base_type, **kwargs):  # noqa: E501
        """Create a transfer object.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_recipients_id_recipient_transfers_post_with_http_info(id_user, id_connection, id_recipient, unknown_base_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_recipient: (required)
        :param UNKNOWN_BASE_TYPE unknown_base_type: (required)
        :param str expand:
        :return: Transfer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_recipient', 'unknown_base_type', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_recipients_id_recipient_transfers_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_recipients_id_recipient_transfers_post`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_recipients_id_recipient_transfers_post`")  # noqa: E501
        # verify the required parameter 'id_recipient' is set
        if ('id_recipient' not in local_var_params or
                local_var_params['id_recipient'] is None):
            raise ValueError("Missing the required parameter `id_recipient` when calling `users_id_user_connections_id_connection_recipients_id_recipient_transfers_post`")  # noqa: E501
        # verify the required parameter 'unknown_base_type' is set
        if ('unknown_base_type' not in local_var_params or
                local_var_params['unknown_base_type'] is None):
            raise ValueError("Missing the required parameter `unknown_base_type` when calling `users_id_user_connections_id_connection_recipients_id_recipient_transfers_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_recipient' in local_var_params:
            path_params['id_recipient'] = local_var_params['id_recipient']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'unknown_base_type' in local_var_params:
            body_params = local_var_params['unknown_base_type']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/recipients/{id_recipient}/transfers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Transfer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_transfers_get(self, id_user, id_connection, **kwargs):  # noqa: E501
        """Get transfers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_transfers_get(id_user, id_connection, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param str period: period to group logs
        :param str expand:
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_connections_id_connection_transfers_get_with_http_info(id_user, id_connection, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_connections_id_connection_transfers_get_with_http_info(id_user, id_connection, **kwargs)  # noqa: E501
            return data

    def users_id_user_connections_id_connection_transfers_get_with_http_info(self, id_user, id_connection, **kwargs):  # noqa: E501
        """Get transfers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_transfers_get_with_http_info(id_user, id_connection, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param str period: period to group logs
        :param str expand:
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'period', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_transfers_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_transfers_get`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_transfers_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501

        query_params = []
        if 'period' in local_var_params:
            query_params.append(('period', local_var_params['period']))  # noqa: E501
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/transfers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20028',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_transfers_id_transfer_delete(self, id_user, id_connection, id_transfer, **kwargs):  # noqa: E501
        """Cancel a transfer.  # noqa: E501

        It is possible to cancel only a transfer in state 'created'.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_transfers_id_transfer_delete(id_user, id_connection, id_transfer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_transfer: (required)
        :param str expand:
        :return: Transfer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_connections_id_connection_transfers_id_transfer_delete_with_http_info(id_user, id_connection, id_transfer, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_connections_id_connection_transfers_id_transfer_delete_with_http_info(id_user, id_connection, id_transfer, **kwargs)  # noqa: E501
            return data

    def users_id_user_connections_id_connection_transfers_id_transfer_delete_with_http_info(self, id_user, id_connection, id_transfer, **kwargs):  # noqa: E501
        """Cancel a transfer.  # noqa: E501

        It is possible to cancel only a transfer in state 'created'.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_transfers_id_transfer_delete_with_http_info(id_user, id_connection, id_transfer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_transfer: (required)
        :param str expand:
        :return: Transfer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_transfer', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_transfers_id_transfer_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_transfers_id_transfer_delete`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_transfers_id_transfer_delete`")  # noqa: E501
        # verify the required parameter 'id_transfer' is set
        if ('id_transfer' not in local_var_params or
                local_var_params['id_transfer'] is None):
            raise ValueError("Missing the required parameter `id_transfer` when calling `users_id_user_connections_id_connection_transfers_id_transfer_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_transfer' in local_var_params:
            path_params['id_transfer'] = local_var_params['id_transfer']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/transfers/{id_transfer}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Transfer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_transfers_id_transfer_post(self, id_user, id_connection, id_transfer, **kwargs):  # noqa: E501
        """Execute or edit a Transfer.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_transfers_id_transfer_post(id_user, id_connection, id_transfer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_transfer: (required)
        :param str expand:
        :param UNKNOWN_BASE_TYPE unknown_base_type:
        :return: Transfer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_connections_id_connection_transfers_id_transfer_post_with_http_info(id_user, id_connection, id_transfer, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_connections_id_connection_transfers_id_transfer_post_with_http_info(id_user, id_connection, id_transfer, **kwargs)  # noqa: E501
            return data

    def users_id_user_connections_id_connection_transfers_id_transfer_post_with_http_info(self, id_user, id_connection, id_transfer, **kwargs):  # noqa: E501
        """Execute or edit a Transfer.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_transfers_id_transfer_post_with_http_info(id_user, id_connection, id_transfer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_transfer: (required)
        :param str expand:
        :param UNKNOWN_BASE_TYPE unknown_base_type:
        :return: Transfer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_transfer', 'expand', 'unknown_base_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_transfers_id_transfer_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_transfers_id_transfer_post`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_transfers_id_transfer_post`")  # noqa: E501
        # verify the required parameter 'id_transfer' is set
        if ('id_transfer' not in local_var_params or
                local_var_params['id_transfer'] is None):
            raise ValueError("Missing the required parameter `id_transfer` when calling `users_id_user_connections_id_connection_transfers_id_transfer_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_transfer' in local_var_params:
            path_params['id_transfer'] = local_var_params['id_transfer']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'unknown_base_type' in local_var_params:
            body_params = local_var_params['unknown_base_type']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/transfers/{id_transfer}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Transfer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_transfers_post(self, id_user, id_connection, unknown_base_type, **kwargs):  # noqa: E501
        """Create a transfer object.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_transfers_post(id_user, id_connection, unknown_base_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param UNKNOWN_BASE_TYPE unknown_base_type: (required)
        :param str expand:
        :return: Transfer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_connections_id_connection_transfers_post_with_http_info(id_user, id_connection, unknown_base_type, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_connections_id_connection_transfers_post_with_http_info(id_user, id_connection, unknown_base_type, **kwargs)  # noqa: E501
            return data

    def users_id_user_connections_id_connection_transfers_post_with_http_info(self, id_user, id_connection, unknown_base_type, **kwargs):  # noqa: E501
        """Create a transfer object.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_transfers_post_with_http_info(id_user, id_connection, unknown_base_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param UNKNOWN_BASE_TYPE unknown_base_type: (required)
        :param str expand:
        :return: Transfer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'unknown_base_type', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_transfers_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_transfers_post`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_transfers_post`")  # noqa: E501
        # verify the required parameter 'unknown_base_type' is set
        if ('unknown_base_type' not in local_var_params or
                local_var_params['unknown_base_type'] is None):
            raise ValueError("Missing the required parameter `unknown_base_type` when calling `users_id_user_connections_id_connection_transfers_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'unknown_base_type' in local_var_params:
            body_params = local_var_params['unknown_base_type']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/transfers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Transfer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_recipients_get(self, id_user, **kwargs):  # noqa: E501
        """Returns the list of recipients.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_recipients_get(id_user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param str expand:
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_recipients_get_with_http_info(id_user, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_recipients_get_with_http_info(id_user, **kwargs)  # noqa: E501
            return data

    def users_id_user_recipients_get_with_http_info(self, id_user, **kwargs):  # noqa: E501
        """Returns the list of recipients.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_recipients_get_with_http_info(id_user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param str expand:
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_recipients_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_recipients_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/recipients', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20027',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_recipients_id_recipient_post(self, id_user, id_recipient, **kwargs):  # noqa: E501
        """Continue addition of a recipient.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_recipients_id_recipient_post(id_user, id_recipient, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_recipient: (required)
        :param bool background: if true, do synchronization in background
        :param str expand:
        :return: Recipient
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_recipients_id_recipient_post_with_http_info(id_user, id_recipient, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_recipients_id_recipient_post_with_http_info(id_user, id_recipient, **kwargs)  # noqa: E501
            return data

    def users_id_user_recipients_id_recipient_post_with_http_info(self, id_user, id_recipient, **kwargs):  # noqa: E501
        """Continue addition of a recipient.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_recipients_id_recipient_post_with_http_info(id_user, id_recipient, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_recipient: (required)
        :param bool background: if true, do synchronization in background
        :param str expand:
        :return: Recipient
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_recipient', 'background', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_recipients_id_recipient_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_recipients_id_recipient_post`")  # noqa: E501
        # verify the required parameter 'id_recipient' is set
        if ('id_recipient' not in local_var_params or
                local_var_params['id_recipient'] is None):
            raise ValueError("Missing the required parameter `id_recipient` when calling `users_id_user_recipients_id_recipient_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_recipient' in local_var_params:
            path_params['id_recipient'] = local_var_params['id_recipient']  # noqa: E501

        query_params = []
        if 'background' in local_var_params:
            query_params.append(('background', local_var_params['background']))  # noqa: E501
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/recipients/{id_recipient}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Recipient',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_recipients_id_recipient_transfers_get(self, id_user, id_recipient, **kwargs):  # noqa: E501
        """Get transfers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_recipients_id_recipient_transfers_get(id_user, id_recipient, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_recipient: (required)
        :param str period: period to group logs
        :param str expand:
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_recipients_id_recipient_transfers_get_with_http_info(id_user, id_recipient, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_recipients_id_recipient_transfers_get_with_http_info(id_user, id_recipient, **kwargs)  # noqa: E501
            return data

    def users_id_user_recipients_id_recipient_transfers_get_with_http_info(self, id_user, id_recipient, **kwargs):  # noqa: E501
        """Get transfers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_recipients_id_recipient_transfers_get_with_http_info(id_user, id_recipient, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_recipient: (required)
        :param str period: period to group logs
        :param str expand:
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_recipient', 'period', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_recipients_id_recipient_transfers_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_recipients_id_recipient_transfers_get`")  # noqa: E501
        # verify the required parameter 'id_recipient' is set
        if ('id_recipient' not in local_var_params or
                local_var_params['id_recipient'] is None):
            raise ValueError("Missing the required parameter `id_recipient` when calling `users_id_user_recipients_id_recipient_transfers_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_recipient' in local_var_params:
            path_params['id_recipient'] = local_var_params['id_recipient']  # noqa: E501

        query_params = []
        if 'period' in local_var_params:
            query_params.append(('period', local_var_params['period']))  # noqa: E501
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/recipients/{id_recipient}/transfers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20028',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_recipients_id_recipient_transfers_id_transfer_delete(self, id_user, id_recipient, id_transfer, **kwargs):  # noqa: E501
        """Cancel a transfer.  # noqa: E501

        It is possible to cancel only a transfer in state 'created'.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_recipients_id_recipient_transfers_id_transfer_delete(id_user, id_recipient, id_transfer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_recipient: (required)
        :param int id_transfer: (required)
        :param str expand:
        :return: Transfer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_recipients_id_recipient_transfers_id_transfer_delete_with_http_info(id_user, id_recipient, id_transfer, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_recipients_id_recipient_transfers_id_transfer_delete_with_http_info(id_user, id_recipient, id_transfer, **kwargs)  # noqa: E501
            return data

    def users_id_user_recipients_id_recipient_transfers_id_transfer_delete_with_http_info(self, id_user, id_recipient, id_transfer, **kwargs):  # noqa: E501
        """Cancel a transfer.  # noqa: E501

        It is possible to cancel only a transfer in state 'created'.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_recipients_id_recipient_transfers_id_transfer_delete_with_http_info(id_user, id_recipient, id_transfer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_recipient: (required)
        :param int id_transfer: (required)
        :param str expand:
        :return: Transfer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_recipient', 'id_transfer', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_recipients_id_recipient_transfers_id_transfer_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_recipients_id_recipient_transfers_id_transfer_delete`")  # noqa: E501
        # verify the required parameter 'id_recipient' is set
        if ('id_recipient' not in local_var_params or
                local_var_params['id_recipient'] is None):
            raise ValueError("Missing the required parameter `id_recipient` when calling `users_id_user_recipients_id_recipient_transfers_id_transfer_delete`")  # noqa: E501
        # verify the required parameter 'id_transfer' is set
        if ('id_transfer' not in local_var_params or
                local_var_params['id_transfer'] is None):
            raise ValueError("Missing the required parameter `id_transfer` when calling `users_id_user_recipients_id_recipient_transfers_id_transfer_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_recipient' in local_var_params:
            path_params['id_recipient'] = local_var_params['id_recipient']  # noqa: E501
        if 'id_transfer' in local_var_params:
            path_params['id_transfer'] = local_var_params['id_transfer']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/recipients/{id_recipient}/transfers/{id_transfer}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Transfer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_recipients_id_recipient_transfers_id_transfer_post(self, id_user, id_recipient, id_transfer, **kwargs):  # noqa: E501
        """Execute or edit a Transfer.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_recipients_id_recipient_transfers_id_transfer_post(id_user, id_recipient, id_transfer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_recipient: (required)
        :param int id_transfer: (required)
        :param str expand:
        :param UNKNOWN_BASE_TYPE unknown_base_type:
        :return: Transfer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_recipients_id_recipient_transfers_id_transfer_post_with_http_info(id_user, id_recipient, id_transfer, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_recipients_id_recipient_transfers_id_transfer_post_with_http_info(id_user, id_recipient, id_transfer, **kwargs)  # noqa: E501
            return data

    def users_id_user_recipients_id_recipient_transfers_id_transfer_post_with_http_info(self, id_user, id_recipient, id_transfer, **kwargs):  # noqa: E501
        """Execute or edit a Transfer.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_recipients_id_recipient_transfers_id_transfer_post_with_http_info(id_user, id_recipient, id_transfer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_recipient: (required)
        :param int id_transfer: (required)
        :param str expand:
        :param UNKNOWN_BASE_TYPE unknown_base_type:
        :return: Transfer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_recipient', 'id_transfer', 'expand', 'unknown_base_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_recipients_id_recipient_transfers_id_transfer_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_recipients_id_recipient_transfers_id_transfer_post`")  # noqa: E501
        # verify the required parameter 'id_recipient' is set
        if ('id_recipient' not in local_var_params or
                local_var_params['id_recipient'] is None):
            raise ValueError("Missing the required parameter `id_recipient` when calling `users_id_user_recipients_id_recipient_transfers_id_transfer_post`")  # noqa: E501
        # verify the required parameter 'id_transfer' is set
        if ('id_transfer' not in local_var_params or
                local_var_params['id_transfer'] is None):
            raise ValueError("Missing the required parameter `id_transfer` when calling `users_id_user_recipients_id_recipient_transfers_id_transfer_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_recipient' in local_var_params:
            path_params['id_recipient'] = local_var_params['id_recipient']  # noqa: E501
        if 'id_transfer' in local_var_params:
            path_params['id_transfer'] = local_var_params['id_transfer']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'unknown_base_type' in local_var_params:
            body_params = local_var_params['unknown_base_type']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/recipients/{id_recipient}/transfers/{id_transfer}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Transfer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_recipients_id_recipient_transfers_post(self, id_user, id_recipient, unknown_base_type, **kwargs):  # noqa: E501
        """Create a transfer object.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_recipients_id_recipient_transfers_post(id_user, id_recipient, unknown_base_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_recipient: (required)
        :param UNKNOWN_BASE_TYPE unknown_base_type: (required)
        :param str expand:
        :return: Transfer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_recipients_id_recipient_transfers_post_with_http_info(id_user, id_recipient, unknown_base_type, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_recipients_id_recipient_transfers_post_with_http_info(id_user, id_recipient, unknown_base_type, **kwargs)  # noqa: E501
            return data

    def users_id_user_recipients_id_recipient_transfers_post_with_http_info(self, id_user, id_recipient, unknown_base_type, **kwargs):  # noqa: E501
        """Create a transfer object.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_recipients_id_recipient_transfers_post_with_http_info(id_user, id_recipient, unknown_base_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_recipient: (required)
        :param UNKNOWN_BASE_TYPE unknown_base_type: (required)
        :param str expand:
        :return: Transfer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_recipient', 'unknown_base_type', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_recipients_id_recipient_transfers_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_recipients_id_recipient_transfers_post`")  # noqa: E501
        # verify the required parameter 'id_recipient' is set
        if ('id_recipient' not in local_var_params or
                local_var_params['id_recipient'] is None):
            raise ValueError("Missing the required parameter `id_recipient` when calling `users_id_user_recipients_id_recipient_transfers_post`")  # noqa: E501
        # verify the required parameter 'unknown_base_type' is set
        if ('unknown_base_type' not in local_var_params or
                local_var_params['unknown_base_type'] is None):
            raise ValueError("Missing the required parameter `unknown_base_type` when calling `users_id_user_recipients_id_recipient_transfers_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_recipient' in local_var_params:
            path_params['id_recipient'] = local_var_params['id_recipient']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'unknown_base_type' in local_var_params:
            body_params = local_var_params['unknown_base_type']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/recipients/{id_recipient}/transfers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Transfer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_transfers_get(self, id_user, **kwargs):  # noqa: E501
        """Get transfers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_transfers_get(id_user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param str period: period to group logs
        :param str expand:
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_transfers_get_with_http_info(id_user, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_transfers_get_with_http_info(id_user, **kwargs)  # noqa: E501
            return data

    def users_id_user_transfers_get_with_http_info(self, id_user, **kwargs):  # noqa: E501
        """Get transfers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_transfers_get_with_http_info(id_user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param str period: period to group logs
        :param str expand:
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'period', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_transfers_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_transfers_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501

        query_params = []
        if 'period' in local_var_params:
            query_params.append(('period', local_var_params['period']))  # noqa: E501
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/transfers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20028',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_transfers_id_transfer_delete(self, id_user, id_transfer, **kwargs):  # noqa: E501
        """Cancel a transfer.  # noqa: E501

        It is possible to cancel only a transfer in state 'created'.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_transfers_id_transfer_delete(id_user, id_transfer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_transfer: (required)
        :param str expand:
        :return: Transfer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_transfers_id_transfer_delete_with_http_info(id_user, id_transfer, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_transfers_id_transfer_delete_with_http_info(id_user, id_transfer, **kwargs)  # noqa: E501
            return data

    def users_id_user_transfers_id_transfer_delete_with_http_info(self, id_user, id_transfer, **kwargs):  # noqa: E501
        """Cancel a transfer.  # noqa: E501

        It is possible to cancel only a transfer in state 'created'.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_transfers_id_transfer_delete_with_http_info(id_user, id_transfer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_transfer: (required)
        :param str expand:
        :return: Transfer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_transfer', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_transfers_id_transfer_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_transfers_id_transfer_delete`")  # noqa: E501
        # verify the required parameter 'id_transfer' is set
        if ('id_transfer' not in local_var_params or
                local_var_params['id_transfer'] is None):
            raise ValueError("Missing the required parameter `id_transfer` when calling `users_id_user_transfers_id_transfer_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_transfer' in local_var_params:
            path_params['id_transfer'] = local_var_params['id_transfer']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/transfers/{id_transfer}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Transfer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_transfers_id_transfer_post(self, id_user, id_transfer, **kwargs):  # noqa: E501
        """Execute or edit a Transfer.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_transfers_id_transfer_post(id_user, id_transfer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_transfer: (required)
        :param str expand:
        :param UNKNOWN_BASE_TYPE unknown_base_type:
        :return: Transfer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_transfers_id_transfer_post_with_http_info(id_user, id_transfer, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_transfers_id_transfer_post_with_http_info(id_user, id_transfer, **kwargs)  # noqa: E501
            return data

    def users_id_user_transfers_id_transfer_post_with_http_info(self, id_user, id_transfer, **kwargs):  # noqa: E501
        """Execute or edit a Transfer.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_transfers_id_transfer_post_with_http_info(id_user, id_transfer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_transfer: (required)
        :param str expand:
        :param UNKNOWN_BASE_TYPE unknown_base_type:
        :return: Transfer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_transfer', 'expand', 'unknown_base_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_transfers_id_transfer_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_transfers_id_transfer_post`")  # noqa: E501
        # verify the required parameter 'id_transfer' is set
        if ('id_transfer' not in local_var_params or
                local_var_params['id_transfer'] is None):
            raise ValueError("Missing the required parameter `id_transfer` when calling `users_id_user_transfers_id_transfer_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_transfer' in local_var_params:
            path_params['id_transfer'] = local_var_params['id_transfer']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'unknown_base_type' in local_var_params:
            body_params = local_var_params['unknown_base_type']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/transfers/{id_transfer}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Transfer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_transfers_post(self, id_user, unknown_base_type, **kwargs):  # noqa: E501
        """Create a transfer object.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_transfers_post(id_user, unknown_base_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param UNKNOWN_BASE_TYPE unknown_base_type: (required)
        :param str expand:
        :return: Transfer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_transfers_post_with_http_info(id_user, unknown_base_type, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_transfers_post_with_http_info(id_user, unknown_base_type, **kwargs)  # noqa: E501
            return data

    def users_id_user_transfers_post_with_http_info(self, id_user, unknown_base_type, **kwargs):  # noqa: E501
        """Create a transfer object.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_transfers_post_with_http_info(id_user, unknown_base_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param UNKNOWN_BASE_TYPE unknown_base_type: (required)
        :param str expand:
        :return: Transfer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'unknown_base_type', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_transfers_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_transfers_post`")  # noqa: E501
        # verify the required parameter 'unknown_base_type' is set
        if ('unknown_base_type' not in local_var_params or
                local_var_params['unknown_base_type'] is None):
            raise ValueError("Missing the required parameter `unknown_base_type` when calling `users_id_user_transfers_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'unknown_base_type' in local_var_params:
            body_params = local_var_params['unknown_base_type']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/transfers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Transfer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
