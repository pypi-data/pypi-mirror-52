# coding: utf-8

"""
    Budgea API Documentation

    see https://www.budget-insight.com/budgea-api  # noqa: E501

    OpenAPI spec version: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class WebhookData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created': 'datetime',
        'data': 'str',
        'id': 'int',
        'id_resource': 'int',
        'id_service': 'int',
        'id_user': 'int',
        'id_webhook': 'int',
        'mimetype': 'str',
        'success': 'datetime'
    }

    attribute_map = {
        'created': 'created',
        'data': 'data',
        'id': 'id',
        'id_resource': 'id_resource',
        'id_service': 'id_service',
        'id_user': 'id_user',
        'id_webhook': 'id_webhook',
        'mimetype': 'mimetype',
        'success': 'success'
    }

    def __init__(self, created=None, data=None, id=None, id_resource=None, id_service=None, id_user=None, id_webhook=None, mimetype=None, success=None):  # noqa: E501
        """WebhookData - a model defined in OpenAPI"""  # noqa: E501

        self._created = None
        self._data = None
        self._id = None
        self._id_resource = None
        self._id_service = None
        self._id_user = None
        self._id_webhook = None
        self._mimetype = None
        self._success = None
        self.discriminator = None

        self.created = created
        if data is not None:
            self.data = data
        self.id = id
        if id_resource is not None:
            self.id_resource = id_resource
        if id_service is not None:
            self.id_service = id_service
        self.id_user = id_user
        self.id_webhook = id_webhook
        if mimetype is not None:
            self.mimetype = mimetype
        if success is not None:
            self.success = success

    @property
    def created(self):
        """Gets the created of this WebhookData.  # noqa: E501

        Timestamp when the hook data was generated  # noqa: E501

        :return: The created of this WebhookData.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this WebhookData.

        Timestamp when the hook data was generated  # noqa: E501

        :param created: The created of this WebhookData.  # noqa: E501
        :type: datetime
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def data(self):
        """Gets the data of this WebhookData.  # noqa: E501

        Data emitted  # noqa: E501

        :return: The data of this WebhookData.  # noqa: E501
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this WebhookData.

        Data emitted  # noqa: E501

        :param data: The data of this WebhookData.  # noqa: E501
        :type: str
        """

        self._data = data

    @property
    def id(self):
        """Gets the id of this WebhookData.  # noqa: E501

        ID of the webhook data  # noqa: E501

        :return: The id of this WebhookData.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WebhookData.

        ID of the webhook data  # noqa: E501

        :param id: The id of this WebhookData.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def id_resource(self):
        """Gets the id_resource of this WebhookData.  # noqa: E501

        a changing ID used to filter webhookdata depending on the event triggered  # noqa: E501

        :return: The id_resource of this WebhookData.  # noqa: E501
        :rtype: int
        """
        return self._id_resource

    @id_resource.setter
    def id_resource(self, id_resource):
        """Sets the id_resource of this WebhookData.

        a changing ID used to filter webhookdata depending on the event triggered  # noqa: E501

        :param id_resource: The id_resource of this WebhookData.  # noqa: E501
        :type: int
        """

        self._id_resource = id_resource

    @property
    def id_service(self):
        """Gets the id_service of this WebhookData.  # noqa: E501

        ID of the recipient service  # noqa: E501

        :return: The id_service of this WebhookData.  # noqa: E501
        :rtype: int
        """
        return self._id_service

    @id_service.setter
    def id_service(self, id_service):
        """Sets the id_service of this WebhookData.

        ID of the recipient service  # noqa: E501

        :param id_service: The id_service of this WebhookData.  # noqa: E501
        :type: int
        """

        self._id_service = id_service

    @property
    def id_user(self):
        """Gets the id_user of this WebhookData.  # noqa: E501

        ID of the emitter user  # noqa: E501

        :return: The id_user of this WebhookData.  # noqa: E501
        :rtype: int
        """
        return self._id_user

    @id_user.setter
    def id_user(self, id_user):
        """Sets the id_user of this WebhookData.

        ID of the emitter user  # noqa: E501

        :param id_user: The id_user of this WebhookData.  # noqa: E501
        :type: int
        """
        if id_user is None:
            raise ValueError("Invalid value for `id_user`, must not be `None`")  # noqa: E501

        self._id_user = id_user

    @property
    def id_webhook(self):
        """Gets the id_webhook of this WebhookData.  # noqa: E501

        ID of the webhook  # noqa: E501

        :return: The id_webhook of this WebhookData.  # noqa: E501
        :rtype: int
        """
        return self._id_webhook

    @id_webhook.setter
    def id_webhook(self, id_webhook):
        """Sets the id_webhook of this WebhookData.

        ID of the webhook  # noqa: E501

        :param id_webhook: The id_webhook of this WebhookData.  # noqa: E501
        :type: int
        """
        if id_webhook is None:
            raise ValueError("Invalid value for `id_webhook`, must not be `None`")  # noqa: E501

        self._id_webhook = id_webhook

    @property
    def mimetype(self):
        """Gets the mimetype of this WebhookData.  # noqa: E501

        Mimetype of the data  # noqa: E501

        :return: The mimetype of this WebhookData.  # noqa: E501
        :rtype: str
        """
        return self._mimetype

    @mimetype.setter
    def mimetype(self, mimetype):
        """Sets the mimetype of this WebhookData.

        Mimetype of the data  # noqa: E501

        :param mimetype: The mimetype of this WebhookData.  # noqa: E501
        :type: str
        """

        self._mimetype = mimetype

    @property
    def success(self):
        """Gets the success of this WebhookData.  # noqa: E501

        Timestamp when the hook has been successfully called  # noqa: E501

        :return: The success of this WebhookData.  # noqa: E501
        :rtype: datetime
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this WebhookData.

        Timestamp when the hook has been successfully called  # noqa: E501

        :param success: The success of this WebhookData.  # noqa: E501
        :type: datetime
        """

        self._success = success

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WebhookData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
