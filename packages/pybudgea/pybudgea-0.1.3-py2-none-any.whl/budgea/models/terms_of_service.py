# coding: utf-8

"""
    Budgea API Documentation

    see https://www.budget-insight.com/budgea-api  # noqa: E501

    OpenAPI spec version: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class TermsOfService(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created': 'datetime',
        'deleted': 'datetime',
        'id': 'int',
        'id_file': 'int',
        'version': 'str'
    }

    attribute_map = {
        'created': 'created',
        'deleted': 'deleted',
        'id': 'id',
        'id_file': 'id_file',
        'version': 'version'
    }

    def __init__(self, created=None, deleted=None, id=None, id_file=None, version=None):  # noqa: E501
        """TermsOfService - a model defined in OpenAPI"""  # noqa: E501

        self._created = None
        self._deleted = None
        self._id = None
        self._id_file = None
        self._version = None
        self.discriminator = None

        self.created = created
        if deleted is not None:
            self.deleted = deleted
        self.id = id
        if id_file is not None:
            self.id_file = id_file
        self.version = version

    @property
    def created(self):
        """Gets the created of this TermsOfService.  # noqa: E501


        :return: The created of this TermsOfService.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this TermsOfService.


        :param created: The created of this TermsOfService.  # noqa: E501
        :type: datetime
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def deleted(self):
        """Gets the deleted of this TermsOfService.  # noqa: E501


        :return: The deleted of this TermsOfService.  # noqa: E501
        :rtype: datetime
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this TermsOfService.


        :param deleted: The deleted of this TermsOfService.  # noqa: E501
        :type: datetime
        """

        self._deleted = deleted

    @property
    def id(self):
        """Gets the id of this TermsOfService.  # noqa: E501


        :return: The id of this TermsOfService.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TermsOfService.


        :param id: The id of this TermsOfService.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def id_file(self):
        """Gets the id_file of this TermsOfService.  # noqa: E501


        :return: The id_file of this TermsOfService.  # noqa: E501
        :rtype: int
        """
        return self._id_file

    @id_file.setter
    def id_file(self, id_file):
        """Sets the id_file of this TermsOfService.


        :param id_file: The id_file of this TermsOfService.  # noqa: E501
        :type: int
        """

        self._id_file = id_file

    @property
    def version(self):
        """Gets the version of this TermsOfService.  # noqa: E501


        :return: The version of this TermsOfService.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this TermsOfService.


        :param version: The version of this TermsOfService.  # noqa: E501
        :type: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TermsOfService):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
