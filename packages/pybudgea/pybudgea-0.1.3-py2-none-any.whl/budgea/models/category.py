# coding: utf-8

"""
    Budgea API Documentation

    see https://www.budget-insight.com/budgea-api  # noqa: E501

    OpenAPI spec version: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Category(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'color': 'str',
        'id': 'int',
        'id_logo': 'int',
        'id_parent_category': 'int',
        'id_parent_category_in_menu': 'int',
        'id_user': 'int',
        'income': 'bool',
        'name': 'str',
        'name_displayed': 'str',
        'refundable': 'bool'
    }

    attribute_map = {
        'color': 'color',
        'id': 'id',
        'id_logo': 'id_logo',
        'id_parent_category': 'id_parent_category',
        'id_parent_category_in_menu': 'id_parent_category_in_menu',
        'id_user': 'id_user',
        'income': 'income',
        'name': 'name',
        'name_displayed': 'name_displayed',
        'refundable': 'refundable'
    }

    def __init__(self, color=None, id=None, id_logo=None, id_parent_category=None, id_parent_category_in_menu=None, id_user=None, income=None, name=None, name_displayed=None, refundable=None):  # noqa: E501
        """Category - a model defined in OpenAPI"""  # noqa: E501

        self._color = None
        self._id = None
        self._id_logo = None
        self._id_parent_category = None
        self._id_parent_category_in_menu = None
        self._id_user = None
        self._income = None
        self._name = None
        self._name_displayed = None
        self._refundable = None
        self.discriminator = None

        self.color = color
        self.id = id
        if id_logo is not None:
            self.id_logo = id_logo
        self.id_parent_category = id_parent_category
        self.id_parent_category_in_menu = id_parent_category_in_menu
        if id_user is not None:
            self.id_user = id_user
        if income is not None:
            self.income = income
        self.name = name
        if name_displayed is not None:
            self.name_displayed = name_displayed
        self.refundable = refundable

    @property
    def color(self):
        """Gets the color of this Category.  # noqa: E501

        Color of the category  # noqa: E501

        :return: The color of this Category.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this Category.

        Color of the category  # noqa: E501

        :param color: The color of this Category.  # noqa: E501
        :type: str
        """
        if color is None:
            raise ValueError("Invalid value for `color`, must not be `None`")  # noqa: E501

        self._color = color

    @property
    def id(self):
        """Gets the id of this Category.  # noqa: E501

        ID of the category  # noqa: E501

        :return: The id of this Category.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Category.

        ID of the category  # noqa: E501

        :param id: The id of this Category.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def id_logo(self):
        """Gets the id_logo of this Category.  # noqa: E501

        ID of the logo  # noqa: E501

        :return: The id_logo of this Category.  # noqa: E501
        :rtype: int
        """
        return self._id_logo

    @id_logo.setter
    def id_logo(self, id_logo):
        """Sets the id_logo of this Category.

        ID of the logo  # noqa: E501

        :param id_logo: The id_logo of this Category.  # noqa: E501
        :type: int
        """

        self._id_logo = id_logo

    @property
    def id_parent_category(self):
        """Gets the id_parent_category of this Category.  # noqa: E501

        ID of the parent category. If this is a parent category, it will be equal to its own ID  # noqa: E501

        :return: The id_parent_category of this Category.  # noqa: E501
        :rtype: int
        """
        return self._id_parent_category

    @id_parent_category.setter
    def id_parent_category(self, id_parent_category):
        """Sets the id_parent_category of this Category.

        ID of the parent category. If this is a parent category, it will be equal to its own ID  # noqa: E501

        :param id_parent_category: The id_parent_category of this Category.  # noqa: E501
        :type: int
        """
        if id_parent_category is None:
            raise ValueError("Invalid value for `id_parent_category`, must not be `None`")  # noqa: E501

        self._id_parent_category = id_parent_category

    @property
    def id_parent_category_in_menu(self):
        """Gets the id_parent_category_in_menu of this Category.  # noqa: E501

        ID of the parent category to be displayed  # noqa: E501

        :return: The id_parent_category_in_menu of this Category.  # noqa: E501
        :rtype: int
        """
        return self._id_parent_category_in_menu

    @id_parent_category_in_menu.setter
    def id_parent_category_in_menu(self, id_parent_category_in_menu):
        """Sets the id_parent_category_in_menu of this Category.

        ID of the parent category to be displayed  # noqa: E501

        :param id_parent_category_in_menu: The id_parent_category_in_menu of this Category.  # noqa: E501
        :type: int
        """
        if id_parent_category_in_menu is None:
            raise ValueError("Invalid value for `id_parent_category_in_menu`, must not be `None`")  # noqa: E501

        self._id_parent_category_in_menu = id_parent_category_in_menu

    @property
    def id_user(self):
        """Gets the id_user of this Category.  # noqa: E501

        If not null, this category is specific to a user  # noqa: E501

        :return: The id_user of this Category.  # noqa: E501
        :rtype: int
        """
        return self._id_user

    @id_user.setter
    def id_user(self, id_user):
        """Sets the id_user of this Category.

        If not null, this category is specific to a user  # noqa: E501

        :param id_user: The id_user of this Category.  # noqa: E501
        :type: int
        """

        self._id_user = id_user

    @property
    def income(self):
        """Gets the income of this Category.  # noqa: E501

        Is an income category. If null, this is both an income and an expense category  # noqa: E501

        :return: The income of this Category.  # noqa: E501
        :rtype: bool
        """
        return self._income

    @income.setter
    def income(self, income):
        """Sets the income of this Category.

        Is an income category. If null, this is both an income and an expense category  # noqa: E501

        :param income: The income of this Category.  # noqa: E501
        :type: bool
        """

        self._income = income

    @property
    def name(self):
        """Gets the name of this Category.  # noqa: E501

        Name of the category  # noqa: E501

        :return: The name of this Category.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Category.

        Name of the category  # noqa: E501

        :param name: The name of this Category.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def name_displayed(self):
        """Gets the name_displayed of this Category.  # noqa: E501

        Displayed name, with HTML tags  # noqa: E501

        :return: The name_displayed of this Category.  # noqa: E501
        :rtype: str
        """
        return self._name_displayed

    @name_displayed.setter
    def name_displayed(self, name_displayed):
        """Sets the name_displayed of this Category.

        Displayed name, with HTML tags  # noqa: E501

        :param name_displayed: The name_displayed of this Category.  # noqa: E501
        :type: str
        """

        self._name_displayed = name_displayed

    @property
    def refundable(self):
        """Gets the refundable of this Category.  # noqa: E501

        This category accepts opposite sign of transactions  # noqa: E501

        :return: The refundable of this Category.  # noqa: E501
        :rtype: bool
        """
        return self._refundable

    @refundable.setter
    def refundable(self, refundable):
        """Sets the refundable of this Category.

        This category accepts opposite sign of transactions  # noqa: E501

        :param refundable: The refundable of this Category.  # noqa: E501
        :type: bool
        """
        if refundable is None:
            raise ValueError("Invalid value for `refundable`, must not be `None`")  # noqa: E501

        self._refundable = refundable

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Category):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
