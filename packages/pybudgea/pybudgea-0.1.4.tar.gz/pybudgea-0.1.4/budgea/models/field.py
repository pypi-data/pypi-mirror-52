# coding: utf-8

"""
    Budgea API Documentation

    see https://www.budget-insight.com/budgea-api  # noqa: E501

    OpenAPI spec version: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Field(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ephemeral': 'bool',
        'id': 'int',
        'id_connector': 'int',
        'label': 'str',
        'name': 'str',
        'regex': 'str',
        'required': 'bool',
        'type': 'str',
        'value': 'str'
    }

    attribute_map = {
        'ephemeral': 'ephemeral',
        'id': 'id',
        'id_connector': 'id_connector',
        'label': 'label',
        'name': 'name',
        'regex': 'regex',
        'required': 'required',
        'type': 'type',
        'value': 'value'
    }

    def __init__(self, ephemeral=False, id=None, id_connector=None, label=None, name=None, regex=None, required=True, type='text', value=None):  # noqa: E501
        """Field - a model defined in OpenAPI"""  # noqa: E501

        self._ephemeral = None
        self._id = None
        self._id_connector = None
        self._label = None
        self._name = None
        self._regex = None
        self._required = None
        self._type = None
        self._value = None
        self.discriminator = None

        if ephemeral is not None:
            self.ephemeral = ephemeral
        self.id = id
        self.id_connector = id_connector
        self.label = label
        self.name = name
        if regex is not None:
            self.regex = regex
        if required is not None:
            self.required = required
        if type is not None:
            self.type = type
        if value is not None:
            self.value = value

    @property
    def ephemeral(self):
        """Gets the ephemeral of this Field.  # noqa: E501

        This field will not be saved in database  # noqa: E501

        :return: The ephemeral of this Field.  # noqa: E501
        :rtype: bool
        """
        return self._ephemeral

    @ephemeral.setter
    def ephemeral(self, ephemeral):
        """Sets the ephemeral of this Field.

        This field will not be saved in database  # noqa: E501

        :param ephemeral: The ephemeral of this Field.  # noqa: E501
        :type: bool
        """

        self._ephemeral = ephemeral

    @property
    def id(self):
        """Gets the id of this Field.  # noqa: E501

        ID of the field  # noqa: E501

        :return: The id of this Field.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Field.

        ID of the field  # noqa: E501

        :param id: The id of this Field.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def id_connector(self):
        """Gets the id_connector of this Field.  # noqa: E501

        ID of the related connector  # noqa: E501

        :return: The id_connector of this Field.  # noqa: E501
        :rtype: int
        """
        return self._id_connector

    @id_connector.setter
    def id_connector(self, id_connector):
        """Sets the id_connector of this Field.

        ID of the related connector  # noqa: E501

        :param id_connector: The id_connector of this Field.  # noqa: E501
        :type: int
        """
        if id_connector is None:
            raise ValueError("Invalid value for `id_connector`, must not be `None`")  # noqa: E501

        self._id_connector = id_connector

    @property
    def label(self):
        """Gets the label of this Field.  # noqa: E501

        Label to display to user  # noqa: E501

        :return: The label of this Field.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Field.

        Label to display to user  # noqa: E501

        :param label: The label of this Field.  # noqa: E501
        :type: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")  # noqa: E501

        self._label = label

    @property
    def name(self):
        """Gets the name of this Field.  # noqa: E501

        Name of the field  # noqa: E501

        :return: The name of this Field.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Field.

        Name of the field  # noqa: E501

        :param name: The name of this Field.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def regex(self):
        """Gets the regex of this Field.  # noqa: E501

        If set, the value must match this regexp  # noqa: E501

        :return: The regex of this Field.  # noqa: E501
        :rtype: str
        """
        return self._regex

    @regex.setter
    def regex(self, regex):
        """Sets the regex of this Field.

        If set, the value must match this regexp  # noqa: E501

        :param regex: The regex of this Field.  # noqa: E501
        :type: str
        """

        self._regex = regex

    @property
    def required(self):
        """Gets the required of this Field.  # noqa: E501

        If true, field has to be set to synchronize the connection  # noqa: E501

        :return: The required of this Field.  # noqa: E501
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this Field.

        If true, field has to be set to synchronize the connection  # noqa: E501

        :param required: The required of this Field.  # noqa: E501
        :type: bool
        """

        self._required = required

    @property
    def type(self):
        """Gets the type of this Field.  # noqa: E501

        Type of field (text, password, list, hidden)  # noqa: E501

        :return: The type of this Field.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Field.

        Type of field (text, password, list, hidden)  # noqa: E501

        :param type: The type of this Field.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def value(self):
        """Gets the value of this Field.  # noqa: E501

        Default value of the field  # noqa: E501

        :return: The value of this Field.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Field.

        Default value of the field  # noqa: E501

        :param value: The value of this Field.  # noqa: E501
        :type: str
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Field):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
