# coding: utf-8

"""
    Budgea API Documentation

    see https://www.budget-insight.com/budgea-api  # noqa: E501

    OpenAPI spec version: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Webhook(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'add_to_data': 'str',
        'created': 'datetime',
        'deleted': 'datetime',
        'id': 'int',
        'id_auth': 'int',
        'id_event': 'int',
        'id_service': 'int',
        'id_user': 'int',
        'updated': 'datetime',
        'url': 'str'
    }

    attribute_map = {
        'add_to_data': 'add_to_data',
        'created': 'created',
        'deleted': 'deleted',
        'id': 'id',
        'id_auth': 'id_auth',
        'id_event': 'id_event',
        'id_service': 'id_service',
        'id_user': 'id_user',
        'updated': 'updated',
        'url': 'url'
    }

    def __init__(self, add_to_data=None, created=None, deleted=None, id=None, id_auth=None, id_event=None, id_service=None, id_user=None, updated=None, url=None):  # noqa: E501
        """Webhook - a model defined in OpenAPI"""  # noqa: E501

        self._add_to_data = None
        self._created = None
        self._deleted = None
        self._id = None
        self._id_auth = None
        self._id_event = None
        self._id_service = None
        self._id_user = None
        self._updated = None
        self._url = None
        self.discriminator = None

        if add_to_data is not None:
            self.add_to_data = add_to_data
        self.created = created
        if deleted is not None:
            self.deleted = deleted
        self.id = id
        if id_auth is not None:
            self.id_auth = id_auth
        if id_event is not None:
            self.id_event = id_event
        if id_service is not None:
            self.id_service = id_service
        if id_user is not None:
            self.id_user = id_user
        self.updated = updated
        if url is not None:
            self.url = url

    @property
    def add_to_data(self):
        """Gets the add_to_data of this Webhook.  # noqa: E501

        json object to describe data to add  # noqa: E501

        :return: The add_to_data of this Webhook.  # noqa: E501
        :rtype: str
        """
        return self._add_to_data

    @add_to_data.setter
    def add_to_data(self, add_to_data):
        """Sets the add_to_data of this Webhook.

        json object to describe data to add  # noqa: E501

        :param add_to_data: The add_to_data of this Webhook.  # noqa: E501
        :type: str
        """

        self._add_to_data = add_to_data

    @property
    def created(self):
        """Gets the created of this Webhook.  # noqa: E501

        Date of the webhook creation  # noqa: E501

        :return: The created of this Webhook.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Webhook.

        Date of the webhook creation  # noqa: E501

        :param created: The created of this Webhook.  # noqa: E501
        :type: datetime
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def deleted(self):
        """Gets the deleted of this Webhook.  # noqa: E501

        Date of the webhook deletion  # noqa: E501

        :return: The deleted of this Webhook.  # noqa: E501
        :rtype: datetime
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Webhook.

        Date of the webhook deletion  # noqa: E501

        :param deleted: The deleted of this Webhook.  # noqa: E501
        :type: datetime
        """

        self._deleted = deleted

    @property
    def id(self):
        """Gets the id of this Webhook.  # noqa: E501

        ID of the webhook  # noqa: E501

        :return: The id of this Webhook.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Webhook.

        ID of the webhook  # noqa: E501

        :param id: The id of this Webhook.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def id_auth(self):
        """Gets the id_auth of this Webhook.  # noqa: E501

        ID of the authentication process  # noqa: E501

        :return: The id_auth of this Webhook.  # noqa: E501
        :rtype: int
        """
        return self._id_auth

    @id_auth.setter
    def id_auth(self, id_auth):
        """Sets the id_auth of this Webhook.

        ID of the authentication process  # noqa: E501

        :param id_auth: The id_auth of this Webhook.  # noqa: E501
        :type: int
        """

        self._id_auth = id_auth

    @property
    def id_event(self):
        """Gets the id_event of this Webhook.  # noqa: E501

        ID of the webhook event  # noqa: E501

        :return: The id_event of this Webhook.  # noqa: E501
        :rtype: int
        """
        return self._id_event

    @id_event.setter
    def id_event(self, id_event):
        """Sets the id_event of this Webhook.

        ID of the webhook event  # noqa: E501

        :param id_event: The id_event of this Webhook.  # noqa: E501
        :type: int
        """

        self._id_event = id_event

    @property
    def id_service(self):
        """Gets the id_service of this Webhook.  # noqa: E501

        ID of the service  # noqa: E501

        :return: The id_service of this Webhook.  # noqa: E501
        :rtype: int
        """
        return self._id_service

    @id_service.setter
    def id_service(self, id_service):
        """Sets the id_service of this Webhook.

        ID of the service  # noqa: E501

        :param id_service: The id_service of this Webhook.  # noqa: E501
        :type: int
        """

        self._id_service = id_service

    @property
    def id_user(self):
        """Gets the id_user of this Webhook.  # noqa: E501

        ID of the emitter user  # noqa: E501

        :return: The id_user of this Webhook.  # noqa: E501
        :rtype: int
        """
        return self._id_user

    @id_user.setter
    def id_user(self, id_user):
        """Sets the id_user of this Webhook.

        ID of the emitter user  # noqa: E501

        :param id_user: The id_user of this Webhook.  # noqa: E501
        :type: int
        """

        self._id_user = id_user

    @property
    def updated(self):
        """Gets the updated of this Webhook.  # noqa: E501

        Date of the webhook last update  # noqa: E501

        :return: The updated of this Webhook.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Webhook.

        Date of the webhook last update  # noqa: E501

        :param updated: The updated of this Webhook.  # noqa: E501
        :type: datetime
        """
        if updated is None:
            raise ValueError("Invalid value for `updated`, must not be `None`")  # noqa: E501

        self._updated = updated

    @property
    def url(self):
        """Gets the url of this Webhook.  # noqa: E501

        URL of the webhook  # noqa: E501

        :return: The url of this Webhook.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Webhook.

        URL of the webhook  # noqa: E501

        :param url: The url of this Webhook.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Webhook):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
