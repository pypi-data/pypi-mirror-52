# coding: utf-8

"""
    Budgea API Documentation

    see https://www.budget-insight.com/budgea-api  # noqa: E501

    OpenAPI spec version: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Investment(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'code': 'str',
        'code_type': 'str',
        'deleted': 'datetime',
        'description': 'str',
        'diff': 'float',
        'diff_percent': 'float',
        'id': 'int',
        'id_account': 'int',
        'id_security': 'int',
        'label': 'str',
        'last_update': 'datetime',
        'original_currency': 'object',
        'original_diff': 'float',
        'original_unitprice': 'float',
        'original_unitvalue': 'float',
        'original_valuation': 'float',
        'portfolio_share': 'float',
        'prev_diff': 'float',
        'prev_vdate': 'date',
        'quantity': 'float',
        'source': 'str',
        'unitprice': 'float',
        'unitvalue': 'float',
        'valuation': 'float',
        'vdate': 'date'
    }

    attribute_map = {
        'code': 'code',
        'code_type': 'code_type',
        'deleted': 'deleted',
        'description': 'description',
        'diff': 'diff',
        'diff_percent': 'diff_percent',
        'id': 'id',
        'id_account': 'id_account',
        'id_security': 'id_security',
        'label': 'label',
        'last_update': 'last_update',
        'original_currency': 'original_currency',
        'original_diff': 'original_diff',
        'original_unitprice': 'original_unitprice',
        'original_unitvalue': 'original_unitvalue',
        'original_valuation': 'original_valuation',
        'portfolio_share': 'portfolio_share',
        'prev_diff': 'prev_diff',
        'prev_vdate': 'prev_vdate',
        'quantity': 'quantity',
        'source': 'source',
        'unitprice': 'unitprice',
        'unitvalue': 'unitvalue',
        'valuation': 'valuation',
        'vdate': 'vdate'
    }

    def __init__(self, code=None, code_type=None, deleted=None, description=None, diff=0.0, diff_percent=None, id=None, id_account=None, id_security=None, label=None, last_update=None, original_currency=None, original_diff=None, original_unitprice=None, original_unitvalue=None, original_valuation=None, portfolio_share=None, prev_diff=None, prev_vdate=None, quantity=0.0, source=None, unitprice=0.0, unitvalue=0.0, valuation=0.0, vdate=None):  # noqa: E501
        """Investment - a model defined in OpenAPI"""  # noqa: E501

        self._code = None
        self._code_type = None
        self._deleted = None
        self._description = None
        self._diff = None
        self._diff_percent = None
        self._id = None
        self._id_account = None
        self._id_security = None
        self._label = None
        self._last_update = None
        self._original_currency = None
        self._original_diff = None
        self._original_unitprice = None
        self._original_unitvalue = None
        self._original_valuation = None
        self._portfolio_share = None
        self._prev_diff = None
        self._prev_vdate = None
        self._quantity = None
        self._source = None
        self._unitprice = None
        self._unitvalue = None
        self._valuation = None
        self._vdate = None
        self.discriminator = None

        self.code = code
        if code_type is not None:
            self.code_type = code_type
        if deleted is not None:
            self.deleted = deleted
        if description is not None:
            self.description = description
        if diff is not None:
            self.diff = diff
        if diff_percent is not None:
            self.diff_percent = diff_percent
        self.id = id
        self.id_account = id_account
        if id_security is not None:
            self.id_security = id_security
        self.label = label
        if last_update is not None:
            self.last_update = last_update
        if original_currency is not None:
            self.original_currency = original_currency
        if original_diff is not None:
            self.original_diff = original_diff
        if original_unitprice is not None:
            self.original_unitprice = original_unitprice
        if original_unitvalue is not None:
            self.original_unitvalue = original_unitvalue
        if original_valuation is not None:
            self.original_valuation = original_valuation
        if portfolio_share is not None:
            self.portfolio_share = portfolio_share
        if prev_diff is not None:
            self.prev_diff = prev_diff
        if prev_vdate is not None:
            self.prev_vdate = prev_vdate
        if quantity is not None:
            self.quantity = quantity
        if source is not None:
            self.source = source
        if unitprice is not None:
            self.unitprice = unitprice
        if unitvalue is not None:
            self.unitvalue = unitvalue
        if valuation is not None:
            self.valuation = valuation
        if vdate is not None:
            self.vdate = vdate

    @property
    def code(self):
        """Gets the code of this Investment.  # noqa: E501

        Investment code  # noqa: E501

        :return: The code of this Investment.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Investment.

        Investment code  # noqa: E501

        :param code: The code of this Investment.  # noqa: E501
        :type: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501

        self._code = code

    @property
    def code_type(self):
        """Gets the code_type of this Investment.  # noqa: E501

        Code type (ISIN of AMF)  # noqa: E501

        :return: The code_type of this Investment.  # noqa: E501
        :rtype: str
        """
        return self._code_type

    @code_type.setter
    def code_type(self, code_type):
        """Sets the code_type of this Investment.

        Code type (ISIN of AMF)  # noqa: E501

        :param code_type: The code_type of this Investment.  # noqa: E501
        :type: str
        """

        self._code_type = code_type

    @property
    def deleted(self):
        """Gets the deleted of this Investment.  # noqa: E501

        If set, this investment has been removed from the website  # noqa: E501

        :return: The deleted of this Investment.  # noqa: E501
        :rtype: datetime
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Investment.

        If set, this investment has been removed from the website  # noqa: E501

        :param deleted: The deleted of this Investment.  # noqa: E501
        :type: datetime
        """

        self._deleted = deleted

    @property
    def description(self):
        """Gets the description of this Investment.  # noqa: E501

        Description of the investment  # noqa: E501

        :return: The description of this Investment.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Investment.

        Description of the investment  # noqa: E501

        :param description: The description of this Investment.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def diff(self):
        """Gets the diff of this Investment.  # noqa: E501

        Capital gain  # noqa: E501

        :return: The diff of this Investment.  # noqa: E501
        :rtype: float
        """
        return self._diff

    @diff.setter
    def diff(self, diff):
        """Sets the diff of this Investment.

        Capital gain  # noqa: E501

        :param diff: The diff of this Investment.  # noqa: E501
        :type: float
        """

        self._diff = diff

    @property
    def diff_percent(self):
        """Gets the diff_percent of this Investment.  # noqa: E501

        Capital gain in percent (between 0 and 1)  # noqa: E501

        :return: The diff_percent of this Investment.  # noqa: E501
        :rtype: float
        """
        return self._diff_percent

    @diff_percent.setter
    def diff_percent(self, diff_percent):
        """Sets the diff_percent of this Investment.

        Capital gain in percent (between 0 and 1)  # noqa: E501

        :param diff_percent: The diff_percent of this Investment.  # noqa: E501
        :type: float
        """

        self._diff_percent = diff_percent

    @property
    def id(self):
        """Gets the id of this Investment.  # noqa: E501

        ID of the investment  # noqa: E501

        :return: The id of this Investment.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Investment.

        ID of the investment  # noqa: E501

        :param id: The id of this Investment.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def id_account(self):
        """Gets the id_account of this Investment.  # noqa: E501

        ID of the related account  # noqa: E501

        :return: The id_account of this Investment.  # noqa: E501
        :rtype: int
        """
        return self._id_account

    @id_account.setter
    def id_account(self, id_account):
        """Sets the id_account of this Investment.

        ID of the related account  # noqa: E501

        :param id_account: The id_account of this Investment.  # noqa: E501
        :type: int
        """
        if id_account is None:
            raise ValueError("Invalid value for `id_account`, must not be `None`")  # noqa: E501

        self._id_account = id_account

    @property
    def id_security(self):
        """Gets the id_security of this Investment.  # noqa: E501

        ID of the related security  # noqa: E501

        :return: The id_security of this Investment.  # noqa: E501
        :rtype: int
        """
        return self._id_security

    @id_security.setter
    def id_security(self, id_security):
        """Sets the id_security of this Investment.

        ID of the related security  # noqa: E501

        :param id_security: The id_security of this Investment.  # noqa: E501
        :type: int
        """

        self._id_security = id_security

    @property
    def label(self):
        """Gets the label of this Investment.  # noqa: E501

        Label of the investment  # noqa: E501

        :return: The label of this Investment.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Investment.

        Label of the investment  # noqa: E501

        :param label: The label of this Investment.  # noqa: E501
        :type: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")  # noqa: E501

        self._label = label

    @property
    def last_update(self):
        """Gets the last_update of this Investment.  # noqa: E501

        Last update of the investment  # noqa: E501

        :return: The last_update of this Investment.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update

    @last_update.setter
    def last_update(self, last_update):
        """Sets the last_update of this Investment.

        Last update of the investment  # noqa: E501

        :param last_update: The last_update of this Investment.  # noqa: E501
        :type: datetime
        """

        self._last_update = last_update

    @property
    def original_currency(self):
        """Gets the original_currency of this Investment.  # noqa: E501

        Original currency  # noqa: E501

        :return: The original_currency of this Investment.  # noqa: E501
        :rtype: object
        """
        return self._original_currency

    @original_currency.setter
    def original_currency(self, original_currency):
        """Sets the original_currency of this Investment.

        Original currency  # noqa: E501

        :param original_currency: The original_currency of this Investment.  # noqa: E501
        :type: object
        """

        self._original_currency = original_currency

    @property
    def original_diff(self):
        """Gets the original_diff of this Investment.  # noqa: E501

        Capital gain in the original currency  # noqa: E501

        :return: The original_diff of this Investment.  # noqa: E501
        :rtype: float
        """
        return self._original_diff

    @original_diff.setter
    def original_diff(self, original_diff):
        """Sets the original_diff of this Investment.

        Capital gain in the original currency  # noqa: E501

        :param original_diff: The original_diff of this Investment.  # noqa: E501
        :type: float
        """

        self._original_diff = original_diff

    @property
    def original_unitprice(self):
        """Gets the original_unitprice of this Investment.  # noqa: E501

        Current unit value in the original currency  # noqa: E501

        :return: The original_unitprice of this Investment.  # noqa: E501
        :rtype: float
        """
        return self._original_unitprice

    @original_unitprice.setter
    def original_unitprice(self, original_unitprice):
        """Sets the original_unitprice of this Investment.

        Current unit value in the original currency  # noqa: E501

        :param original_unitprice: The original_unitprice of this Investment.  # noqa: E501
        :type: float
        """

        self._original_unitprice = original_unitprice

    @property
    def original_unitvalue(self):
        """Gets the original_unitvalue of this Investment.  # noqa: E501

        Average buy price in the original currency  # noqa: E501

        :return: The original_unitvalue of this Investment.  # noqa: E501
        :rtype: float
        """
        return self._original_unitvalue

    @original_unitvalue.setter
    def original_unitvalue(self, original_unitvalue):
        """Sets the original_unitvalue of this Investment.

        Average buy price in the original currency  # noqa: E501

        :param original_unitvalue: The original_unitvalue of this Investment.  # noqa: E501
        :type: float
        """

        self._original_unitvalue = original_unitvalue

    @property
    def original_valuation(self):
        """Gets the original_valuation of this Investment.  # noqa: E501

        Valuation in original currency  # noqa: E501

        :return: The original_valuation of this Investment.  # noqa: E501
        :rtype: float
        """
        return self._original_valuation

    @original_valuation.setter
    def original_valuation(self, original_valuation):
        """Sets the original_valuation of this Investment.

        Valuation in original currency  # noqa: E501

        :param original_valuation: The original_valuation of this Investment.  # noqa: E501
        :type: float
        """

        self._original_valuation = original_valuation

    @property
    def portfolio_share(self):
        """Gets the portfolio_share of this Investment.  # noqa: E501

        Percent of the portfolio  # noqa: E501

        :return: The portfolio_share of this Investment.  # noqa: E501
        :rtype: float
        """
        return self._portfolio_share

    @portfolio_share.setter
    def portfolio_share(self, portfolio_share):
        """Sets the portfolio_share of this Investment.

        Percent of the portfolio  # noqa: E501

        :param portfolio_share: The portfolio_share of this Investment.  # noqa: E501
        :type: float
        """

        self._portfolio_share = portfolio_share

    @property
    def prev_diff(self):
        """Gets the prev_diff of this Investment.  # noqa: E501

        Capital gain from previous value  # noqa: E501

        :return: The prev_diff of this Investment.  # noqa: E501
        :rtype: float
        """
        return self._prev_diff

    @prev_diff.setter
    def prev_diff(self, prev_diff):
        """Sets the prev_diff of this Investment.

        Capital gain from previous value  # noqa: E501

        :param prev_diff: The prev_diff of this Investment.  # noqa: E501
        :type: float
        """

        self._prev_diff = prev_diff

    @property
    def prev_vdate(self):
        """Gets the prev_vdate of this Investment.  # noqa: E501

        Value date of the previous value (prev_diff)  # noqa: E501

        :return: The prev_vdate of this Investment.  # noqa: E501
        :rtype: date
        """
        return self._prev_vdate

    @prev_vdate.setter
    def prev_vdate(self, prev_vdate):
        """Sets the prev_vdate of this Investment.

        Value date of the previous value (prev_diff)  # noqa: E501

        :param prev_vdate: The prev_vdate of this Investment.  # noqa: E501
        :type: date
        """

        self._prev_vdate = prev_vdate

    @property
    def quantity(self):
        """Gets the quantity of this Investment.  # noqa: E501

        Quantity  # noqa: E501

        :return: The quantity of this Investment.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this Investment.

        Quantity  # noqa: E501

        :param quantity: The quantity of this Investment.  # noqa: E501
        :type: float
        """

        self._quantity = quantity

    @property
    def source(self):
        """Gets the source of this Investment.  # noqa: E501

        Source of the ISIN code (website, notFound)  # noqa: E501

        :return: The source of this Investment.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Investment.

        Source of the ISIN code (website, notFound)  # noqa: E501

        :param source: The source of this Investment.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def unitprice(self):
        """Gets the unitprice of this Investment.  # noqa: E501

        Average buy price  # noqa: E501

        :return: The unitprice of this Investment.  # noqa: E501
        :rtype: float
        """
        return self._unitprice

    @unitprice.setter
    def unitprice(self, unitprice):
        """Sets the unitprice of this Investment.

        Average buy price  # noqa: E501

        :param unitprice: The unitprice of this Investment.  # noqa: E501
        :type: float
        """

        self._unitprice = unitprice

    @property
    def unitvalue(self):
        """Gets the unitvalue of this Investment.  # noqa: E501

        Current unit value  # noqa: E501

        :return: The unitvalue of this Investment.  # noqa: E501
        :rtype: float
        """
        return self._unitvalue

    @unitvalue.setter
    def unitvalue(self, unitvalue):
        """Sets the unitvalue of this Investment.

        Current unit value  # noqa: E501

        :param unitvalue: The unitvalue of this Investment.  # noqa: E501
        :type: float
        """

        self._unitvalue = unitvalue

    @property
    def valuation(self):
        """Gets the valuation of this Investment.  # noqa: E501

        Current valuation  # noqa: E501

        :return: The valuation of this Investment.  # noqa: E501
        :rtype: float
        """
        return self._valuation

    @valuation.setter
    def valuation(self, valuation):
        """Sets the valuation of this Investment.

        Current valuation  # noqa: E501

        :param valuation: The valuation of this Investment.  # noqa: E501
        :type: float
        """

        self._valuation = valuation

    @property
    def vdate(self):
        """Gets the vdate of this Investment.  # noqa: E501

        Value date  # noqa: E501

        :return: The vdate of this Investment.  # noqa: E501
        :rtype: date
        """
        return self._vdate

    @vdate.setter
    def vdate(self, vdate):
        """Sets the vdate of this Investment.

        Value date  # noqa: E501

        :param vdate: The vdate of this Investment.  # noqa: E501
        :type: date
        """

        self._vdate = vdate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Investment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
