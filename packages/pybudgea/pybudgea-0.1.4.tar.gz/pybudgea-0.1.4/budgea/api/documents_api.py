# coding: utf-8

"""
    Budgea API Documentation

    see https://www.budget-insight.com/budgea-api  # noqa: E501

    OpenAPI spec version: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from budgea.api_client import ApiClient


class DocumentsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def documenttypes_get(self, **kwargs):  # noqa: E501
        """Get document types  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.documenttypes_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand:
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.documenttypes_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.documenttypes_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def documenttypes_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get document types  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.documenttypes_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand:
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method documenttypes_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/documenttypes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20015',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def documenttypes_id_documenttype_put(self, id_documenttype, unknown_base_type, **kwargs):  # noqa: E501
        """Edit a document type  # noqa: E501

        Change value of a document type.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.documenttypes_id_documenttype_put(id_documenttype, unknown_base_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_documenttype: (required)
        :param UNKNOWN_BASE_TYPE unknown_base_type: (required)
        :param str expand:
        :return: DocumentType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.documenttypes_id_documenttype_put_with_http_info(id_documenttype, unknown_base_type, **kwargs)  # noqa: E501
        else:
            (data) = self.documenttypes_id_documenttype_put_with_http_info(id_documenttype, unknown_base_type, **kwargs)  # noqa: E501
            return data

    def documenttypes_id_documenttype_put_with_http_info(self, id_documenttype, unknown_base_type, **kwargs):  # noqa: E501
        """Edit a document type  # noqa: E501

        Change value of a document type.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.documenttypes_id_documenttype_put_with_http_info(id_documenttype, unknown_base_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_documenttype: (required)
        :param UNKNOWN_BASE_TYPE unknown_base_type: (required)
        :param str expand:
        :return: DocumentType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_documenttype', 'unknown_base_type', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method documenttypes_id_documenttype_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_documenttype' is set
        if ('id_documenttype' not in local_var_params or
                local_var_params['id_documenttype'] is None):
            raise ValueError("Missing the required parameter `id_documenttype` when calling `documenttypes_id_documenttype_put`")  # noqa: E501
        # verify the required parameter 'unknown_base_type' is set
        if ('unknown_base_type' not in local_var_params or
                local_var_params['unknown_base_type'] is None):
            raise ValueError("Missing the required parameter `unknown_base_type` when calling `documenttypes_id_documenttype_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_documenttype' in local_var_params:
            path_params['id_documenttype'] = local_var_params['id_documenttype']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'unknown_base_type' in local_var_params:
            body_params = local_var_params['unknown_base_type']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/documenttypes/{id_documenttype}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DocumentType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ocr_post(self, file, **kwargs):  # noqa: E501
        """Post an image with OCR  # noqa: E501

        Post an image and apply OCR on it to obtain found meta-data.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ocr_post(file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file file: File of the document (required)
        :param int id_transaction: Transaction used to help OCR to find data
        :param str name: Name of the document
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ocr_post_with_http_info(file, **kwargs)  # noqa: E501
        else:
            (data) = self.ocr_post_with_http_info(file, **kwargs)  # noqa: E501
            return data

    def ocr_post_with_http_info(self, file, **kwargs):  # noqa: E501
        """Post an image with OCR  # noqa: E501

        Post an image and apply OCR on it to obtain found meta-data.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ocr_post_with_http_info(file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file file: File of the document (required)
        :param int id_transaction: Transaction used to help OCR to find data
        :param str name: Name of the document
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['file', 'id_transaction', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ocr_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'file' is set
        if ('file' not in local_var_params or
                local_var_params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `ocr_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501
        if 'id_transaction' in local_var_params:
            form_params.append(('id_transaction', local_var_params['id_transaction']))  # noqa: E501
        if 'name' in local_var_params:
            form_params.append(('name', local_var_params['name']))  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/ocr', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_accounts_id_account_transactions_id_transaction_documents_delete(self, id_user, id_account, id_transaction, **kwargs):  # noqa: E501
        """Delete documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_transactions_id_transaction_documents_delete(id_user, id_account, id_transaction, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param int id_transaction: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_accounts_id_account_transactions_id_transaction_documents_delete_with_http_info(id_user, id_account, id_transaction, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_accounts_id_account_transactions_id_transaction_documents_delete_with_http_info(id_user, id_account, id_transaction, **kwargs)  # noqa: E501
            return data

    def users_id_user_accounts_id_account_transactions_id_transaction_documents_delete_with_http_info(self, id_user, id_account, id_transaction, **kwargs):  # noqa: E501
        """Delete documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_transactions_id_transaction_documents_delete_with_http_info(id_user, id_account, id_transaction, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param int id_transaction: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_account', 'id_transaction', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_accounts_id_account_transactions_id_transaction_documents_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_accounts_id_account_transactions_id_transaction_documents_delete`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ValueError("Missing the required parameter `id_account` when calling `users_id_user_accounts_id_account_transactions_id_transaction_documents_delete`")  # noqa: E501
        # verify the required parameter 'id_transaction' is set
        if ('id_transaction' not in local_var_params or
                local_var_params['id_transaction'] is None):
            raise ValueError("Missing the required parameter `id_transaction` when calling `users_id_user_accounts_id_account_transactions_id_transaction_documents_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501
        if 'id_transaction' in local_var_params:
            path_params['id_transaction'] = local_var_params['id_transaction']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/accounts/{id_account}/transactions/{id_transaction}/documents', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_accounts_id_account_transactions_id_transaction_documents_get(self, id_user, id_account, id_transaction, **kwargs):  # noqa: E501
        """Get documents  # noqa: E501

        Get list of documents<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_transactions_id_transaction_documents_get(id_user, id_account, id_transaction, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param int id_transaction: (required)
        :param int limit: limit number of results
        :param int offset: offset of first result
        :param date min_date: minimal (inclusive) date
        :param date max_date: maximum (inclusive) date
        :param float min_amount: minimal (inclusive) amount
        :param float max_amount: maximumd (inclusive) amount
        :param float min_timestamp: minimal (inclusive) timestamp
        :param float max_timestamp: maximum (inclusive) timestamp
        :param int id_type: filter with a document type
        :param str expand:
        :return: InlineResponse20030
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_accounts_id_account_transactions_id_transaction_documents_get_with_http_info(id_user, id_account, id_transaction, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_accounts_id_account_transactions_id_transaction_documents_get_with_http_info(id_user, id_account, id_transaction, **kwargs)  # noqa: E501
            return data

    def users_id_user_accounts_id_account_transactions_id_transaction_documents_get_with_http_info(self, id_user, id_account, id_transaction, **kwargs):  # noqa: E501
        """Get documents  # noqa: E501

        Get list of documents<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_transactions_id_transaction_documents_get_with_http_info(id_user, id_account, id_transaction, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param int id_transaction: (required)
        :param int limit: limit number of results
        :param int offset: offset of first result
        :param date min_date: minimal (inclusive) date
        :param date max_date: maximum (inclusive) date
        :param float min_amount: minimal (inclusive) amount
        :param float max_amount: maximumd (inclusive) amount
        :param float min_timestamp: minimal (inclusive) timestamp
        :param float max_timestamp: maximum (inclusive) timestamp
        :param int id_type: filter with a document type
        :param str expand:
        :return: InlineResponse20030
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_account', 'id_transaction', 'limit', 'offset', 'min_date', 'max_date', 'min_amount', 'max_amount', 'min_timestamp', 'max_timestamp', 'id_type', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_accounts_id_account_transactions_id_transaction_documents_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_accounts_id_account_transactions_id_transaction_documents_get`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ValueError("Missing the required parameter `id_account` when calling `users_id_user_accounts_id_account_transactions_id_transaction_documents_get`")  # noqa: E501
        # verify the required parameter 'id_transaction' is set
        if ('id_transaction' not in local_var_params or
                local_var_params['id_transaction'] is None):
            raise ValueError("Missing the required parameter `id_transaction` when calling `users_id_user_accounts_id_account_transactions_id_transaction_documents_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501
        if 'id_transaction' in local_var_params:
            path_params['id_transaction'] = local_var_params['id_transaction']  # noqa: E501

        query_params = []
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params:
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'min_date' in local_var_params:
            query_params.append(('min_date', local_var_params['min_date']))  # noqa: E501
        if 'max_date' in local_var_params:
            query_params.append(('max_date', local_var_params['max_date']))  # noqa: E501
        if 'min_amount' in local_var_params:
            query_params.append(('min_amount', local_var_params['min_amount']))  # noqa: E501
        if 'max_amount' in local_var_params:
            query_params.append(('max_amount', local_var_params['max_amount']))  # noqa: E501
        if 'min_timestamp' in local_var_params:
            query_params.append(('min_timestamp', local_var_params['min_timestamp']))  # noqa: E501
        if 'max_timestamp' in local_var_params:
            query_params.append(('max_timestamp', local_var_params['max_timestamp']))  # noqa: E501
        if 'id_type' in local_var_params:
            query_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/accounts/{id_account}/transactions/{id_transaction}/documents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20030',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_accounts_id_account_transactions_id_transaction_documents_id_document_delete(self, id_user, id_account, id_transaction, id_document, **kwargs):  # noqa: E501
        """Delete a document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_transactions_id_transaction_documents_id_document_delete(id_user, id_account, id_transaction, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param int id_transaction: (required)
        :param int id_document: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_accounts_id_account_transactions_id_transaction_documents_id_document_delete_with_http_info(id_user, id_account, id_transaction, id_document, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_accounts_id_account_transactions_id_transaction_documents_id_document_delete_with_http_info(id_user, id_account, id_transaction, id_document, **kwargs)  # noqa: E501
            return data

    def users_id_user_accounts_id_account_transactions_id_transaction_documents_id_document_delete_with_http_info(self, id_user, id_account, id_transaction, id_document, **kwargs):  # noqa: E501
        """Delete a document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_transactions_id_transaction_documents_id_document_delete_with_http_info(id_user, id_account, id_transaction, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param int id_transaction: (required)
        :param int id_document: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_account', 'id_transaction', 'id_document', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_accounts_id_account_transactions_id_transaction_documents_id_document_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_accounts_id_account_transactions_id_transaction_documents_id_document_delete`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ValueError("Missing the required parameter `id_account` when calling `users_id_user_accounts_id_account_transactions_id_transaction_documents_id_document_delete`")  # noqa: E501
        # verify the required parameter 'id_transaction' is set
        if ('id_transaction' not in local_var_params or
                local_var_params['id_transaction'] is None):
            raise ValueError("Missing the required parameter `id_transaction` when calling `users_id_user_accounts_id_account_transactions_id_transaction_documents_id_document_delete`")  # noqa: E501
        # verify the required parameter 'id_document' is set
        if ('id_document' not in local_var_params or
                local_var_params['id_document'] is None):
            raise ValueError("Missing the required parameter `id_document` when calling `users_id_user_accounts_id_account_transactions_id_transaction_documents_id_document_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501
        if 'id_transaction' in local_var_params:
            path_params['id_transaction'] = local_var_params['id_transaction']  # noqa: E501
        if 'id_document' in local_var_params:
            path_params['id_document'] = local_var_params['id_document']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/accounts/{id_account}/transactions/{id_transaction}/documents/{id_document}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_accounts_id_account_transactions_id_transaction_documents_id_document_put(self, id_user, id_account, id_transaction, id_document, **kwargs):  # noqa: E501
        """Edit a document  # noqa: E501

        Edit meta-data of a specific document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_transactions_id_transaction_documents_id_document_put(id_user, id_account, id_transaction, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param int id_transaction: (required)
        :param int id_document: (required)
        :param str expand:
        :param date date: Date of document
        :param date duedate: Due date of document
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_type: Type of this document
        :param int income: Is an income or an outcome
        :param str name: Name of the document
        :param int readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_accounts_id_account_transactions_id_transaction_documents_id_document_put_with_http_info(id_user, id_account, id_transaction, id_document, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_accounts_id_account_transactions_id_transaction_documents_id_document_put_with_http_info(id_user, id_account, id_transaction, id_document, **kwargs)  # noqa: E501
            return data

    def users_id_user_accounts_id_account_transactions_id_transaction_documents_id_document_put_with_http_info(self, id_user, id_account, id_transaction, id_document, **kwargs):  # noqa: E501
        """Edit a document  # noqa: E501

        Edit meta-data of a specific document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_transactions_id_transaction_documents_id_document_put_with_http_info(id_user, id_account, id_transaction, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param int id_transaction: (required)
        :param int id_document: (required)
        :param str expand:
        :param date date: Date of document
        :param date duedate: Due date of document
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_type: Type of this document
        :param int income: Is an income or an outcome
        :param str name: Name of the document
        :param int readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_account', 'id_transaction', 'id_document', 'expand', 'date', 'duedate', 'file', 'id_category', 'id_type', 'income', 'name', 'readonly', 'total_amount', 'untaxed_amount', 'vat']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_accounts_id_account_transactions_id_transaction_documents_id_document_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_accounts_id_account_transactions_id_transaction_documents_id_document_put`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ValueError("Missing the required parameter `id_account` when calling `users_id_user_accounts_id_account_transactions_id_transaction_documents_id_document_put`")  # noqa: E501
        # verify the required parameter 'id_transaction' is set
        if ('id_transaction' not in local_var_params or
                local_var_params['id_transaction'] is None):
            raise ValueError("Missing the required parameter `id_transaction` when calling `users_id_user_accounts_id_account_transactions_id_transaction_documents_id_document_put`")  # noqa: E501
        # verify the required parameter 'id_document' is set
        if ('id_document' not in local_var_params or
                local_var_params['id_document'] is None):
            raise ValueError("Missing the required parameter `id_document` when calling `users_id_user_accounts_id_account_transactions_id_transaction_documents_id_document_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501
        if 'id_transaction' in local_var_params:
            path_params['id_transaction'] = local_var_params['id_transaction']  # noqa: E501
        if 'id_document' in local_var_params:
            path_params['id_document'] = local_var_params['id_document']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'date' in local_var_params:
            form_params.append(('date', local_var_params['date']))  # noqa: E501
        if 'duedate' in local_var_params:
            form_params.append(('duedate', local_var_params['duedate']))  # noqa: E501
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501
        if 'id_category' in local_var_params:
            form_params.append(('id_category', local_var_params['id_category']))  # noqa: E501
        if 'id_type' in local_var_params:
            form_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'income' in local_var_params:
            form_params.append(('income', local_var_params['income']))  # noqa: E501
        if 'name' in local_var_params:
            form_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'readonly' in local_var_params:
            form_params.append(('readonly', local_var_params['readonly']))  # noqa: E501
        if 'total_amount' in local_var_params:
            form_params.append(('total_amount', local_var_params['total_amount']))  # noqa: E501
        if 'untaxed_amount' in local_var_params:
            form_params.append(('untaxed_amount', local_var_params['untaxed_amount']))  # noqa: E501
        if 'vat' in local_var_params:
            form_params.append(('vat', local_var_params['vat']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/accounts/{id_account}/transactions/{id_transaction}/documents/{id_document}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_accounts_id_account_transactions_id_transaction_documents_post(self, id_user, id_account, id_transaction, date, duedate, **kwargs):  # noqa: E501
        """Add a new document  # noqa: E501

        Add a new document<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_transactions_id_transaction_documents_post(id_user, id_account, id_transaction, date, duedate, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param int id_transaction: (required)
        :param date date: Date of document (required)
        :param date duedate: Due date of document (required)
        :param str expand:
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_ocr: Related OCR process
        :param int id_type: Type of this document
        :param bool income: Is an income or an outcome
        :param str name: Name of the document
        :param bool readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_accounts_id_account_transactions_id_transaction_documents_post_with_http_info(id_user, id_account, id_transaction, date, duedate, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_accounts_id_account_transactions_id_transaction_documents_post_with_http_info(id_user, id_account, id_transaction, date, duedate, **kwargs)  # noqa: E501
            return data

    def users_id_user_accounts_id_account_transactions_id_transaction_documents_post_with_http_info(self, id_user, id_account, id_transaction, date, duedate, **kwargs):  # noqa: E501
        """Add a new document  # noqa: E501

        Add a new document<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_transactions_id_transaction_documents_post_with_http_info(id_user, id_account, id_transaction, date, duedate, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param int id_transaction: (required)
        :param date date: Date of document (required)
        :param date duedate: Due date of document (required)
        :param str expand:
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_ocr: Related OCR process
        :param int id_type: Type of this document
        :param bool income: Is an income or an outcome
        :param str name: Name of the document
        :param bool readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_account', 'id_transaction', 'date', 'duedate', 'expand', 'file', 'id_category', 'id_ocr', 'id_type', 'income', 'name', 'readonly', 'total_amount', 'untaxed_amount', 'vat']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_accounts_id_account_transactions_id_transaction_documents_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_accounts_id_account_transactions_id_transaction_documents_post`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ValueError("Missing the required parameter `id_account` when calling `users_id_user_accounts_id_account_transactions_id_transaction_documents_post`")  # noqa: E501
        # verify the required parameter 'id_transaction' is set
        if ('id_transaction' not in local_var_params or
                local_var_params['id_transaction'] is None):
            raise ValueError("Missing the required parameter `id_transaction` when calling `users_id_user_accounts_id_account_transactions_id_transaction_documents_post`")  # noqa: E501
        # verify the required parameter 'date' is set
        if ('date' not in local_var_params or
                local_var_params['date'] is None):
            raise ValueError("Missing the required parameter `date` when calling `users_id_user_accounts_id_account_transactions_id_transaction_documents_post`")  # noqa: E501
        # verify the required parameter 'duedate' is set
        if ('duedate' not in local_var_params or
                local_var_params['duedate'] is None):
            raise ValueError("Missing the required parameter `duedate` when calling `users_id_user_accounts_id_account_transactions_id_transaction_documents_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501
        if 'id_transaction' in local_var_params:
            path_params['id_transaction'] = local_var_params['id_transaction']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'date' in local_var_params:
            form_params.append(('date', local_var_params['date']))  # noqa: E501
        if 'duedate' in local_var_params:
            form_params.append(('duedate', local_var_params['duedate']))  # noqa: E501
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501
        if 'id_category' in local_var_params:
            form_params.append(('id_category', local_var_params['id_category']))  # noqa: E501
        if 'id_ocr' in local_var_params:
            form_params.append(('id_ocr', local_var_params['id_ocr']))  # noqa: E501
        if 'id_type' in local_var_params:
            form_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'income' in local_var_params:
            form_params.append(('income', local_var_params['income']))  # noqa: E501
        if 'name' in local_var_params:
            form_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'readonly' in local_var_params:
            form_params.append(('readonly', local_var_params['readonly']))  # noqa: E501
        if 'total_amount' in local_var_params:
            form_params.append(('total_amount', local_var_params['total_amount']))  # noqa: E501
        if 'untaxed_amount' in local_var_params:
            form_params.append(('untaxed_amount', local_var_params['untaxed_amount']))  # noqa: E501
        if 'vat' in local_var_params:
            form_params.append(('vat', local_var_params['vat']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/accounts/{id_account}/transactions/{id_transaction}/documents', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_accounts_id_account_transactions_id_transaction_documents_put(self, id_user, id_account, id_transaction, unknown_base_type, **kwargs):  # noqa: E501
        """Attach an existing document to a transaction or a transactions_cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_transactions_id_transaction_documents_put(id_user, id_account, id_transaction, unknown_base_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param int id_transaction: (required)
        :param UNKNOWN_BASE_TYPE unknown_base_type: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_accounts_id_account_transactions_id_transaction_documents_put_with_http_info(id_user, id_account, id_transaction, unknown_base_type, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_accounts_id_account_transactions_id_transaction_documents_put_with_http_info(id_user, id_account, id_transaction, unknown_base_type, **kwargs)  # noqa: E501
            return data

    def users_id_user_accounts_id_account_transactions_id_transaction_documents_put_with_http_info(self, id_user, id_account, id_transaction, unknown_base_type, **kwargs):  # noqa: E501
        """Attach an existing document to a transaction or a transactions_cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_transactions_id_transaction_documents_put_with_http_info(id_user, id_account, id_transaction, unknown_base_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param int id_transaction: (required)
        :param UNKNOWN_BASE_TYPE unknown_base_type: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_account', 'id_transaction', 'unknown_base_type', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_accounts_id_account_transactions_id_transaction_documents_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_accounts_id_account_transactions_id_transaction_documents_put`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ValueError("Missing the required parameter `id_account` when calling `users_id_user_accounts_id_account_transactions_id_transaction_documents_put`")  # noqa: E501
        # verify the required parameter 'id_transaction' is set
        if ('id_transaction' not in local_var_params or
                local_var_params['id_transaction'] is None):
            raise ValueError("Missing the required parameter `id_transaction` when calling `users_id_user_accounts_id_account_transactions_id_transaction_documents_put`")  # noqa: E501
        # verify the required parameter 'unknown_base_type' is set
        if ('unknown_base_type' not in local_var_params or
                local_var_params['unknown_base_type'] is None):
            raise ValueError("Missing the required parameter `unknown_base_type` when calling `users_id_user_accounts_id_account_transactions_id_transaction_documents_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501
        if 'id_transaction' in local_var_params:
            path_params['id_transaction'] = local_var_params['id_transaction']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'unknown_base_type' in local_var_params:
            body_params = local_var_params['unknown_base_type']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/accounts/{id_account}/transactions/{id_transaction}/documents', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_delete(self, id_user, id_account, id_transactions_cluster, **kwargs):  # noqa: E501
        """Delete documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_delete(id_user, id_account, id_transactions_cluster, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param int id_transactions_cluster: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_delete_with_http_info(id_user, id_account, id_transactions_cluster, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_delete_with_http_info(id_user, id_account, id_transactions_cluster, **kwargs)  # noqa: E501
            return data

    def users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_delete_with_http_info(self, id_user, id_account, id_transactions_cluster, **kwargs):  # noqa: E501
        """Delete documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_delete_with_http_info(id_user, id_account, id_transactions_cluster, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param int id_transactions_cluster: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_account', 'id_transactions_cluster', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_delete`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ValueError("Missing the required parameter `id_account` when calling `users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_delete`")  # noqa: E501
        # verify the required parameter 'id_transactions_cluster' is set
        if ('id_transactions_cluster' not in local_var_params or
                local_var_params['id_transactions_cluster'] is None):
            raise ValueError("Missing the required parameter `id_transactions_cluster` when calling `users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501
        if 'id_transactions_cluster' in local_var_params:
            path_params['id_transactions_cluster'] = local_var_params['id_transactions_cluster']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/accounts/{id_account}/transactionsclusters/{id_transactions_cluster}/documents', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_get(self, id_user, id_account, id_transactions_cluster, **kwargs):  # noqa: E501
        """Get documents  # noqa: E501

        Get list of documents<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_get(id_user, id_account, id_transactions_cluster, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param int id_transactions_cluster: (required)
        :param int limit: limit number of results
        :param int offset: offset of first result
        :param date min_date: minimal (inclusive) date
        :param date max_date: maximum (inclusive) date
        :param float min_amount: minimal (inclusive) amount
        :param float max_amount: maximumd (inclusive) amount
        :param float min_timestamp: minimal (inclusive) timestamp
        :param float max_timestamp: maximum (inclusive) timestamp
        :param int id_type: filter with a document type
        :param str expand:
        :return: InlineResponse20030
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_get_with_http_info(id_user, id_account, id_transactions_cluster, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_get_with_http_info(id_user, id_account, id_transactions_cluster, **kwargs)  # noqa: E501
            return data

    def users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_get_with_http_info(self, id_user, id_account, id_transactions_cluster, **kwargs):  # noqa: E501
        """Get documents  # noqa: E501

        Get list of documents<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_get_with_http_info(id_user, id_account, id_transactions_cluster, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param int id_transactions_cluster: (required)
        :param int limit: limit number of results
        :param int offset: offset of first result
        :param date min_date: minimal (inclusive) date
        :param date max_date: maximum (inclusive) date
        :param float min_amount: minimal (inclusive) amount
        :param float max_amount: maximumd (inclusive) amount
        :param float min_timestamp: minimal (inclusive) timestamp
        :param float max_timestamp: maximum (inclusive) timestamp
        :param int id_type: filter with a document type
        :param str expand:
        :return: InlineResponse20030
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_account', 'id_transactions_cluster', 'limit', 'offset', 'min_date', 'max_date', 'min_amount', 'max_amount', 'min_timestamp', 'max_timestamp', 'id_type', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_get`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ValueError("Missing the required parameter `id_account` when calling `users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_get`")  # noqa: E501
        # verify the required parameter 'id_transactions_cluster' is set
        if ('id_transactions_cluster' not in local_var_params or
                local_var_params['id_transactions_cluster'] is None):
            raise ValueError("Missing the required parameter `id_transactions_cluster` when calling `users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501
        if 'id_transactions_cluster' in local_var_params:
            path_params['id_transactions_cluster'] = local_var_params['id_transactions_cluster']  # noqa: E501

        query_params = []
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params:
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'min_date' in local_var_params:
            query_params.append(('min_date', local_var_params['min_date']))  # noqa: E501
        if 'max_date' in local_var_params:
            query_params.append(('max_date', local_var_params['max_date']))  # noqa: E501
        if 'min_amount' in local_var_params:
            query_params.append(('min_amount', local_var_params['min_amount']))  # noqa: E501
        if 'max_amount' in local_var_params:
            query_params.append(('max_amount', local_var_params['max_amount']))  # noqa: E501
        if 'min_timestamp' in local_var_params:
            query_params.append(('min_timestamp', local_var_params['min_timestamp']))  # noqa: E501
        if 'max_timestamp' in local_var_params:
            query_params.append(('max_timestamp', local_var_params['max_timestamp']))  # noqa: E501
        if 'id_type' in local_var_params:
            query_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/accounts/{id_account}/transactionsclusters/{id_transactions_cluster}/documents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20030',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_delete(self, id_user, id_account, id_transactions_cluster, id_document, **kwargs):  # noqa: E501
        """Delete a document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_delete(id_user, id_account, id_transactions_cluster, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param int id_transactions_cluster: (required)
        :param int id_document: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_delete_with_http_info(id_user, id_account, id_transactions_cluster, id_document, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_delete_with_http_info(id_user, id_account, id_transactions_cluster, id_document, **kwargs)  # noqa: E501
            return data

    def users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_delete_with_http_info(self, id_user, id_account, id_transactions_cluster, id_document, **kwargs):  # noqa: E501
        """Delete a document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_delete_with_http_info(id_user, id_account, id_transactions_cluster, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param int id_transactions_cluster: (required)
        :param int id_document: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_account', 'id_transactions_cluster', 'id_document', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_delete`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ValueError("Missing the required parameter `id_account` when calling `users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_delete`")  # noqa: E501
        # verify the required parameter 'id_transactions_cluster' is set
        if ('id_transactions_cluster' not in local_var_params or
                local_var_params['id_transactions_cluster'] is None):
            raise ValueError("Missing the required parameter `id_transactions_cluster` when calling `users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_delete`")  # noqa: E501
        # verify the required parameter 'id_document' is set
        if ('id_document' not in local_var_params or
                local_var_params['id_document'] is None):
            raise ValueError("Missing the required parameter `id_document` when calling `users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501
        if 'id_transactions_cluster' in local_var_params:
            path_params['id_transactions_cluster'] = local_var_params['id_transactions_cluster']  # noqa: E501
        if 'id_document' in local_var_params:
            path_params['id_document'] = local_var_params['id_document']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/accounts/{id_account}/transactionsclusters/{id_transactions_cluster}/documents/{id_document}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_put(self, id_user, id_account, id_transactions_cluster, id_document, **kwargs):  # noqa: E501
        """Edit a document  # noqa: E501

        Edit meta-data of a specific document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_put(id_user, id_account, id_transactions_cluster, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param int id_transactions_cluster: (required)
        :param int id_document: (required)
        :param str expand:
        :param date date: Date of document
        :param date duedate: Due date of document
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_type: Type of this document
        :param int income: Is an income or an outcome
        :param str name: Name of the document
        :param int readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_put_with_http_info(id_user, id_account, id_transactions_cluster, id_document, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_put_with_http_info(id_user, id_account, id_transactions_cluster, id_document, **kwargs)  # noqa: E501
            return data

    def users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_put_with_http_info(self, id_user, id_account, id_transactions_cluster, id_document, **kwargs):  # noqa: E501
        """Edit a document  # noqa: E501

        Edit meta-data of a specific document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_put_with_http_info(id_user, id_account, id_transactions_cluster, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param int id_transactions_cluster: (required)
        :param int id_document: (required)
        :param str expand:
        :param date date: Date of document
        :param date duedate: Due date of document
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_type: Type of this document
        :param int income: Is an income or an outcome
        :param str name: Name of the document
        :param int readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_account', 'id_transactions_cluster', 'id_document', 'expand', 'date', 'duedate', 'file', 'id_category', 'id_type', 'income', 'name', 'readonly', 'total_amount', 'untaxed_amount', 'vat']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_put`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ValueError("Missing the required parameter `id_account` when calling `users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_put`")  # noqa: E501
        # verify the required parameter 'id_transactions_cluster' is set
        if ('id_transactions_cluster' not in local_var_params or
                local_var_params['id_transactions_cluster'] is None):
            raise ValueError("Missing the required parameter `id_transactions_cluster` when calling `users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_put`")  # noqa: E501
        # verify the required parameter 'id_document' is set
        if ('id_document' not in local_var_params or
                local_var_params['id_document'] is None):
            raise ValueError("Missing the required parameter `id_document` when calling `users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501
        if 'id_transactions_cluster' in local_var_params:
            path_params['id_transactions_cluster'] = local_var_params['id_transactions_cluster']  # noqa: E501
        if 'id_document' in local_var_params:
            path_params['id_document'] = local_var_params['id_document']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'date' in local_var_params:
            form_params.append(('date', local_var_params['date']))  # noqa: E501
        if 'duedate' in local_var_params:
            form_params.append(('duedate', local_var_params['duedate']))  # noqa: E501
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501
        if 'id_category' in local_var_params:
            form_params.append(('id_category', local_var_params['id_category']))  # noqa: E501
        if 'id_type' in local_var_params:
            form_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'income' in local_var_params:
            form_params.append(('income', local_var_params['income']))  # noqa: E501
        if 'name' in local_var_params:
            form_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'readonly' in local_var_params:
            form_params.append(('readonly', local_var_params['readonly']))  # noqa: E501
        if 'total_amount' in local_var_params:
            form_params.append(('total_amount', local_var_params['total_amount']))  # noqa: E501
        if 'untaxed_amount' in local_var_params:
            form_params.append(('untaxed_amount', local_var_params['untaxed_amount']))  # noqa: E501
        if 'vat' in local_var_params:
            form_params.append(('vat', local_var_params['vat']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/accounts/{id_account}/transactionsclusters/{id_transactions_cluster}/documents/{id_document}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_post(self, id_user, id_account, id_transactions_cluster, date, duedate, **kwargs):  # noqa: E501
        """Add a new document  # noqa: E501

        Add a new document<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_post(id_user, id_account, id_transactions_cluster, date, duedate, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param int id_transactions_cluster: (required)
        :param date date: Date of document (required)
        :param date duedate: Due date of document (required)
        :param str expand:
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_ocr: Related OCR process
        :param int id_type: Type of this document
        :param bool income: Is an income or an outcome
        :param str name: Name of the document
        :param bool readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_post_with_http_info(id_user, id_account, id_transactions_cluster, date, duedate, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_post_with_http_info(id_user, id_account, id_transactions_cluster, date, duedate, **kwargs)  # noqa: E501
            return data

    def users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_post_with_http_info(self, id_user, id_account, id_transactions_cluster, date, duedate, **kwargs):  # noqa: E501
        """Add a new document  # noqa: E501

        Add a new document<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_post_with_http_info(id_user, id_account, id_transactions_cluster, date, duedate, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param int id_transactions_cluster: (required)
        :param date date: Date of document (required)
        :param date duedate: Due date of document (required)
        :param str expand:
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_ocr: Related OCR process
        :param int id_type: Type of this document
        :param bool income: Is an income or an outcome
        :param str name: Name of the document
        :param bool readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_account', 'id_transactions_cluster', 'date', 'duedate', 'expand', 'file', 'id_category', 'id_ocr', 'id_type', 'income', 'name', 'readonly', 'total_amount', 'untaxed_amount', 'vat']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_post`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ValueError("Missing the required parameter `id_account` when calling `users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_post`")  # noqa: E501
        # verify the required parameter 'id_transactions_cluster' is set
        if ('id_transactions_cluster' not in local_var_params or
                local_var_params['id_transactions_cluster'] is None):
            raise ValueError("Missing the required parameter `id_transactions_cluster` when calling `users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_post`")  # noqa: E501
        # verify the required parameter 'date' is set
        if ('date' not in local_var_params or
                local_var_params['date'] is None):
            raise ValueError("Missing the required parameter `date` when calling `users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_post`")  # noqa: E501
        # verify the required parameter 'duedate' is set
        if ('duedate' not in local_var_params or
                local_var_params['duedate'] is None):
            raise ValueError("Missing the required parameter `duedate` when calling `users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501
        if 'id_transactions_cluster' in local_var_params:
            path_params['id_transactions_cluster'] = local_var_params['id_transactions_cluster']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'date' in local_var_params:
            form_params.append(('date', local_var_params['date']))  # noqa: E501
        if 'duedate' in local_var_params:
            form_params.append(('duedate', local_var_params['duedate']))  # noqa: E501
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501
        if 'id_category' in local_var_params:
            form_params.append(('id_category', local_var_params['id_category']))  # noqa: E501
        if 'id_ocr' in local_var_params:
            form_params.append(('id_ocr', local_var_params['id_ocr']))  # noqa: E501
        if 'id_type' in local_var_params:
            form_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'income' in local_var_params:
            form_params.append(('income', local_var_params['income']))  # noqa: E501
        if 'name' in local_var_params:
            form_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'readonly' in local_var_params:
            form_params.append(('readonly', local_var_params['readonly']))  # noqa: E501
        if 'total_amount' in local_var_params:
            form_params.append(('total_amount', local_var_params['total_amount']))  # noqa: E501
        if 'untaxed_amount' in local_var_params:
            form_params.append(('untaxed_amount', local_var_params['untaxed_amount']))  # noqa: E501
        if 'vat' in local_var_params:
            form_params.append(('vat', local_var_params['vat']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/accounts/{id_account}/transactionsclusters/{id_transactions_cluster}/documents', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_put(self, id_user, id_account, id_transactions_cluster, unknown_base_type, **kwargs):  # noqa: E501
        """Attach an existing document to a transaction or a transactions_cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_put(id_user, id_account, id_transactions_cluster, unknown_base_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param int id_transactions_cluster: (required)
        :param UNKNOWN_BASE_TYPE unknown_base_type: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_put_with_http_info(id_user, id_account, id_transactions_cluster, unknown_base_type, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_put_with_http_info(id_user, id_account, id_transactions_cluster, unknown_base_type, **kwargs)  # noqa: E501
            return data

    def users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_put_with_http_info(self, id_user, id_account, id_transactions_cluster, unknown_base_type, **kwargs):  # noqa: E501
        """Attach an existing document to a transaction or a transactions_cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_put_with_http_info(id_user, id_account, id_transactions_cluster, unknown_base_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_account: (required)
        :param int id_transactions_cluster: (required)
        :param UNKNOWN_BASE_TYPE unknown_base_type: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_account', 'id_transactions_cluster', 'unknown_base_type', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_put`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ValueError("Missing the required parameter `id_account` when calling `users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_put`")  # noqa: E501
        # verify the required parameter 'id_transactions_cluster' is set
        if ('id_transactions_cluster' not in local_var_params or
                local_var_params['id_transactions_cluster'] is None):
            raise ValueError("Missing the required parameter `id_transactions_cluster` when calling `users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_put`")  # noqa: E501
        # verify the required parameter 'unknown_base_type' is set
        if ('unknown_base_type' not in local_var_params or
                local_var_params['unknown_base_type'] is None):
            raise ValueError("Missing the required parameter `unknown_base_type` when calling `users_id_user_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501
        if 'id_transactions_cluster' in local_var_params:
            path_params['id_transactions_cluster'] = local_var_params['id_transactions_cluster']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'unknown_base_type' in local_var_params:
            body_params = local_var_params['unknown_base_type']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/accounts/{id_account}/transactionsclusters/{id_transactions_cluster}/documents', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_delete(self, id_user, id_connection, id_account, id_transaction, **kwargs):  # noqa: E501
        """Delete documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_delete(id_user, id_connection, id_account, id_transaction, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param int id_transaction: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_delete_with_http_info(id_user, id_connection, id_account, id_transaction, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_delete_with_http_info(id_user, id_connection, id_account, id_transaction, **kwargs)  # noqa: E501
            return data

    def users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_delete_with_http_info(self, id_user, id_connection, id_account, id_transaction, **kwargs):  # noqa: E501
        """Delete documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_delete_with_http_info(id_user, id_connection, id_account, id_transaction, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param int id_transaction: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_account', 'id_transaction', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_delete`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_delete`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ValueError("Missing the required parameter `id_account` when calling `users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_delete`")  # noqa: E501
        # verify the required parameter 'id_transaction' is set
        if ('id_transaction' not in local_var_params or
                local_var_params['id_transaction'] is None):
            raise ValueError("Missing the required parameter `id_transaction` when calling `users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501
        if 'id_transaction' in local_var_params:
            path_params['id_transaction'] = local_var_params['id_transaction']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/accounts/{id_account}/transactions/{id_transaction}/documents', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_get(self, id_user, id_connection, id_account, id_transaction, **kwargs):  # noqa: E501
        """Get documents  # noqa: E501

        Get list of documents<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_get(id_user, id_connection, id_account, id_transaction, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param int id_transaction: (required)
        :param int limit: limit number of results
        :param int offset: offset of first result
        :param date min_date: minimal (inclusive) date
        :param date max_date: maximum (inclusive) date
        :param float min_amount: minimal (inclusive) amount
        :param float max_amount: maximumd (inclusive) amount
        :param float min_timestamp: minimal (inclusive) timestamp
        :param float max_timestamp: maximum (inclusive) timestamp
        :param int id_type: filter with a document type
        :param str expand:
        :return: InlineResponse20030
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_get_with_http_info(id_user, id_connection, id_account, id_transaction, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_get_with_http_info(id_user, id_connection, id_account, id_transaction, **kwargs)  # noqa: E501
            return data

    def users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_get_with_http_info(self, id_user, id_connection, id_account, id_transaction, **kwargs):  # noqa: E501
        """Get documents  # noqa: E501

        Get list of documents<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_get_with_http_info(id_user, id_connection, id_account, id_transaction, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param int id_transaction: (required)
        :param int limit: limit number of results
        :param int offset: offset of first result
        :param date min_date: minimal (inclusive) date
        :param date max_date: maximum (inclusive) date
        :param float min_amount: minimal (inclusive) amount
        :param float max_amount: maximumd (inclusive) amount
        :param float min_timestamp: minimal (inclusive) timestamp
        :param float max_timestamp: maximum (inclusive) timestamp
        :param int id_type: filter with a document type
        :param str expand:
        :return: InlineResponse20030
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_account', 'id_transaction', 'limit', 'offset', 'min_date', 'max_date', 'min_amount', 'max_amount', 'min_timestamp', 'max_timestamp', 'id_type', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_get`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_get`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ValueError("Missing the required parameter `id_account` when calling `users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_get`")  # noqa: E501
        # verify the required parameter 'id_transaction' is set
        if ('id_transaction' not in local_var_params or
                local_var_params['id_transaction'] is None):
            raise ValueError("Missing the required parameter `id_transaction` when calling `users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501
        if 'id_transaction' in local_var_params:
            path_params['id_transaction'] = local_var_params['id_transaction']  # noqa: E501

        query_params = []
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params:
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'min_date' in local_var_params:
            query_params.append(('min_date', local_var_params['min_date']))  # noqa: E501
        if 'max_date' in local_var_params:
            query_params.append(('max_date', local_var_params['max_date']))  # noqa: E501
        if 'min_amount' in local_var_params:
            query_params.append(('min_amount', local_var_params['min_amount']))  # noqa: E501
        if 'max_amount' in local_var_params:
            query_params.append(('max_amount', local_var_params['max_amount']))  # noqa: E501
        if 'min_timestamp' in local_var_params:
            query_params.append(('min_timestamp', local_var_params['min_timestamp']))  # noqa: E501
        if 'max_timestamp' in local_var_params:
            query_params.append(('max_timestamp', local_var_params['max_timestamp']))  # noqa: E501
        if 'id_type' in local_var_params:
            query_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/accounts/{id_account}/transactions/{id_transaction}/documents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20030',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_id_document_delete(self, id_user, id_connection, id_account, id_transaction, id_document, **kwargs):  # noqa: E501
        """Delete a document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_id_document_delete(id_user, id_connection, id_account, id_transaction, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param int id_transaction: (required)
        :param int id_document: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_id_document_delete_with_http_info(id_user, id_connection, id_account, id_transaction, id_document, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_id_document_delete_with_http_info(id_user, id_connection, id_account, id_transaction, id_document, **kwargs)  # noqa: E501
            return data

    def users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_id_document_delete_with_http_info(self, id_user, id_connection, id_account, id_transaction, id_document, **kwargs):  # noqa: E501
        """Delete a document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_id_document_delete_with_http_info(id_user, id_connection, id_account, id_transaction, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param int id_transaction: (required)
        :param int id_document: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_account', 'id_transaction', 'id_document', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_id_document_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_id_document_delete`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_id_document_delete`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ValueError("Missing the required parameter `id_account` when calling `users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_id_document_delete`")  # noqa: E501
        # verify the required parameter 'id_transaction' is set
        if ('id_transaction' not in local_var_params or
                local_var_params['id_transaction'] is None):
            raise ValueError("Missing the required parameter `id_transaction` when calling `users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_id_document_delete`")  # noqa: E501
        # verify the required parameter 'id_document' is set
        if ('id_document' not in local_var_params or
                local_var_params['id_document'] is None):
            raise ValueError("Missing the required parameter `id_document` when calling `users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_id_document_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501
        if 'id_transaction' in local_var_params:
            path_params['id_transaction'] = local_var_params['id_transaction']  # noqa: E501
        if 'id_document' in local_var_params:
            path_params['id_document'] = local_var_params['id_document']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/accounts/{id_account}/transactions/{id_transaction}/documents/{id_document}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_id_document_put(self, id_user, id_connection, id_account, id_transaction, id_document, **kwargs):  # noqa: E501
        """Edit a document  # noqa: E501

        Edit meta-data of a specific document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_id_document_put(id_user, id_connection, id_account, id_transaction, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param int id_transaction: (required)
        :param int id_document: (required)
        :param str expand:
        :param date date: Date of document
        :param date duedate: Due date of document
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_type: Type of this document
        :param int income: Is an income or an outcome
        :param str name: Name of the document
        :param int readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_id_document_put_with_http_info(id_user, id_connection, id_account, id_transaction, id_document, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_id_document_put_with_http_info(id_user, id_connection, id_account, id_transaction, id_document, **kwargs)  # noqa: E501
            return data

    def users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_id_document_put_with_http_info(self, id_user, id_connection, id_account, id_transaction, id_document, **kwargs):  # noqa: E501
        """Edit a document  # noqa: E501

        Edit meta-data of a specific document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_id_document_put_with_http_info(id_user, id_connection, id_account, id_transaction, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param int id_transaction: (required)
        :param int id_document: (required)
        :param str expand:
        :param date date: Date of document
        :param date duedate: Due date of document
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_type: Type of this document
        :param int income: Is an income or an outcome
        :param str name: Name of the document
        :param int readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_account', 'id_transaction', 'id_document', 'expand', 'date', 'duedate', 'file', 'id_category', 'id_type', 'income', 'name', 'readonly', 'total_amount', 'untaxed_amount', 'vat']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_id_document_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_id_document_put`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_id_document_put`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ValueError("Missing the required parameter `id_account` when calling `users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_id_document_put`")  # noqa: E501
        # verify the required parameter 'id_transaction' is set
        if ('id_transaction' not in local_var_params or
                local_var_params['id_transaction'] is None):
            raise ValueError("Missing the required parameter `id_transaction` when calling `users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_id_document_put`")  # noqa: E501
        # verify the required parameter 'id_document' is set
        if ('id_document' not in local_var_params or
                local_var_params['id_document'] is None):
            raise ValueError("Missing the required parameter `id_document` when calling `users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_id_document_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501
        if 'id_transaction' in local_var_params:
            path_params['id_transaction'] = local_var_params['id_transaction']  # noqa: E501
        if 'id_document' in local_var_params:
            path_params['id_document'] = local_var_params['id_document']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'date' in local_var_params:
            form_params.append(('date', local_var_params['date']))  # noqa: E501
        if 'duedate' in local_var_params:
            form_params.append(('duedate', local_var_params['duedate']))  # noqa: E501
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501
        if 'id_category' in local_var_params:
            form_params.append(('id_category', local_var_params['id_category']))  # noqa: E501
        if 'id_type' in local_var_params:
            form_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'income' in local_var_params:
            form_params.append(('income', local_var_params['income']))  # noqa: E501
        if 'name' in local_var_params:
            form_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'readonly' in local_var_params:
            form_params.append(('readonly', local_var_params['readonly']))  # noqa: E501
        if 'total_amount' in local_var_params:
            form_params.append(('total_amount', local_var_params['total_amount']))  # noqa: E501
        if 'untaxed_amount' in local_var_params:
            form_params.append(('untaxed_amount', local_var_params['untaxed_amount']))  # noqa: E501
        if 'vat' in local_var_params:
            form_params.append(('vat', local_var_params['vat']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/accounts/{id_account}/transactions/{id_transaction}/documents/{id_document}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_post(self, id_user, id_connection, id_account, id_transaction, date, duedate, **kwargs):  # noqa: E501
        """Add a new document  # noqa: E501

        Add a new document<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_post(id_user, id_connection, id_account, id_transaction, date, duedate, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param int id_transaction: (required)
        :param date date: Date of document (required)
        :param date duedate: Due date of document (required)
        :param str expand:
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_ocr: Related OCR process
        :param int id_type: Type of this document
        :param bool income: Is an income or an outcome
        :param str name: Name of the document
        :param bool readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_post_with_http_info(id_user, id_connection, id_account, id_transaction, date, duedate, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_post_with_http_info(id_user, id_connection, id_account, id_transaction, date, duedate, **kwargs)  # noqa: E501
            return data

    def users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_post_with_http_info(self, id_user, id_connection, id_account, id_transaction, date, duedate, **kwargs):  # noqa: E501
        """Add a new document  # noqa: E501

        Add a new document<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_post_with_http_info(id_user, id_connection, id_account, id_transaction, date, duedate, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param int id_transaction: (required)
        :param date date: Date of document (required)
        :param date duedate: Due date of document (required)
        :param str expand:
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_ocr: Related OCR process
        :param int id_type: Type of this document
        :param bool income: Is an income or an outcome
        :param str name: Name of the document
        :param bool readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_account', 'id_transaction', 'date', 'duedate', 'expand', 'file', 'id_category', 'id_ocr', 'id_type', 'income', 'name', 'readonly', 'total_amount', 'untaxed_amount', 'vat']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_post`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_post`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ValueError("Missing the required parameter `id_account` when calling `users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_post`")  # noqa: E501
        # verify the required parameter 'id_transaction' is set
        if ('id_transaction' not in local_var_params or
                local_var_params['id_transaction'] is None):
            raise ValueError("Missing the required parameter `id_transaction` when calling `users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_post`")  # noqa: E501
        # verify the required parameter 'date' is set
        if ('date' not in local_var_params or
                local_var_params['date'] is None):
            raise ValueError("Missing the required parameter `date` when calling `users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_post`")  # noqa: E501
        # verify the required parameter 'duedate' is set
        if ('duedate' not in local_var_params or
                local_var_params['duedate'] is None):
            raise ValueError("Missing the required parameter `duedate` when calling `users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501
        if 'id_transaction' in local_var_params:
            path_params['id_transaction'] = local_var_params['id_transaction']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'date' in local_var_params:
            form_params.append(('date', local_var_params['date']))  # noqa: E501
        if 'duedate' in local_var_params:
            form_params.append(('duedate', local_var_params['duedate']))  # noqa: E501
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501
        if 'id_category' in local_var_params:
            form_params.append(('id_category', local_var_params['id_category']))  # noqa: E501
        if 'id_ocr' in local_var_params:
            form_params.append(('id_ocr', local_var_params['id_ocr']))  # noqa: E501
        if 'id_type' in local_var_params:
            form_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'income' in local_var_params:
            form_params.append(('income', local_var_params['income']))  # noqa: E501
        if 'name' in local_var_params:
            form_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'readonly' in local_var_params:
            form_params.append(('readonly', local_var_params['readonly']))  # noqa: E501
        if 'total_amount' in local_var_params:
            form_params.append(('total_amount', local_var_params['total_amount']))  # noqa: E501
        if 'untaxed_amount' in local_var_params:
            form_params.append(('untaxed_amount', local_var_params['untaxed_amount']))  # noqa: E501
        if 'vat' in local_var_params:
            form_params.append(('vat', local_var_params['vat']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/accounts/{id_account}/transactions/{id_transaction}/documents', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_put(self, id_user, id_connection, id_account, id_transaction, unknown_base_type, **kwargs):  # noqa: E501
        """Attach an existing document to a transaction or a transactions_cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_put(id_user, id_connection, id_account, id_transaction, unknown_base_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param int id_transaction: (required)
        :param UNKNOWN_BASE_TYPE unknown_base_type: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_put_with_http_info(id_user, id_connection, id_account, id_transaction, unknown_base_type, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_put_with_http_info(id_user, id_connection, id_account, id_transaction, unknown_base_type, **kwargs)  # noqa: E501
            return data

    def users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_put_with_http_info(self, id_user, id_connection, id_account, id_transaction, unknown_base_type, **kwargs):  # noqa: E501
        """Attach an existing document to a transaction or a transactions_cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_put_with_http_info(id_user, id_connection, id_account, id_transaction, unknown_base_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param int id_transaction: (required)
        :param UNKNOWN_BASE_TYPE unknown_base_type: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_account', 'id_transaction', 'unknown_base_type', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_put`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_put`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ValueError("Missing the required parameter `id_account` when calling `users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_put`")  # noqa: E501
        # verify the required parameter 'id_transaction' is set
        if ('id_transaction' not in local_var_params or
                local_var_params['id_transaction'] is None):
            raise ValueError("Missing the required parameter `id_transaction` when calling `users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_put`")  # noqa: E501
        # verify the required parameter 'unknown_base_type' is set
        if ('unknown_base_type' not in local_var_params or
                local_var_params['unknown_base_type'] is None):
            raise ValueError("Missing the required parameter `unknown_base_type` when calling `users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_documents_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501
        if 'id_transaction' in local_var_params:
            path_params['id_transaction'] = local_var_params['id_transaction']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'unknown_base_type' in local_var_params:
            body_params = local_var_params['unknown_base_type']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/accounts/{id_account}/transactions/{id_transaction}/documents', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_delete(self, id_user, id_connection, id_account, id_transactions_cluster, **kwargs):  # noqa: E501
        """Delete documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_delete(id_user, id_connection, id_account, id_transactions_cluster, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param int id_transactions_cluster: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_delete_with_http_info(id_user, id_connection, id_account, id_transactions_cluster, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_delete_with_http_info(id_user, id_connection, id_account, id_transactions_cluster, **kwargs)  # noqa: E501
            return data

    def users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_delete_with_http_info(self, id_user, id_connection, id_account, id_transactions_cluster, **kwargs):  # noqa: E501
        """Delete documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_delete_with_http_info(id_user, id_connection, id_account, id_transactions_cluster, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param int id_transactions_cluster: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_account', 'id_transactions_cluster', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_delete`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_delete`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ValueError("Missing the required parameter `id_account` when calling `users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_delete`")  # noqa: E501
        # verify the required parameter 'id_transactions_cluster' is set
        if ('id_transactions_cluster' not in local_var_params or
                local_var_params['id_transactions_cluster'] is None):
            raise ValueError("Missing the required parameter `id_transactions_cluster` when calling `users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501
        if 'id_transactions_cluster' in local_var_params:
            path_params['id_transactions_cluster'] = local_var_params['id_transactions_cluster']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/accounts/{id_account}/transactionsclusters/{id_transactions_cluster}/documents', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_get(self, id_user, id_connection, id_account, id_transactions_cluster, **kwargs):  # noqa: E501
        """Get documents  # noqa: E501

        Get list of documents<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_get(id_user, id_connection, id_account, id_transactions_cluster, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param int id_transactions_cluster: (required)
        :param int limit: limit number of results
        :param int offset: offset of first result
        :param date min_date: minimal (inclusive) date
        :param date max_date: maximum (inclusive) date
        :param float min_amount: minimal (inclusive) amount
        :param float max_amount: maximumd (inclusive) amount
        :param float min_timestamp: minimal (inclusive) timestamp
        :param float max_timestamp: maximum (inclusive) timestamp
        :param int id_type: filter with a document type
        :param str expand:
        :return: InlineResponse20030
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_get_with_http_info(id_user, id_connection, id_account, id_transactions_cluster, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_get_with_http_info(id_user, id_connection, id_account, id_transactions_cluster, **kwargs)  # noqa: E501
            return data

    def users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_get_with_http_info(self, id_user, id_connection, id_account, id_transactions_cluster, **kwargs):  # noqa: E501
        """Get documents  # noqa: E501

        Get list of documents<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_get_with_http_info(id_user, id_connection, id_account, id_transactions_cluster, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param int id_transactions_cluster: (required)
        :param int limit: limit number of results
        :param int offset: offset of first result
        :param date min_date: minimal (inclusive) date
        :param date max_date: maximum (inclusive) date
        :param float min_amount: minimal (inclusive) amount
        :param float max_amount: maximumd (inclusive) amount
        :param float min_timestamp: minimal (inclusive) timestamp
        :param float max_timestamp: maximum (inclusive) timestamp
        :param int id_type: filter with a document type
        :param str expand:
        :return: InlineResponse20030
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_account', 'id_transactions_cluster', 'limit', 'offset', 'min_date', 'max_date', 'min_amount', 'max_amount', 'min_timestamp', 'max_timestamp', 'id_type', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_get`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_get`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ValueError("Missing the required parameter `id_account` when calling `users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_get`")  # noqa: E501
        # verify the required parameter 'id_transactions_cluster' is set
        if ('id_transactions_cluster' not in local_var_params or
                local_var_params['id_transactions_cluster'] is None):
            raise ValueError("Missing the required parameter `id_transactions_cluster` when calling `users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501
        if 'id_transactions_cluster' in local_var_params:
            path_params['id_transactions_cluster'] = local_var_params['id_transactions_cluster']  # noqa: E501

        query_params = []
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params:
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'min_date' in local_var_params:
            query_params.append(('min_date', local_var_params['min_date']))  # noqa: E501
        if 'max_date' in local_var_params:
            query_params.append(('max_date', local_var_params['max_date']))  # noqa: E501
        if 'min_amount' in local_var_params:
            query_params.append(('min_amount', local_var_params['min_amount']))  # noqa: E501
        if 'max_amount' in local_var_params:
            query_params.append(('max_amount', local_var_params['max_amount']))  # noqa: E501
        if 'min_timestamp' in local_var_params:
            query_params.append(('min_timestamp', local_var_params['min_timestamp']))  # noqa: E501
        if 'max_timestamp' in local_var_params:
            query_params.append(('max_timestamp', local_var_params['max_timestamp']))  # noqa: E501
        if 'id_type' in local_var_params:
            query_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/accounts/{id_account}/transactionsclusters/{id_transactions_cluster}/documents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20030',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_delete(self, id_user, id_connection, id_account, id_transactions_cluster, id_document, **kwargs):  # noqa: E501
        """Delete a document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_delete(id_user, id_connection, id_account, id_transactions_cluster, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param int id_transactions_cluster: (required)
        :param int id_document: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_delete_with_http_info(id_user, id_connection, id_account, id_transactions_cluster, id_document, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_delete_with_http_info(id_user, id_connection, id_account, id_transactions_cluster, id_document, **kwargs)  # noqa: E501
            return data

    def users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_delete_with_http_info(self, id_user, id_connection, id_account, id_transactions_cluster, id_document, **kwargs):  # noqa: E501
        """Delete a document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_delete_with_http_info(id_user, id_connection, id_account, id_transactions_cluster, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param int id_transactions_cluster: (required)
        :param int id_document: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_account', 'id_transactions_cluster', 'id_document', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_delete`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_delete`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ValueError("Missing the required parameter `id_account` when calling `users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_delete`")  # noqa: E501
        # verify the required parameter 'id_transactions_cluster' is set
        if ('id_transactions_cluster' not in local_var_params or
                local_var_params['id_transactions_cluster'] is None):
            raise ValueError("Missing the required parameter `id_transactions_cluster` when calling `users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_delete`")  # noqa: E501
        # verify the required parameter 'id_document' is set
        if ('id_document' not in local_var_params or
                local_var_params['id_document'] is None):
            raise ValueError("Missing the required parameter `id_document` when calling `users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501
        if 'id_transactions_cluster' in local_var_params:
            path_params['id_transactions_cluster'] = local_var_params['id_transactions_cluster']  # noqa: E501
        if 'id_document' in local_var_params:
            path_params['id_document'] = local_var_params['id_document']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/accounts/{id_account}/transactionsclusters/{id_transactions_cluster}/documents/{id_document}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_put(self, id_user, id_connection, id_account, id_transactions_cluster, id_document, **kwargs):  # noqa: E501
        """Edit a document  # noqa: E501

        Edit meta-data of a specific document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_put(id_user, id_connection, id_account, id_transactions_cluster, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param int id_transactions_cluster: (required)
        :param int id_document: (required)
        :param str expand:
        :param date date: Date of document
        :param date duedate: Due date of document
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_type: Type of this document
        :param int income: Is an income or an outcome
        :param str name: Name of the document
        :param int readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_put_with_http_info(id_user, id_connection, id_account, id_transactions_cluster, id_document, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_put_with_http_info(id_user, id_connection, id_account, id_transactions_cluster, id_document, **kwargs)  # noqa: E501
            return data

    def users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_put_with_http_info(self, id_user, id_connection, id_account, id_transactions_cluster, id_document, **kwargs):  # noqa: E501
        """Edit a document  # noqa: E501

        Edit meta-data of a specific document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_put_with_http_info(id_user, id_connection, id_account, id_transactions_cluster, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param int id_transactions_cluster: (required)
        :param int id_document: (required)
        :param str expand:
        :param date date: Date of document
        :param date duedate: Due date of document
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_type: Type of this document
        :param int income: Is an income or an outcome
        :param str name: Name of the document
        :param int readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_account', 'id_transactions_cluster', 'id_document', 'expand', 'date', 'duedate', 'file', 'id_category', 'id_type', 'income', 'name', 'readonly', 'total_amount', 'untaxed_amount', 'vat']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_put`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_put`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ValueError("Missing the required parameter `id_account` when calling `users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_put`")  # noqa: E501
        # verify the required parameter 'id_transactions_cluster' is set
        if ('id_transactions_cluster' not in local_var_params or
                local_var_params['id_transactions_cluster'] is None):
            raise ValueError("Missing the required parameter `id_transactions_cluster` when calling `users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_put`")  # noqa: E501
        # verify the required parameter 'id_document' is set
        if ('id_document' not in local_var_params or
                local_var_params['id_document'] is None):
            raise ValueError("Missing the required parameter `id_document` when calling `users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_id_document_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501
        if 'id_transactions_cluster' in local_var_params:
            path_params['id_transactions_cluster'] = local_var_params['id_transactions_cluster']  # noqa: E501
        if 'id_document' in local_var_params:
            path_params['id_document'] = local_var_params['id_document']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'date' in local_var_params:
            form_params.append(('date', local_var_params['date']))  # noqa: E501
        if 'duedate' in local_var_params:
            form_params.append(('duedate', local_var_params['duedate']))  # noqa: E501
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501
        if 'id_category' in local_var_params:
            form_params.append(('id_category', local_var_params['id_category']))  # noqa: E501
        if 'id_type' in local_var_params:
            form_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'income' in local_var_params:
            form_params.append(('income', local_var_params['income']))  # noqa: E501
        if 'name' in local_var_params:
            form_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'readonly' in local_var_params:
            form_params.append(('readonly', local_var_params['readonly']))  # noqa: E501
        if 'total_amount' in local_var_params:
            form_params.append(('total_amount', local_var_params['total_amount']))  # noqa: E501
        if 'untaxed_amount' in local_var_params:
            form_params.append(('untaxed_amount', local_var_params['untaxed_amount']))  # noqa: E501
        if 'vat' in local_var_params:
            form_params.append(('vat', local_var_params['vat']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/accounts/{id_account}/transactionsclusters/{id_transactions_cluster}/documents/{id_document}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_post(self, id_user, id_connection, id_account, id_transactions_cluster, date, duedate, **kwargs):  # noqa: E501
        """Add a new document  # noqa: E501

        Add a new document<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_post(id_user, id_connection, id_account, id_transactions_cluster, date, duedate, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param int id_transactions_cluster: (required)
        :param date date: Date of document (required)
        :param date duedate: Due date of document (required)
        :param str expand:
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_ocr: Related OCR process
        :param int id_type: Type of this document
        :param bool income: Is an income or an outcome
        :param str name: Name of the document
        :param bool readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_post_with_http_info(id_user, id_connection, id_account, id_transactions_cluster, date, duedate, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_post_with_http_info(id_user, id_connection, id_account, id_transactions_cluster, date, duedate, **kwargs)  # noqa: E501
            return data

    def users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_post_with_http_info(self, id_user, id_connection, id_account, id_transactions_cluster, date, duedate, **kwargs):  # noqa: E501
        """Add a new document  # noqa: E501

        Add a new document<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_post_with_http_info(id_user, id_connection, id_account, id_transactions_cluster, date, duedate, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param int id_transactions_cluster: (required)
        :param date date: Date of document (required)
        :param date duedate: Due date of document (required)
        :param str expand:
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_ocr: Related OCR process
        :param int id_type: Type of this document
        :param bool income: Is an income or an outcome
        :param str name: Name of the document
        :param bool readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_account', 'id_transactions_cluster', 'date', 'duedate', 'expand', 'file', 'id_category', 'id_ocr', 'id_type', 'income', 'name', 'readonly', 'total_amount', 'untaxed_amount', 'vat']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_post`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_post`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ValueError("Missing the required parameter `id_account` when calling `users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_post`")  # noqa: E501
        # verify the required parameter 'id_transactions_cluster' is set
        if ('id_transactions_cluster' not in local_var_params or
                local_var_params['id_transactions_cluster'] is None):
            raise ValueError("Missing the required parameter `id_transactions_cluster` when calling `users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_post`")  # noqa: E501
        # verify the required parameter 'date' is set
        if ('date' not in local_var_params or
                local_var_params['date'] is None):
            raise ValueError("Missing the required parameter `date` when calling `users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_post`")  # noqa: E501
        # verify the required parameter 'duedate' is set
        if ('duedate' not in local_var_params or
                local_var_params['duedate'] is None):
            raise ValueError("Missing the required parameter `duedate` when calling `users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501
        if 'id_transactions_cluster' in local_var_params:
            path_params['id_transactions_cluster'] = local_var_params['id_transactions_cluster']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'date' in local_var_params:
            form_params.append(('date', local_var_params['date']))  # noqa: E501
        if 'duedate' in local_var_params:
            form_params.append(('duedate', local_var_params['duedate']))  # noqa: E501
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501
        if 'id_category' in local_var_params:
            form_params.append(('id_category', local_var_params['id_category']))  # noqa: E501
        if 'id_ocr' in local_var_params:
            form_params.append(('id_ocr', local_var_params['id_ocr']))  # noqa: E501
        if 'id_type' in local_var_params:
            form_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'income' in local_var_params:
            form_params.append(('income', local_var_params['income']))  # noqa: E501
        if 'name' in local_var_params:
            form_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'readonly' in local_var_params:
            form_params.append(('readonly', local_var_params['readonly']))  # noqa: E501
        if 'total_amount' in local_var_params:
            form_params.append(('total_amount', local_var_params['total_amount']))  # noqa: E501
        if 'untaxed_amount' in local_var_params:
            form_params.append(('untaxed_amount', local_var_params['untaxed_amount']))  # noqa: E501
        if 'vat' in local_var_params:
            form_params.append(('vat', local_var_params['vat']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/accounts/{id_account}/transactionsclusters/{id_transactions_cluster}/documents', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_put(self, id_user, id_connection, id_account, id_transactions_cluster, unknown_base_type, **kwargs):  # noqa: E501
        """Attach an existing document to a transaction or a transactions_cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_put(id_user, id_connection, id_account, id_transactions_cluster, unknown_base_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param int id_transactions_cluster: (required)
        :param UNKNOWN_BASE_TYPE unknown_base_type: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_put_with_http_info(id_user, id_connection, id_account, id_transactions_cluster, unknown_base_type, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_put_with_http_info(id_user, id_connection, id_account, id_transactions_cluster, unknown_base_type, **kwargs)  # noqa: E501
            return data

    def users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_put_with_http_info(self, id_user, id_connection, id_account, id_transactions_cluster, unknown_base_type, **kwargs):  # noqa: E501
        """Attach an existing document to a transaction or a transactions_cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_put_with_http_info(id_user, id_connection, id_account, id_transactions_cluster, unknown_base_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_account: (required)
        :param int id_transactions_cluster: (required)
        :param UNKNOWN_BASE_TYPE unknown_base_type: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_account', 'id_transactions_cluster', 'unknown_base_type', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_put`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_put`")  # noqa: E501
        # verify the required parameter 'id_account' is set
        if ('id_account' not in local_var_params or
                local_var_params['id_account'] is None):
            raise ValueError("Missing the required parameter `id_account` when calling `users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_put`")  # noqa: E501
        # verify the required parameter 'id_transactions_cluster' is set
        if ('id_transactions_cluster' not in local_var_params or
                local_var_params['id_transactions_cluster'] is None):
            raise ValueError("Missing the required parameter `id_transactions_cluster` when calling `users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_put`")  # noqa: E501
        # verify the required parameter 'unknown_base_type' is set
        if ('unknown_base_type' not in local_var_params or
                local_var_params['unknown_base_type'] is None):
            raise ValueError("Missing the required parameter `unknown_base_type` when calling `users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactions_cluster_documents_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_account' in local_var_params:
            path_params['id_account'] = local_var_params['id_account']  # noqa: E501
        if 'id_transactions_cluster' in local_var_params:
            path_params['id_transactions_cluster'] = local_var_params['id_transactions_cluster']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'unknown_base_type' in local_var_params:
            body_params = local_var_params['unknown_base_type']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/accounts/{id_account}/transactionsclusters/{id_transactions_cluster}/documents', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_documents_delete(self, id_user, id_connection, **kwargs):  # noqa: E501
        """Delete documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_documents_delete(id_user, id_connection, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_connections_id_connection_documents_delete_with_http_info(id_user, id_connection, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_connections_id_connection_documents_delete_with_http_info(id_user, id_connection, **kwargs)  # noqa: E501
            return data

    def users_id_user_connections_id_connection_documents_delete_with_http_info(self, id_user, id_connection, **kwargs):  # noqa: E501
        """Delete documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_documents_delete_with_http_info(id_user, id_connection, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_documents_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_documents_delete`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_documents_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/documents', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_documents_get(self, id_user, id_connection, **kwargs):  # noqa: E501
        """Get documents  # noqa: E501

        Get list of documents<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_documents_get(id_user, id_connection, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int limit: limit number of results
        :param int offset: offset of first result
        :param date min_date: minimal (inclusive) date
        :param date max_date: maximum (inclusive) date
        :param float min_amount: minimal (inclusive) amount
        :param float max_amount: maximumd (inclusive) amount
        :param float min_timestamp: minimal (inclusive) timestamp
        :param float max_timestamp: maximum (inclusive) timestamp
        :param int id_type: filter with a document type
        :param str expand:
        :return: InlineResponse20030
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_connections_id_connection_documents_get_with_http_info(id_user, id_connection, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_connections_id_connection_documents_get_with_http_info(id_user, id_connection, **kwargs)  # noqa: E501
            return data

    def users_id_user_connections_id_connection_documents_get_with_http_info(self, id_user, id_connection, **kwargs):  # noqa: E501
        """Get documents  # noqa: E501

        Get list of documents<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_documents_get_with_http_info(id_user, id_connection, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int limit: limit number of results
        :param int offset: offset of first result
        :param date min_date: minimal (inclusive) date
        :param date max_date: maximum (inclusive) date
        :param float min_amount: minimal (inclusive) amount
        :param float max_amount: maximumd (inclusive) amount
        :param float min_timestamp: minimal (inclusive) timestamp
        :param float max_timestamp: maximum (inclusive) timestamp
        :param int id_type: filter with a document type
        :param str expand:
        :return: InlineResponse20030
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'limit', 'offset', 'min_date', 'max_date', 'min_amount', 'max_amount', 'min_timestamp', 'max_timestamp', 'id_type', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_documents_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_documents_get`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_documents_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501

        query_params = []
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params:
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'min_date' in local_var_params:
            query_params.append(('min_date', local_var_params['min_date']))  # noqa: E501
        if 'max_date' in local_var_params:
            query_params.append(('max_date', local_var_params['max_date']))  # noqa: E501
        if 'min_amount' in local_var_params:
            query_params.append(('min_amount', local_var_params['min_amount']))  # noqa: E501
        if 'max_amount' in local_var_params:
            query_params.append(('max_amount', local_var_params['max_amount']))  # noqa: E501
        if 'min_timestamp' in local_var_params:
            query_params.append(('min_timestamp', local_var_params['min_timestamp']))  # noqa: E501
        if 'max_timestamp' in local_var_params:
            query_params.append(('max_timestamp', local_var_params['max_timestamp']))  # noqa: E501
        if 'id_type' in local_var_params:
            query_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/documents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20030',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_documents_id_document_delete(self, id_user, id_connection, id_document, **kwargs):  # noqa: E501
        """Delete a document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_documents_id_document_delete(id_user, id_connection, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_document: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_connections_id_connection_documents_id_document_delete_with_http_info(id_user, id_connection, id_document, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_connections_id_connection_documents_id_document_delete_with_http_info(id_user, id_connection, id_document, **kwargs)  # noqa: E501
            return data

    def users_id_user_connections_id_connection_documents_id_document_delete_with_http_info(self, id_user, id_connection, id_document, **kwargs):  # noqa: E501
        """Delete a document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_documents_id_document_delete_with_http_info(id_user, id_connection, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_document: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_document', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_documents_id_document_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_documents_id_document_delete`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_documents_id_document_delete`")  # noqa: E501
        # verify the required parameter 'id_document' is set
        if ('id_document' not in local_var_params or
                local_var_params['id_document'] is None):
            raise ValueError("Missing the required parameter `id_document` when calling `users_id_user_connections_id_connection_documents_id_document_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_document' in local_var_params:
            path_params['id_document'] = local_var_params['id_document']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/documents/{id_document}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_documents_id_document_put(self, id_user, id_connection, id_document, **kwargs):  # noqa: E501
        """Edit a document  # noqa: E501

        Edit meta-data of a specific document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_documents_id_document_put(id_user, id_connection, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_document: (required)
        :param str expand:
        :param date date: Date of document
        :param date duedate: Due date of document
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_type: Type of this document
        :param int income: Is an income or an outcome
        :param str name: Name of the document
        :param int readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_connections_id_connection_documents_id_document_put_with_http_info(id_user, id_connection, id_document, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_connections_id_connection_documents_id_document_put_with_http_info(id_user, id_connection, id_document, **kwargs)  # noqa: E501
            return data

    def users_id_user_connections_id_connection_documents_id_document_put_with_http_info(self, id_user, id_connection, id_document, **kwargs):  # noqa: E501
        """Edit a document  # noqa: E501

        Edit meta-data of a specific document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_documents_id_document_put_with_http_info(id_user, id_connection, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_document: (required)
        :param str expand:
        :param date date: Date of document
        :param date duedate: Due date of document
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_type: Type of this document
        :param int income: Is an income or an outcome
        :param str name: Name of the document
        :param int readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_document', 'expand', 'date', 'duedate', 'file', 'id_category', 'id_type', 'income', 'name', 'readonly', 'total_amount', 'untaxed_amount', 'vat']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_documents_id_document_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_documents_id_document_put`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_documents_id_document_put`")  # noqa: E501
        # verify the required parameter 'id_document' is set
        if ('id_document' not in local_var_params or
                local_var_params['id_document'] is None):
            raise ValueError("Missing the required parameter `id_document` when calling `users_id_user_connections_id_connection_documents_id_document_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_document' in local_var_params:
            path_params['id_document'] = local_var_params['id_document']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'date' in local_var_params:
            form_params.append(('date', local_var_params['date']))  # noqa: E501
        if 'duedate' in local_var_params:
            form_params.append(('duedate', local_var_params['duedate']))  # noqa: E501
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501
        if 'id_category' in local_var_params:
            form_params.append(('id_category', local_var_params['id_category']))  # noqa: E501
        if 'id_type' in local_var_params:
            form_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'income' in local_var_params:
            form_params.append(('income', local_var_params['income']))  # noqa: E501
        if 'name' in local_var_params:
            form_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'readonly' in local_var_params:
            form_params.append(('readonly', local_var_params['readonly']))  # noqa: E501
        if 'total_amount' in local_var_params:
            form_params.append(('total_amount', local_var_params['total_amount']))  # noqa: E501
        if 'untaxed_amount' in local_var_params:
            form_params.append(('untaxed_amount', local_var_params['untaxed_amount']))  # noqa: E501
        if 'vat' in local_var_params:
            form_params.append(('vat', local_var_params['vat']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/documents/{id_document}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_documents_post(self, id_user, id_connection, date, duedate, **kwargs):  # noqa: E501
        """Add a new document  # noqa: E501

        Add a new document<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_documents_post(id_user, id_connection, date, duedate, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param date date: Date of document (required)
        :param date duedate: Due date of document (required)
        :param str expand:
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_ocr: Related OCR process
        :param int id_type: Type of this document
        :param bool income: Is an income or an outcome
        :param str name: Name of the document
        :param bool readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_connections_id_connection_documents_post_with_http_info(id_user, id_connection, date, duedate, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_connections_id_connection_documents_post_with_http_info(id_user, id_connection, date, duedate, **kwargs)  # noqa: E501
            return data

    def users_id_user_connections_id_connection_documents_post_with_http_info(self, id_user, id_connection, date, duedate, **kwargs):  # noqa: E501
        """Add a new document  # noqa: E501

        Add a new document<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_documents_post_with_http_info(id_user, id_connection, date, duedate, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param date date: Date of document (required)
        :param date duedate: Due date of document (required)
        :param str expand:
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_ocr: Related OCR process
        :param int id_type: Type of this document
        :param bool income: Is an income or an outcome
        :param str name: Name of the document
        :param bool readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'date', 'duedate', 'expand', 'file', 'id_category', 'id_ocr', 'id_type', 'income', 'name', 'readonly', 'total_amount', 'untaxed_amount', 'vat']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_documents_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_documents_post`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_documents_post`")  # noqa: E501
        # verify the required parameter 'date' is set
        if ('date' not in local_var_params or
                local_var_params['date'] is None):
            raise ValueError("Missing the required parameter `date` when calling `users_id_user_connections_id_connection_documents_post`")  # noqa: E501
        # verify the required parameter 'duedate' is set
        if ('duedate' not in local_var_params or
                local_var_params['duedate'] is None):
            raise ValueError("Missing the required parameter `duedate` when calling `users_id_user_connections_id_connection_documents_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'date' in local_var_params:
            form_params.append(('date', local_var_params['date']))  # noqa: E501
        if 'duedate' in local_var_params:
            form_params.append(('duedate', local_var_params['duedate']))  # noqa: E501
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501
        if 'id_category' in local_var_params:
            form_params.append(('id_category', local_var_params['id_category']))  # noqa: E501
        if 'id_ocr' in local_var_params:
            form_params.append(('id_ocr', local_var_params['id_ocr']))  # noqa: E501
        if 'id_type' in local_var_params:
            form_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'income' in local_var_params:
            form_params.append(('income', local_var_params['income']))  # noqa: E501
        if 'name' in local_var_params:
            form_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'readonly' in local_var_params:
            form_params.append(('readonly', local_var_params['readonly']))  # noqa: E501
        if 'total_amount' in local_var_params:
            form_params.append(('total_amount', local_var_params['total_amount']))  # noqa: E501
        if 'untaxed_amount' in local_var_params:
            form_params.append(('untaxed_amount', local_var_params['untaxed_amount']))  # noqa: E501
        if 'vat' in local_var_params:
            form_params.append(('vat', local_var_params['vat']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/documents', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_documents_put(self, id_user, id_connection, unknown_base_type, **kwargs):  # noqa: E501
        """Attach an existing document to a transaction or a transactions_cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_documents_put(id_user, id_connection, unknown_base_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param UNKNOWN_BASE_TYPE unknown_base_type: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_connections_id_connection_documents_put_with_http_info(id_user, id_connection, unknown_base_type, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_connections_id_connection_documents_put_with_http_info(id_user, id_connection, unknown_base_type, **kwargs)  # noqa: E501
            return data

    def users_id_user_connections_id_connection_documents_put_with_http_info(self, id_user, id_connection, unknown_base_type, **kwargs):  # noqa: E501
        """Attach an existing document to a transaction or a transactions_cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_documents_put_with_http_info(id_user, id_connection, unknown_base_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param UNKNOWN_BASE_TYPE unknown_base_type: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'unknown_base_type', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_documents_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_documents_put`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_documents_put`")  # noqa: E501
        # verify the required parameter 'unknown_base_type' is set
        if ('unknown_base_type' not in local_var_params or
                local_var_params['unknown_base_type'] is None):
            raise ValueError("Missing the required parameter `unknown_base_type` when calling `users_id_user_connections_id_connection_documents_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'unknown_base_type' in local_var_params:
            body_params = local_var_params['unknown_base_type']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/documents', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_subscriptions_id_subscription_documents_delete(self, id_user, id_connection, id_subscription, **kwargs):  # noqa: E501
        """Delete documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_subscriptions_id_subscription_documents_delete(id_user, id_connection, id_subscription, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_subscription: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_connections_id_connection_subscriptions_id_subscription_documents_delete_with_http_info(id_user, id_connection, id_subscription, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_connections_id_connection_subscriptions_id_subscription_documents_delete_with_http_info(id_user, id_connection, id_subscription, **kwargs)  # noqa: E501
            return data

    def users_id_user_connections_id_connection_subscriptions_id_subscription_documents_delete_with_http_info(self, id_user, id_connection, id_subscription, **kwargs):  # noqa: E501
        """Delete documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_subscriptions_id_subscription_documents_delete_with_http_info(id_user, id_connection, id_subscription, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_subscription: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_subscription', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_subscriptions_id_subscription_documents_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_subscriptions_id_subscription_documents_delete`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_subscriptions_id_subscription_documents_delete`")  # noqa: E501
        # verify the required parameter 'id_subscription' is set
        if ('id_subscription' not in local_var_params or
                local_var_params['id_subscription'] is None):
            raise ValueError("Missing the required parameter `id_subscription` when calling `users_id_user_connections_id_connection_subscriptions_id_subscription_documents_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_subscription' in local_var_params:
            path_params['id_subscription'] = local_var_params['id_subscription']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/subscriptions/{id_subscription}/documents', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_subscriptions_id_subscription_documents_get(self, id_user, id_connection, id_subscription, **kwargs):  # noqa: E501
        """Get documents  # noqa: E501

        Get list of documents<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_subscriptions_id_subscription_documents_get(id_user, id_connection, id_subscription, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_subscription: (required)
        :param int limit: limit number of results
        :param int offset: offset of first result
        :param date min_date: minimal (inclusive) date
        :param date max_date: maximum (inclusive) date
        :param float min_amount: minimal (inclusive) amount
        :param float max_amount: maximumd (inclusive) amount
        :param float min_timestamp: minimal (inclusive) timestamp
        :param float max_timestamp: maximum (inclusive) timestamp
        :param int id_type: filter with a document type
        :param str expand:
        :return: InlineResponse20030
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_connections_id_connection_subscriptions_id_subscription_documents_get_with_http_info(id_user, id_connection, id_subscription, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_connections_id_connection_subscriptions_id_subscription_documents_get_with_http_info(id_user, id_connection, id_subscription, **kwargs)  # noqa: E501
            return data

    def users_id_user_connections_id_connection_subscriptions_id_subscription_documents_get_with_http_info(self, id_user, id_connection, id_subscription, **kwargs):  # noqa: E501
        """Get documents  # noqa: E501

        Get list of documents<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_subscriptions_id_subscription_documents_get_with_http_info(id_user, id_connection, id_subscription, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_subscription: (required)
        :param int limit: limit number of results
        :param int offset: offset of first result
        :param date min_date: minimal (inclusive) date
        :param date max_date: maximum (inclusive) date
        :param float min_amount: minimal (inclusive) amount
        :param float max_amount: maximumd (inclusive) amount
        :param float min_timestamp: minimal (inclusive) timestamp
        :param float max_timestamp: maximum (inclusive) timestamp
        :param int id_type: filter with a document type
        :param str expand:
        :return: InlineResponse20030
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_subscription', 'limit', 'offset', 'min_date', 'max_date', 'min_amount', 'max_amount', 'min_timestamp', 'max_timestamp', 'id_type', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_subscriptions_id_subscription_documents_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_subscriptions_id_subscription_documents_get`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_subscriptions_id_subscription_documents_get`")  # noqa: E501
        # verify the required parameter 'id_subscription' is set
        if ('id_subscription' not in local_var_params or
                local_var_params['id_subscription'] is None):
            raise ValueError("Missing the required parameter `id_subscription` when calling `users_id_user_connections_id_connection_subscriptions_id_subscription_documents_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_subscription' in local_var_params:
            path_params['id_subscription'] = local_var_params['id_subscription']  # noqa: E501

        query_params = []
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params:
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'min_date' in local_var_params:
            query_params.append(('min_date', local_var_params['min_date']))  # noqa: E501
        if 'max_date' in local_var_params:
            query_params.append(('max_date', local_var_params['max_date']))  # noqa: E501
        if 'min_amount' in local_var_params:
            query_params.append(('min_amount', local_var_params['min_amount']))  # noqa: E501
        if 'max_amount' in local_var_params:
            query_params.append(('max_amount', local_var_params['max_amount']))  # noqa: E501
        if 'min_timestamp' in local_var_params:
            query_params.append(('min_timestamp', local_var_params['min_timestamp']))  # noqa: E501
        if 'max_timestamp' in local_var_params:
            query_params.append(('max_timestamp', local_var_params['max_timestamp']))  # noqa: E501
        if 'id_type' in local_var_params:
            query_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/subscriptions/{id_subscription}/documents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20030',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_subscriptions_id_subscription_documents_id_document_delete(self, id_user, id_connection, id_subscription, id_document, **kwargs):  # noqa: E501
        """Delete a document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_subscriptions_id_subscription_documents_id_document_delete(id_user, id_connection, id_subscription, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_subscription: (required)
        :param int id_document: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_connections_id_connection_subscriptions_id_subscription_documents_id_document_delete_with_http_info(id_user, id_connection, id_subscription, id_document, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_connections_id_connection_subscriptions_id_subscription_documents_id_document_delete_with_http_info(id_user, id_connection, id_subscription, id_document, **kwargs)  # noqa: E501
            return data

    def users_id_user_connections_id_connection_subscriptions_id_subscription_documents_id_document_delete_with_http_info(self, id_user, id_connection, id_subscription, id_document, **kwargs):  # noqa: E501
        """Delete a document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_subscriptions_id_subscription_documents_id_document_delete_with_http_info(id_user, id_connection, id_subscription, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_subscription: (required)
        :param int id_document: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_subscription', 'id_document', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_subscriptions_id_subscription_documents_id_document_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_subscriptions_id_subscription_documents_id_document_delete`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_subscriptions_id_subscription_documents_id_document_delete`")  # noqa: E501
        # verify the required parameter 'id_subscription' is set
        if ('id_subscription' not in local_var_params or
                local_var_params['id_subscription'] is None):
            raise ValueError("Missing the required parameter `id_subscription` when calling `users_id_user_connections_id_connection_subscriptions_id_subscription_documents_id_document_delete`")  # noqa: E501
        # verify the required parameter 'id_document' is set
        if ('id_document' not in local_var_params or
                local_var_params['id_document'] is None):
            raise ValueError("Missing the required parameter `id_document` when calling `users_id_user_connections_id_connection_subscriptions_id_subscription_documents_id_document_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_subscription' in local_var_params:
            path_params['id_subscription'] = local_var_params['id_subscription']  # noqa: E501
        if 'id_document' in local_var_params:
            path_params['id_document'] = local_var_params['id_document']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/subscriptions/{id_subscription}/documents/{id_document}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_subscriptions_id_subscription_documents_id_document_put(self, id_user, id_connection, id_subscription, id_document, **kwargs):  # noqa: E501
        """Edit a document  # noqa: E501

        Edit meta-data of a specific document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_subscriptions_id_subscription_documents_id_document_put(id_user, id_connection, id_subscription, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_subscription: (required)
        :param int id_document: (required)
        :param str expand:
        :param date date: Date of document
        :param date duedate: Due date of document
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_type: Type of this document
        :param int income: Is an income or an outcome
        :param str name: Name of the document
        :param int readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_connections_id_connection_subscriptions_id_subscription_documents_id_document_put_with_http_info(id_user, id_connection, id_subscription, id_document, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_connections_id_connection_subscriptions_id_subscription_documents_id_document_put_with_http_info(id_user, id_connection, id_subscription, id_document, **kwargs)  # noqa: E501
            return data

    def users_id_user_connections_id_connection_subscriptions_id_subscription_documents_id_document_put_with_http_info(self, id_user, id_connection, id_subscription, id_document, **kwargs):  # noqa: E501
        """Edit a document  # noqa: E501

        Edit meta-data of a specific document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_subscriptions_id_subscription_documents_id_document_put_with_http_info(id_user, id_connection, id_subscription, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_subscription: (required)
        :param int id_document: (required)
        :param str expand:
        :param date date: Date of document
        :param date duedate: Due date of document
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_type: Type of this document
        :param int income: Is an income or an outcome
        :param str name: Name of the document
        :param int readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_subscription', 'id_document', 'expand', 'date', 'duedate', 'file', 'id_category', 'id_type', 'income', 'name', 'readonly', 'total_amount', 'untaxed_amount', 'vat']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_subscriptions_id_subscription_documents_id_document_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_subscriptions_id_subscription_documents_id_document_put`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_subscriptions_id_subscription_documents_id_document_put`")  # noqa: E501
        # verify the required parameter 'id_subscription' is set
        if ('id_subscription' not in local_var_params or
                local_var_params['id_subscription'] is None):
            raise ValueError("Missing the required parameter `id_subscription` when calling `users_id_user_connections_id_connection_subscriptions_id_subscription_documents_id_document_put`")  # noqa: E501
        # verify the required parameter 'id_document' is set
        if ('id_document' not in local_var_params or
                local_var_params['id_document'] is None):
            raise ValueError("Missing the required parameter `id_document` when calling `users_id_user_connections_id_connection_subscriptions_id_subscription_documents_id_document_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_subscription' in local_var_params:
            path_params['id_subscription'] = local_var_params['id_subscription']  # noqa: E501
        if 'id_document' in local_var_params:
            path_params['id_document'] = local_var_params['id_document']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'date' in local_var_params:
            form_params.append(('date', local_var_params['date']))  # noqa: E501
        if 'duedate' in local_var_params:
            form_params.append(('duedate', local_var_params['duedate']))  # noqa: E501
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501
        if 'id_category' in local_var_params:
            form_params.append(('id_category', local_var_params['id_category']))  # noqa: E501
        if 'id_type' in local_var_params:
            form_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'income' in local_var_params:
            form_params.append(('income', local_var_params['income']))  # noqa: E501
        if 'name' in local_var_params:
            form_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'readonly' in local_var_params:
            form_params.append(('readonly', local_var_params['readonly']))  # noqa: E501
        if 'total_amount' in local_var_params:
            form_params.append(('total_amount', local_var_params['total_amount']))  # noqa: E501
        if 'untaxed_amount' in local_var_params:
            form_params.append(('untaxed_amount', local_var_params['untaxed_amount']))  # noqa: E501
        if 'vat' in local_var_params:
            form_params.append(('vat', local_var_params['vat']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/subscriptions/{id_subscription}/documents/{id_document}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_subscriptions_id_subscription_documents_post(self, id_user, id_connection, id_subscription, date, duedate, **kwargs):  # noqa: E501
        """Add a new document  # noqa: E501

        Add a new document<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_subscriptions_id_subscription_documents_post(id_user, id_connection, id_subscription, date, duedate, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_subscription: (required)
        :param date date: Date of document (required)
        :param date duedate: Due date of document (required)
        :param str expand:
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_ocr: Related OCR process
        :param int id_type: Type of this document
        :param bool income: Is an income or an outcome
        :param str name: Name of the document
        :param bool readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_connections_id_connection_subscriptions_id_subscription_documents_post_with_http_info(id_user, id_connection, id_subscription, date, duedate, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_connections_id_connection_subscriptions_id_subscription_documents_post_with_http_info(id_user, id_connection, id_subscription, date, duedate, **kwargs)  # noqa: E501
            return data

    def users_id_user_connections_id_connection_subscriptions_id_subscription_documents_post_with_http_info(self, id_user, id_connection, id_subscription, date, duedate, **kwargs):  # noqa: E501
        """Add a new document  # noqa: E501

        Add a new document<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_subscriptions_id_subscription_documents_post_with_http_info(id_user, id_connection, id_subscription, date, duedate, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_subscription: (required)
        :param date date: Date of document (required)
        :param date duedate: Due date of document (required)
        :param str expand:
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_ocr: Related OCR process
        :param int id_type: Type of this document
        :param bool income: Is an income or an outcome
        :param str name: Name of the document
        :param bool readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_subscription', 'date', 'duedate', 'expand', 'file', 'id_category', 'id_ocr', 'id_type', 'income', 'name', 'readonly', 'total_amount', 'untaxed_amount', 'vat']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_subscriptions_id_subscription_documents_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_subscriptions_id_subscription_documents_post`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_subscriptions_id_subscription_documents_post`")  # noqa: E501
        # verify the required parameter 'id_subscription' is set
        if ('id_subscription' not in local_var_params or
                local_var_params['id_subscription'] is None):
            raise ValueError("Missing the required parameter `id_subscription` when calling `users_id_user_connections_id_connection_subscriptions_id_subscription_documents_post`")  # noqa: E501
        # verify the required parameter 'date' is set
        if ('date' not in local_var_params or
                local_var_params['date'] is None):
            raise ValueError("Missing the required parameter `date` when calling `users_id_user_connections_id_connection_subscriptions_id_subscription_documents_post`")  # noqa: E501
        # verify the required parameter 'duedate' is set
        if ('duedate' not in local_var_params or
                local_var_params['duedate'] is None):
            raise ValueError("Missing the required parameter `duedate` when calling `users_id_user_connections_id_connection_subscriptions_id_subscription_documents_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_subscription' in local_var_params:
            path_params['id_subscription'] = local_var_params['id_subscription']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'date' in local_var_params:
            form_params.append(('date', local_var_params['date']))  # noqa: E501
        if 'duedate' in local_var_params:
            form_params.append(('duedate', local_var_params['duedate']))  # noqa: E501
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501
        if 'id_category' in local_var_params:
            form_params.append(('id_category', local_var_params['id_category']))  # noqa: E501
        if 'id_ocr' in local_var_params:
            form_params.append(('id_ocr', local_var_params['id_ocr']))  # noqa: E501
        if 'id_type' in local_var_params:
            form_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'income' in local_var_params:
            form_params.append(('income', local_var_params['income']))  # noqa: E501
        if 'name' in local_var_params:
            form_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'readonly' in local_var_params:
            form_params.append(('readonly', local_var_params['readonly']))  # noqa: E501
        if 'total_amount' in local_var_params:
            form_params.append(('total_amount', local_var_params['total_amount']))  # noqa: E501
        if 'untaxed_amount' in local_var_params:
            form_params.append(('untaxed_amount', local_var_params['untaxed_amount']))  # noqa: E501
        if 'vat' in local_var_params:
            form_params.append(('vat', local_var_params['vat']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/subscriptions/{id_subscription}/documents', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_subscriptions_id_subscription_documents_put(self, id_user, id_connection, id_subscription, unknown_base_type, **kwargs):  # noqa: E501
        """Attach an existing document to a transaction or a transactions_cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_subscriptions_id_subscription_documents_put(id_user, id_connection, id_subscription, unknown_base_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_subscription: (required)
        :param UNKNOWN_BASE_TYPE unknown_base_type: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_connections_id_connection_subscriptions_id_subscription_documents_put_with_http_info(id_user, id_connection, id_subscription, unknown_base_type, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_connections_id_connection_subscriptions_id_subscription_documents_put_with_http_info(id_user, id_connection, id_subscription, unknown_base_type, **kwargs)  # noqa: E501
            return data

    def users_id_user_connections_id_connection_subscriptions_id_subscription_documents_put_with_http_info(self, id_user, id_connection, id_subscription, unknown_base_type, **kwargs):  # noqa: E501
        """Attach an existing document to a transaction or a transactions_cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_subscriptions_id_subscription_documents_put_with_http_info(id_user, id_connection, id_subscription, unknown_base_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_subscription: (required)
        :param UNKNOWN_BASE_TYPE unknown_base_type: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_subscription', 'unknown_base_type', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_subscriptions_id_subscription_documents_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_subscriptions_id_subscription_documents_put`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_subscriptions_id_subscription_documents_put`")  # noqa: E501
        # verify the required parameter 'id_subscription' is set
        if ('id_subscription' not in local_var_params or
                local_var_params['id_subscription'] is None):
            raise ValueError("Missing the required parameter `id_subscription` when calling `users_id_user_connections_id_connection_subscriptions_id_subscription_documents_put`")  # noqa: E501
        # verify the required parameter 'unknown_base_type' is set
        if ('unknown_base_type' not in local_var_params or
                local_var_params['unknown_base_type'] is None):
            raise ValueError("Missing the required parameter `unknown_base_type` when calling `users_id_user_connections_id_connection_subscriptions_id_subscription_documents_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_subscription' in local_var_params:
            path_params['id_subscription'] = local_var_params['id_subscription']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'unknown_base_type' in local_var_params:
            body_params = local_var_params['unknown_base_type']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/subscriptions/{id_subscription}/documents', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_transactions_id_transaction_documents_delete(self, id_user, id_connection, id_transaction, **kwargs):  # noqa: E501
        """Delete documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_transactions_id_transaction_documents_delete(id_user, id_connection, id_transaction, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_transaction: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_connections_id_connection_transactions_id_transaction_documents_delete_with_http_info(id_user, id_connection, id_transaction, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_connections_id_connection_transactions_id_transaction_documents_delete_with_http_info(id_user, id_connection, id_transaction, **kwargs)  # noqa: E501
            return data

    def users_id_user_connections_id_connection_transactions_id_transaction_documents_delete_with_http_info(self, id_user, id_connection, id_transaction, **kwargs):  # noqa: E501
        """Delete documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_transactions_id_transaction_documents_delete_with_http_info(id_user, id_connection, id_transaction, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_transaction: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_transaction', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_transactions_id_transaction_documents_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_transactions_id_transaction_documents_delete`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_transactions_id_transaction_documents_delete`")  # noqa: E501
        # verify the required parameter 'id_transaction' is set
        if ('id_transaction' not in local_var_params or
                local_var_params['id_transaction'] is None):
            raise ValueError("Missing the required parameter `id_transaction` when calling `users_id_user_connections_id_connection_transactions_id_transaction_documents_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_transaction' in local_var_params:
            path_params['id_transaction'] = local_var_params['id_transaction']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/transactions/{id_transaction}/documents', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_transactions_id_transaction_documents_get(self, id_user, id_connection, id_transaction, **kwargs):  # noqa: E501
        """Get documents  # noqa: E501

        Get list of documents<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_transactions_id_transaction_documents_get(id_user, id_connection, id_transaction, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_transaction: (required)
        :param int limit: limit number of results
        :param int offset: offset of first result
        :param date min_date: minimal (inclusive) date
        :param date max_date: maximum (inclusive) date
        :param float min_amount: minimal (inclusive) amount
        :param float max_amount: maximumd (inclusive) amount
        :param float min_timestamp: minimal (inclusive) timestamp
        :param float max_timestamp: maximum (inclusive) timestamp
        :param int id_type: filter with a document type
        :param str expand:
        :return: InlineResponse20030
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_connections_id_connection_transactions_id_transaction_documents_get_with_http_info(id_user, id_connection, id_transaction, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_connections_id_connection_transactions_id_transaction_documents_get_with_http_info(id_user, id_connection, id_transaction, **kwargs)  # noqa: E501
            return data

    def users_id_user_connections_id_connection_transactions_id_transaction_documents_get_with_http_info(self, id_user, id_connection, id_transaction, **kwargs):  # noqa: E501
        """Get documents  # noqa: E501

        Get list of documents<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_transactions_id_transaction_documents_get_with_http_info(id_user, id_connection, id_transaction, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_transaction: (required)
        :param int limit: limit number of results
        :param int offset: offset of first result
        :param date min_date: minimal (inclusive) date
        :param date max_date: maximum (inclusive) date
        :param float min_amount: minimal (inclusive) amount
        :param float max_amount: maximumd (inclusive) amount
        :param float min_timestamp: minimal (inclusive) timestamp
        :param float max_timestamp: maximum (inclusive) timestamp
        :param int id_type: filter with a document type
        :param str expand:
        :return: InlineResponse20030
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_transaction', 'limit', 'offset', 'min_date', 'max_date', 'min_amount', 'max_amount', 'min_timestamp', 'max_timestamp', 'id_type', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_transactions_id_transaction_documents_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_transactions_id_transaction_documents_get`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_transactions_id_transaction_documents_get`")  # noqa: E501
        # verify the required parameter 'id_transaction' is set
        if ('id_transaction' not in local_var_params or
                local_var_params['id_transaction'] is None):
            raise ValueError("Missing the required parameter `id_transaction` when calling `users_id_user_connections_id_connection_transactions_id_transaction_documents_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_transaction' in local_var_params:
            path_params['id_transaction'] = local_var_params['id_transaction']  # noqa: E501

        query_params = []
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params:
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'min_date' in local_var_params:
            query_params.append(('min_date', local_var_params['min_date']))  # noqa: E501
        if 'max_date' in local_var_params:
            query_params.append(('max_date', local_var_params['max_date']))  # noqa: E501
        if 'min_amount' in local_var_params:
            query_params.append(('min_amount', local_var_params['min_amount']))  # noqa: E501
        if 'max_amount' in local_var_params:
            query_params.append(('max_amount', local_var_params['max_amount']))  # noqa: E501
        if 'min_timestamp' in local_var_params:
            query_params.append(('min_timestamp', local_var_params['min_timestamp']))  # noqa: E501
        if 'max_timestamp' in local_var_params:
            query_params.append(('max_timestamp', local_var_params['max_timestamp']))  # noqa: E501
        if 'id_type' in local_var_params:
            query_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/transactions/{id_transaction}/documents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20030',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_transactions_id_transaction_documents_id_document_delete(self, id_user, id_connection, id_transaction, id_document, **kwargs):  # noqa: E501
        """Delete a document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_transactions_id_transaction_documents_id_document_delete(id_user, id_connection, id_transaction, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_transaction: (required)
        :param int id_document: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_connections_id_connection_transactions_id_transaction_documents_id_document_delete_with_http_info(id_user, id_connection, id_transaction, id_document, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_connections_id_connection_transactions_id_transaction_documents_id_document_delete_with_http_info(id_user, id_connection, id_transaction, id_document, **kwargs)  # noqa: E501
            return data

    def users_id_user_connections_id_connection_transactions_id_transaction_documents_id_document_delete_with_http_info(self, id_user, id_connection, id_transaction, id_document, **kwargs):  # noqa: E501
        """Delete a document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_transactions_id_transaction_documents_id_document_delete_with_http_info(id_user, id_connection, id_transaction, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_transaction: (required)
        :param int id_document: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_transaction', 'id_document', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_transactions_id_transaction_documents_id_document_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_transactions_id_transaction_documents_id_document_delete`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_transactions_id_transaction_documents_id_document_delete`")  # noqa: E501
        # verify the required parameter 'id_transaction' is set
        if ('id_transaction' not in local_var_params or
                local_var_params['id_transaction'] is None):
            raise ValueError("Missing the required parameter `id_transaction` when calling `users_id_user_connections_id_connection_transactions_id_transaction_documents_id_document_delete`")  # noqa: E501
        # verify the required parameter 'id_document' is set
        if ('id_document' not in local_var_params or
                local_var_params['id_document'] is None):
            raise ValueError("Missing the required parameter `id_document` when calling `users_id_user_connections_id_connection_transactions_id_transaction_documents_id_document_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_transaction' in local_var_params:
            path_params['id_transaction'] = local_var_params['id_transaction']  # noqa: E501
        if 'id_document' in local_var_params:
            path_params['id_document'] = local_var_params['id_document']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/transactions/{id_transaction}/documents/{id_document}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_transactions_id_transaction_documents_id_document_put(self, id_user, id_connection, id_transaction, id_document, **kwargs):  # noqa: E501
        """Edit a document  # noqa: E501

        Edit meta-data of a specific document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_transactions_id_transaction_documents_id_document_put(id_user, id_connection, id_transaction, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_transaction: (required)
        :param int id_document: (required)
        :param str expand:
        :param date date: Date of document
        :param date duedate: Due date of document
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_type: Type of this document
        :param int income: Is an income or an outcome
        :param str name: Name of the document
        :param int readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_connections_id_connection_transactions_id_transaction_documents_id_document_put_with_http_info(id_user, id_connection, id_transaction, id_document, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_connections_id_connection_transactions_id_transaction_documents_id_document_put_with_http_info(id_user, id_connection, id_transaction, id_document, **kwargs)  # noqa: E501
            return data

    def users_id_user_connections_id_connection_transactions_id_transaction_documents_id_document_put_with_http_info(self, id_user, id_connection, id_transaction, id_document, **kwargs):  # noqa: E501
        """Edit a document  # noqa: E501

        Edit meta-data of a specific document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_transactions_id_transaction_documents_id_document_put_with_http_info(id_user, id_connection, id_transaction, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_transaction: (required)
        :param int id_document: (required)
        :param str expand:
        :param date date: Date of document
        :param date duedate: Due date of document
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_type: Type of this document
        :param int income: Is an income or an outcome
        :param str name: Name of the document
        :param int readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_transaction', 'id_document', 'expand', 'date', 'duedate', 'file', 'id_category', 'id_type', 'income', 'name', 'readonly', 'total_amount', 'untaxed_amount', 'vat']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_transactions_id_transaction_documents_id_document_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_transactions_id_transaction_documents_id_document_put`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_transactions_id_transaction_documents_id_document_put`")  # noqa: E501
        # verify the required parameter 'id_transaction' is set
        if ('id_transaction' not in local_var_params or
                local_var_params['id_transaction'] is None):
            raise ValueError("Missing the required parameter `id_transaction` when calling `users_id_user_connections_id_connection_transactions_id_transaction_documents_id_document_put`")  # noqa: E501
        # verify the required parameter 'id_document' is set
        if ('id_document' not in local_var_params or
                local_var_params['id_document'] is None):
            raise ValueError("Missing the required parameter `id_document` when calling `users_id_user_connections_id_connection_transactions_id_transaction_documents_id_document_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_transaction' in local_var_params:
            path_params['id_transaction'] = local_var_params['id_transaction']  # noqa: E501
        if 'id_document' in local_var_params:
            path_params['id_document'] = local_var_params['id_document']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'date' in local_var_params:
            form_params.append(('date', local_var_params['date']))  # noqa: E501
        if 'duedate' in local_var_params:
            form_params.append(('duedate', local_var_params['duedate']))  # noqa: E501
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501
        if 'id_category' in local_var_params:
            form_params.append(('id_category', local_var_params['id_category']))  # noqa: E501
        if 'id_type' in local_var_params:
            form_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'income' in local_var_params:
            form_params.append(('income', local_var_params['income']))  # noqa: E501
        if 'name' in local_var_params:
            form_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'readonly' in local_var_params:
            form_params.append(('readonly', local_var_params['readonly']))  # noqa: E501
        if 'total_amount' in local_var_params:
            form_params.append(('total_amount', local_var_params['total_amount']))  # noqa: E501
        if 'untaxed_amount' in local_var_params:
            form_params.append(('untaxed_amount', local_var_params['untaxed_amount']))  # noqa: E501
        if 'vat' in local_var_params:
            form_params.append(('vat', local_var_params['vat']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/transactions/{id_transaction}/documents/{id_document}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_transactions_id_transaction_documents_post(self, id_user, id_connection, id_transaction, date, duedate, **kwargs):  # noqa: E501
        """Add a new document  # noqa: E501

        Add a new document<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_transactions_id_transaction_documents_post(id_user, id_connection, id_transaction, date, duedate, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_transaction: (required)
        :param date date: Date of document (required)
        :param date duedate: Due date of document (required)
        :param str expand:
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_ocr: Related OCR process
        :param int id_type: Type of this document
        :param bool income: Is an income or an outcome
        :param str name: Name of the document
        :param bool readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_connections_id_connection_transactions_id_transaction_documents_post_with_http_info(id_user, id_connection, id_transaction, date, duedate, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_connections_id_connection_transactions_id_transaction_documents_post_with_http_info(id_user, id_connection, id_transaction, date, duedate, **kwargs)  # noqa: E501
            return data

    def users_id_user_connections_id_connection_transactions_id_transaction_documents_post_with_http_info(self, id_user, id_connection, id_transaction, date, duedate, **kwargs):  # noqa: E501
        """Add a new document  # noqa: E501

        Add a new document<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_transactions_id_transaction_documents_post_with_http_info(id_user, id_connection, id_transaction, date, duedate, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_transaction: (required)
        :param date date: Date of document (required)
        :param date duedate: Due date of document (required)
        :param str expand:
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_ocr: Related OCR process
        :param int id_type: Type of this document
        :param bool income: Is an income or an outcome
        :param str name: Name of the document
        :param bool readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_transaction', 'date', 'duedate', 'expand', 'file', 'id_category', 'id_ocr', 'id_type', 'income', 'name', 'readonly', 'total_amount', 'untaxed_amount', 'vat']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_transactions_id_transaction_documents_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_transactions_id_transaction_documents_post`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_transactions_id_transaction_documents_post`")  # noqa: E501
        # verify the required parameter 'id_transaction' is set
        if ('id_transaction' not in local_var_params or
                local_var_params['id_transaction'] is None):
            raise ValueError("Missing the required parameter `id_transaction` when calling `users_id_user_connections_id_connection_transactions_id_transaction_documents_post`")  # noqa: E501
        # verify the required parameter 'date' is set
        if ('date' not in local_var_params or
                local_var_params['date'] is None):
            raise ValueError("Missing the required parameter `date` when calling `users_id_user_connections_id_connection_transactions_id_transaction_documents_post`")  # noqa: E501
        # verify the required parameter 'duedate' is set
        if ('duedate' not in local_var_params or
                local_var_params['duedate'] is None):
            raise ValueError("Missing the required parameter `duedate` when calling `users_id_user_connections_id_connection_transactions_id_transaction_documents_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_transaction' in local_var_params:
            path_params['id_transaction'] = local_var_params['id_transaction']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'date' in local_var_params:
            form_params.append(('date', local_var_params['date']))  # noqa: E501
        if 'duedate' in local_var_params:
            form_params.append(('duedate', local_var_params['duedate']))  # noqa: E501
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501
        if 'id_category' in local_var_params:
            form_params.append(('id_category', local_var_params['id_category']))  # noqa: E501
        if 'id_ocr' in local_var_params:
            form_params.append(('id_ocr', local_var_params['id_ocr']))  # noqa: E501
        if 'id_type' in local_var_params:
            form_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'income' in local_var_params:
            form_params.append(('income', local_var_params['income']))  # noqa: E501
        if 'name' in local_var_params:
            form_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'readonly' in local_var_params:
            form_params.append(('readonly', local_var_params['readonly']))  # noqa: E501
        if 'total_amount' in local_var_params:
            form_params.append(('total_amount', local_var_params['total_amount']))  # noqa: E501
        if 'untaxed_amount' in local_var_params:
            form_params.append(('untaxed_amount', local_var_params['untaxed_amount']))  # noqa: E501
        if 'vat' in local_var_params:
            form_params.append(('vat', local_var_params['vat']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/transactions/{id_transaction}/documents', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_transactions_id_transaction_documents_put(self, id_user, id_connection, id_transaction, unknown_base_type, **kwargs):  # noqa: E501
        """Attach an existing document to a transaction or a transactions_cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_transactions_id_transaction_documents_put(id_user, id_connection, id_transaction, unknown_base_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_transaction: (required)
        :param UNKNOWN_BASE_TYPE unknown_base_type: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_connections_id_connection_transactions_id_transaction_documents_put_with_http_info(id_user, id_connection, id_transaction, unknown_base_type, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_connections_id_connection_transactions_id_transaction_documents_put_with_http_info(id_user, id_connection, id_transaction, unknown_base_type, **kwargs)  # noqa: E501
            return data

    def users_id_user_connections_id_connection_transactions_id_transaction_documents_put_with_http_info(self, id_user, id_connection, id_transaction, unknown_base_type, **kwargs):  # noqa: E501
        """Attach an existing document to a transaction or a transactions_cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_transactions_id_transaction_documents_put_with_http_info(id_user, id_connection, id_transaction, unknown_base_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_transaction: (required)
        :param UNKNOWN_BASE_TYPE unknown_base_type: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_transaction', 'unknown_base_type', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_transactions_id_transaction_documents_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_transactions_id_transaction_documents_put`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_transactions_id_transaction_documents_put`")  # noqa: E501
        # verify the required parameter 'id_transaction' is set
        if ('id_transaction' not in local_var_params or
                local_var_params['id_transaction'] is None):
            raise ValueError("Missing the required parameter `id_transaction` when calling `users_id_user_connections_id_connection_transactions_id_transaction_documents_put`")  # noqa: E501
        # verify the required parameter 'unknown_base_type' is set
        if ('unknown_base_type' not in local_var_params or
                local_var_params['unknown_base_type'] is None):
            raise ValueError("Missing the required parameter `unknown_base_type` when calling `users_id_user_connections_id_connection_transactions_id_transaction_documents_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_transaction' in local_var_params:
            path_params['id_transaction'] = local_var_params['id_transaction']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'unknown_base_type' in local_var_params:
            body_params = local_var_params['unknown_base_type']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/transactions/{id_transaction}/documents', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_delete(self, id_user, id_connection, id_transactions_cluster, **kwargs):  # noqa: E501
        """Delete documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_delete(id_user, id_connection, id_transactions_cluster, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_transactions_cluster: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_delete_with_http_info(id_user, id_connection, id_transactions_cluster, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_delete_with_http_info(id_user, id_connection, id_transactions_cluster, **kwargs)  # noqa: E501
            return data

    def users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_delete_with_http_info(self, id_user, id_connection, id_transactions_cluster, **kwargs):  # noqa: E501
        """Delete documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_delete_with_http_info(id_user, id_connection, id_transactions_cluster, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_transactions_cluster: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_transactions_cluster', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_delete`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_delete`")  # noqa: E501
        # verify the required parameter 'id_transactions_cluster' is set
        if ('id_transactions_cluster' not in local_var_params or
                local_var_params['id_transactions_cluster'] is None):
            raise ValueError("Missing the required parameter `id_transactions_cluster` when calling `users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_transactions_cluster' in local_var_params:
            path_params['id_transactions_cluster'] = local_var_params['id_transactions_cluster']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/transactionsclusters/{id_transactions_cluster}/documents', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_get(self, id_user, id_connection, id_transactions_cluster, **kwargs):  # noqa: E501
        """Get documents  # noqa: E501

        Get list of documents<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_get(id_user, id_connection, id_transactions_cluster, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_transactions_cluster: (required)
        :param int limit: limit number of results
        :param int offset: offset of first result
        :param date min_date: minimal (inclusive) date
        :param date max_date: maximum (inclusive) date
        :param float min_amount: minimal (inclusive) amount
        :param float max_amount: maximumd (inclusive) amount
        :param float min_timestamp: minimal (inclusive) timestamp
        :param float max_timestamp: maximum (inclusive) timestamp
        :param int id_type: filter with a document type
        :param str expand:
        :return: InlineResponse20030
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_get_with_http_info(id_user, id_connection, id_transactions_cluster, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_get_with_http_info(id_user, id_connection, id_transactions_cluster, **kwargs)  # noqa: E501
            return data

    def users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_get_with_http_info(self, id_user, id_connection, id_transactions_cluster, **kwargs):  # noqa: E501
        """Get documents  # noqa: E501

        Get list of documents<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_get_with_http_info(id_user, id_connection, id_transactions_cluster, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_transactions_cluster: (required)
        :param int limit: limit number of results
        :param int offset: offset of first result
        :param date min_date: minimal (inclusive) date
        :param date max_date: maximum (inclusive) date
        :param float min_amount: minimal (inclusive) amount
        :param float max_amount: maximumd (inclusive) amount
        :param float min_timestamp: minimal (inclusive) timestamp
        :param float max_timestamp: maximum (inclusive) timestamp
        :param int id_type: filter with a document type
        :param str expand:
        :return: InlineResponse20030
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_transactions_cluster', 'limit', 'offset', 'min_date', 'max_date', 'min_amount', 'max_amount', 'min_timestamp', 'max_timestamp', 'id_type', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_get`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_get`")  # noqa: E501
        # verify the required parameter 'id_transactions_cluster' is set
        if ('id_transactions_cluster' not in local_var_params or
                local_var_params['id_transactions_cluster'] is None):
            raise ValueError("Missing the required parameter `id_transactions_cluster` when calling `users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_transactions_cluster' in local_var_params:
            path_params['id_transactions_cluster'] = local_var_params['id_transactions_cluster']  # noqa: E501

        query_params = []
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params:
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'min_date' in local_var_params:
            query_params.append(('min_date', local_var_params['min_date']))  # noqa: E501
        if 'max_date' in local_var_params:
            query_params.append(('max_date', local_var_params['max_date']))  # noqa: E501
        if 'min_amount' in local_var_params:
            query_params.append(('min_amount', local_var_params['min_amount']))  # noqa: E501
        if 'max_amount' in local_var_params:
            query_params.append(('max_amount', local_var_params['max_amount']))  # noqa: E501
        if 'min_timestamp' in local_var_params:
            query_params.append(('min_timestamp', local_var_params['min_timestamp']))  # noqa: E501
        if 'max_timestamp' in local_var_params:
            query_params.append(('max_timestamp', local_var_params['max_timestamp']))  # noqa: E501
        if 'id_type' in local_var_params:
            query_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/transactionsclusters/{id_transactions_cluster}/documents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20030',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_id_document_delete(self, id_user, id_connection, id_transactions_cluster, id_document, **kwargs):  # noqa: E501
        """Delete a document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_id_document_delete(id_user, id_connection, id_transactions_cluster, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_transactions_cluster: (required)
        :param int id_document: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_id_document_delete_with_http_info(id_user, id_connection, id_transactions_cluster, id_document, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_id_document_delete_with_http_info(id_user, id_connection, id_transactions_cluster, id_document, **kwargs)  # noqa: E501
            return data

    def users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_id_document_delete_with_http_info(self, id_user, id_connection, id_transactions_cluster, id_document, **kwargs):  # noqa: E501
        """Delete a document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_id_document_delete_with_http_info(id_user, id_connection, id_transactions_cluster, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_transactions_cluster: (required)
        :param int id_document: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_transactions_cluster', 'id_document', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_id_document_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_id_document_delete`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_id_document_delete`")  # noqa: E501
        # verify the required parameter 'id_transactions_cluster' is set
        if ('id_transactions_cluster' not in local_var_params or
                local_var_params['id_transactions_cluster'] is None):
            raise ValueError("Missing the required parameter `id_transactions_cluster` when calling `users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_id_document_delete`")  # noqa: E501
        # verify the required parameter 'id_document' is set
        if ('id_document' not in local_var_params or
                local_var_params['id_document'] is None):
            raise ValueError("Missing the required parameter `id_document` when calling `users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_id_document_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_transactions_cluster' in local_var_params:
            path_params['id_transactions_cluster'] = local_var_params['id_transactions_cluster']  # noqa: E501
        if 'id_document' in local_var_params:
            path_params['id_document'] = local_var_params['id_document']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/transactionsclusters/{id_transactions_cluster}/documents/{id_document}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_id_document_put(self, id_user, id_connection, id_transactions_cluster, id_document, **kwargs):  # noqa: E501
        """Edit a document  # noqa: E501

        Edit meta-data of a specific document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_id_document_put(id_user, id_connection, id_transactions_cluster, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_transactions_cluster: (required)
        :param int id_document: (required)
        :param str expand:
        :param date date: Date of document
        :param date duedate: Due date of document
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_type: Type of this document
        :param int income: Is an income or an outcome
        :param str name: Name of the document
        :param int readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_id_document_put_with_http_info(id_user, id_connection, id_transactions_cluster, id_document, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_id_document_put_with_http_info(id_user, id_connection, id_transactions_cluster, id_document, **kwargs)  # noqa: E501
            return data

    def users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_id_document_put_with_http_info(self, id_user, id_connection, id_transactions_cluster, id_document, **kwargs):  # noqa: E501
        """Edit a document  # noqa: E501

        Edit meta-data of a specific document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_id_document_put_with_http_info(id_user, id_connection, id_transactions_cluster, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_transactions_cluster: (required)
        :param int id_document: (required)
        :param str expand:
        :param date date: Date of document
        :param date duedate: Due date of document
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_type: Type of this document
        :param int income: Is an income or an outcome
        :param str name: Name of the document
        :param int readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_transactions_cluster', 'id_document', 'expand', 'date', 'duedate', 'file', 'id_category', 'id_type', 'income', 'name', 'readonly', 'total_amount', 'untaxed_amount', 'vat']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_id_document_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_id_document_put`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_id_document_put`")  # noqa: E501
        # verify the required parameter 'id_transactions_cluster' is set
        if ('id_transactions_cluster' not in local_var_params or
                local_var_params['id_transactions_cluster'] is None):
            raise ValueError("Missing the required parameter `id_transactions_cluster` when calling `users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_id_document_put`")  # noqa: E501
        # verify the required parameter 'id_document' is set
        if ('id_document' not in local_var_params or
                local_var_params['id_document'] is None):
            raise ValueError("Missing the required parameter `id_document` when calling `users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_id_document_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_transactions_cluster' in local_var_params:
            path_params['id_transactions_cluster'] = local_var_params['id_transactions_cluster']  # noqa: E501
        if 'id_document' in local_var_params:
            path_params['id_document'] = local_var_params['id_document']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'date' in local_var_params:
            form_params.append(('date', local_var_params['date']))  # noqa: E501
        if 'duedate' in local_var_params:
            form_params.append(('duedate', local_var_params['duedate']))  # noqa: E501
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501
        if 'id_category' in local_var_params:
            form_params.append(('id_category', local_var_params['id_category']))  # noqa: E501
        if 'id_type' in local_var_params:
            form_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'income' in local_var_params:
            form_params.append(('income', local_var_params['income']))  # noqa: E501
        if 'name' in local_var_params:
            form_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'readonly' in local_var_params:
            form_params.append(('readonly', local_var_params['readonly']))  # noqa: E501
        if 'total_amount' in local_var_params:
            form_params.append(('total_amount', local_var_params['total_amount']))  # noqa: E501
        if 'untaxed_amount' in local_var_params:
            form_params.append(('untaxed_amount', local_var_params['untaxed_amount']))  # noqa: E501
        if 'vat' in local_var_params:
            form_params.append(('vat', local_var_params['vat']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/transactionsclusters/{id_transactions_cluster}/documents/{id_document}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_post(self, id_user, id_connection, id_transactions_cluster, date, duedate, **kwargs):  # noqa: E501
        """Add a new document  # noqa: E501

        Add a new document<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_post(id_user, id_connection, id_transactions_cluster, date, duedate, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_transactions_cluster: (required)
        :param date date: Date of document (required)
        :param date duedate: Due date of document (required)
        :param str expand:
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_ocr: Related OCR process
        :param int id_type: Type of this document
        :param bool income: Is an income or an outcome
        :param str name: Name of the document
        :param bool readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_post_with_http_info(id_user, id_connection, id_transactions_cluster, date, duedate, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_post_with_http_info(id_user, id_connection, id_transactions_cluster, date, duedate, **kwargs)  # noqa: E501
            return data

    def users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_post_with_http_info(self, id_user, id_connection, id_transactions_cluster, date, duedate, **kwargs):  # noqa: E501
        """Add a new document  # noqa: E501

        Add a new document<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_post_with_http_info(id_user, id_connection, id_transactions_cluster, date, duedate, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_transactions_cluster: (required)
        :param date date: Date of document (required)
        :param date duedate: Due date of document (required)
        :param str expand:
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_ocr: Related OCR process
        :param int id_type: Type of this document
        :param bool income: Is an income or an outcome
        :param str name: Name of the document
        :param bool readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_transactions_cluster', 'date', 'duedate', 'expand', 'file', 'id_category', 'id_ocr', 'id_type', 'income', 'name', 'readonly', 'total_amount', 'untaxed_amount', 'vat']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_post`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_post`")  # noqa: E501
        # verify the required parameter 'id_transactions_cluster' is set
        if ('id_transactions_cluster' not in local_var_params or
                local_var_params['id_transactions_cluster'] is None):
            raise ValueError("Missing the required parameter `id_transactions_cluster` when calling `users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_post`")  # noqa: E501
        # verify the required parameter 'date' is set
        if ('date' not in local_var_params or
                local_var_params['date'] is None):
            raise ValueError("Missing the required parameter `date` when calling `users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_post`")  # noqa: E501
        # verify the required parameter 'duedate' is set
        if ('duedate' not in local_var_params or
                local_var_params['duedate'] is None):
            raise ValueError("Missing the required parameter `duedate` when calling `users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_transactions_cluster' in local_var_params:
            path_params['id_transactions_cluster'] = local_var_params['id_transactions_cluster']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'date' in local_var_params:
            form_params.append(('date', local_var_params['date']))  # noqa: E501
        if 'duedate' in local_var_params:
            form_params.append(('duedate', local_var_params['duedate']))  # noqa: E501
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501
        if 'id_category' in local_var_params:
            form_params.append(('id_category', local_var_params['id_category']))  # noqa: E501
        if 'id_ocr' in local_var_params:
            form_params.append(('id_ocr', local_var_params['id_ocr']))  # noqa: E501
        if 'id_type' in local_var_params:
            form_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'income' in local_var_params:
            form_params.append(('income', local_var_params['income']))  # noqa: E501
        if 'name' in local_var_params:
            form_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'readonly' in local_var_params:
            form_params.append(('readonly', local_var_params['readonly']))  # noqa: E501
        if 'total_amount' in local_var_params:
            form_params.append(('total_amount', local_var_params['total_amount']))  # noqa: E501
        if 'untaxed_amount' in local_var_params:
            form_params.append(('untaxed_amount', local_var_params['untaxed_amount']))  # noqa: E501
        if 'vat' in local_var_params:
            form_params.append(('vat', local_var_params['vat']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/transactionsclusters/{id_transactions_cluster}/documents', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_put(self, id_user, id_connection, id_transactions_cluster, unknown_base_type, **kwargs):  # noqa: E501
        """Attach an existing document to a transaction or a transactions_cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_put(id_user, id_connection, id_transactions_cluster, unknown_base_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_transactions_cluster: (required)
        :param UNKNOWN_BASE_TYPE unknown_base_type: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_put_with_http_info(id_user, id_connection, id_transactions_cluster, unknown_base_type, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_put_with_http_info(id_user, id_connection, id_transactions_cluster, unknown_base_type, **kwargs)  # noqa: E501
            return data

    def users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_put_with_http_info(self, id_user, id_connection, id_transactions_cluster, unknown_base_type, **kwargs):  # noqa: E501
        """Attach an existing document to a transaction or a transactions_cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_put_with_http_info(id_user, id_connection, id_transactions_cluster, unknown_base_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_connection: (required)
        :param int id_transactions_cluster: (required)
        :param UNKNOWN_BASE_TYPE unknown_base_type: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_connection', 'id_transactions_cluster', 'unknown_base_type', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_put`")  # noqa: E501
        # verify the required parameter 'id_connection' is set
        if ('id_connection' not in local_var_params or
                local_var_params['id_connection'] is None):
            raise ValueError("Missing the required parameter `id_connection` when calling `users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_put`")  # noqa: E501
        # verify the required parameter 'id_transactions_cluster' is set
        if ('id_transactions_cluster' not in local_var_params or
                local_var_params['id_transactions_cluster'] is None):
            raise ValueError("Missing the required parameter `id_transactions_cluster` when calling `users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_put`")  # noqa: E501
        # verify the required parameter 'unknown_base_type' is set
        if ('unknown_base_type' not in local_var_params or
                local_var_params['unknown_base_type'] is None):
            raise ValueError("Missing the required parameter `unknown_base_type` when calling `users_id_user_connections_id_connection_transactionsclusters_id_transactions_cluster_documents_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_connection' in local_var_params:
            path_params['id_connection'] = local_var_params['id_connection']  # noqa: E501
        if 'id_transactions_cluster' in local_var_params:
            path_params['id_transactions_cluster'] = local_var_params['id_transactions_cluster']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'unknown_base_type' in local_var_params:
            body_params = local_var_params['unknown_base_type']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/connections/{id_connection}/transactionsclusters/{id_transactions_cluster}/documents', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_documents_delete(self, id_user, **kwargs):  # noqa: E501
        """Delete documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_documents_delete(id_user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_documents_delete_with_http_info(id_user, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_documents_delete_with_http_info(id_user, **kwargs)  # noqa: E501
            return data

    def users_id_user_documents_delete_with_http_info(self, id_user, **kwargs):  # noqa: E501
        """Delete documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_documents_delete_with_http_info(id_user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_documents_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_documents_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/documents', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_documents_get(self, id_user, **kwargs):  # noqa: E501
        """Get documents  # noqa: E501

        Get list of documents<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_documents_get(id_user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int limit: limit number of results
        :param int offset: offset of first result
        :param date min_date: minimal (inclusive) date
        :param date max_date: maximum (inclusive) date
        :param float min_amount: minimal (inclusive) amount
        :param float max_amount: maximumd (inclusive) amount
        :param float min_timestamp: minimal (inclusive) timestamp
        :param float max_timestamp: maximum (inclusive) timestamp
        :param int id_type: filter with a document type
        :param str expand:
        :return: InlineResponse20030
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_documents_get_with_http_info(id_user, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_documents_get_with_http_info(id_user, **kwargs)  # noqa: E501
            return data

    def users_id_user_documents_get_with_http_info(self, id_user, **kwargs):  # noqa: E501
        """Get documents  # noqa: E501

        Get list of documents<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_documents_get_with_http_info(id_user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int limit: limit number of results
        :param int offset: offset of first result
        :param date min_date: minimal (inclusive) date
        :param date max_date: maximum (inclusive) date
        :param float min_amount: minimal (inclusive) amount
        :param float max_amount: maximumd (inclusive) amount
        :param float min_timestamp: minimal (inclusive) timestamp
        :param float max_timestamp: maximum (inclusive) timestamp
        :param int id_type: filter with a document type
        :param str expand:
        :return: InlineResponse20030
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'limit', 'offset', 'min_date', 'max_date', 'min_amount', 'max_amount', 'min_timestamp', 'max_timestamp', 'id_type', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_documents_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_documents_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501

        query_params = []
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params:
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'min_date' in local_var_params:
            query_params.append(('min_date', local_var_params['min_date']))  # noqa: E501
        if 'max_date' in local_var_params:
            query_params.append(('max_date', local_var_params['max_date']))  # noqa: E501
        if 'min_amount' in local_var_params:
            query_params.append(('min_amount', local_var_params['min_amount']))  # noqa: E501
        if 'max_amount' in local_var_params:
            query_params.append(('max_amount', local_var_params['max_amount']))  # noqa: E501
        if 'min_timestamp' in local_var_params:
            query_params.append(('min_timestamp', local_var_params['min_timestamp']))  # noqa: E501
        if 'max_timestamp' in local_var_params:
            query_params.append(('max_timestamp', local_var_params['max_timestamp']))  # noqa: E501
        if 'id_type' in local_var_params:
            query_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/documents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20030',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_documents_id_document_delete(self, id_user, id_document, **kwargs):  # noqa: E501
        """Delete a document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_documents_id_document_delete(id_user, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_document: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_documents_id_document_delete_with_http_info(id_user, id_document, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_documents_id_document_delete_with_http_info(id_user, id_document, **kwargs)  # noqa: E501
            return data

    def users_id_user_documents_id_document_delete_with_http_info(self, id_user, id_document, **kwargs):  # noqa: E501
        """Delete a document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_documents_id_document_delete_with_http_info(id_user, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_document: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_document', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_documents_id_document_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_documents_id_document_delete`")  # noqa: E501
        # verify the required parameter 'id_document' is set
        if ('id_document' not in local_var_params or
                local_var_params['id_document'] is None):
            raise ValueError("Missing the required parameter `id_document` when calling `users_id_user_documents_id_document_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_document' in local_var_params:
            path_params['id_document'] = local_var_params['id_document']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/documents/{id_document}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_documents_id_document_put(self, id_user, id_document, **kwargs):  # noqa: E501
        """Edit a document  # noqa: E501

        Edit meta-data of a specific document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_documents_id_document_put(id_user, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_document: (required)
        :param str expand:
        :param date date: Date of document
        :param date duedate: Due date of document
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_type: Type of this document
        :param int income: Is an income or an outcome
        :param str name: Name of the document
        :param int readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_documents_id_document_put_with_http_info(id_user, id_document, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_documents_id_document_put_with_http_info(id_user, id_document, **kwargs)  # noqa: E501
            return data

    def users_id_user_documents_id_document_put_with_http_info(self, id_user, id_document, **kwargs):  # noqa: E501
        """Edit a document  # noqa: E501

        Edit meta-data of a specific document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_documents_id_document_put_with_http_info(id_user, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_document: (required)
        :param str expand:
        :param date date: Date of document
        :param date duedate: Due date of document
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_type: Type of this document
        :param int income: Is an income or an outcome
        :param str name: Name of the document
        :param int readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_document', 'expand', 'date', 'duedate', 'file', 'id_category', 'id_type', 'income', 'name', 'readonly', 'total_amount', 'untaxed_amount', 'vat']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_documents_id_document_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_documents_id_document_put`")  # noqa: E501
        # verify the required parameter 'id_document' is set
        if ('id_document' not in local_var_params or
                local_var_params['id_document'] is None):
            raise ValueError("Missing the required parameter `id_document` when calling `users_id_user_documents_id_document_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_document' in local_var_params:
            path_params['id_document'] = local_var_params['id_document']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'date' in local_var_params:
            form_params.append(('date', local_var_params['date']))  # noqa: E501
        if 'duedate' in local_var_params:
            form_params.append(('duedate', local_var_params['duedate']))  # noqa: E501
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501
        if 'id_category' in local_var_params:
            form_params.append(('id_category', local_var_params['id_category']))  # noqa: E501
        if 'id_type' in local_var_params:
            form_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'income' in local_var_params:
            form_params.append(('income', local_var_params['income']))  # noqa: E501
        if 'name' in local_var_params:
            form_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'readonly' in local_var_params:
            form_params.append(('readonly', local_var_params['readonly']))  # noqa: E501
        if 'total_amount' in local_var_params:
            form_params.append(('total_amount', local_var_params['total_amount']))  # noqa: E501
        if 'untaxed_amount' in local_var_params:
            form_params.append(('untaxed_amount', local_var_params['untaxed_amount']))  # noqa: E501
        if 'vat' in local_var_params:
            form_params.append(('vat', local_var_params['vat']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/documents/{id_document}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_documents_post(self, id_user, date, duedate, **kwargs):  # noqa: E501
        """Add a new document  # noqa: E501

        Add a new document<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_documents_post(id_user, date, duedate, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param date date: Date of document (required)
        :param date duedate: Due date of document (required)
        :param str expand:
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_ocr: Related OCR process
        :param int id_type: Type of this document
        :param bool income: Is an income or an outcome
        :param str name: Name of the document
        :param bool readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_documents_post_with_http_info(id_user, date, duedate, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_documents_post_with_http_info(id_user, date, duedate, **kwargs)  # noqa: E501
            return data

    def users_id_user_documents_post_with_http_info(self, id_user, date, duedate, **kwargs):  # noqa: E501
        """Add a new document  # noqa: E501

        Add a new document<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_documents_post_with_http_info(id_user, date, duedate, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param date date: Date of document (required)
        :param date duedate: Due date of document (required)
        :param str expand:
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_ocr: Related OCR process
        :param int id_type: Type of this document
        :param bool income: Is an income or an outcome
        :param str name: Name of the document
        :param bool readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'date', 'duedate', 'expand', 'file', 'id_category', 'id_ocr', 'id_type', 'income', 'name', 'readonly', 'total_amount', 'untaxed_amount', 'vat']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_documents_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_documents_post`")  # noqa: E501
        # verify the required parameter 'date' is set
        if ('date' not in local_var_params or
                local_var_params['date'] is None):
            raise ValueError("Missing the required parameter `date` when calling `users_id_user_documents_post`")  # noqa: E501
        # verify the required parameter 'duedate' is set
        if ('duedate' not in local_var_params or
                local_var_params['duedate'] is None):
            raise ValueError("Missing the required parameter `duedate` when calling `users_id_user_documents_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'date' in local_var_params:
            form_params.append(('date', local_var_params['date']))  # noqa: E501
        if 'duedate' in local_var_params:
            form_params.append(('duedate', local_var_params['duedate']))  # noqa: E501
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501
        if 'id_category' in local_var_params:
            form_params.append(('id_category', local_var_params['id_category']))  # noqa: E501
        if 'id_ocr' in local_var_params:
            form_params.append(('id_ocr', local_var_params['id_ocr']))  # noqa: E501
        if 'id_type' in local_var_params:
            form_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'income' in local_var_params:
            form_params.append(('income', local_var_params['income']))  # noqa: E501
        if 'name' in local_var_params:
            form_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'readonly' in local_var_params:
            form_params.append(('readonly', local_var_params['readonly']))  # noqa: E501
        if 'total_amount' in local_var_params:
            form_params.append(('total_amount', local_var_params['total_amount']))  # noqa: E501
        if 'untaxed_amount' in local_var_params:
            form_params.append(('untaxed_amount', local_var_params['untaxed_amount']))  # noqa: E501
        if 'vat' in local_var_params:
            form_params.append(('vat', local_var_params['vat']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/documents', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_documents_put(self, id_user, unknown_base_type, **kwargs):  # noqa: E501
        """Attach an existing document to a transaction or a transactions_cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_documents_put(id_user, unknown_base_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param UNKNOWN_BASE_TYPE unknown_base_type: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_documents_put_with_http_info(id_user, unknown_base_type, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_documents_put_with_http_info(id_user, unknown_base_type, **kwargs)  # noqa: E501
            return data

    def users_id_user_documents_put_with_http_info(self, id_user, unknown_base_type, **kwargs):  # noqa: E501
        """Attach an existing document to a transaction or a transactions_cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_documents_put_with_http_info(id_user, unknown_base_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param UNKNOWN_BASE_TYPE unknown_base_type: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'unknown_base_type', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_documents_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_documents_put`")  # noqa: E501
        # verify the required parameter 'unknown_base_type' is set
        if ('unknown_base_type' not in local_var_params or
                local_var_params['unknown_base_type'] is None):
            raise ValueError("Missing the required parameter `unknown_base_type` when calling `users_id_user_documents_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'unknown_base_type' in local_var_params:
            body_params = local_var_params['unknown_base_type']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/documents', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_ocr_post(self, id_user, file, **kwargs):  # noqa: E501
        """Post an image with OCR  # noqa: E501

        Post an image and apply OCR on it to obtain found meta-data.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_ocr_post(id_user, file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param file file: File of the document (required)
        :param int id_transaction: Transaction used to help OCR to find data
        :param str name: Name of the document
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_ocr_post_with_http_info(id_user, file, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_ocr_post_with_http_info(id_user, file, **kwargs)  # noqa: E501
            return data

    def users_id_user_ocr_post_with_http_info(self, id_user, file, **kwargs):  # noqa: E501
        """Post an image with OCR  # noqa: E501

        Post an image and apply OCR on it to obtain found meta-data.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_ocr_post_with_http_info(id_user, file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param file file: File of the document (required)
        :param int id_transaction: Transaction used to help OCR to find data
        :param str name: Name of the document
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'file', 'id_transaction', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_ocr_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_ocr_post`")  # noqa: E501
        # verify the required parameter 'file' is set
        if ('file' not in local_var_params or
                local_var_params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `users_id_user_ocr_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501
        if 'id_transaction' in local_var_params:
            form_params.append(('id_transaction', local_var_params['id_transaction']))  # noqa: E501
        if 'name' in local_var_params:
            form_params.append(('name', local_var_params['name']))  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/ocr', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_subscriptions_id_subscription_documents_delete(self, id_user, id_subscription, **kwargs):  # noqa: E501
        """Delete documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_subscriptions_id_subscription_documents_delete(id_user, id_subscription, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_subscription: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_subscriptions_id_subscription_documents_delete_with_http_info(id_user, id_subscription, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_subscriptions_id_subscription_documents_delete_with_http_info(id_user, id_subscription, **kwargs)  # noqa: E501
            return data

    def users_id_user_subscriptions_id_subscription_documents_delete_with_http_info(self, id_user, id_subscription, **kwargs):  # noqa: E501
        """Delete documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_subscriptions_id_subscription_documents_delete_with_http_info(id_user, id_subscription, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_subscription: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_subscription', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_subscriptions_id_subscription_documents_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_subscriptions_id_subscription_documents_delete`")  # noqa: E501
        # verify the required parameter 'id_subscription' is set
        if ('id_subscription' not in local_var_params or
                local_var_params['id_subscription'] is None):
            raise ValueError("Missing the required parameter `id_subscription` when calling `users_id_user_subscriptions_id_subscription_documents_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_subscription' in local_var_params:
            path_params['id_subscription'] = local_var_params['id_subscription']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/subscriptions/{id_subscription}/documents', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_subscriptions_id_subscription_documents_get(self, id_user, id_subscription, **kwargs):  # noqa: E501
        """Get documents  # noqa: E501

        Get list of documents<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_subscriptions_id_subscription_documents_get(id_user, id_subscription, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_subscription: (required)
        :param int limit: limit number of results
        :param int offset: offset of first result
        :param date min_date: minimal (inclusive) date
        :param date max_date: maximum (inclusive) date
        :param float min_amount: minimal (inclusive) amount
        :param float max_amount: maximumd (inclusive) amount
        :param float min_timestamp: minimal (inclusive) timestamp
        :param float max_timestamp: maximum (inclusive) timestamp
        :param int id_type: filter with a document type
        :param str expand:
        :return: InlineResponse20030
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_subscriptions_id_subscription_documents_get_with_http_info(id_user, id_subscription, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_subscriptions_id_subscription_documents_get_with_http_info(id_user, id_subscription, **kwargs)  # noqa: E501
            return data

    def users_id_user_subscriptions_id_subscription_documents_get_with_http_info(self, id_user, id_subscription, **kwargs):  # noqa: E501
        """Get documents  # noqa: E501

        Get list of documents<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_subscriptions_id_subscription_documents_get_with_http_info(id_user, id_subscription, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_subscription: (required)
        :param int limit: limit number of results
        :param int offset: offset of first result
        :param date min_date: minimal (inclusive) date
        :param date max_date: maximum (inclusive) date
        :param float min_amount: minimal (inclusive) amount
        :param float max_amount: maximumd (inclusive) amount
        :param float min_timestamp: minimal (inclusive) timestamp
        :param float max_timestamp: maximum (inclusive) timestamp
        :param int id_type: filter with a document type
        :param str expand:
        :return: InlineResponse20030
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_subscription', 'limit', 'offset', 'min_date', 'max_date', 'min_amount', 'max_amount', 'min_timestamp', 'max_timestamp', 'id_type', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_subscriptions_id_subscription_documents_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_subscriptions_id_subscription_documents_get`")  # noqa: E501
        # verify the required parameter 'id_subscription' is set
        if ('id_subscription' not in local_var_params or
                local_var_params['id_subscription'] is None):
            raise ValueError("Missing the required parameter `id_subscription` when calling `users_id_user_subscriptions_id_subscription_documents_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_subscription' in local_var_params:
            path_params['id_subscription'] = local_var_params['id_subscription']  # noqa: E501

        query_params = []
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params:
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'min_date' in local_var_params:
            query_params.append(('min_date', local_var_params['min_date']))  # noqa: E501
        if 'max_date' in local_var_params:
            query_params.append(('max_date', local_var_params['max_date']))  # noqa: E501
        if 'min_amount' in local_var_params:
            query_params.append(('min_amount', local_var_params['min_amount']))  # noqa: E501
        if 'max_amount' in local_var_params:
            query_params.append(('max_amount', local_var_params['max_amount']))  # noqa: E501
        if 'min_timestamp' in local_var_params:
            query_params.append(('min_timestamp', local_var_params['min_timestamp']))  # noqa: E501
        if 'max_timestamp' in local_var_params:
            query_params.append(('max_timestamp', local_var_params['max_timestamp']))  # noqa: E501
        if 'id_type' in local_var_params:
            query_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/subscriptions/{id_subscription}/documents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20030',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_subscriptions_id_subscription_documents_id_document_delete(self, id_user, id_subscription, id_document, **kwargs):  # noqa: E501
        """Delete a document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_subscriptions_id_subscription_documents_id_document_delete(id_user, id_subscription, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_subscription: (required)
        :param int id_document: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_subscriptions_id_subscription_documents_id_document_delete_with_http_info(id_user, id_subscription, id_document, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_subscriptions_id_subscription_documents_id_document_delete_with_http_info(id_user, id_subscription, id_document, **kwargs)  # noqa: E501
            return data

    def users_id_user_subscriptions_id_subscription_documents_id_document_delete_with_http_info(self, id_user, id_subscription, id_document, **kwargs):  # noqa: E501
        """Delete a document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_subscriptions_id_subscription_documents_id_document_delete_with_http_info(id_user, id_subscription, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_subscription: (required)
        :param int id_document: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_subscription', 'id_document', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_subscriptions_id_subscription_documents_id_document_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_subscriptions_id_subscription_documents_id_document_delete`")  # noqa: E501
        # verify the required parameter 'id_subscription' is set
        if ('id_subscription' not in local_var_params or
                local_var_params['id_subscription'] is None):
            raise ValueError("Missing the required parameter `id_subscription` when calling `users_id_user_subscriptions_id_subscription_documents_id_document_delete`")  # noqa: E501
        # verify the required parameter 'id_document' is set
        if ('id_document' not in local_var_params or
                local_var_params['id_document'] is None):
            raise ValueError("Missing the required parameter `id_document` when calling `users_id_user_subscriptions_id_subscription_documents_id_document_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_subscription' in local_var_params:
            path_params['id_subscription'] = local_var_params['id_subscription']  # noqa: E501
        if 'id_document' in local_var_params:
            path_params['id_document'] = local_var_params['id_document']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/subscriptions/{id_subscription}/documents/{id_document}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_subscriptions_id_subscription_documents_id_document_put(self, id_user, id_subscription, id_document, **kwargs):  # noqa: E501
        """Edit a document  # noqa: E501

        Edit meta-data of a specific document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_subscriptions_id_subscription_documents_id_document_put(id_user, id_subscription, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_subscription: (required)
        :param int id_document: (required)
        :param str expand:
        :param date date: Date of document
        :param date duedate: Due date of document
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_type: Type of this document
        :param int income: Is an income or an outcome
        :param str name: Name of the document
        :param int readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_subscriptions_id_subscription_documents_id_document_put_with_http_info(id_user, id_subscription, id_document, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_subscriptions_id_subscription_documents_id_document_put_with_http_info(id_user, id_subscription, id_document, **kwargs)  # noqa: E501
            return data

    def users_id_user_subscriptions_id_subscription_documents_id_document_put_with_http_info(self, id_user, id_subscription, id_document, **kwargs):  # noqa: E501
        """Edit a document  # noqa: E501

        Edit meta-data of a specific document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_subscriptions_id_subscription_documents_id_document_put_with_http_info(id_user, id_subscription, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_subscription: (required)
        :param int id_document: (required)
        :param str expand:
        :param date date: Date of document
        :param date duedate: Due date of document
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_type: Type of this document
        :param int income: Is an income or an outcome
        :param str name: Name of the document
        :param int readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_subscription', 'id_document', 'expand', 'date', 'duedate', 'file', 'id_category', 'id_type', 'income', 'name', 'readonly', 'total_amount', 'untaxed_amount', 'vat']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_subscriptions_id_subscription_documents_id_document_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_subscriptions_id_subscription_documents_id_document_put`")  # noqa: E501
        # verify the required parameter 'id_subscription' is set
        if ('id_subscription' not in local_var_params or
                local_var_params['id_subscription'] is None):
            raise ValueError("Missing the required parameter `id_subscription` when calling `users_id_user_subscriptions_id_subscription_documents_id_document_put`")  # noqa: E501
        # verify the required parameter 'id_document' is set
        if ('id_document' not in local_var_params or
                local_var_params['id_document'] is None):
            raise ValueError("Missing the required parameter `id_document` when calling `users_id_user_subscriptions_id_subscription_documents_id_document_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_subscription' in local_var_params:
            path_params['id_subscription'] = local_var_params['id_subscription']  # noqa: E501
        if 'id_document' in local_var_params:
            path_params['id_document'] = local_var_params['id_document']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'date' in local_var_params:
            form_params.append(('date', local_var_params['date']))  # noqa: E501
        if 'duedate' in local_var_params:
            form_params.append(('duedate', local_var_params['duedate']))  # noqa: E501
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501
        if 'id_category' in local_var_params:
            form_params.append(('id_category', local_var_params['id_category']))  # noqa: E501
        if 'id_type' in local_var_params:
            form_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'income' in local_var_params:
            form_params.append(('income', local_var_params['income']))  # noqa: E501
        if 'name' in local_var_params:
            form_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'readonly' in local_var_params:
            form_params.append(('readonly', local_var_params['readonly']))  # noqa: E501
        if 'total_amount' in local_var_params:
            form_params.append(('total_amount', local_var_params['total_amount']))  # noqa: E501
        if 'untaxed_amount' in local_var_params:
            form_params.append(('untaxed_amount', local_var_params['untaxed_amount']))  # noqa: E501
        if 'vat' in local_var_params:
            form_params.append(('vat', local_var_params['vat']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/subscriptions/{id_subscription}/documents/{id_document}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_subscriptions_id_subscription_documents_post(self, id_user, id_subscription, date, duedate, **kwargs):  # noqa: E501
        """Add a new document  # noqa: E501

        Add a new document<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_subscriptions_id_subscription_documents_post(id_user, id_subscription, date, duedate, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_subscription: (required)
        :param date date: Date of document (required)
        :param date duedate: Due date of document (required)
        :param str expand:
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_ocr: Related OCR process
        :param int id_type: Type of this document
        :param bool income: Is an income or an outcome
        :param str name: Name of the document
        :param bool readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_subscriptions_id_subscription_documents_post_with_http_info(id_user, id_subscription, date, duedate, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_subscriptions_id_subscription_documents_post_with_http_info(id_user, id_subscription, date, duedate, **kwargs)  # noqa: E501
            return data

    def users_id_user_subscriptions_id_subscription_documents_post_with_http_info(self, id_user, id_subscription, date, duedate, **kwargs):  # noqa: E501
        """Add a new document  # noqa: E501

        Add a new document<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_subscriptions_id_subscription_documents_post_with_http_info(id_user, id_subscription, date, duedate, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_subscription: (required)
        :param date date: Date of document (required)
        :param date duedate: Due date of document (required)
        :param str expand:
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_ocr: Related OCR process
        :param int id_type: Type of this document
        :param bool income: Is an income or an outcome
        :param str name: Name of the document
        :param bool readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_subscription', 'date', 'duedate', 'expand', 'file', 'id_category', 'id_ocr', 'id_type', 'income', 'name', 'readonly', 'total_amount', 'untaxed_amount', 'vat']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_subscriptions_id_subscription_documents_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_subscriptions_id_subscription_documents_post`")  # noqa: E501
        # verify the required parameter 'id_subscription' is set
        if ('id_subscription' not in local_var_params or
                local_var_params['id_subscription'] is None):
            raise ValueError("Missing the required parameter `id_subscription` when calling `users_id_user_subscriptions_id_subscription_documents_post`")  # noqa: E501
        # verify the required parameter 'date' is set
        if ('date' not in local_var_params or
                local_var_params['date'] is None):
            raise ValueError("Missing the required parameter `date` when calling `users_id_user_subscriptions_id_subscription_documents_post`")  # noqa: E501
        # verify the required parameter 'duedate' is set
        if ('duedate' not in local_var_params or
                local_var_params['duedate'] is None):
            raise ValueError("Missing the required parameter `duedate` when calling `users_id_user_subscriptions_id_subscription_documents_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_subscription' in local_var_params:
            path_params['id_subscription'] = local_var_params['id_subscription']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'date' in local_var_params:
            form_params.append(('date', local_var_params['date']))  # noqa: E501
        if 'duedate' in local_var_params:
            form_params.append(('duedate', local_var_params['duedate']))  # noqa: E501
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501
        if 'id_category' in local_var_params:
            form_params.append(('id_category', local_var_params['id_category']))  # noqa: E501
        if 'id_ocr' in local_var_params:
            form_params.append(('id_ocr', local_var_params['id_ocr']))  # noqa: E501
        if 'id_type' in local_var_params:
            form_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'income' in local_var_params:
            form_params.append(('income', local_var_params['income']))  # noqa: E501
        if 'name' in local_var_params:
            form_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'readonly' in local_var_params:
            form_params.append(('readonly', local_var_params['readonly']))  # noqa: E501
        if 'total_amount' in local_var_params:
            form_params.append(('total_amount', local_var_params['total_amount']))  # noqa: E501
        if 'untaxed_amount' in local_var_params:
            form_params.append(('untaxed_amount', local_var_params['untaxed_amount']))  # noqa: E501
        if 'vat' in local_var_params:
            form_params.append(('vat', local_var_params['vat']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/subscriptions/{id_subscription}/documents', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_subscriptions_id_subscription_documents_put(self, id_user, id_subscription, unknown_base_type, **kwargs):  # noqa: E501
        """Attach an existing document to a transaction or a transactions_cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_subscriptions_id_subscription_documents_put(id_user, id_subscription, unknown_base_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_subscription: (required)
        :param UNKNOWN_BASE_TYPE unknown_base_type: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_subscriptions_id_subscription_documents_put_with_http_info(id_user, id_subscription, unknown_base_type, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_subscriptions_id_subscription_documents_put_with_http_info(id_user, id_subscription, unknown_base_type, **kwargs)  # noqa: E501
            return data

    def users_id_user_subscriptions_id_subscription_documents_put_with_http_info(self, id_user, id_subscription, unknown_base_type, **kwargs):  # noqa: E501
        """Attach an existing document to a transaction or a transactions_cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_subscriptions_id_subscription_documents_put_with_http_info(id_user, id_subscription, unknown_base_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_subscription: (required)
        :param UNKNOWN_BASE_TYPE unknown_base_type: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_subscription', 'unknown_base_type', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_subscriptions_id_subscription_documents_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_subscriptions_id_subscription_documents_put`")  # noqa: E501
        # verify the required parameter 'id_subscription' is set
        if ('id_subscription' not in local_var_params or
                local_var_params['id_subscription'] is None):
            raise ValueError("Missing the required parameter `id_subscription` when calling `users_id_user_subscriptions_id_subscription_documents_put`")  # noqa: E501
        # verify the required parameter 'unknown_base_type' is set
        if ('unknown_base_type' not in local_var_params or
                local_var_params['unknown_base_type'] is None):
            raise ValueError("Missing the required parameter `unknown_base_type` when calling `users_id_user_subscriptions_id_subscription_documents_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_subscription' in local_var_params:
            path_params['id_subscription'] = local_var_params['id_subscription']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'unknown_base_type' in local_var_params:
            body_params = local_var_params['unknown_base_type']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/subscriptions/{id_subscription}/documents', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_transactions_id_transaction_documents_delete(self, id_user, id_transaction, **kwargs):  # noqa: E501
        """Delete documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_transactions_id_transaction_documents_delete(id_user, id_transaction, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_transaction: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_transactions_id_transaction_documents_delete_with_http_info(id_user, id_transaction, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_transactions_id_transaction_documents_delete_with_http_info(id_user, id_transaction, **kwargs)  # noqa: E501
            return data

    def users_id_user_transactions_id_transaction_documents_delete_with_http_info(self, id_user, id_transaction, **kwargs):  # noqa: E501
        """Delete documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_transactions_id_transaction_documents_delete_with_http_info(id_user, id_transaction, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_transaction: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_transaction', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_transactions_id_transaction_documents_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_transactions_id_transaction_documents_delete`")  # noqa: E501
        # verify the required parameter 'id_transaction' is set
        if ('id_transaction' not in local_var_params or
                local_var_params['id_transaction'] is None):
            raise ValueError("Missing the required parameter `id_transaction` when calling `users_id_user_transactions_id_transaction_documents_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_transaction' in local_var_params:
            path_params['id_transaction'] = local_var_params['id_transaction']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/transactions/{id_transaction}/documents', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_transactions_id_transaction_documents_get(self, id_user, id_transaction, **kwargs):  # noqa: E501
        """Get documents  # noqa: E501

        Get list of documents<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_transactions_id_transaction_documents_get(id_user, id_transaction, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_transaction: (required)
        :param int limit: limit number of results
        :param int offset: offset of first result
        :param date min_date: minimal (inclusive) date
        :param date max_date: maximum (inclusive) date
        :param float min_amount: minimal (inclusive) amount
        :param float max_amount: maximumd (inclusive) amount
        :param float min_timestamp: minimal (inclusive) timestamp
        :param float max_timestamp: maximum (inclusive) timestamp
        :param int id_type: filter with a document type
        :param str expand:
        :return: InlineResponse20030
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_transactions_id_transaction_documents_get_with_http_info(id_user, id_transaction, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_transactions_id_transaction_documents_get_with_http_info(id_user, id_transaction, **kwargs)  # noqa: E501
            return data

    def users_id_user_transactions_id_transaction_documents_get_with_http_info(self, id_user, id_transaction, **kwargs):  # noqa: E501
        """Get documents  # noqa: E501

        Get list of documents<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_transactions_id_transaction_documents_get_with_http_info(id_user, id_transaction, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_transaction: (required)
        :param int limit: limit number of results
        :param int offset: offset of first result
        :param date min_date: minimal (inclusive) date
        :param date max_date: maximum (inclusive) date
        :param float min_amount: minimal (inclusive) amount
        :param float max_amount: maximumd (inclusive) amount
        :param float min_timestamp: minimal (inclusive) timestamp
        :param float max_timestamp: maximum (inclusive) timestamp
        :param int id_type: filter with a document type
        :param str expand:
        :return: InlineResponse20030
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_transaction', 'limit', 'offset', 'min_date', 'max_date', 'min_amount', 'max_amount', 'min_timestamp', 'max_timestamp', 'id_type', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_transactions_id_transaction_documents_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_transactions_id_transaction_documents_get`")  # noqa: E501
        # verify the required parameter 'id_transaction' is set
        if ('id_transaction' not in local_var_params or
                local_var_params['id_transaction'] is None):
            raise ValueError("Missing the required parameter `id_transaction` when calling `users_id_user_transactions_id_transaction_documents_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_transaction' in local_var_params:
            path_params['id_transaction'] = local_var_params['id_transaction']  # noqa: E501

        query_params = []
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params:
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'min_date' in local_var_params:
            query_params.append(('min_date', local_var_params['min_date']))  # noqa: E501
        if 'max_date' in local_var_params:
            query_params.append(('max_date', local_var_params['max_date']))  # noqa: E501
        if 'min_amount' in local_var_params:
            query_params.append(('min_amount', local_var_params['min_amount']))  # noqa: E501
        if 'max_amount' in local_var_params:
            query_params.append(('max_amount', local_var_params['max_amount']))  # noqa: E501
        if 'min_timestamp' in local_var_params:
            query_params.append(('min_timestamp', local_var_params['min_timestamp']))  # noqa: E501
        if 'max_timestamp' in local_var_params:
            query_params.append(('max_timestamp', local_var_params['max_timestamp']))  # noqa: E501
        if 'id_type' in local_var_params:
            query_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/transactions/{id_transaction}/documents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20030',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_transactions_id_transaction_documents_id_document_delete(self, id_user, id_transaction, id_document, **kwargs):  # noqa: E501
        """Delete a document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_transactions_id_transaction_documents_id_document_delete(id_user, id_transaction, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_transaction: (required)
        :param int id_document: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_transactions_id_transaction_documents_id_document_delete_with_http_info(id_user, id_transaction, id_document, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_transactions_id_transaction_documents_id_document_delete_with_http_info(id_user, id_transaction, id_document, **kwargs)  # noqa: E501
            return data

    def users_id_user_transactions_id_transaction_documents_id_document_delete_with_http_info(self, id_user, id_transaction, id_document, **kwargs):  # noqa: E501
        """Delete a document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_transactions_id_transaction_documents_id_document_delete_with_http_info(id_user, id_transaction, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_transaction: (required)
        :param int id_document: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_transaction', 'id_document', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_transactions_id_transaction_documents_id_document_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_transactions_id_transaction_documents_id_document_delete`")  # noqa: E501
        # verify the required parameter 'id_transaction' is set
        if ('id_transaction' not in local_var_params or
                local_var_params['id_transaction'] is None):
            raise ValueError("Missing the required parameter `id_transaction` when calling `users_id_user_transactions_id_transaction_documents_id_document_delete`")  # noqa: E501
        # verify the required parameter 'id_document' is set
        if ('id_document' not in local_var_params or
                local_var_params['id_document'] is None):
            raise ValueError("Missing the required parameter `id_document` when calling `users_id_user_transactions_id_transaction_documents_id_document_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_transaction' in local_var_params:
            path_params['id_transaction'] = local_var_params['id_transaction']  # noqa: E501
        if 'id_document' in local_var_params:
            path_params['id_document'] = local_var_params['id_document']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/transactions/{id_transaction}/documents/{id_document}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_transactions_id_transaction_documents_id_document_put(self, id_user, id_transaction, id_document, **kwargs):  # noqa: E501
        """Edit a document  # noqa: E501

        Edit meta-data of a specific document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_transactions_id_transaction_documents_id_document_put(id_user, id_transaction, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_transaction: (required)
        :param int id_document: (required)
        :param str expand:
        :param date date: Date of document
        :param date duedate: Due date of document
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_type: Type of this document
        :param int income: Is an income or an outcome
        :param str name: Name of the document
        :param int readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_transactions_id_transaction_documents_id_document_put_with_http_info(id_user, id_transaction, id_document, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_transactions_id_transaction_documents_id_document_put_with_http_info(id_user, id_transaction, id_document, **kwargs)  # noqa: E501
            return data

    def users_id_user_transactions_id_transaction_documents_id_document_put_with_http_info(self, id_user, id_transaction, id_document, **kwargs):  # noqa: E501
        """Edit a document  # noqa: E501

        Edit meta-data of a specific document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_transactions_id_transaction_documents_id_document_put_with_http_info(id_user, id_transaction, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_transaction: (required)
        :param int id_document: (required)
        :param str expand:
        :param date date: Date of document
        :param date duedate: Due date of document
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_type: Type of this document
        :param int income: Is an income or an outcome
        :param str name: Name of the document
        :param int readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_transaction', 'id_document', 'expand', 'date', 'duedate', 'file', 'id_category', 'id_type', 'income', 'name', 'readonly', 'total_amount', 'untaxed_amount', 'vat']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_transactions_id_transaction_documents_id_document_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_transactions_id_transaction_documents_id_document_put`")  # noqa: E501
        # verify the required parameter 'id_transaction' is set
        if ('id_transaction' not in local_var_params or
                local_var_params['id_transaction'] is None):
            raise ValueError("Missing the required parameter `id_transaction` when calling `users_id_user_transactions_id_transaction_documents_id_document_put`")  # noqa: E501
        # verify the required parameter 'id_document' is set
        if ('id_document' not in local_var_params or
                local_var_params['id_document'] is None):
            raise ValueError("Missing the required parameter `id_document` when calling `users_id_user_transactions_id_transaction_documents_id_document_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_transaction' in local_var_params:
            path_params['id_transaction'] = local_var_params['id_transaction']  # noqa: E501
        if 'id_document' in local_var_params:
            path_params['id_document'] = local_var_params['id_document']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'date' in local_var_params:
            form_params.append(('date', local_var_params['date']))  # noqa: E501
        if 'duedate' in local_var_params:
            form_params.append(('duedate', local_var_params['duedate']))  # noqa: E501
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501
        if 'id_category' in local_var_params:
            form_params.append(('id_category', local_var_params['id_category']))  # noqa: E501
        if 'id_type' in local_var_params:
            form_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'income' in local_var_params:
            form_params.append(('income', local_var_params['income']))  # noqa: E501
        if 'name' in local_var_params:
            form_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'readonly' in local_var_params:
            form_params.append(('readonly', local_var_params['readonly']))  # noqa: E501
        if 'total_amount' in local_var_params:
            form_params.append(('total_amount', local_var_params['total_amount']))  # noqa: E501
        if 'untaxed_amount' in local_var_params:
            form_params.append(('untaxed_amount', local_var_params['untaxed_amount']))  # noqa: E501
        if 'vat' in local_var_params:
            form_params.append(('vat', local_var_params['vat']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/transactions/{id_transaction}/documents/{id_document}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_transactions_id_transaction_documents_post(self, id_user, id_transaction, date, duedate, **kwargs):  # noqa: E501
        """Add a new document  # noqa: E501

        Add a new document<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_transactions_id_transaction_documents_post(id_user, id_transaction, date, duedate, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_transaction: (required)
        :param date date: Date of document (required)
        :param date duedate: Due date of document (required)
        :param str expand:
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_ocr: Related OCR process
        :param int id_type: Type of this document
        :param bool income: Is an income or an outcome
        :param str name: Name of the document
        :param bool readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_transactions_id_transaction_documents_post_with_http_info(id_user, id_transaction, date, duedate, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_transactions_id_transaction_documents_post_with_http_info(id_user, id_transaction, date, duedate, **kwargs)  # noqa: E501
            return data

    def users_id_user_transactions_id_transaction_documents_post_with_http_info(self, id_user, id_transaction, date, duedate, **kwargs):  # noqa: E501
        """Add a new document  # noqa: E501

        Add a new document<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_transactions_id_transaction_documents_post_with_http_info(id_user, id_transaction, date, duedate, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_transaction: (required)
        :param date date: Date of document (required)
        :param date duedate: Due date of document (required)
        :param str expand:
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_ocr: Related OCR process
        :param int id_type: Type of this document
        :param bool income: Is an income or an outcome
        :param str name: Name of the document
        :param bool readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_transaction', 'date', 'duedate', 'expand', 'file', 'id_category', 'id_ocr', 'id_type', 'income', 'name', 'readonly', 'total_amount', 'untaxed_amount', 'vat']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_transactions_id_transaction_documents_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_transactions_id_transaction_documents_post`")  # noqa: E501
        # verify the required parameter 'id_transaction' is set
        if ('id_transaction' not in local_var_params or
                local_var_params['id_transaction'] is None):
            raise ValueError("Missing the required parameter `id_transaction` when calling `users_id_user_transactions_id_transaction_documents_post`")  # noqa: E501
        # verify the required parameter 'date' is set
        if ('date' not in local_var_params or
                local_var_params['date'] is None):
            raise ValueError("Missing the required parameter `date` when calling `users_id_user_transactions_id_transaction_documents_post`")  # noqa: E501
        # verify the required parameter 'duedate' is set
        if ('duedate' not in local_var_params or
                local_var_params['duedate'] is None):
            raise ValueError("Missing the required parameter `duedate` when calling `users_id_user_transactions_id_transaction_documents_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_transaction' in local_var_params:
            path_params['id_transaction'] = local_var_params['id_transaction']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'date' in local_var_params:
            form_params.append(('date', local_var_params['date']))  # noqa: E501
        if 'duedate' in local_var_params:
            form_params.append(('duedate', local_var_params['duedate']))  # noqa: E501
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501
        if 'id_category' in local_var_params:
            form_params.append(('id_category', local_var_params['id_category']))  # noqa: E501
        if 'id_ocr' in local_var_params:
            form_params.append(('id_ocr', local_var_params['id_ocr']))  # noqa: E501
        if 'id_type' in local_var_params:
            form_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'income' in local_var_params:
            form_params.append(('income', local_var_params['income']))  # noqa: E501
        if 'name' in local_var_params:
            form_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'readonly' in local_var_params:
            form_params.append(('readonly', local_var_params['readonly']))  # noqa: E501
        if 'total_amount' in local_var_params:
            form_params.append(('total_amount', local_var_params['total_amount']))  # noqa: E501
        if 'untaxed_amount' in local_var_params:
            form_params.append(('untaxed_amount', local_var_params['untaxed_amount']))  # noqa: E501
        if 'vat' in local_var_params:
            form_params.append(('vat', local_var_params['vat']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/transactions/{id_transaction}/documents', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_transactions_id_transaction_documents_put(self, id_user, id_transaction, unknown_base_type, **kwargs):  # noqa: E501
        """Attach an existing document to a transaction or a transactions_cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_transactions_id_transaction_documents_put(id_user, id_transaction, unknown_base_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_transaction: (required)
        :param UNKNOWN_BASE_TYPE unknown_base_type: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_transactions_id_transaction_documents_put_with_http_info(id_user, id_transaction, unknown_base_type, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_transactions_id_transaction_documents_put_with_http_info(id_user, id_transaction, unknown_base_type, **kwargs)  # noqa: E501
            return data

    def users_id_user_transactions_id_transaction_documents_put_with_http_info(self, id_user, id_transaction, unknown_base_type, **kwargs):  # noqa: E501
        """Attach an existing document to a transaction or a transactions_cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_transactions_id_transaction_documents_put_with_http_info(id_user, id_transaction, unknown_base_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_transaction: (required)
        :param UNKNOWN_BASE_TYPE unknown_base_type: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_transaction', 'unknown_base_type', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_transactions_id_transaction_documents_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_transactions_id_transaction_documents_put`")  # noqa: E501
        # verify the required parameter 'id_transaction' is set
        if ('id_transaction' not in local_var_params or
                local_var_params['id_transaction'] is None):
            raise ValueError("Missing the required parameter `id_transaction` when calling `users_id_user_transactions_id_transaction_documents_put`")  # noqa: E501
        # verify the required parameter 'unknown_base_type' is set
        if ('unknown_base_type' not in local_var_params or
                local_var_params['unknown_base_type'] is None):
            raise ValueError("Missing the required parameter `unknown_base_type` when calling `users_id_user_transactions_id_transaction_documents_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_transaction' in local_var_params:
            path_params['id_transaction'] = local_var_params['id_transaction']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'unknown_base_type' in local_var_params:
            body_params = local_var_params['unknown_base_type']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/transactions/{id_transaction}/documents', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_transactionsclusters_id_transactions_cluster_documents_delete(self, id_user, id_transactions_cluster, **kwargs):  # noqa: E501
        """Delete documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_transactionsclusters_id_transactions_cluster_documents_delete(id_user, id_transactions_cluster, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_transactions_cluster: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_transactionsclusters_id_transactions_cluster_documents_delete_with_http_info(id_user, id_transactions_cluster, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_transactionsclusters_id_transactions_cluster_documents_delete_with_http_info(id_user, id_transactions_cluster, **kwargs)  # noqa: E501
            return data

    def users_id_user_transactionsclusters_id_transactions_cluster_documents_delete_with_http_info(self, id_user, id_transactions_cluster, **kwargs):  # noqa: E501
        """Delete documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_transactionsclusters_id_transactions_cluster_documents_delete_with_http_info(id_user, id_transactions_cluster, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_transactions_cluster: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_transactions_cluster', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_transactionsclusters_id_transactions_cluster_documents_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_transactionsclusters_id_transactions_cluster_documents_delete`")  # noqa: E501
        # verify the required parameter 'id_transactions_cluster' is set
        if ('id_transactions_cluster' not in local_var_params or
                local_var_params['id_transactions_cluster'] is None):
            raise ValueError("Missing the required parameter `id_transactions_cluster` when calling `users_id_user_transactionsclusters_id_transactions_cluster_documents_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_transactions_cluster' in local_var_params:
            path_params['id_transactions_cluster'] = local_var_params['id_transactions_cluster']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/transactionsclusters/{id_transactions_cluster}/documents', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_transactionsclusters_id_transactions_cluster_documents_get(self, id_user, id_transactions_cluster, **kwargs):  # noqa: E501
        """Get documents  # noqa: E501

        Get list of documents<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_transactionsclusters_id_transactions_cluster_documents_get(id_user, id_transactions_cluster, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_transactions_cluster: (required)
        :param int limit: limit number of results
        :param int offset: offset of first result
        :param date min_date: minimal (inclusive) date
        :param date max_date: maximum (inclusive) date
        :param float min_amount: minimal (inclusive) amount
        :param float max_amount: maximumd (inclusive) amount
        :param float min_timestamp: minimal (inclusive) timestamp
        :param float max_timestamp: maximum (inclusive) timestamp
        :param int id_type: filter with a document type
        :param str expand:
        :return: InlineResponse20030
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_transactionsclusters_id_transactions_cluster_documents_get_with_http_info(id_user, id_transactions_cluster, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_transactionsclusters_id_transactions_cluster_documents_get_with_http_info(id_user, id_transactions_cluster, **kwargs)  # noqa: E501
            return data

    def users_id_user_transactionsclusters_id_transactions_cluster_documents_get_with_http_info(self, id_user, id_transactions_cluster, **kwargs):  # noqa: E501
        """Get documents  # noqa: E501

        Get list of documents<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_transactionsclusters_id_transactions_cluster_documents_get_with_http_info(id_user, id_transactions_cluster, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_transactions_cluster: (required)
        :param int limit: limit number of results
        :param int offset: offset of first result
        :param date min_date: minimal (inclusive) date
        :param date max_date: maximum (inclusive) date
        :param float min_amount: minimal (inclusive) amount
        :param float max_amount: maximumd (inclusive) amount
        :param float min_timestamp: minimal (inclusive) timestamp
        :param float max_timestamp: maximum (inclusive) timestamp
        :param int id_type: filter with a document type
        :param str expand:
        :return: InlineResponse20030
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_transactions_cluster', 'limit', 'offset', 'min_date', 'max_date', 'min_amount', 'max_amount', 'min_timestamp', 'max_timestamp', 'id_type', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_transactionsclusters_id_transactions_cluster_documents_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_transactionsclusters_id_transactions_cluster_documents_get`")  # noqa: E501
        # verify the required parameter 'id_transactions_cluster' is set
        if ('id_transactions_cluster' not in local_var_params or
                local_var_params['id_transactions_cluster'] is None):
            raise ValueError("Missing the required parameter `id_transactions_cluster` when calling `users_id_user_transactionsclusters_id_transactions_cluster_documents_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_transactions_cluster' in local_var_params:
            path_params['id_transactions_cluster'] = local_var_params['id_transactions_cluster']  # noqa: E501

        query_params = []
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params:
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'min_date' in local_var_params:
            query_params.append(('min_date', local_var_params['min_date']))  # noqa: E501
        if 'max_date' in local_var_params:
            query_params.append(('max_date', local_var_params['max_date']))  # noqa: E501
        if 'min_amount' in local_var_params:
            query_params.append(('min_amount', local_var_params['min_amount']))  # noqa: E501
        if 'max_amount' in local_var_params:
            query_params.append(('max_amount', local_var_params['max_amount']))  # noqa: E501
        if 'min_timestamp' in local_var_params:
            query_params.append(('min_timestamp', local_var_params['min_timestamp']))  # noqa: E501
        if 'max_timestamp' in local_var_params:
            query_params.append(('max_timestamp', local_var_params['max_timestamp']))  # noqa: E501
        if 'id_type' in local_var_params:
            query_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/transactionsclusters/{id_transactions_cluster}/documents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20030',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_transactionsclusters_id_transactions_cluster_documents_id_document_delete(self, id_user, id_transactions_cluster, id_document, **kwargs):  # noqa: E501
        """Delete a document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_transactionsclusters_id_transactions_cluster_documents_id_document_delete(id_user, id_transactions_cluster, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_transactions_cluster: (required)
        :param int id_document: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_transactionsclusters_id_transactions_cluster_documents_id_document_delete_with_http_info(id_user, id_transactions_cluster, id_document, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_transactionsclusters_id_transactions_cluster_documents_id_document_delete_with_http_info(id_user, id_transactions_cluster, id_document, **kwargs)  # noqa: E501
            return data

    def users_id_user_transactionsclusters_id_transactions_cluster_documents_id_document_delete_with_http_info(self, id_user, id_transactions_cluster, id_document, **kwargs):  # noqa: E501
        """Delete a document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_transactionsclusters_id_transactions_cluster_documents_id_document_delete_with_http_info(id_user, id_transactions_cluster, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_transactions_cluster: (required)
        :param int id_document: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_transactions_cluster', 'id_document', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_transactionsclusters_id_transactions_cluster_documents_id_document_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_transactionsclusters_id_transactions_cluster_documents_id_document_delete`")  # noqa: E501
        # verify the required parameter 'id_transactions_cluster' is set
        if ('id_transactions_cluster' not in local_var_params or
                local_var_params['id_transactions_cluster'] is None):
            raise ValueError("Missing the required parameter `id_transactions_cluster` when calling `users_id_user_transactionsclusters_id_transactions_cluster_documents_id_document_delete`")  # noqa: E501
        # verify the required parameter 'id_document' is set
        if ('id_document' not in local_var_params or
                local_var_params['id_document'] is None):
            raise ValueError("Missing the required parameter `id_document` when calling `users_id_user_transactionsclusters_id_transactions_cluster_documents_id_document_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_transactions_cluster' in local_var_params:
            path_params['id_transactions_cluster'] = local_var_params['id_transactions_cluster']  # noqa: E501
        if 'id_document' in local_var_params:
            path_params['id_document'] = local_var_params['id_document']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/transactionsclusters/{id_transactions_cluster}/documents/{id_document}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_transactionsclusters_id_transactions_cluster_documents_id_document_put(self, id_user, id_transactions_cluster, id_document, **kwargs):  # noqa: E501
        """Edit a document  # noqa: E501

        Edit meta-data of a specific document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_transactionsclusters_id_transactions_cluster_documents_id_document_put(id_user, id_transactions_cluster, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_transactions_cluster: (required)
        :param int id_document: (required)
        :param str expand:
        :param date date: Date of document
        :param date duedate: Due date of document
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_type: Type of this document
        :param int income: Is an income or an outcome
        :param str name: Name of the document
        :param int readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_transactionsclusters_id_transactions_cluster_documents_id_document_put_with_http_info(id_user, id_transactions_cluster, id_document, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_transactionsclusters_id_transactions_cluster_documents_id_document_put_with_http_info(id_user, id_transactions_cluster, id_document, **kwargs)  # noqa: E501
            return data

    def users_id_user_transactionsclusters_id_transactions_cluster_documents_id_document_put_with_http_info(self, id_user, id_transactions_cluster, id_document, **kwargs):  # noqa: E501
        """Edit a document  # noqa: E501

        Edit meta-data of a specific document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_transactionsclusters_id_transactions_cluster_documents_id_document_put_with_http_info(id_user, id_transactions_cluster, id_document, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_transactions_cluster: (required)
        :param int id_document: (required)
        :param str expand:
        :param date date: Date of document
        :param date duedate: Due date of document
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_type: Type of this document
        :param int income: Is an income or an outcome
        :param str name: Name of the document
        :param int readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_transactions_cluster', 'id_document', 'expand', 'date', 'duedate', 'file', 'id_category', 'id_type', 'income', 'name', 'readonly', 'total_amount', 'untaxed_amount', 'vat']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_transactionsclusters_id_transactions_cluster_documents_id_document_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_transactionsclusters_id_transactions_cluster_documents_id_document_put`")  # noqa: E501
        # verify the required parameter 'id_transactions_cluster' is set
        if ('id_transactions_cluster' not in local_var_params or
                local_var_params['id_transactions_cluster'] is None):
            raise ValueError("Missing the required parameter `id_transactions_cluster` when calling `users_id_user_transactionsclusters_id_transactions_cluster_documents_id_document_put`")  # noqa: E501
        # verify the required parameter 'id_document' is set
        if ('id_document' not in local_var_params or
                local_var_params['id_document'] is None):
            raise ValueError("Missing the required parameter `id_document` when calling `users_id_user_transactionsclusters_id_transactions_cluster_documents_id_document_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_transactions_cluster' in local_var_params:
            path_params['id_transactions_cluster'] = local_var_params['id_transactions_cluster']  # noqa: E501
        if 'id_document' in local_var_params:
            path_params['id_document'] = local_var_params['id_document']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'date' in local_var_params:
            form_params.append(('date', local_var_params['date']))  # noqa: E501
        if 'duedate' in local_var_params:
            form_params.append(('duedate', local_var_params['duedate']))  # noqa: E501
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501
        if 'id_category' in local_var_params:
            form_params.append(('id_category', local_var_params['id_category']))  # noqa: E501
        if 'id_type' in local_var_params:
            form_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'income' in local_var_params:
            form_params.append(('income', local_var_params['income']))  # noqa: E501
        if 'name' in local_var_params:
            form_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'readonly' in local_var_params:
            form_params.append(('readonly', local_var_params['readonly']))  # noqa: E501
        if 'total_amount' in local_var_params:
            form_params.append(('total_amount', local_var_params['total_amount']))  # noqa: E501
        if 'untaxed_amount' in local_var_params:
            form_params.append(('untaxed_amount', local_var_params['untaxed_amount']))  # noqa: E501
        if 'vat' in local_var_params:
            form_params.append(('vat', local_var_params['vat']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/transactionsclusters/{id_transactions_cluster}/documents/{id_document}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_transactionsclusters_id_transactions_cluster_documents_post(self, id_user, id_transactions_cluster, date, duedate, **kwargs):  # noqa: E501
        """Add a new document  # noqa: E501

        Add a new document<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_transactionsclusters_id_transactions_cluster_documents_post(id_user, id_transactions_cluster, date, duedate, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_transactions_cluster: (required)
        :param date date: Date of document (required)
        :param date duedate: Due date of document (required)
        :param str expand:
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_ocr: Related OCR process
        :param int id_type: Type of this document
        :param bool income: Is an income or an outcome
        :param str name: Name of the document
        :param bool readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_transactionsclusters_id_transactions_cluster_documents_post_with_http_info(id_user, id_transactions_cluster, date, duedate, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_transactionsclusters_id_transactions_cluster_documents_post_with_http_info(id_user, id_transactions_cluster, date, duedate, **kwargs)  # noqa: E501
            return data

    def users_id_user_transactionsclusters_id_transactions_cluster_documents_post_with_http_info(self, id_user, id_transactions_cluster, date, duedate, **kwargs):  # noqa: E501
        """Add a new document  # noqa: E501

        Add a new document<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_transactionsclusters_id_transactions_cluster_documents_post_with_http_info(id_user, id_transactions_cluster, date, duedate, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_transactions_cluster: (required)
        :param date date: Date of document (required)
        :param date duedate: Due date of document (required)
        :param str expand:
        :param file file: File of the document
        :param int id_category: Related category
        :param int id_ocr: Related OCR process
        :param int id_type: Type of this document
        :param bool income: Is an income or an outcome
        :param str name: Name of the document
        :param bool readonly: Is this file readonly
        :param float total_amount: Taxed amount
        :param float untaxed_amount: Untaxed amount
        :param float vat: VAT amount
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_transactions_cluster', 'date', 'duedate', 'expand', 'file', 'id_category', 'id_ocr', 'id_type', 'income', 'name', 'readonly', 'total_amount', 'untaxed_amount', 'vat']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_transactionsclusters_id_transactions_cluster_documents_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_transactionsclusters_id_transactions_cluster_documents_post`")  # noqa: E501
        # verify the required parameter 'id_transactions_cluster' is set
        if ('id_transactions_cluster' not in local_var_params or
                local_var_params['id_transactions_cluster'] is None):
            raise ValueError("Missing the required parameter `id_transactions_cluster` when calling `users_id_user_transactionsclusters_id_transactions_cluster_documents_post`")  # noqa: E501
        # verify the required parameter 'date' is set
        if ('date' not in local_var_params or
                local_var_params['date'] is None):
            raise ValueError("Missing the required parameter `date` when calling `users_id_user_transactionsclusters_id_transactions_cluster_documents_post`")  # noqa: E501
        # verify the required parameter 'duedate' is set
        if ('duedate' not in local_var_params or
                local_var_params['duedate'] is None):
            raise ValueError("Missing the required parameter `duedate` when calling `users_id_user_transactionsclusters_id_transactions_cluster_documents_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_transactions_cluster' in local_var_params:
            path_params['id_transactions_cluster'] = local_var_params['id_transactions_cluster']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'date' in local_var_params:
            form_params.append(('date', local_var_params['date']))  # noqa: E501
        if 'duedate' in local_var_params:
            form_params.append(('duedate', local_var_params['duedate']))  # noqa: E501
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501
        if 'id_category' in local_var_params:
            form_params.append(('id_category', local_var_params['id_category']))  # noqa: E501
        if 'id_ocr' in local_var_params:
            form_params.append(('id_ocr', local_var_params['id_ocr']))  # noqa: E501
        if 'id_type' in local_var_params:
            form_params.append(('id_type', local_var_params['id_type']))  # noqa: E501
        if 'income' in local_var_params:
            form_params.append(('income', local_var_params['income']))  # noqa: E501
        if 'name' in local_var_params:
            form_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'readonly' in local_var_params:
            form_params.append(('readonly', local_var_params['readonly']))  # noqa: E501
        if 'total_amount' in local_var_params:
            form_params.append(('total_amount', local_var_params['total_amount']))  # noqa: E501
        if 'untaxed_amount' in local_var_params:
            form_params.append(('untaxed_amount', local_var_params['untaxed_amount']))  # noqa: E501
        if 'vat' in local_var_params:
            form_params.append(('vat', local_var_params['vat']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/transactionsclusters/{id_transactions_cluster}/documents', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_user_transactionsclusters_id_transactions_cluster_documents_put(self, id_user, id_transactions_cluster, unknown_base_type, **kwargs):  # noqa: E501
        """Attach an existing document to a transaction or a transactions_cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_transactionsclusters_id_transactions_cluster_documents_put(id_user, id_transactions_cluster, unknown_base_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_transactions_cluster: (required)
        :param UNKNOWN_BASE_TYPE unknown_base_type: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_user_transactionsclusters_id_transactions_cluster_documents_put_with_http_info(id_user, id_transactions_cluster, unknown_base_type, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_user_transactionsclusters_id_transactions_cluster_documents_put_with_http_info(id_user, id_transactions_cluster, unknown_base_type, **kwargs)  # noqa: E501
            return data

    def users_id_user_transactionsclusters_id_transactions_cluster_documents_put_with_http_info(self, id_user, id_transactions_cluster, unknown_base_type, **kwargs):  # noqa: E501
        """Attach an existing document to a transaction or a transactions_cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_user_transactionsclusters_id_transactions_cluster_documents_put_with_http_info(id_user, id_transactions_cluster, unknown_base_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_user: Hint: you can use 'me' or 'all' (required)
        :param int id_transactions_cluster: (required)
        :param UNKNOWN_BASE_TYPE unknown_base_type: (required)
        :param str expand:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id_user', 'id_transactions_cluster', 'unknown_base_type', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_user_transactionsclusters_id_transactions_cluster_documents_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id_user' is set
        if ('id_user' not in local_var_params or
                local_var_params['id_user'] is None):
            raise ValueError("Missing the required parameter `id_user` when calling `users_id_user_transactionsclusters_id_transactions_cluster_documents_put`")  # noqa: E501
        # verify the required parameter 'id_transactions_cluster' is set
        if ('id_transactions_cluster' not in local_var_params or
                local_var_params['id_transactions_cluster'] is None):
            raise ValueError("Missing the required parameter `id_transactions_cluster` when calling `users_id_user_transactionsclusters_id_transactions_cluster_documents_put`")  # noqa: E501
        # verify the required parameter 'unknown_base_type' is set
        if ('unknown_base_type' not in local_var_params or
                local_var_params['unknown_base_type'] is None):
            raise ValueError("Missing the required parameter `unknown_base_type` when calling `users_id_user_transactionsclusters_id_transactions_cluster_documents_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_user' in local_var_params:
            path_params['id_user'] = local_var_params['id_user']  # noqa: E501
        if 'id_transactions_cluster' in local_var_params:
            path_params['id_transactions_cluster'] = local_var_params['id_transactions_cluster']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params:
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'unknown_base_type' in local_var_params:
            body_params = local_var_params['unknown_base_type']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id_user}/transactionsclusters/{id_transactions_cluster}/documents', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
