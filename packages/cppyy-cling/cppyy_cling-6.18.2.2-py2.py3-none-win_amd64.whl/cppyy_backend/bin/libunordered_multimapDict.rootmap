{ decls }
namespace std {  }

[ libunordered_multimapDict.dll ]
# List of selected classes
class std::unordered_multimap<basic_string<char,struct std::char_traits<char>,allocator<char> >,double,struct std::hash<basic_string<char,struct std::char_traits<char>,allocator<char> > >,struct std::equal_to<basic_string<char,struct std::char_traits<char>,allocator<char> > >,allocator<struct std::pair<const basic_string<char,struct std::char_traits<char>,allocator<char> >,double> > >
class std::unordered_multimap<basic_string<char,struct std::char_traits<char>,allocator<char> >,int,struct std::hash<basic_string<char,struct std::char_traits<char>,allocator<char> > >,struct std::equal_to<basic_string<char,struct std::char_traits<char>,allocator<char> > >,allocator<struct std::pair<const basic_string<char,struct std::char_traits<char>,allocator<char> >,int> > >
class std::unordered_multimap<basic_string<char,struct std::char_traits<char>,allocator<char> >,long,struct std::hash<basic_string<char,struct std::char_traits<char>,allocator<char> > >,struct std::equal_to<basic_string<char,struct std::char_traits<char>,allocator<char> > >,allocator<struct std::pair<const basic_string<char,struct std::char_traits<char>,allocator<char> >,long> > >
class std::unordered_multimap<basic_string<char,struct std::char_traits<char>,allocator<char> >,void*__ptr64,struct std::hash<basic_string<char,struct std::char_traits<char>,allocator<char> > >,struct std::equal_to<basic_string<char,struct std::char_traits<char>,allocator<char> > >,allocator<struct std::pair<const basic_string<char,struct std::char_traits<char>,allocator<char> >,void*__ptr64> > >
class std::unordered_multimap<char*__ptr64,char*__ptr64,struct std::hash<char*__ptr64>,struct std::equal_to<char*__ptr64>,allocator<struct std::pair<char*__ptr64 const,char*__ptr64> > >
class std::unordered_multimap<char*__ptr64,double,struct std::hash<char*__ptr64>,struct std::equal_to<char*__ptr64>,allocator<struct std::pair<char*__ptr64 const,double> > >
class std::unordered_multimap<char*__ptr64,int,struct std::hash<char*__ptr64>,struct std::equal_to<char*__ptr64>,allocator<struct std::pair<char*__ptr64 const,int> > >
class std::unordered_multimap<char*__ptr64,long,struct std::hash<char*__ptr64>,struct std::equal_to<char*__ptr64>,allocator<struct std::pair<char*__ptr64 const,long> > >
class std::unordered_multimap<char*__ptr64,void*__ptr64,struct std::hash<char*__ptr64>,struct std::equal_to<char*__ptr64>,allocator<struct std::pair<char*__ptr64 const,void*__ptr64> > >
class std::unordered_multimap<double,char*__ptr64,struct std::hash<double>,struct std::equal_to<double>,allocator<struct std::pair<double const,char*__ptr64> > >
class std::unordered_multimap<double,double,struct std::hash<double>,struct std::equal_to<double>,allocator<struct std::pair<double const,double> > >
class std::unordered_multimap<double,int,struct std::hash<double>,struct std::equal_to<double>,allocator<struct std::pair<double const,int> > >
class std::unordered_multimap<double,long,struct std::hash<double>,struct std::equal_to<double>,allocator<struct std::pair<double const,long> > >
class std::unordered_multimap<double,void*__ptr64,struct std::hash<double>,struct std::equal_to<double>,allocator<struct std::pair<double const,void*__ptr64> > >
class std::unordered_multimap<long,char*__ptr64,struct std::hash<long>,struct std::equal_to<long>,allocator<struct std::pair<long const,char*__ptr64> > >
class std::unordered_multimap<long,double,struct std::hash<long>,struct std::equal_to<long>,allocator<struct std::pair<long const,double> > >
class std::unordered_multimap<long,int,struct std::hash<long>,struct std::equal_to<long>,allocator<struct std::pair<long const,int> > >
class std::unordered_multimap<long,long,struct std::hash<long>,struct std::equal_to<long>,allocator<struct std::pair<long const,long> > >
class std::unordered_multimap<long,void*__ptr64,struct std::hash<long>,struct std::equal_to<long>,allocator<struct std::pair<long const,void*__ptr64> > >
class unordered_multimap<char*,char*>
class unordered_multimap<char*,double>
class unordered_multimap<char*,int>
class unordered_multimap<char*,long>
class unordered_multimap<char*,void*>
class unordered_multimap<double,char*>
class unordered_multimap<double,double>
class unordered_multimap<double,int>
class unordered_multimap<double,long>
class unordered_multimap<double,void*>
class unordered_multimap<long,char*>
class unordered_multimap<long,double>
class unordered_multimap<long,int>
class unordered_multimap<long,long>
class unordered_multimap<long,void*>
class unordered_multimap<string,double>
class unordered_multimap<string,int>
class unordered_multimap<string,long>
class unordered_multimap<string,void*>
