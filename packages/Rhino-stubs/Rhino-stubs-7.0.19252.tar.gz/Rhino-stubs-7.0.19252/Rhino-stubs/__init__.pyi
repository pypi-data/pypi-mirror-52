from typing import Tuple, Set, Iterable, List


class RuntimeEnvironment:
    Unset = 0
    #None = 1
    Windows = 2
    Apple = 3
    Android = 4
    Linux = 5


class ReadFileResult:
    Unset = 0
    Completed = 1
    CompletedWithErrors = 2
    Failed = 3


class UnitSystem:
    #None = 0
    Microns = 1
    Millimeters = 2
    Centimeters = 3
    Meters = 4
    Kilometers = 5
    Microinches = 6
    Mils = 7
    Inches = 8
    Feet = 9
    Miles = 10
    CustomUnits = 11
    Angstroms = 12
    Nanometers = 13
    Decimeters = 14
    Dekameters = 15
    Hectometers = 16
    Megameters = 17
    Gigameters = 18
    Yards = 19
    PrinterPoints = 20
    PrinterPicas = 21
    NauticalMiles = 22
    AstronomicalUnits = 23
    LightYears = 24
    Parsecs = 25
    Unset = 255


class AngleUnitSystem:
    #None = 0
    Turns = 1
    Radians = 2
    Degrees = 3
    Minutes = 4
    Seconds = 5
    Gradians = 6
    Unset = 255


class LengthValue:
    def Dispose(self) -> None: ...
    @overload
    def Create(s: str, ps: StringParserSettings) -> Tuple[LengthValue, bool]: ...
    @overload
    def Create(length: float, us: UnitSystem, format: StringFormat) -> LengthValue: ...
    @overload
    def Create(length: float, us: UnitSystem, format: StringFormat, localeId: UInt32) -> LengthValue: ...
    @overload
    def Length(self) -> float: ...
    @overload
    def Length(self, units: UnitSystem) -> float: ...
    @property
    def LengthString(self) -> str: ...
    def ChangeLength(self, newLength: float) -> LengthValue: ...
    def ChangeUnitSystem(self, newUnits: UnitSystem) -> LengthValue: ...
    @property
    def ParseSettings(self) -> StringParserSettings: ...
    @property
    def UnitSystem(self) -> UnitSystem: ...
    @property
    def LengthStringFormat(self) -> StringFormat: ...
    @property
    def ContextLocaleId(self) -> UInt32: ...
    @property
    def ContextAngleUnitSystem(self) -> AngleUnitSystem: ...
    def IsUnset(self) -> bool: ...


class ScaleValue:
    def __init__(self): ...
    def OneToOne() -> ScaleValue: ...
    @overload
    def Create(s: str, ps: StringParserSettings) -> ScaleValue: ...
    @overload
    def Create(left: LengthValue, right: LengthValue, format: ScaleStringFormat) -> ScaleValue: ...
    def Dispose(self) -> None: ...
    def IsUnset(self) -> bool: ...
    def LeftLengthValue(self) -> LengthValue: ...
    def RightLengthValue(self) -> LengthValue: ...
    @property
    def LeftToRightScale(self) -> float: ...
    @property
    def RightToLeftScale(self) -> float: ...


class RhinoFileWatcherChangeReason:
    Created = 1
    Deleted = 2
    Changed = 4
    Renamed = 5






class RhinoDoc:
    def remove_RenderMaterialsTableEvent(value: EventHandler) -> None: ...
    def add_RenderEnvironmentTableEvent(value: EventHandler) -> None: ...
    def remove_RenderEnvironmentTableEvent(value: EventHandler) -> None: ...
    def add_RenderTextureTableEvent(value: EventHandler) -> None: ...
    def remove_RenderTextureTableEvent(value: EventHandler) -> None: ...
    def add_TextureMappingEvent(value: EventHandler) -> None: ...
    def remove_TextureMappingEvent(value: EventHandler) -> None: ...
    def add_CloseDocument(value: EventHandler) -> None: ...
    def remove_CloseDocument(value: EventHandler) -> None: ...
    def add_NewDocument(value: EventHandler) -> None: ...
    def remove_NewDocument(value: EventHandler) -> None: ...
    def add_ActiveDocumentChanged(value: EventHandler) -> None: ...
    def remove_ActiveDocumentChanged(value: EventHandler) -> None: ...
    def add_DocumentPropertiesChanged(value: EventHandler) -> None: ...
    def remove_DocumentPropertiesChanged(value: EventHandler) -> None: ...
    def add_BeginOpenDocument(value: EventHandler) -> None: ...
    def remove_BeginOpenDocument(value: EventHandler) -> None: ...
    def add_EndOpenDocument(value: EventHandler) -> None: ...
    def remove_EndOpenDocument(value: EventHandler) -> None: ...
    def add_EndOpenDocumentInitialiViewUpdate(value: EventHandler) -> None: ...
    def remove_EndOpenDocumentInitialiViewUpdate(value: EventHandler) -> None: ...
    def add_EndOpenDocumentInitialViewUpdate(value: EventHandler) -> None: ...
    def remove_EndOpenDocumentInitialViewUpdate(value: EventHandler) -> None: ...
    def add_BeginSaveDocument(value: EventHandler) -> None: ...
    def remove_BeginSaveDocument(value: EventHandler) -> None: ...
    def add_EndSaveDocument(value: EventHandler) -> None: ...
    def remove_EndSaveDocument(value: EventHandler) -> None: ...
    def add_AddRhinoObject(value: EventHandler) -> None: ...
    def remove_AddRhinoObject(value: EventHandler) -> None: ...
    def add_DeleteRhinoObject(value: EventHandler) -> None: ...
    def remove_DeleteRhinoObject(value: EventHandler) -> None: ...
    def add_ReplaceRhinoObject(value: EventHandler) -> None: ...
    def remove_ReplaceRhinoObject(value: EventHandler) -> None: ...
    def add_UndeleteRhinoObject(value: EventHandler) -> None: ...
    def remove_UndeleteRhinoObject(value: EventHandler) -> None: ...
    def add_PurgeRhinoObject(value: EventHandler) -> None: ...
    def remove_PurgeRhinoObject(value: EventHandler) -> None: ...
    def add_SelectObjects(value: EventHandler) -> None: ...
    def remove_SelectObjects(value: EventHandler) -> None: ...
    def add_DeselectObjects(value: EventHandler) -> None: ...
    def remove_DeselectObjects(value: EventHandler) -> None: ...
    def add_DeselectAllObjects(value: EventHandler) -> None: ...
    def remove_DeselectAllObjects(value: EventHandler) -> None: ...
    def add_ModifyObjectAttributes(value: EventHandler) -> None: ...
    def remove_ModifyObjectAttributes(value: EventHandler) -> None: ...
    def add_BeforeTransformObjects(value: EventHandler) -> None: ...
    def remove_BeforeTransformObjects(value: EventHandler) -> None: ...
    def add_LayerTableEvent(value: EventHandler) -> None: ...
    def remove_LayerTableEvent(value: EventHandler) -> None: ...
    def add_DimensionStyleTableEvent(value: EventHandler) -> None: ...
    def remove_DimensionStyleTableEvent(value: EventHandler) -> None: ...
    def add_InstanceDefinitionTableEvent(value: EventHandler) -> None: ...
    def remove_InstanceDefinitionTableEvent(value: EventHandler) -> None: ...
    def add_LightTableEvent(value: EventHandler) -> None: ...
    def remove_LightTableEvent(value: EventHandler) -> None: ...
    def add_MaterialTableEvent(value: EventHandler) -> None: ...
    def remove_MaterialTableEvent(value: EventHandler) -> None: ...
    def add_GroupTableEvent(value: EventHandler) -> None: ...
    def remove_GroupTableEvent(value: EventHandler) -> None: ...
    def add_RenderMaterialsTableEvent(value: EventHandler) -> None: ...
    @EarthAnchorPoint.setter
    def EarthAnchorPoint(self, value: EarthAnchorPoint) -> None: ...
    @property
    def RenderSettings(self) -> RenderSettings: ...
    @RenderSettings.setter
    def RenderSettings(self, value: RenderSettings) -> None: ...
    @property
    def AnimationProperties(self) -> AnimationProperties: ...
    @AnimationProperties.setter
    def AnimationProperties(self, value: AnimationProperties) -> None: ...
    @property
    def CustomRenderSizes(self) -> List: ...
    @property
    def MeshingParameterStyle(self) -> MeshingParameterStyle: ...
    @MeshingParameterStyle.setter
    def MeshingParameterStyle(self, value: MeshingParameterStyle) -> None: ...
    def GetMeshingParameters(self, style: MeshingParameterStyle) -> MeshingParameters: ...
    def GetAnalysisMeshingParameters(self) -> MeshingParameters: ...
    def SetCustomMeshingParameters(self, mp: MeshingParameters) -> None: ...
    def GetCurrentMeshingParameters(self) -> MeshingParameters: ...
    @property
    def ModelSpaceHatchScale(self) -> float: ...
    @ModelSpaceHatchScale.setter
    def ModelSpaceHatchScale(self, value: float) -> None: ...
    @property
    def ModelSpaceHatchScalingEnabled(self) -> bool: ...
    @ModelSpaceHatchScalingEnabled.setter
    def ModelSpaceHatchScalingEnabled(self, value: bool) -> None: ...
    @property
    def ModelSpaceTextScale(self) -> float: ...
    @ModelSpaceTextScale.setter
    def ModelSpaceTextScale(self, value: float) -> None: ...
    @property
    def ModelSpaceAnnotationScalingEnabled(self) -> bool: ...
    @ModelSpaceAnnotationScalingEnabled.setter
    def ModelSpaceAnnotationScalingEnabled(self, value: bool) -> None: ...
    @property
    def LayoutSpaceAnnotationScalingEnabled(self) -> bool: ...
    @LayoutSpaceAnnotationScalingEnabled.setter
    def LayoutSpaceAnnotationScalingEnabled(self, value: bool) -> None: ...
    @property
    def Worksession(self) -> Worksession: ...
    @property
    def Views(self) -> ViewTable: ...
    @property
    def Objects(self) -> ObjectTable: ...
    @property
    def Manifest(self) -> ManifestTable: ...
    def CreateDefaultAttributes(self) -> ObjectAttributes: ...
    @property
    def Bitmaps(self) -> BitmapTable: ...
    @property
    def Materials(self) -> MaterialTable: ...
    @property
    def Linetypes(self) -> LinetypeTable: ...
    @property
    def Layers(self) -> LayerTable: ...
    @property
    def Groups(self) -> GroupTable: ...
    @property
    def Fonts(self) -> FontTable: ...
    @property
    def DimStyles(self) -> DimStyleTable: ...
    @property
    def Lights(self) -> LightTable: ...
    @property
    def HatchPatterns(self) -> HatchPatternTable: ...
    @property
    def InstanceDefinitions(self) -> InstanceDefinitionTable: ...
    @property
    def NamedConstructionPlanes(self) -> NamedConstructionPlaneTable: ...
    @property
    def NamedViews(self) -> NamedViewTable: ...
    @property
    def Strings(self) -> StringTable: ...
    @property
    def RuntimeData(self) -> RuntimeDocumentDataTable: ...
    @property
    def NamedPositions(self) -> NamedPositionTable: ...
    @property
    def Snapshots(self) -> SnapshotTable: ...
    @property
    def NamedLayerStates(self) -> NamedLayerStateTable: ...
    @property
    def RenderMaterials(self) -> RenderMaterialTable: ...
    @property
    def RenderEnvironments(self) -> RenderEnvironmentTable: ...
    @property
    def RenderTextures(self) -> RenderTextureTable: ...
    @property
    def CurrentEnvironment(self) -> ICurrentEnvironment: ...
    @overload
    def GetRenderPrimitives(self, forceTriangleMeshes: bool, quietly: bool) -> Iterable[RenderPrimitive]: ...
    @overload
    def GetRenderPrimitives(self, viewport: ViewportInfo, forceTriangleMeshes: bool, quietly: bool) -> Iterable[RenderPrimitive]: ...
    @overload
    def GetRenderPrimitives(self, plugInId: Guid, viewport: ViewportInfo, forceTriangleMeshes: bool, quietly: bool) -> Iterable[RenderPrimitive]: ...
    @property
    def GroundPlane(self) -> GroundPlane: ...
    def GetEmbeddedFilesList(self, missingOnly: bool) -> Set(str): ...
    @property
    def IsSendingMail(self) -> bool: ...
    @property
    def TemplateFileUsed(self) -> str: ...
    @overload
    def ClearUndoRecords(self, purgeDeletedObjects: bool) -> None: ...
    @overload
    def ClearUndoRecords(self, undoSerialNumber: UInt32, purgeDeletedObjects: bool) -> None: ...
    def ClearRedoRecords(self) -> None: ...
    @property
    def UndoRecordingEnabled(self) -> bool: ...
    @UndoRecordingEnabled.setter
    def UndoRecordingEnabled(self, value: bool) -> None: ...
    @property
    def UndoRecordingIsActive(self) -> bool: ...
    def BeginUndoRecord(self, description: str) -> UInt32: ...
    @property
    def NextUndoRecordSerialNumber(self) -> UInt32: ...
    @property
    def CurrentUndoRecordSerialNumber(self) -> UInt32: ...
    def Undo(self) -> bool: ...
    def Redo(self) -> bool: ...
    @overload
    def AddCustomUndoEvent(self, description: str, handler: EventHandler) -> bool: ...
    @overload
    def AddCustomUndoEvent(self, description: str, handler: EventHandler, tag: Object) -> bool: ...
    def EndUndoRecord(self, undoRecordSerialNumber: UInt32) -> bool: ...
    @property
    def UndoActive(self) -> bool: ...
    @property
    def RedoActive(self) -> bool: ...
    def ExtractPreviewImage(path: str) -> Bitmap: ...
    def SupportsRenderPrimitiveList(self, viewport: ViewportInfo, attrs: DisplayPipelineAttributes) -> bool: ...
    def GetRenderPrimitiveList(self, viewport: ViewportInfo, attrs: DisplayPipelineAttributes) -> RenderPrimitiveList: ...
    def TryGetRenderPrimitiveBoundingBox(self, viewport: ViewportInfo, attrs: DisplayPipelineAttributes) -> Tuple[bool, BoundingBox]: ...
    @property
    def IsCommandRunning(self) -> bool: ...
    def Open(filePath: str) -> Tuple[RhinoDoc, bool]: ...
    def FromFilePath(filePath: str) -> RhinoDoc: ...
    def OpenFile(path: str) -> bool: ...
    def ReadFile(path: str, options: FileReadOptions) -> bool: ...
    @property
    def IsHeadless(self) -> bool: ...
    def Dispose(self) -> None: ...
    def New(file3dmTemplatePath: str) -> RhinoDoc: ...
    def Load(file3dmPath: str) -> RhinoDoc: ...
    def Import(self, filePath: str) -> bool: ...
    def Save(self) -> bool: ...
    @overload
    def SaveAs(self, file3dmPath: str) -> bool: ...
    @overload
    def SaveAs(self, file3dmPath: str, version: int) -> bool: ...
    @overload
    def SaveAsTemplate(self, file3dmTemplatePath: str) -> bool: ...
    @overload
    def SaveAsTemplate(self, file3dmTemplatePath: str, version: int) -> bool: ...
    def Export(self, filePath: str) -> bool: ...
    def ExportSelected(self, filePath: str) -> bool: ...
    def WriteFile(self, path: str, options: FileWriteOptions) -> bool: ...
    def Write3dmFile(self, path: str, options: FileWriteOptions) -> bool: ...
    def FindFile(self, filename: str) -> str: ...
    def Create(modelTemplateFileName: str) -> RhinoDoc: ...
    def OpenDocuments() -> Set(RhinoDoc): ...
    @property
    def ActiveDoc() -> RhinoDoc: ...
    def FromId(docId: int) -> RhinoDoc: ...
    def FromRuntimeSerialNumber(serialNumber: UInt32) -> RhinoDoc: ...
    def GetHashCode(self) -> int: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Path(self) -> str: ...
    @property
    def Notes(self) -> str: ...
    @Notes.setter
    def Notes(self, value: str) -> None: ...
    @property
    def DateCreated(self) -> DateTime: ...
    @property
    def DateLastEdited(self) -> DateTime: ...
    def GetGumballPlane(self) -> Tuple[bool, Plane]: ...
    @property
    def ModelAbsoluteTolerance(self) -> float: ...
    @ModelAbsoluteTolerance.setter
    def ModelAbsoluteTolerance(self, value: float) -> None: ...
    @property
    def ModelAngleToleranceRadians(self) -> float: ...
    @ModelAngleToleranceRadians.setter
    def ModelAngleToleranceRadians(self, value: float) -> None: ...
    @property
    def ModelAngleToleranceDegrees(self) -> float: ...
    @ModelAngleToleranceDegrees.setter
    def ModelAngleToleranceDegrees(self, value: float) -> None: ...
    @property
    def ModelRelativeTolerance(self) -> float: ...
    @ModelRelativeTolerance.setter
    def ModelRelativeTolerance(self, value: float) -> None: ...
    @property
    def ModelDistanceDisplayPrecision(self) -> int: ...
    @ModelDistanceDisplayPrecision.setter
    def ModelDistanceDisplayPrecision(self, value: int) -> None: ...
    @property
    def PageDistanceDisplayPrecision(self) -> int: ...
    @PageDistanceDisplayPrecision.setter
    def PageDistanceDisplayPrecision(self, value: int) -> None: ...
    @property
    def PageAbsoluteTolerance(self) -> float: ...
    @PageAbsoluteTolerance.setter
    def PageAbsoluteTolerance(self, value: float) -> None: ...
    @property
    def PageAngleToleranceRadians(self) -> float: ...
    @PageAngleToleranceRadians.setter
    def PageAngleToleranceRadians(self, value: float) -> None: ...
    @property
    def PageAngleToleranceDegrees(self) -> float: ...
    @PageAngleToleranceDegrees.setter
    def PageAngleToleranceDegrees(self, value: float) -> None: ...
    @property
    def PageRelativeTolerance(self) -> float: ...
    @PageRelativeTolerance.setter
    def PageRelativeTolerance(self, value: float) -> None: ...
    @property
    def ModelBasepoint(self) -> Point3d: ...
    @ModelBasepoint.setter
    def ModelBasepoint(self, value: Point3d) -> None: ...
    @property
    def Modified(self) -> bool: ...
    @Modified.setter
    def Modified(self, value: bool) -> None: ...
    def ReadFileVersion(self) -> int: ...
    @property
    def ModelUnitSystem(self) -> UnitSystem: ...
    @ModelUnitSystem.setter
    def ModelUnitSystem(self, value: UnitSystem) -> None: ...
    def GetUnitSystemName(self, modelUnits: bool, capitalize: bool, singular: bool, abbreviate: bool) -> str: ...
    def AdjustModelUnitSystem(self, newUnitSystem: UnitSystem, scale: bool) -> None: ...
    @property
    def PageUnitSystem(self) -> UnitSystem: ...
    @PageUnitSystem.setter
    def PageUnitSystem(self, value: UnitSystem) -> None: ...
    def AdjustPageUnitSystem(self, newUnitSystem: UnitSystem, scale: bool) -> None: ...
    @property
    def DistanceDisplayPrecision(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsLocked(self) -> bool: ...
    @property
    def IsInitializing(self) -> bool: ...
    @property
    def IsCreating(self) -> bool: ...
    @property
    def IsOpening(self) -> bool: ...
    @property
    def IsAvailable(self) -> bool: ...
    @property
    def IsClosing(self) -> bool: ...
    @property
    def DocumentId(self) -> int: ...
    @property
    def RuntimeSerialNumber(self) -> UInt32: ...
    @property
    def EarthAnchorPoint(self) -> EarthAnchorPoint: ...


class RhinoDocObserverArgs:
    def __init__(self, doc: RhinoDoc): ...
    @property
    def Doc(self) -> RhinoDoc: ...
    @property
    def RuntimeSerialNumber(self) -> UInt32: ...


class IRhinoDocObserver:
    def RhinoDocClosed(self, e: RhinoDocObserverArgs) -> None: ...
    def ActiveRhinoDocChanged(self, e: RhinoDocObserverArgs) -> None: ...


class DocumentEventArgs:
    @property
    def DocumentId(self) -> int: ...
    @property
    def DocumentSerialNumber(self) -> UInt32: ...
    @property
    def Document(self) -> RhinoDoc: ...


class DocumentOpenEventArgs(DocumentEventArgs):
    @property
    def FileName(self) -> str: ...
    @property
    def Merge(self) -> bool: ...
    @property
    def Reference(self) -> bool: ...


class DocumentSaveEventArgs(DocumentEventArgs):
    @property
    def FileName(self) -> str: ...
    @property
    def ExportSelected(self) -> bool: ...


class RhinoWindow:
    @property
    def Handle(self) -> IntPtr: ...
    def Invoke(self, method: Delegate) -> None: ...
    @property
    def InvokeRequired(self) -> bool: ...


class RhinoApp:
    @property
    def UserIsLoggedIn() -> bool: ...
    def add_EscapeKeyPressed(value: EventHandler) -> None: ...
    def remove_EscapeKeyPressed(value: EventHandler) -> None: ...
    def add_KeyboardEvent(value: KeyboardHookEvent) -> None: ...
    def remove_KeyboardEvent(value: KeyboardHookEvent) -> None: ...
    def add_Initialized(value: EventHandler) -> None: ...
    def remove_Initialized(value: EventHandler) -> None: ...
    def add_Closing(value: EventHandler) -> None: ...
    def remove_Closing(value: EventHandler) -> None: ...
    def add_AppSettingsChanged(value: EventHandler) -> None: ...
    def remove_AppSettingsChanged(value: EventHandler) -> None: ...
    def add_Idle(value: EventHandler) -> None: ...
    def remove_Idle(value: EventHandler) -> None: ...
    def add_MainLoop(value: EventHandler) -> None: ...
    def remove_MainLoop(value: EventHandler) -> None: ...
    def EnableContinuousMainLoop() -> bool: ...
    def DisableContinuousMainLoop() -> None: ...
    def add_RdkNewDocument(value: EventHandler) -> None: ...
    def remove_RdkNewDocument(value: EventHandler) -> None: ...
    def add_RdkGlobalSettingsChanged(value: EventHandler) -> None: ...
    def remove_RdkGlobalSettingsChanged(value: EventHandler) -> None: ...
    def add_RdkUpdateAllPreviews(value: EventHandler) -> None: ...
    def remove_RdkUpdateAllPreviews(value: EventHandler) -> None: ...
    def add_RdkCacheImageChanged(value: EventHandler) -> None: ...
    def remove_RdkCacheImageChanged(value: EventHandler) -> None: ...
    def add_RendererChanged(value: EventHandler) -> None: ...
    def remove_RendererChanged(value: EventHandler) -> None: ...
    def add_RdkPlugInUnloading(value: EventHandler) -> None: ...
    def remove_RdkPlugInUnloading(value: EventHandler) -> None: ...
    @property
    def ToolbarFiles() -> ToolbarFileCollection: ...
    def InFullScreen() -> bool: ...
    @property
    def DefaultUiFont() -> Font: ...
    def RunningOnVMWare() -> bool: ...
    def RunningInRdp() -> bool: ...
    def ParseTextField(formula: str, obj: RhinoObject, topParentObject: RhinoObject) -> str: ...
    @property
    def SdkVersion() -> int: ...
    @property
    def SdkServiceRelease() -> int: ...
    @property
    def ExeVersion() -> int: ...
    @property
    def ExeServiceRelease() -> int: ...
    @property
    def BuildDate() -> DateTime: ...
    @property
    def VersionControlRevision() -> str: ...
    @property
    def Version() -> Version: ...
    @property
    def SerialNumber() -> str: ...
    @property
    def LicenseUserName() -> str: ...
    @property
    def LicenseUserOrganization() -> str: ...
    @property
    def InstallationTypeString() -> str: ...
    @property
    def Name() -> str: ...
    @property
    def NodeType() -> LicenseNode: ...
    @property
    def InstallationType() -> Installation: ...
    @property
    def SchemeName() -> str: ...
    @overload
    def GetDataDirectory(localUser: bool, forceDirectoryCreation: bool) -> str: ...
    @overload
    def GetDataDirectory(localUser: bool, forceDirectoryCreation: bool, subDirectory: str) -> str: ...
    def GetExecutableDirectory() -> DirectoryInfo: ...
    @property
    def Rhino2Id() -> Guid: ...
    @property
    def Rhino3Id() -> Guid: ...
    @property
    def Rhino4Id() -> Guid: ...
    @property
    def Rhino5Id() -> Guid: ...
    @property
    def Rhino6Id() -> Guid: ...
    @property
    def CurrentRhinoId() -> Guid: ...
    @property
    def IsRunningAutomated() -> bool: ...
    @property
    def IsRunningHeadless() -> bool: ...
    @property
    def IsSkinned() -> bool: ...
    @overload
    def Write(message: str) -> None: ...
    @property
    def CommandLineOut() -> CommandLineTextWriter: ...
    @overload
    def Write(format: str, arg0: Object) -> None: ...
    @overload
    def Write(format: str, arg0: Object, arg1: Object) -> None: ...
    @overload
    def Write(format: str, arg0: Object, arg1: Object, arg2: Object) -> None: ...
    @overload
    def WriteLine() -> None: ...
    @overload
    def WriteLine(message: str) -> None: ...
    @overload
    def WriteLine(format: str, arg0: Object) -> None: ...
    @overload
    def WriteLine(format: str, arg0: Object, arg1: Object) -> None: ...
    @overload
    def WriteLine(format: str, arg0: Object, arg1: Object, arg2: Object) -> None: ...
    def OutputDebugString(str: str) -> None: ...
    def SetCommandPromptMessage(prompt: str) -> None: ...
    @overload
    def SetCommandPrompt(prompt: str, promptDefault: str) -> None: ...
    @overload
    def SetCommandPrompt(prompt: str) -> None: ...
    @property
    def CommandPrompt() -> str: ...
    @CommandPrompt.setter
    def CommandPrompt(value: str) -> None: ...
    @property
    def CommandHistoryWindowText() -> str: ...
    def ClearCommandHistoryWindow() -> None: ...
    def SendKeystrokes(characters: str, appendReturn: bool) -> None: ...
    @overload
    def SetFocusToMainWindow() -> None: ...
    @overload
    def SetFocusToMainWindow(doc: RhinoDoc) -> None: ...
    def ReleaseMouseCapture() -> bool: ...
    def Exit() -> None: ...
    @overload
    def RunScript(script: str, echo: bool) -> bool: ...
    def ExecuteCommand(document: RhinoDoc, commandName: str) -> Result: ...
    @overload
    def RunScript(script: str, mruDisplayString: str, echo: bool) -> bool: ...
    def RunMenuScript(script: str) -> bool: ...
    def Wait() -> None: ...
    def InvokeOnUiThread(method: Delegate, args: Set(Object)) -> None: ...
    def InvokeAndWait(action: Action) -> None: ...
    @property
    def InvokeRequired() -> bool: ...
    def MainWindowHandle() -> IntPtr: ...
    def MainWindow() -> IWin32Window: ...
    @property
    def MainApplicationWindow() -> RhinoWindow: ...
    @overload
    def GetPlugInObject(pluginId: Guid) -> Object: ...
    @overload
    def GetPlugInObject(plugin: str) -> Object: ...
    def IsInstallationEvaluation(licenseType: Installation) -> bool: ...
    def IsInstallationCommercial(licenseType: Installation) -> bool: ...
    def IsInstallationBeta(licenseType: Installation) -> bool: ...
    @property
    def LicenseExpires() -> bool: ...
    @property
    def IsPreRelease() -> bool: ...
    @property
    def IsLicenseValidated() -> bool: ...
    @property
    def IsCloudZooNode() -> bool: ...
    @property
    def IsInternetAccessAllowed() -> bool: ...
    @property
    def UpdatesAndStatisticsStatus() -> int: ...
    @property
    def ValidationGracePeriodDaysLeft() -> int: ...
    @property
    def DaysUntilExpiration() -> int: ...
    def AskUserForRhinoLicense(standAlone: bool, parentWindow: Object) -> bool: ...
    def ChangeLicenseKey(pluginId: Guid) -> bool: ...
    def RefreshRhinoLicense() -> bool: ...
    def LoginToCloudZoo() -> bool: ...
    @property
    def LoggedInUserName() -> str: ...
    @property
    def LoggedInUserAvatar() -> Image: ...


class IndexPair:
    def __init__(self, i: int, j: int): ...
    @property
    def I(self) -> int: ...
    @I.setter
    def I(self, value: int) -> None: ...
    @property
    def J(self) -> int: ...
    @J.setter
    def J(self, value: int) -> None: ...
    @property
    def Item(self, index: int) -> int: ...
    @Item.setter
    def Item(self, index: int, value: int) -> None: ...
    def IndexOf(self, item: int) -> int: ...
    def Contains(self, item: int) -> bool: ...
    def CopyTo(self, array: Set(int), arrayIndex: int) -> None: ...
    @property
    def Count(self) -> int: ...
    def GetEnumerator(self) -> IEnumerator: ...


class RhinoMath:
    def ToRadians(degrees: float) -> float: ...
    def ToDegrees(radians: float) -> float: ...
    def IsValidDouble(x: float) -> bool: ...
    def IsValidSingle(x: Single) -> bool: ...
    def IntIndexToString(index: int) -> str: ...
    def UnitScale(from_: UnitSystem, to: UnitSystem) -> float: ...
    @overload
    def Clamp(value: int, bound1: int, bound2: int) -> int: ...
    @overload
    def Clamp(value: float, bound1: float, bound2: float) -> float: ...
    @overload
    def CRC32(currentRemainder: UInt32, buffer: Set(Byte)) -> UInt32: ...
    @overload
    def CRC32(currentRemainder: UInt32, value: float) -> UInt32: ...
    @overload
    def CRC32(currentRemainder: UInt32, value: int) -> UInt32: ...
    def ParseNumber(expression: str) -> float: ...
    def TryParseNumber(expression: str) -> Tuple[bool, float]: ...
    @overload
    def EpsilonEquals(x: float, y: float, epsilon: float) -> bool: ...
    @overload
    def EpsilonEquals(x: Single, y: Single, epsilon: Single) -> bool: ...


class AntialiasLevel:
    #None = 0
    Draft = 1
    Good = 2
    High = 3


class Symbols:
    @property
    def DegreeSymbol() -> Char: ...
    @property
    def RadiusSymbol() -> Char: ...
    @property
    def DiameterSymbol() -> Char: ...
    @property
    def PlusMinusSymbol() -> Char: ...


class PersistentSettingsConverter:
    def IsStringList(s: str) -> bool: ...
    def IsStringDictionary(s: str) -> bool: ...
    def TryParseStringList(s: str) -> Tuple[bool, Set(str)]: ...
    @overload
    def ToString(values: Set(str)) -> str: ...
    def TryParseStringDictionary(s: str) -> Tuple[bool, Set(KeyValuePair)]: ...
    @overload
    def ToString(value: Set(KeyValuePair)) -> str: ...
    @overload
    def TryParseEnum(type: Type, intValueAsString: str) -> Tuple[bool, str]: ...
    @overload
    def TryParseEnum(type: Type, enumValueName: str) -> Tuple[bool, int]: ...
    @overload
    def ToString(value: float) -> str: ...
    def TryParseDouble(s: str) -> Tuple[bool, float]: ...


class PersistentSettingsSavedEventArgs:
    @property
    def SavedByThisRhino(self) -> bool: ...
    @property
    def PlugInSettings(self) -> PersistentSettings: ...
    def CommandSettings(self, englishCommandName: str) -> PersistentSettings: ...


class PersistentSettingsEventArgs:
    @property
    def Cancel(self) -> bool: ...
    @Cancel.setter
    def Cancel(self, value: bool) -> None: ...




class PersistentSettings:
    def SetDate(self, key: str, value: DateTime) -> None: ...
    def SetColor(self, key: str, value: Color) -> None: ...
    def SetPoint3d(self, key: str, value: Point3d) -> None: ...
    def SetRectangle(self, key: str, value: Rectangle) -> None: ...
    def SetSize(self, key: str, value: Size) -> None: ...
    def SetPoint(self, key: str, value: Point) -> None: ...
    @overload
    def SetDefault(self, key: str, value: bool) -> None: ...
    @overload
    def SetDefault(self, key: str, value: Byte) -> None: ...
    @overload
    def SetDefault(self, key: str, value: int) -> None: ...
    @overload
    def SetDefault(self, key: str, value: float) -> None: ...
    @overload
    def SetDefault(self, key: str, value: Char) -> None: ...
    @overload
    def SetDefault(self, key: str, value: str) -> None: ...
    @overload
    def SetDefault(self, key: str, value: Set(KeyValuePair)) -> None: ...
    @overload
    def SetDefault(self, key: str, value: Set(str)) -> None: ...
    @overload
    def SetDefault(self, key: str, value: DateTime) -> None: ...
    @overload
    def SetDefault(self, key: str, value: Color) -> None: ...
    @overload
    def SetDefault(self, key: str, value: Rectangle) -> None: ...
    @overload
    def SetDefault(self, key: str, value: Size) -> None: ...
    @overload
    def SetDefault(self, key: str, value: Point) -> None: ...
    @overload
    def SetDefault(self, key: str, value: Point3d) -> None: ...
    @overload
    def SetDefault(self, key: str, value: Guid) -> None: ...
    @overload
    def SetEnumValue(self, enumValue: T) -> None: ...
    @overload
    def SetEnumValue(self, key: str, value: T) -> None: ...
    @overload
    def GetDouble(self, key: str, defaultValue: float, legacyKeyList: Iterable[str]) -> float: ...
    @overload
    def TryGetChar(self, key: str) -> Tuple[bool, Char]: ...
    @overload
    def TryGetChar(self, key: str, legacyKeyList: Iterable[str]) -> Tuple[bool, Char]: ...
    @overload
    def GetChar(self, key: str) -> Char: ...
    @overload
    def GetChar(self, key: str, defaultValue: Char) -> Char: ...
    @overload
    def GetChar(self, key: str, defaultValue: Char, legacyKeyList: Iterable[str]) -> Char: ...
    @overload
    def TryGetString(self, key: str) -> Tuple[bool, str]: ...
    @overload
    def TryGetString(self, key: str, legacyKeyList: Iterable[str]) -> Tuple[bool, str]: ...
    @overload
    def GetString(self, key: str) -> str: ...
    @overload
    def GetString(self, key: str, defaultValue: str) -> str: ...
    @overload
    def GetString(self, key: str, defaultValue: str, legacyKeyList: Iterable[str]) -> str: ...
    @overload
    def TryGetStringDictionary(self, key: str) -> Tuple[bool, Set(KeyValuePair)]: ...
    @overload
    def TryGetStringDictionary(self, key: str, legacyKeyList: Iterable[str]) -> Tuple[bool, Set(KeyValuePair)]: ...
    @overload
    def GetStringDictionary(self, key: str) -> Set(KeyValuePair): ...
    @overload
    def GetStringDictionary(self, key: str, defaultValue: Set(KeyValuePair)) -> Set(KeyValuePair): ...
    @overload
    def GetStringDictionary(self, key: str, defaultValue: Set(KeyValuePair), legacyKeyList: Iterable[str]) -> Set(KeyValuePair): ...
    @overload
    def TryGetStringList(self, key: str) -> Tuple[bool, Set(str)]: ...
    @overload
    def TryGetStringList(self, key: str, legacyKeyList: Iterable[str]) -> Tuple[bool, Set(str)]: ...
    @overload
    def GetStringList(self, key: str) -> Set(str): ...
    @overload
    def GetStringList(self, key: str, defaultValue: Set(str)) -> Set(str): ...
    @overload
    def GetStringList(self, key: str, defaultValue: Set(str), legacyKeyList: Iterable[str]) -> Set(str): ...
    @overload
    def TryGetDate(self, key: str) -> Tuple[bool, DateTime]: ...
    @overload
    def TryGetDate(self, key: str, legacyKeyList: Iterable[str]) -> Tuple[bool, DateTime]: ...
    @overload
    def GetDate(self, key: str) -> DateTime: ...
    @overload
    def GetDate(self, key: str, defaultValue: DateTime) -> DateTime: ...
    @overload
    def GetDate(self, key: str, defaultValue: DateTime, legacyKeyList: Iterable[str]) -> DateTime: ...
    @overload
    def TryGetColor(self, key: str) -> Tuple[bool, Color]: ...
    @overload
    def TryGetColor(self, key: str, legacyKeyList: Iterable[str]) -> Tuple[bool, Color]: ...
    @overload
    def GetColor(self, key: str) -> Color: ...
    @overload
    def GetColor(self, key: str, defaultValue: Color) -> Color: ...
    @overload
    def GetColor(self, key: str, defaultValue: Color, legacyKeyList: Iterable[str]) -> Color: ...
    @overload
    def GetGuid(self, key: str) -> Guid: ...
    @overload
    def GetGuid(self, key: str, defaultValue: Guid) -> Guid: ...
    @overload
    def GetGuid(self, key: str, defaultValue: Guid, legacyKeyList: Iterable[str]) -> Guid: ...
    @overload
    def TryGetPoint(self, key: str) -> Tuple[bool, Point]: ...
    @overload
    def TryGetPoint(self, key: str, legacyKeyList: Iterable[str]) -> Tuple[bool, Point]: ...
    @overload
    def GetPoint(self, key: str) -> Point: ...
    @overload
    def GetPoint(self, key: str, defaultValue: Point) -> Point: ...
    @overload
    def GetPoint(self, key: str, defaultValue: Point, legacyKeyList: Iterable[str]) -> Point: ...
    @overload
    def TryGetPoint3d(self, key: str) -> Tuple[bool, Point3d]: ...
    @overload
    def TryGetPoint3d(self, key: str, legacyKeyList: Iterable[str]) -> Tuple[bool, Point3d]: ...
    @overload
    def GetPoint3d(self, key: str) -> Point3d: ...
    @overload
    def GetPoint3d(self, key: str, defaultValue: Point3d) -> Point3d: ...
    @overload
    def GetPoint3d(self, key: str, defaultValue: Point3d, legacyKeyList: Iterable[str]) -> Point3d: ...
    @overload
    def TryGetSize(self, key: str) -> Tuple[bool, Size]: ...
    @overload
    def TryGetSize(self, key: str, legacyKeyList: Iterable[str]) -> Tuple[bool, Size]: ...
    @overload
    def GetSize(self, key: str) -> Size: ...
    @overload
    def GetSize(self, key: str, defaultValue: Size) -> Size: ...
    @overload
    def GetSize(self, key: str, defaultValue: Size, legacyKeyList: Iterable[str]) -> Size: ...
    @overload
    def TryGetRectangle(self, key: str) -> Tuple[bool, Rectangle]: ...
    @overload
    def TryGetRectangle(self, key: str, legacyKeyList: Iterable[str]) -> Tuple[bool, Rectangle]: ...
    @overload
    def GetRectangle(self, key: str) -> Rectangle: ...
    @overload
    def GetRectangle(self, key: str, defaultValue: Rectangle) -> Rectangle: ...
    @overload
    def GetRectangle(self, key: str, defaultValue: Rectangle, legacyKeyList: Iterable[str]) -> Rectangle: ...
    @overload
    def TryGetDefault(self, key: str) -> Tuple[bool, bool]: ...
    @overload
    def TryGetDefault(self, key: str) -> Tuple[bool, Byte]: ...
    @overload
    def TryGetDefault(self, key: str) -> Tuple[bool, int]: ...
    @overload
    def TryGetDefault(self, key: str) -> Tuple[bool, float]: ...
    @overload
    def TryGetDefault(self, key: str) -> Tuple[bool, Char]: ...
    @overload
    def TryGetDefault(self, key: str) -> Tuple[bool, str]: ...
    @overload
    def TryGetDefault(self, key: str) -> Tuple[bool, Set(str)]: ...
    @overload
    def TryGetDefault(self, key: str) -> Tuple[bool, DateTime]: ...
    @overload
    def TryGetDefault(self, key: str) -> Tuple[bool, Color]: ...
    @overload
    def TryGetDefault(self, key: str) -> Tuple[bool, Point3d]: ...
    @overload
    def TryGetDefault(self, key: str) -> Tuple[bool, Size]: ...
    @overload
    def TryGetDefault(self, key: str) -> Tuple[bool, Rectangle]: ...
    @overload
    def GetEnumValue(self, defaultValue: T) -> T: ...
    @overload
    def GetEnumValue(self, key: str, defaultValue: T) -> T: ...
    @overload
    def GetEnumValue(self, key: str) -> T: ...
    def TryGetEnumValue(self, key: str) -> Tuple[bool, T]: ...
    def SetGuid(self, key: str, value: Guid) -> None: ...
    def SetBool(self, key: str, value: bool) -> None: ...
    def SetByte(self, key: str, value: Byte) -> None: ...
    def SetInteger(self, key: str, value: int) -> None: ...
    def SetUnsignedInteger(self, key: str, value: UInt32) -> None: ...
    def SetDouble(self, key: str, value: float) -> None: ...
    def SetChar(self, key: str, value: Char) -> None: ...
    def SetString(self, key: str, value: str) -> None: ...
    @property
    def StringListRootKey() -> str: ...
    def SetStringList(self, key: str, value: Set(str)) -> None: ...
    def SetStringDictionary(self, key: str, value: Set(KeyValuePair)) -> None: ...
    def DeleteItem(self, key: str) -> None: ...
    @property
    def HiddenFromUserInterface(self) -> bool: ...
    @HiddenFromUserInterface.setter
    def HiddenFromUserInterface(self, value: bool) -> None: ...
    def GetChild(self, key: str) -> PersistentSettings: ...
    def TryGetChild(self, key: str) -> Tuple[bool, PersistentSettings]: ...
    @property
    def Keys(self) -> ICollection: ...
    @property
    def ChildKeys(self) -> ICollection: ...
    def TryGetSettingType(self, key: str) -> Tuple[bool, Type]: ...
    def GetSettingType(self, key: str) -> Type: ...
    def TryGetSettingIsReadOnly(self, key: str) -> Tuple[bool, bool]: ...
    def GetSettingIsReadOnly(self, key: str) -> bool: ...
    @overload
    def TryGetSettingIsHiddenFromUserInterface(self, key: str) -> Tuple[bool, bool]: ...
    @overload
    def TryGetSettingIsHiddenFromUserInterface(self, key: str, legacyKeyList: Iterable[str]) -> Tuple[bool, bool]: ...
    @overload
    def GetSettingIsHiddenFromUserInterface(self, key: str) -> bool: ...
    @overload
    def GetSettingIsHiddenFromUserInterface(self, key: str, legacyKeyList: Iterable[str]) -> bool: ...
    def HideSettingFromUserInterface(self, key: str) -> None: ...
    def AddChild(self, key: str) -> PersistentSettings: ...
    def DeleteChild(self, key: str) -> None: ...
    def FromPlugInId(pluginId: Guid) -> PersistentSettings: ...
    @property
    def RhinoAppSettings() -> PersistentSettings: ...
    def RegisterSettingsValidator(self, key: str, validator: EventHandler) -> None: ...
    def GetValidator(self, key: str) -> EventHandler: ...
    def ContainsChangedValues(self) -> bool: ...
    def ClearChangedFlag(self) -> None: ...
    def ContainsModifiedValues(self, allUserSettings: PersistentSettings) -> bool: ...
    @overload
    def TryGetGuid(self, key: str) -> Tuple[bool, Guid]: ...
    @overload
    def TryGetGuid(self, key: str, legacyKeyList: Iterable[str]) -> Tuple[bool, Guid]: ...
    @overload
    def TryGetBool(self, key: str) -> Tuple[bool, bool]: ...
    @overload
    def TryGetBool(self, key: str, legacyKeyList: Iterable[str]) -> Tuple[bool, bool]: ...
    @overload
    def GetBool(self, key: str) -> bool: ...
    @overload
    def GetBool(self, key: str, defaultValue: bool) -> bool: ...
    @overload
    def GetBool(self, key: str, defaultValue: bool, legacyKeyList: Iterable[str]) -> bool: ...
    @overload
    def TryGetByte(self, key: str) -> Tuple[bool, Byte]: ...
    @overload
    def TryGetByte(self, key: str, legacyKeyList: Iterable[str]) -> Tuple[bool, Byte]: ...
    @overload
    def GetByte(self, key: str) -> Byte: ...
    @overload
    def GetByte(self, key: str, defaultValue: Byte) -> Byte: ...
    @overload
    def GetByte(self, key: str, defaultValue: Byte, legacyKeyList: Iterable[str]) -> Byte: ...
    @overload
    def TryGetInteger(self, key: str) -> Tuple[bool, int]: ...
    @overload
    def TryGetInteger(self, key: str, legacyKeyList: Iterable[str]) -> Tuple[bool, int]: ...
    @overload
    def GetInteger(self, key: str) -> int: ...
    @overload
    def GetInteger(self, key: str, defaultValue: int) -> int: ...
    @overload
    def GetInteger(self, key: str, defaultValue: int, bound: int, boundIsLower: bool) -> int: ...
    @overload
    def GetInteger(self, key: str, defaultValue: int, lowerBound: int, upperBound: int) -> int: ...
    @overload
    def GetInteger(self, key: str, defaultValue: int, legacyKeyList: Iterable[str]) -> int: ...
    @overload
    def TryGetUnsignedInteger(self, key: str) -> Tuple[bool, UInt32]: ...
    @overload
    def TryGetUnsignedInteger(self, key: str, legacyKeyList: Iterable[str]) -> Tuple[bool, UInt32]: ...
    @overload
    def GetUnsignedInteger(self, key: str) -> UInt32: ...
    @overload
    def GetUnsignedInteger(self, key: str, defaultValue: UInt32) -> UInt32: ...
    @overload
    def GetUnsignedInteger(self, key: str, defaultValue: UInt32, legacyKeyList: Iterable[str]) -> UInt32: ...
    @overload
    def TryGetDouble(self, key: str) -> Tuple[bool, float]: ...
    @overload
    def TryGetDouble(self, key: str, legacyKeyList: Iterable[str]) -> Tuple[bool, float]: ...
    @overload
    def GetDouble(self, key: str) -> float: ...
    @overload
    def GetDouble(self, key: str, defaultValue: float) -> float: ...


class StringFormat:
    ExactDecimal = 0
    ExactProperFraction = 1
    ExactImproperFraction = 2
    CleanDecimal = 3
    CleanProperFraction = 4
    CleanImproperFraction = 5


class ScaleStringFormat:
    #None = 0
    RatioFormat = 1
    EquationFormat = 2
    FractionFormat = 3
    Unset = 255


class RenderContentTableEventType:
    Loaded = 0
    Clearing = 1
    Cleared = 2
    MaterialAssignmentChanged = 3


class RenderContentTableEventArgs:
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def EventType(self) -> RenderContentTableEventType: ...


class RenderMaterialAssignmentChangedEventArgs:
    @property
    def IsLayer(self) -> bool: ...
    @property
    def IsObject(self) -> bool: ...
    @property
    def LayerId(self) -> Guid: ...
    @property
    def ObjectId(self) -> Guid: ...
    @property
    def OldRenderMaterial(self) -> Guid: ...
    @property
    def NewRenderMaterial(self) -> Guid: ...


class TextureMappingEventType:
    Added = 0
    Deleted = 1
    Undeleted = 2
    Modified = 3


class TextureMappingEventArgs:
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def EventType(self) -> TextureMappingEventType: ...
    @property
    def OldMapping(self) -> TextureMapping: ...
    @property
    def NewMapping(self) -> TextureMapping: ...


class CommandLineTextWriter:
    def __init__(self): ...
    @property
    def Encoding(self) -> Encoding: ...
    @overload
    def Write(self, value: str) -> None: ...
    @overload
    def Write(self, value: Char) -> None: ...
    @overload
    def Write(self, buffer: Set(Char), index: int, count: int) -> None: ...
    def write(self, str: str) -> None: ...


class KeyboardHookEvent:
    def __init__(self, object: Object, method: IntPtr): ...
    def Invoke(self, key: int) -> None: ...
    def BeginInvoke(self, key: int, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
