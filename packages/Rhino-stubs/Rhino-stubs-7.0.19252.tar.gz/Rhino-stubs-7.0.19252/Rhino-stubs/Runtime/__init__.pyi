from typing import Tuple, Set, Iterable, List


class Analytics:
    @overload
    def __init__(self, TrackingID: str, Name: str): ...
    @overload
    def __init__(self, TrackingID: str, Name: str, Platform: str, InstallerId: str, Version: str): ...
    @property
    def GoogleAnalyticsTrackingID(self) -> str: ...
    @GoogleAnalyticsTrackingID.setter
    def GoogleAnalyticsTrackingID(self, value: str) -> None: ...
    @property
    def AppName(self) -> str: ...
    @AppName.setter
    def AppName(self, value: str) -> None: ...
    @property
    def AppPlatform(self) -> str: ...
    @AppPlatform.setter
    def AppPlatform(self, value: str) -> None: ...
    @property
    def AppInstallerId(self) -> str: ...
    @AppInstallerId.setter
    def AppInstallerId(self, value: str) -> None: ...
    @property
    def AppVersion(self) -> str: ...
    @AppVersion.setter
    def AppVersion(self, value: str) -> None: ...
    @overload
    def Send(self, Category: str, Action: str, Label: str, Value: UInt32) -> None: ...
    @overload
    def Send(self, data: NameValueCollection) -> None: ...
    @overload
    def Send(self, Category: str) -> None: ...
    @overload
    def Send(self, Category: str, Action: str) -> None: ...
    @overload
    def Send(self, Category: str, Action: str, Label: str) -> None: ...
    @property
    def UsageStatisticsEnabled() -> bool: ...
    @property
    def UserId() -> Guid: ...


class Mode:
    NormalMode = 0
    ViewerMode = 1
    BetaMode = 2
    InvalidMode = 100


class ImportOptionsSections:
    AdvancedDisplay = 0
    Alias = 1
    Appearance = 2
    ChooseOneObject = 3
    ControlPointContextMenu = 4
    CursorToolTip = 5
    Display = 6
    File = 7
    General = 8
    Grid = 9
    ModelAid = 10
    Mouse = 11
    ObjectContextMenu = 12
    SearchPath = 13
    ShortcutKey = 14
    Smarttrack = 15
    View = 16
    ViewportContextMenu = 17
    Count = 18


class NamedParametersEventArgs:
    def TryGetString(self, name: str) -> Tuple[bool, str]: ...
    def SetString(self, name: str, value: str) -> None: ...
    def TryGetBool(self, name: str) -> Tuple[bool, bool]: ...
    def SetBool(self, name: str, value: bool) -> None: ...
    def TryGetInt(self, name: str) -> Tuple[bool, int]: ...
    def SetInt(self, name: str, value: int) -> None: ...
    def TryGetUnsignedInt(self, name: str) -> Tuple[bool, UInt32]: ...
    def SetUnsignedInt(self, name: str, value: UInt32) -> None: ...
    def TryGetDouble(self, name: str) -> Tuple[bool, float]: ...
    def SetDouble(self, name: str, value: float) -> None: ...
    def TryGetPoint(self, name: str) -> Tuple[bool, Point3d]: ...
    def SetPoint(self, name: str, value: Point3d) -> None: ...
    def TryGetHatchObjects(self, name: str) -> Tuple[bool, List]: ...
    def SetHatchObjects(self, name: str, value: Iterable[HatchObject]) -> None: ...


class Skin:
    @property
    def ActiveSkin() -> Skin: ...
    @property
    def Settings(self) -> PersistentSettings: ...


class PythonCompiledCode:
    def Execute(self, scope: PythonScript) -> None: ...


class PythonScript:
    def Create() -> PythonScript: ...
    def Compile(self, script: str) -> PythonCompiledCode: ...
    def ContainsVariable(self, name: str) -> bool: ...
    def GetVariableNames(self) -> Iterable[str]: ...
    def GetVariable(self, name: str) -> Object: ...
    def SetVariable(self, name: str, value: Object) -> None: ...
    def SetIntellisenseVariable(self, name: str, value: Object) -> None: ...
    def RemoveVariable(self, name: str) -> None: ...
    def EvaluateExpression(self, statements: str, expression: str) -> Object: ...
    def ExecuteFile(self, path: str) -> bool: ...
    def ExecuteFileInScope(self, path: str) -> bool: ...
    def ExecuteScript(self, script: str) -> bool: ...
    def GetStackTraceFromException(self, ex: Exception) -> str: ...
    @property
    def Output(self) -> Action: ...
    @Output.setter
    def Output(self, value: Action) -> None: ...
    @property
    def ScriptContextDoc(self) -> Object: ...
    @ScriptContextDoc.setter
    def ScriptContextDoc(self, value: Object) -> None: ...
    @property
    def ScriptContextCommand(self) -> Command: ...
    @ScriptContextCommand.setter
    def ScriptContextCommand(self, value: Command) -> None: ...
    @property
    def ContextId(self) -> int: ...
    @ContextId.setter
    def ContextId(self, value: int) -> None: ...
    def CreateTextEditorControl(self, script: str, helpcallback: Action) -> Object: ...
    def SetupScriptContext(self, doc: Object) -> None: ...


class RiskyAction:
    def __init__(self, description: str, file: str, member: str, line: int): ...
    def Dispose(self) -> None: ...


class IPlatformServiceLocator:
    def GetService(self) -> T: ...


class HostUtils:
    def GetCurrentProcessInfo() -> Tuple[str, Version]: ...
    @property
    def OperatingSystemEdition() -> str: ...
    @property
    def OperatingSystemInstallationType() -> str: ...
    @property
    def OperatingSystemProductName() -> str: ...
    @property
    def OperatingSystemVersion() -> str: ...
    @property
    def OperatingSystemBuildNumber() -> str: ...
    def GetPlatformService(assemblyPath: str, typeFullName: str) -> T: ...
    def IsManagedDll(path: str) -> bool: ...
    def ClearFpuExceptionStatus() -> None: ...
    def RegisterNamedCallback(name: str, callback: EventHandler) -> None: ...
    def RegisterComputeEndpoint(endpointPath: str, t: Type) -> None: ...
    def GetCustomComputeEndpoints() -> Set(Tuple): ...
    def GetAssemblySearchPaths() -> Set(str): ...
    def InPlaceConstCast(geometry: GeometryBase, makeNonConst: bool) -> None: ...
    @property
    def RunningOnWindows() -> bool: ...
    @property
    def RunningOnOSX() -> bool: ...
    @property
    def DeviceName() -> str: ...
    @property
    def ComputerSerialNumber() -> str: ...
    @property
    def CurrentOSLanguage() -> UInt32: ...
    @property
    def DeviceId() -> Guid: ...
    @property
    def RunningInMono() -> bool: ...
    @property
    def RunningInRhino() -> bool: ...
    def CheckForRdk(throwOnFalse: bool, usePreviousResult: bool) -> bool: ...
    def GetAbsolutePath(relativePath: str, bRelativePathisFileName: bool, relativeTo: str, bRelativeToIsFileName: bool) -> Tuple[bool, str]: ...
    def IsRhinoFileExtension(fileExtension: str) -> bool: ...
    def FileNameEndsWithRhinoExtension(fileName: str) -> bool: ...
    def IsRhinoBackupFileExtension(fileExtension: str) -> bool: ...
    def FileNameEndsWithRhinoBackupExtension(fileName: str) -> bool: ...
    @overload
    def DebugString(msg: str) -> None: ...
    @overload
    def DebugString(format: str, args: Set(Object)) -> None: ...
    @property
    def SendDebugToCommandLine() -> bool: ...
    @SendDebugToCommandLine.setter
    def SendDebugToCommandLine(value: bool) -> None: ...
    @overload
    def ExceptionReport(ex: Exception) -> None: ...
    @overload
    def ExceptionReport(source: str, ex: Exception) -> None: ...
    def add_OnExceptionReport(value: ExceptionReportDelegate) -> None: ...
    def remove_OnExceptionReport(value: ExceptionReportDelegate) -> None: ...
    def SendLogMessageToCloudCallbackProc(msg_type: LogMessageType, pwStringClass: IntPtr, pwStringDesc: IntPtr, pwStringMessage: IntPtr) -> None: ...
    def add_OnSendLogMessageToCloud(value: SendLogMessageToCloudDelegate) -> None: ...
    def remove_OnSendLogMessageToCloud(value: SendLogMessageToCloudDelegate) -> None: ...
    @overload
    def DebugDumpToString(geometry: GeometryBase) -> str: ...
    @overload
    def DebugDumpToString(bezierCurve: BezierCurve) -> str: ...
    def RecordInitInstanceTime(description: str) -> None: ...
    @overload
    def CreateCommands(plugin: PlugIn) -> None: ...
    @overload
    def CreateCommands(pPlugIn: IntPtr, pluginAssembly: Assembly) -> int: ...
    def RegisterDynamicCommand(plugin: PlugIn, cmd: Command) -> bool: ...
    def AutoInstallPlugInFolder(currentUser: bool) -> str: ...
    def GetActivePlugInVersionFolders(currentUser: bool) -> Iterable[DirectoryInfo]: ...
    def InitializeRhinoCommon() -> None: ...
    def InitializeRhinoCommon_RDK() -> None: ...
    def ShutDownRhinoCommon_RDK() -> None: ...
    def RhinoCommonExceptionHandler(title: str, sender: Object, ex: Exception) -> None: ...
    def UnhandledThreadException(sender: Object, e: ThreadExceptionEventArgs) -> None: ...
    def InitializeZooClient() -> None: ...
    def CallFromCoreRhino(task: str) -> int: ...
    def CreatePlugIn(pluginType: Type, printDebugMessages: bool) -> PlugIn: ...
    def DisplayOleAlerts(display: bool) -> None: ...
    def GetRhinoDotNetAssembly() -> Assembly: ...
    def SetInShutDown() -> None: ...


class RdkNotLoadedException:
    def __init__(self): ...


class Interop:
    def FontFromPointer(ptrManagedFont: IntPtr) -> Font: ...
    def ViewCaptureFromPointer(ptrViewCapture: IntPtr) -> ViewCaptureSettings: ...
    def NativeRhinoDocPointer(doc: RhinoDoc) -> IntPtr: ...
    @overload
    def NSFontFromFont(font: Font) -> IntPtr: ...
    @overload
    def NSFontFromFont(font: Font, pointSize: float) -> IntPtr: ...
    def NativeGeometryConstPointer(geometry: GeometryBase) -> IntPtr: ...
    def NativeGeometryNonConstPointer(geometry: GeometryBase) -> IntPtr: ...
    @overload
    def NativeNonConstPointer(settings: ViewCaptureSettings) -> IntPtr: ...
    @overload
    def NativeNonConstPointer(viewport: ViewportInfo) -> IntPtr: ...
    @overload
    def NativeNonConstPointer(viewport: RhinoViewport) -> IntPtr: ...
    @overload
    def NativeNonConstPointer(pipeline: DisplayPipeline) -> IntPtr: ...
    @overload
    def NativeNonConstPointer(getPoint: GetPoint) -> IntPtr: ...
    def RhinoObjectConstPointer(rhinoObject: RhinoObject) -> IntPtr: ...
    def RhinoObjectFromPointer(pRhinoObject: IntPtr) -> RhinoObject: ...
    def FileWriteOptionsConstPointer(options: FileWriteOptions) -> IntPtr: ...
    def FileReadOptionsConstPointer(options: FileReadOptions) -> IntPtr: ...
    def CreateFromNativePointer(pGeometry: IntPtr) -> GeometryBase: ...
    def TryCopyFromOnArc(source: Object) -> Tuple[bool, Arc]: ...
    def TryCopyToOnArc(source: Arc, destination: Object) -> bool: ...
    def FromOnBrep(source: Object) -> Brep: ...
    def FromOnSurface(source: Object) -> Surface: ...
    def FromOnMesh(source: Object) -> Mesh: ...
    def FromOnCurve(source: Object) -> Curve: ...
    def ToOnBrep(source: Brep) -> Object: ...
    def ToOnSurface(source: Surface) -> Object: ...
    def ToOnMesh(source: Mesh) -> Object: ...
    def ToOnCurve(source: Curve) -> Object: ...
    def ToOnXform(source: Transform) -> Object: ...
    def ToIRhinoViewport(source: RhinoViewport) -> Object: ...
    def PlugInPointer(plugin: PlugIn) -> IntPtr: ...


class LicenseTypes:
    Undefined = 0
    Standalone = 1
    ZooAutoDetect = 2
    ZooManualDetect = 3
    CloudZoo = 4


class ZooClientParameters:
    def __init__(self, productGuid: Guid, licenseGuid: Guid, productTitle: str, productBuildType: int, capabilities: LicenseCapabilities, licenseEntryTextMask: str, productPath: str, parentWindow: Object, selectedLicenseType: LicenseTypes, validateProductKey: ValidateProductKeyDelegate, onLeaseChangedDelegate: OnLeaseChangedDelegate, verifyLicenseKeyDelegate: VerifyLicenseKeyDelegate, verifyPreviousVersionLicenseKeyDelegate: VerifyPreviousVersionLicenseDelegate): ...
    @property
    def ProductGuid(self) -> Guid: ...
    @property
    def LicenseGuid(self) -> Guid: ...
    @property
    def ProductTitle(self) -> str: ...
    @property
    def ProductBuildType(self) -> int: ...
    @property
    def Capabilities(self) -> LicenseCapabilities: ...
    @Capabilities.setter
    def Capabilities(self, value: LicenseCapabilities) -> None: ...
    @property
    def LicenseEntryTextMask(self) -> str: ...
    @property
    def ProductPath(self) -> str: ...
    @property
    def ParentWindow(self) -> Object: ...
    @property
    def SelectedLicenseType(self) -> LicenseTypes: ...
    @SelectedLicenseType.setter
    def SelectedLicenseType(self, value: LicenseTypes) -> None: ...
    @property
    def OnLeaseChanged(self) -> OnLeaseChangedDelegate: ...
    def VerifyPreviousVersionLicense(self, license: str, previousVersionLicense: str) -> Tuple[bool, str]: ...
    def VerifyLicenseKey(self, licenseKey: str, validationCode: str, validationCodeInstallDate: DateTime, gracePeriodExpired: bool) -> Tuple[ValidateResult, LicenseData]: ...


class IZooClientUtilities:
    def Initialize(self, verify: Object) -> bool: ...
    def Echo(self, verify: Object, message: str) -> str: ...
    def ShowRhinoExpiredMessage(self, mode: Mode, result: int) -> Tuple[bool, int]: ...
    def GetLicense(self, verify: Object, parameters: ZooClientParameters) -> bool: ...
    @overload
    def ReturnLicense(self, verify: Object, productId: Guid) -> bool: ...
    @overload
    def ReturnLicense(self, verify: Object, productPath: str, productId: Guid) -> bool: ...
    def CheckOutLicense(self, verify: Object, productId: Guid) -> bool: ...
    def CheckInLicense(self, verify: Object, productId: Guid) -> bool: ...
    def ConvertLicense(self, verify: Object, productId: Guid) -> bool: ...
    def DeleteLicense(self, verify: Object, productId: Guid) -> bool: ...
    def GetLicenseType(self, verify: Object, productId: Guid) -> int: ...
    def IsCheckOutEnabled(self, verify: Object) -> bool: ...
    def GetLicenseStatus(self, verify: Object) -> Set(LicenseStatus): ...
    def GetOneLicenseStatus(self, verify: Object, productId: Guid) -> LicenseStatus: ...
    def ShowBuyLicenseUi(self, verify: Object, productId: Guid) -> None: ...
    def AskUserForLicense(self, verify: Object, parameters: ZooClientParameters) -> bool: ...
    def LicenseOptionsHandler(self, verify: Object, parameters: ZooClientParameters) -> bool: ...
    def ShowLicenseValidationUi(self, verify: Object, cdkey: str) -> bool: ...
    def GetRegisteredOwnerInfo(self, verify: Object, productId: Guid, registeredOwner: str, registeredOrganization: str) -> Tuple[bool, str, str]: ...
    def LoginToCloudZoo(self) -> bool: ...
    def LogoutOfCloudZoo(self) -> bool: ...
    @property
    def LoggedInUserAvatar(self) -> Image: ...
    @property
    def LoggedInUserName(self) -> str: ...
    @property
    def UserIsLoggedIn(self) -> bool: ...
    def GetCurrentTime(self) -> DateTime: ...


class DocumentCollectedException:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...


class CorruptGeometryException:
    @property
    def Pointer(self) -> IntPtr: ...
    @property
    def CommonObject(self) -> CommonObject: ...


class CommonObject:
    @property
    def PerformCorruptionTesting() -> bool: ...
    @PerformCorruptionTesting.setter
    def PerformCorruptionTesting(value: bool) -> None: ...
    def EnsurePrivateCopy(self) -> None: ...
    @property
    def IsDocumentControlled(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    def IsValidWithLog(self) -> Tuple[bool, str]: ...
    def Dispose(self) -> None: ...
    @property
    def Disposed(self) -> bool: ...
    @property
    def HasUserData(self) -> bool: ...
    @property
    def UserData(self) -> UserDataList: ...
    @property
    def UserDictionary(self) -> ArchivableDictionary: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...


class AssemblyResolver:
    def AddSearchFolder(folder: str) -> None: ...
    def AddSearchFile(file: str) -> None: ...


class ViewCaptureWriter:
    def __init__(self, dpi: float, pageSize: Size): ...
    def Draw(self, constPtrPrintInfo: IntPtr, doc: RhinoDoc) -> None: ...


class TextFields:
    def Notes() -> str: ...
    def NumPages() -> int: ...
    def DetailScaleValue() -> str: ...
    def PaperName() -> str: ...
    def PageNumber() -> int: ...
    def PageName() -> str: ...
    def PageWidth() -> float: ...
    def PageHeight() -> float: ...
    @overload
    def Date() -> str: ...
    @overload
    def Date(dateFormat: str) -> str: ...
    @overload
    def DateModified() -> str: ...
    @overload
    def DateModified(dateFormat: str) -> str: ...
    def Area(id: str) -> float: ...
    def Volume(id: str) -> float: ...
    def ObjectName(id: str) -> str: ...
    def DocumentText(key: str) -> str: ...
    def BlockInstanceCount(instanceDefinitionName: str) -> int: ...
    def ModelUnits() -> str: ...
    @overload
    def FileName() -> str: ...
    @overload
    def FileName(options: str) -> str: ...
    @overload
    def UserText(id: str, key: str) -> str: ...
    @overload
    def UserText(id: str, key: str, prompt: str) -> str: ...
    @overload
    def UserText(id: str, key: str, prompt: str, defaultValue: str) -> str: ...
    def GetInstanceAttributeFields(idef: InstanceDefinition) -> Set(InstanceAttributeField): ...
    def CurveLength(id: str) -> float: ...


class ExceptionReportDelegate:
    def __init__(self, object: Object, method: IntPtr): ...
    def Invoke(self, source: str, ex: Exception) -> None: ...
    def BeginInvoke(self, source: str, ex: Exception, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...


class LogMessageType:
    unknown = 0
    information = 1
    warning = 2
    error = 3
    assert = 4


class SendLogMessageToCloudDelegate:
    def __init__(self, object: Object, method: IntPtr): ...
    def Invoke(self, msg_type: LogMessageType, sClass: str, sDesc: str, sMessage: str) -> None: ...
    def BeginInvoke(self, msg_type: LogMessageType, sClass: str, sDesc: str, sMessage: str, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...


class SetClipRectProc:
    def __init__(self, object: Object, method: IntPtr): ...
    def Invoke(self, left: int, top: int, right: int, bottom: int) -> Tuple[int, int, int, int]: ...
    def BeginInvoke(self, left: int, top: int, right: int, bottom: int, callback: AsyncCallback, object: Object) -> Tuple[IAsyncResult, int, int, int, int]: ...
    def EndInvoke(self, left: int, top: int, right: int, bottom: int, result: IAsyncResult) -> Tuple[int, int, int, int]: ...


class VectorPolylineProc:
    def __init__(self, object: Object, method: IntPtr): ...
    def Invoke(self, argb: int, thickness: Single, dashed: int, count: int, points: IntPtr) -> None: ...
    def BeginInvoke(self, argb: int, thickness: Single, dashed: int, count: int, points: IntPtr, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...


class VectorArcProc:
    def __init__(self, object: Object, method: IntPtr): ...
    def Invoke(self, argb: int, thickness: Single, dashed: int, arc: Arc) -> Tuple[Arc]: ...
    def BeginInvoke(self, argb: int, thickness: Single, dashed: int, arc: Arc, callback: AsyncCallback, object: Object) -> Tuple[IAsyncResult, Arc]: ...
    def EndInvoke(self, arc: Arc, result: IAsyncResult) -> Tuple[Arc]: ...


class VectorStringProc:
    def __init__(self, object: Object, method: IntPtr): ...
    def Invoke(self, constPtrString: IntPtr, argbTextColor: int, x: float, y: float, angle: Single, alignment: int, heightPixels: Single, constPtrFont: IntPtr) -> None: ...
    def BeginInvoke(self, constPtrString: IntPtr, argbTextColor: int, x: float, y: float, angle: Single, alignment: int, heightPixels: Single, constPtrFont: IntPtr, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...


class VectorFillPolygonProc:
    def __init__(self, object: Object, method: IntPtr): ...
    def Invoke(self, argb: int, count: int, points: IntPtr) -> None: ...
    def BeginInvoke(self, argb: int, count: int, points: IntPtr, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...


class VectorPathProc:
    def __init__(self, object: Object, method: IntPtr): ...
    def Invoke(self, begin: int, argb: int) -> None: ...
    def BeginInvoke(self, begin: int, argb: int, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...


class VectorPointProc:
    def __init__(self, object: Object, method: IntPtr): ...
    def Invoke(self, style: int, screenX: Single, screenY: Single, fillArgb: int, strokeArgb: int, diameterPixels: Single, innerDiameterPixels: Single, strokeWidthPixels: Single, rotationRadians: Single) -> None: ...
    def BeginInvoke(self, style: int, screenX: Single, screenY: Single, fillArgb: int, strokeArgb: int, diameterPixels: Single, innerDiameterPixels: Single, strokeWidthPixels: Single, rotationRadians: Single, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...


class VectorBitmapProc:
    def __init__(self, object: Object, method: IntPtr): ...
    def Invoke(self, hBmp: IntPtr, m11: float, m12: float, m21: float, m22: float, dx: float, dy: float) -> None: ...
    def BeginInvoke(self, hBmp: IntPtr, m11: float, m12: float, m21: float, m22: float, dx: float, dy: float, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...


class VectorRoundedRectProc:
    def __init__(self, object: Object, method: IntPtr): ...
    def Invoke(self, centerX: Single, centerY: Single, pixelWidth: Single, pixelHeight: Single, cornerRadius: Single, strokeColor: int, strokeWidth: Single, fillColor: int) -> None: ...
    def BeginInvoke(self, centerX: Single, centerY: Single, pixelWidth: Single, pixelHeight: Single, cornerRadius: Single, strokeColor: int, strokeWidth: Single, fillColor: int, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...


class VectorClipPathProc:
    def __init__(self, object: Object, method: IntPtr): ...
    def Invoke(self, count: int, points: IntPtr, asBeziers: int) -> None: ...
    def BeginInvoke(self, count: int, points: IntPtr, asBeziers: int, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...


class VectorGradientProc:
    def __init__(self, object: Object, method: IntPtr): ...
    def Invoke(self, pEngine: IntPtr, pHatch: IntPtr, strokeWidth: Single, pHatchPattern: IntPtr, gradientCount: int, colors: IntPtr, stops: IntPtr, points: IntPtr, linearGradient: int, boundaryColor: int) -> None: ...
    def BeginInvoke(self, pEngine: IntPtr, pHatch: IntPtr, strokeWidth: Single, pHatchPattern: IntPtr, gradientCount: int, colors: IntPtr, stops: IntPtr, points: IntPtr, linearGradient: int, boundaryColor: int, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...


class Pen:
    def __init__(self): ...
    @property
    def Color(self) -> Color: ...
    @property
    def Width(self) -> Single: ...


class PointType:
    Move = 0
    Line = 1
    CubicBezier = 2
    Close = 3


class PathPoint:
    @property
    def Location(self) -> PointF: ...
    @Location.setter
    def Location(self, value: PointF) -> None: ...
    @property
    def PointType(self) -> PointType: ...
    @PointType.setter
    def PointType(self, value: PointType) -> None: ...


class InstanceAttributeField:
    def __init__(self, key: str, prompt: str, defaultValue: str): ...
    @property
    def Key(self) -> str: ...
    @property
    def Prompt(self) -> str: ...
    @property
    def DefaultValue(self) -> str: ...
