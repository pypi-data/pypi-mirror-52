from typing import Tuple, Set, Iterable, List


class Style:
    #None = 0
    Hidden = 1
    ScriptRunner = 2
    Transparent = 4
    DoNotRepeat = 8
    NotUndoable = 16


class RunMode:
    Interactive = 0
    Scripted = 1


class CommandStyleAttribute:
    def __init__(self, styles: Style): ...
    @property
    def Styles(self) -> Style: ...


class Result:
    Success = 0
    Cancel = 1
    Nothing = 2
    Failure = 3
    UnknownCommand = 4
    CancelModelessDialog = 5
    ExitRhino = 268435455


class MostRecentCommandDescription:
    def __init__(self): ...
    @property
    def DisplayString(self) -> str: ...
    @DisplayString.setter
    def DisplayString(self, value: str) -> None: ...
    @property
    def Macro(self) -> str: ...
    @Macro.setter
    def Macro(self, value: str) -> None: ...


class Command:
    def IsValidCommandName(name: str) -> bool: ...
    @property
    def LastCommandId() -> Guid: ...
    @property
    def LastCommandResult() -> Result: ...
    def GetMostRecentCommands() -> Set(MostRecentCommandDescription): ...
    def RunProxyCommand(commandCallback: RunCommandDelegate, doc: RhinoDoc, data: Object) -> None: ...
    @property
    def PlugIn(self) -> PlugIn: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def EnglishName(self) -> str: ...
    @property
    def LocalName(self) -> str: ...
    @property
    def Settings(self) -> PersistentSettings: ...
    def GetCommandStack() -> Set(Guid): ...
    def InCommand() -> bool: ...
    def InScriptRunnerCommand() -> bool: ...
    def IsCommand(name: str) -> bool: ...
    def LookupCommandId(name: str, searchForEnglishName: bool) -> Guid: ...
    def LookupCommandName(commandId: Guid, englishName: bool) -> str: ...
    def GetCommandNames(english: bool, loaded: bool) -> Set(str): ...
    def DisplayHelp(commandId: Guid) -> None: ...
    def add_BeginCommand(value: EventHandler) -> None: ...
    def remove_BeginCommand(value: EventHandler) -> None: ...
    def add_EndCommand(value: EventHandler) -> None: ...
    def remove_EndCommand(value: EventHandler) -> None: ...
    def add_UndoRedo(value: EventHandler) -> None: ...
    def remove_UndoRedo(value: EventHandler) -> None: ...


class CommandEventArgs:
    @property
    def CommandId(self) -> Guid: ...
    @property
    def CommandEnglishName(self) -> str: ...
    @property
    def CommandLocalName(self) -> str: ...
    @property
    def CommandPluginName(self) -> str: ...
    @property
    def CommandResult(self) -> Result: ...
    @property
    def DocumentRuntimeSerialNumber(self) -> UInt32: ...
    @property
    def Document(self) -> RhinoDoc: ...


class UndoRedoEventArgs:
    @property
    def CommandId(self) -> Guid: ...
    @property
    def UndoSerialNumber(self) -> UInt32: ...
    @property
    def IsBeginRecording(self) -> bool: ...
    @property
    def IsEndRecording(self) -> bool: ...
    @property
    def IsBeginUndo(self) -> bool: ...
    @property
    def IsEndUndo(self) -> bool: ...
    @property
    def IsBeginRedo(self) -> bool: ...
    @property
    def IsEndRedo(self) -> bool: ...
    @property
    def IsPurgeRecord(self) -> bool: ...


class SelCommand(Command):
    @property
    def TestLights(self) -> bool: ...
    @TestLights.setter
    def TestLights(self, value: bool) -> None: ...
    @property
    def TestGrips(self) -> bool: ...
    @TestGrips.setter
    def TestGrips(self, value: bool) -> None: ...
    @property
    def BeQuiet(self) -> bool: ...
    @BeQuiet.setter
    def BeQuiet(self, value: bool) -> None: ...


class TransformCommand(Command):


class CustomUndoEventArgs:
    @property
    def CommandId(self) -> Guid: ...
    @property
    def UndoSerialNumber(self) -> UInt32: ...
    @property
    def ActionDescription(self) -> str: ...
    @property
    def CreatedByRedo(self) -> bool: ...
    @property
    def Tag(self) -> Object: ...
    @property
    def Document(self) -> RhinoDoc: ...


class RunCommandDelegate:
    def __init__(self, object: Object, method: IntPtr): ...
    def Invoke(self, doc: RhinoDoc, mode: RunMode, data: Object) -> Result: ...
    def BeginInvoke(self, doc: RhinoDoc, mode: RunMode, data: Object, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> Result: ...
