from typing import Tuple, Set, Iterable, List


class VisualAnalysisMode:
    @property
    def RhinoEdgeAnalysisModeId() -> Guid: ...
    @property
    def RhinoCurvatureGraphAnalysisModeId() -> Guid: ...
    @property
    def RhinoZebraStripeAnalysisModeId() -> Guid: ...
    @property
    def RhinoEmapAnalysisModeId() -> Guid: ...
    @property
    def RhinoCurvatureColorAnalyisModeId() -> Guid: ...
    @property
    def RhinoDraftAngleAnalysisModeId() -> Guid: ...
    @property
    def RhinoThicknessAnalysisModeId() -> Guid: ...
    def Register(customAnalysisModeType: Type) -> VisualAnalysisMode: ...
    @overload
    def Find(id: Guid) -> VisualAnalysisMode: ...
    @overload
    def Find(t: Type) -> VisualAnalysisMode: ...
    @property
    def Name(self) -> str: ...
    @property
    def Style(self) -> AnalysisStyle: ...
    @property
    def Id(self) -> Guid: ...
    def EnableUserInterface(self, on: bool) -> None: ...
    def ObjectSupportsAnalysisMode(self, obj: RhinoObject) -> bool: ...
    @property
    def ShowIsoCurves(self) -> bool: ...


class PointStyle:
    Square = 0
    Simple = 0
    ControlPoint = 1
    ActivePoint = 2
    X = 3
    RoundSimple = 4
    Circle = 4
    RoundControlPoint = 5
    RoundActivePoint = 6
    Triangle = 7
    Heart = 8
    Chevron = 9
    Clover = 10
    Tag = 11
    Asterisk = 12
    Pin = 13
    ArrowTail = 14
    ArrowTip = 15


class BackgroundStyle:
    SolidColor = 0
    WallpaperImage = 1
    Gradient = 2
    Environment = 3


class ColorStop:
    def __init__(self, color: Color, t: float): ...
    @property
    def Color(self) -> Color: ...
    @Color.setter
    def Color(self, value: Color) -> None: ...
    @property
    def Position(self) -> float: ...
    @Position.setter
    def Position(self, value: float) -> None: ...


class ColorGradient:
    def __init__(self): ...
    @property
    def GradientType(self) -> GradientType: ...
    @GradientType.setter
    def GradientType(self, value: GradientType) -> None: ...
    def GetColorStops(self) -> Set(ColorStop): ...
    def SetColorStops(self, stops: Iterable[ColorStop]) -> None: ...
    @property
    def Repeat(self) -> float: ...
    @Repeat.setter
    def Repeat(self, value: float) -> None: ...
    @property
    def StartPoint(self) -> Point3d: ...
    @StartPoint.setter
    def StartPoint(self, value: Point3d) -> None: ...
    @property
    def EndPoint(self) -> Point3d: ...
    @EndPoint.setter
    def EndPoint(self, value: Point3d) -> None: ...


class Color4f:
    @overload
    def __init__(self, color: Color): ...
    @overload
    def __init__(self, color: Color4f): ...
    @overload
    def __init__(self, red: Single, green: Single, blue: Single, alpha: Single): ...
    @property
    def Empty() -> Color4f: ...
    @property
    def Black() -> Color4f: ...
    @property
    def White() -> Color4f: ...
    @overload
    def FromArgb(a: Single, r: Single, g: Single, b: Single) -> Color4f: ...
    @overload
    def FromArgb(a: Single, color: Color4f) -> Color4f: ...
    @property
    def R(self) -> Single: ...
    @property
    def G(self) -> Single: ...
    @property
    def B(self) -> Single: ...
    @property
    def A(self) -> Single: ...
    @property
    def L(self) -> Single: ...
    def op_Equality(a: Color4f, b: Color4f) -> bool: ...
    def op_Inequality(a: Color4f, b: Color4f) -> bool: ...
    def Equals(self, obj: Object) -> bool: ...
    def GetHashCode(self) -> int: ...
    def BlendTo(self, t: Single, col: Color4f) -> Color4f: ...
    def ApplyGamma(col: Color4f, gamma: Single) -> Color4f: ...
    def AsSystemColor(self) -> Color: ...


class CustomDisplay:
    def __init__(self, enable: bool): ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @property
    def IsDisposed(self) -> bool: ...
    @property
    def ClippingBox(self) -> BoundingBox: ...
    def Clear(self) -> None: ...
    @overload
    def AddPoint(self, point: Point3d) -> None: ...
    @overload
    def AddPoint(self, point: Point3d, color: Color) -> None: ...
    @overload
    def AddPoint(self, point: Point3d, color: Color, style: PointStyle, radius: int) -> None: ...
    @overload
    def AddPoints(self, points: Iterable[Point3d]) -> None: ...
    @overload
    def AddPoints(self, points: Iterable[Point3d], color: Color) -> None: ...
    @overload
    def AddPoints(self, points: Iterable[Point3d], color: Color, style: PointStyle, radius: int) -> None: ...
    @overload
    def AddLine(self, line: Line) -> None: ...
    @overload
    def AddLine(self, line: Line, color: Color) -> None: ...
    @overload
    def AddLine(self, line: Line, color: Color, thickness: int) -> None: ...
    @overload
    def AddVector(self, anchor: Point3d, span: Vector3d) -> None: ...
    @overload
    def AddVector(self, anchor: Point3d, span: Vector3d, color: Color) -> None: ...
    @overload
    def AddVector(self, anchor: Point3d, span: Vector3d, color: Color, drawAnchor: bool) -> None: ...
    @overload
    def AddArc(self, arc: Arc) -> None: ...
    @overload
    def AddArc(self, arc: Arc, color: Color) -> None: ...
    @overload
    def AddArc(self, arc: Arc, color: Color, thickness: int) -> None: ...
    @overload
    def AddCircle(self, circle: Circle) -> None: ...
    @overload
    def AddCircle(self, circle: Circle, color: Color) -> None: ...
    @overload
    def AddCircle(self, circle: Circle, color: Color, thickness: int) -> None: ...
    @overload
    def AddCurve(self, curve: Curve) -> None: ...
    @overload
    def AddCurve(self, curve: Curve, color: Color) -> None: ...
    @overload
    def AddCurve(self, curve: Curve, color: Color, thickness: int) -> None: ...
    def AddPolygon(self, polygon: Iterable[Point3d], fillColor: Color, edgeColor: Color, drawFill: bool, drawEdge: bool) -> None: ...
    @overload
    def AddText(self, text: str, plane: Plane, size: float) -> None: ...
    @overload
    def AddText(self, text: str, plane: Plane, size: float, color: Color) -> None: ...
    @overload
    def AddText(self, text: Text3d, color: Color) -> None: ...
    def Dispose(self) -> None: ...


class ColorHSL:
    @overload
    def __init__(self, rgb: Color): ...
    @overload
    def __init__(self, hue: float, saturation: float, luminance: float): ...
    @overload
    def __init__(self, alpha: float, hue: float, saturation: float, luminance: float): ...
    def CreateFromCMYK(cmyk: ColorCMYK) -> ColorHSL: ...
    def CreateFromXYZ(xyz: ColorXYZ) -> ColorHSL: ...
    def CreateFromLAB(lab: ColorLAB) -> ColorHSL: ...
    def CreateFromLCH(lch: ColorLCH) -> ColorHSL: ...
    def CreateFromHSV(hsv: ColorHSV) -> ColorHSL: ...
    def op_Implicit(hsl: ColorHSL) -> Color: ...
    @property
    def H(self) -> float: ...
    @H.setter
    def H(self, value: float) -> None: ...
    @property
    def S(self) -> float: ...
    @S.setter
    def S(self, value: float) -> None: ...
    @property
    def L(self) -> float: ...
    @L.setter
    def L(self, value: float) -> None: ...
    @property
    def A(self) -> float: ...
    @A.setter
    def A(self, value: float) -> None: ...
    def ToArgbColor(self) -> Color: ...


class ColorCMYK:
    @overload
    def __init__(self, rgb: Color): ...
    @overload
    def __init__(self, cyan: float, magenta: float, yellow: float): ...
    @overload
    def __init__(self, cyan: float, magenta: float, yellow: float, key: float): ...
    @overload
    def __init__(self, alpha: float, cyan: float, magenta: float, yellow: float, key: float): ...
    def CreateFromHSL(hsl: ColorHSL) -> ColorCMYK: ...
    def CreateFromXYZ(xyz: ColorXYZ) -> ColorCMYK: ...
    def CreateFromLAB(lab: ColorLAB) -> ColorCMYK: ...
    def CreateFromLCH(lch: ColorLCH) -> ColorCMYK: ...
    def CreateFromHSV(hsv: ColorHSV) -> ColorCMYK: ...
    def op_Implicit(cmyk: ColorCMYK) -> Color: ...
    @property
    def C(self) -> float: ...
    @C.setter
    def C(self, value: float) -> None: ...
    @property
    def M(self) -> float: ...
    @M.setter
    def M(self, value: float) -> None: ...
    @property
    def Y(self) -> float: ...
    @Y.setter
    def Y(self, value: float) -> None: ...
    @property
    def K(self) -> float: ...
    @K.setter
    def K(self, value: float) -> None: ...
    @property
    def A(self) -> float: ...
    @A.setter
    def A(self, value: float) -> None: ...


class ColorXYZ:
    @overload
    def __init__(self, rgb: Color): ...
    @overload
    def __init__(self, x: float, y: float, z: float): ...
    @overload
    def __init__(self, alpha: float, x: float, y: float, z: float): ...
    def CreateFromHSL(hsl: ColorHSL) -> ColorXYZ: ...
    def CreateFromCMYK(cmyk: ColorCMYK) -> ColorXYZ: ...
    def CreateFromLAB(lab: ColorLAB) -> ColorXYZ: ...
    def CreateFromLCH(lch: ColorLCH) -> ColorXYZ: ...
    def CreateFromHSV(hsv: ColorHSV) -> ColorXYZ: ...
    def op_Implicit(xyz: ColorXYZ) -> Color: ...
    @property
    def X(self) -> float: ...
    @X.setter
    def X(self, value: float) -> None: ...
    @property
    def Y(self) -> float: ...
    @Y.setter
    def Y(self, value: float) -> None: ...
    @property
    def Z(self) -> float: ...
    @Z.setter
    def Z(self, value: float) -> None: ...
    @property
    def A(self) -> float: ...
    @A.setter
    def A(self, value: float) -> None: ...


class ColorLAB:
    @overload
    def __init__(self, rgb: Color): ...
    @overload
    def __init__(self, lightness: float, a: float, b: float): ...
    @overload
    def __init__(self, alpha: float, lightness: float, a: float, b: float): ...
    def CreateFromHSL(hsl: ColorHSL) -> ColorLAB: ...
    def CreateFromCMYK(cmyk: ColorCMYK) -> ColorLAB: ...
    def CreateFromXYZ(xyz: ColorXYZ) -> ColorLAB: ...
    def CreateFromLCH(lch: ColorLCH) -> ColorLAB: ...
    def CreateFromHSV(hsv: ColorHSV) -> ColorLAB: ...
    def op_Implicit(lab: ColorLAB) -> Color: ...
    @property
    def L(self) -> float: ...
    @L.setter
    def L(self, value: float) -> None: ...
    @property
    def A(self) -> float: ...
    @A.setter
    def A(self, value: float) -> None: ...
    @property
    def B(self) -> float: ...
    @B.setter
    def B(self, value: float) -> None: ...
    @property
    def Alpha(self) -> float: ...
    @Alpha.setter
    def Alpha(self, value: float) -> None: ...


class ColorLCH:
    @overload
    def __init__(self, rgb: Color): ...
    @overload
    def __init__(self, lightness: float, chroma: float, hue: float): ...
    @overload
    def __init__(self, alpha: float, lightness: float, chroma: float, hue: float): ...
    def CreateFromHSL(hsl: ColorHSL) -> ColorLCH: ...
    def CreateFromCMYK(cmyk: ColorCMYK) -> ColorLCH: ...
    def CreateFromXYZ(xyz: ColorXYZ) -> ColorLCH: ...
    def CreateFromLAB(lab: ColorLAB) -> ColorLCH: ...
    def op_Implicit(lch: ColorLCH) -> Color: ...
    @property
    def L(self) -> float: ...
    @L.setter
    def L(self, value: float) -> None: ...
    @property
    def C(self) -> float: ...
    @C.setter
    def C(self, value: float) -> None: ...
    @property
    def H(self) -> float: ...
    @H.setter
    def H(self, value: float) -> None: ...
    @property
    def A(self) -> float: ...
    @A.setter
    def A(self, value: float) -> None: ...
    def MakePositive(self) -> None: ...


class ColorHSV:
    @overload
    def __init__(self, rgb: Color): ...
    @overload
    def __init__(self, hue: float, saturation: float, value: float): ...
    @overload
    def __init__(self, alpha: float, hue: float, saturation: float, value: float): ...
    def CreateFromHSL(hsl: ColorHSL) -> ColorHSV: ...
    def CreateFromCMYK(cmyk: ColorCMYK) -> ColorHSV: ...
    def CreateFromXYZ(xyz: ColorXYZ) -> ColorHSV: ...
    def CreateFromLAB(lab: ColorLAB) -> ColorHSV: ...
    def CreateFromLCH(lch: ColorLCH) -> ColorHSV: ...
    def op_Implicit(hsv: ColorHSV) -> Color: ...
    @property
    def H(self) -> float: ...
    @H.setter
    def H(self, value: float) -> None: ...
    @property
    def S(self) -> float: ...
    @S.setter
    def S(self, value: float) -> None: ...
    @property
    def V(self) -> float: ...
    @V.setter
    def V(self, value: float) -> None: ...
    @property
    def A(self) -> float: ...
    @A.setter
    def A(self, value: float) -> None: ...
    def ToArgbColor(self) -> Color: ...


class Text3d:
    @overload
    def __init__(self, text: str): ...
    @overload
    def __init__(self, text: str, plane: Plane, height: float): ...
    def Dispose(self) -> None: ...
    @property
    def Text(self) -> str: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @property
    def TextPlane(self) -> Plane: ...
    @TextPlane.setter
    def TextPlane(self, value: Plane) -> None: ...
    @property
    def Height(self) -> float: ...
    @Height.setter
    def Height(self, value: float) -> None: ...
    @property
    def FontFace(self) -> str: ...
    @FontFace.setter
    def FontFace(self, value: str) -> None: ...
    @property
    def Bold(self) -> bool: ...
    @Bold.setter
    def Bold(self, value: bool) -> None: ...
    @property
    def Italic(self) -> bool: ...
    @Italic.setter
    def Italic(self, value: bool) -> None: ...
    @property
    def BoundingBox(self) -> BoundingBox: ...
    @property
    def HorizontalAlignment(self) -> TextHorizontalAlignment: ...
    @HorizontalAlignment.setter
    def HorizontalAlignment(self, value: TextHorizontalAlignment) -> None: ...
    @property
    def VerticalAlignment(self) -> TextVerticalAlignment: ...
    @VerticalAlignment.setter
    def VerticalAlignment(self, value: TextVerticalAlignment) -> None: ...


class BlendMode:
    Zero = 0
    One = 1
    SourceColor = 768
    OneMinusSourceColor = 769
    SourceAlpha = 770
    OneMinusSourceAlpha = 771
    DestinationAlpha = 772
    OneMinusDestinationAlpha = 773
    DestinationColor = 774
    OneMinusDestinationColor = 775
    SourceAlphaSaturate = 776


class DisplayBitmap:
    def __init__(self, bitmap: Bitmap): ...
    def Load(path: str) -> DisplayBitmap: ...
    def SetBlendFunction(self, source: BlendMode, destination: BlendMode) -> None: ...
    def GetBlendModes(self) -> Tuple[BlendMode, BlendMode]: ...
    def Dispose(self) -> None: ...


class DisplayBitmapDrawList:
    def __init__(self): ...
    @property
    def BoundingBox(self) -> BoundingBox: ...
    @property
    def MaximumCachedSortLists(self) -> int: ...
    @MaximumCachedSortLists.setter
    def MaximumCachedSortLists(self, value: int) -> None: ...
    @property
    def SortAngleTolerance(self) -> float: ...
    @SortAngleTolerance.setter
    def SortAngleTolerance(self, value: float) -> None: ...
    def Sort(self, cameraDirection: Vector3d) -> Set(int): ...
    @overload
    def SetPoints(self, points: Iterable[Point3d]) -> None: ...
    @overload
    def SetPoints(self, points: Iterable[Point3d], blendColor: Color) -> None: ...
    @overload
    def SetPoints(self, points: Iterable[Point3d], colors: Iterable[Color]) -> None: ...


class DisplayModeDescription:
    def Dispose(self) -> None: ...
    def GetDisplayModes() -> Set(DisplayModeDescription): ...
    def GetDisplayMode(id: Guid) -> DisplayModeDescription: ...
    def FindByName(englishName: str) -> DisplayModeDescription: ...
    @overload
    def AddDisplayMode(displayMode: DisplayModeDescription) -> Guid: ...
    @overload
    def AddDisplayMode(name: str) -> Guid: ...
    def CopyDisplayMode(id: Guid, name: str) -> Guid: ...
    def UpdateDisplayMode(displayMode: DisplayModeDescription) -> bool: ...
    def DeleteDiplayMode(id: Guid) -> bool: ...
    def DeleteDisplayMode(id: Guid) -> bool: ...
    def ImportFromFile(filename: str) -> Guid: ...
    def ExportToFile(displayMode: DisplayModeDescription, filename: str) -> bool: ...
    @property
    def InMenu(self) -> bool: ...
    @InMenu.setter
    def InMenu(self, value: bool) -> None: ...
    @property
    def SupportsShadeCommand(self) -> bool: ...
    @SupportsShadeCommand.setter
    def SupportsShadeCommand(self, value: bool) -> None: ...
    @property
    def SupportsShading(self) -> bool: ...
    @SupportsShading.setter
    def SupportsShading(self, value: bool) -> None: ...
    @property
    def AllowObjectAssignment(self) -> bool: ...
    @AllowObjectAssignment.setter
    def AllowObjectAssignment(self, value: bool) -> None: ...
    @property
    def ShadedPipelineRequired(self) -> bool: ...
    @ShadedPipelineRequired.setter
    def ShadedPipelineRequired(self, value: bool) -> None: ...
    @property
    def WireframePipelineRequired(self) -> bool: ...
    @WireframePipelineRequired.setter
    def WireframePipelineRequired(self, value: bool) -> None: ...
    @property
    def PipelineLocked(self) -> bool: ...
    @PipelineLocked.setter
    def PipelineLocked(self, value: bool) -> None: ...
    @property
    def DisplayAttributes(self) -> DisplayPipelineAttributes: ...
    @property
    def EnglishName(self) -> str: ...
    @EnglishName.setter
    def EnglishName(self, value: str) -> None: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def LocalName(self) -> str: ...
    @property
    def GhostedId() -> Guid: ...
    @property
    def PenId() -> Guid: ...
    @property
    def RenderedId() -> Guid: ...
    @property
    def RenderedShadowsId() -> Guid: ...
    @property
    def ShadedId() -> Guid: ...
    @property
    def TechId() -> Guid: ...
    @property
    def WireframeId() -> Guid: ...
    @property
    def XRayId() -> Guid: ...
    @property
    def AmbientOcclusionId() -> Guid: ...
    @property
    def RaytracedId() -> Guid: ...


class DrawFrameStages:
    InitializeFrameBuffer = 1
    SetupFrustum = 2
    ObjectCulling = 4
    CalculateBoundingBox = 8
    CalculateClippingPlanes = 16
    SetupLighting = 32
    DrawBackground = 64
    PreDrawObjects = 128
    DrawObject = 256
    PostDrawObjects = 512
    DrawMiddleGround = 896
    DrawForeGround = 1024
    DrawOverlay = 2048
    PostProcessFrameBuffer = 4096
    MeshingParameters = 8192
    ObjectDisplayAttributes = 16384
    PreObjectDraw = 32768
    PostObjectDraw = 65536
    ObjectBasedChannel = 114948
    ViewExtents = 131072
    All = 4294836223


class DisplayConduit:
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @property
    def SpaceFilter(self) -> ActiveSpace: ...
    @SpaceFilter.setter
    def SpaceFilter(self, value: ActiveSpace) -> None: ...


class DisplayEngine:
    def Dispose(self) -> None: ...


class DepthMode:
    Neutral = 0
    AlwaysInFront = 1
    AlwaysInBack = 2


class ZBiasMode:
    Neutral = 0
    TowardsCamera = 1
    AwayFromCamera = 2


class CullFaceMode:
    DrawFrontAndBack = 0
    DrawFrontFaces = 1
    DrawBackFaces = 2


class DisplayPipeline:
    @overload
    def DrawBoxCorners(self, box: BoundingBox, color: Color) -> None: ...
    @overload
    def DrawBoxCorners(self, box: BoundingBox, color: Color, size: float) -> None: ...
    @overload
    def DrawBoxCorners(self, box: BoundingBox, color: Color, size: float, thickness: int) -> None: ...
    @overload
    def DrawMarker(self, tip: Point3d, direction: Vector3d, color: Color) -> None: ...
    @overload
    def DrawMarker(self, tip: Point3d, direction: Vector3d, color: Color, thickness: int) -> None: ...
    @overload
    def DrawMarker(self, tip: Point3d, direction: Vector3d, color: Color, thickness: int, size: float) -> None: ...
    @overload
    def DrawMarker(self, tip: Point3d, direction: Vector3d, color: Color, thickness: int, size: float, rotation: float) -> None: ...
    def DrawConstructionPlane(self, constructionPlane: ConstructionPlane) -> None: ...
    @overload
    def Draw2dText(self, text: str, color: Color, screenCoordinate: Point2d, middleJustified: bool) -> None: ...
    @overload
    def Draw2dText(self, text: str, color: Color, screenCoordinate: Point2d, middleJustified: bool, height: int) -> None: ...
    @overload
    def Draw2dText(self, text: str, color: Color, screenCoordinate: Point2d, middleJustified: bool, height: int, fontface: str) -> None: ...
    @overload
    def Draw2dText(self, text: str, color: Color, worldCoordinate: Point3d, middleJustified: bool) -> None: ...
    @overload
    def Draw2dText(self, text: str, color: Color, worldCoordinate: Point3d, middleJustified: bool, height: int) -> None: ...
    @overload
    def Draw2dText(self, text: str, color: Color, worldCoordinate: Point3d, middleJustified: bool, height: int, fontface: str) -> None: ...
    @overload
    def Draw3dText(self, text: str, color: Color, textPlane: Plane, height: float, fontface: str, bold: bool, italic: bool, horizontalAlignment: TextHorizontalAlignment, verticalAlignment: TextVerticalAlignment) -> None: ...
    @overload
    def Draw3dText(self, text: str, color: Color, textPlane: Plane, height: float, fontface: str, bold: bool, italic: bool) -> None: ...
    @overload
    def Draw3dText(self, text: str, color: Color, textPlane: Plane, height: float, fontface: str) -> None: ...
    @overload
    def Draw3dText(self, text: Text3d, color: Color) -> None: ...
    @overload
    def Draw3dText(self, text: Text3d, color: Color, textPlane: Plane) -> None: ...
    @overload
    def Draw3dText(self, text: Text3d, color: Color, textPlaneOrigin: Point3d) -> None: ...
    @overload
    def DrawText(self, text: TextEntity, color: Color) -> None: ...
    @overload
    def DrawText(self, text: TextEntity, color: Color, scale: float) -> None: ...
    @overload
    def DrawText(self, text: TextEntity, color: Color, xform: Transform) -> None: ...
    def Measure2dText(self, text: str, definitionPoint: Point2d, middleJustified: bool, rotationRadians: float, height: int, fontFace: str) -> Rectangle: ...
    @overload
    def DrawObject(self, rhinoObject: RhinoObject) -> None: ...
    @overload
    def DrawObject(self, rhinoObject: RhinoObject, xform: Transform) -> None: ...
    def DrawAnnotation(self, annotation: AnnotationBase, color: Color) -> None: ...
    def DrawAnnotationArrowhead(self, arrowhead: Arrowhead, xform: Transform, color: Color) -> None: ...
    @overload
    def DrawArc(self, arc: Arc, color: Color) -> None: ...
    @overload
    def DrawArc(self, arc: Arc, color: Color, thickness: int) -> None: ...
    @overload
    def DrawCircle(self, circle: Circle, color: Color) -> None: ...
    @overload
    def DrawCircle(self, circle: Circle, color: Color, thickness: int) -> None: ...
    @overload
    def DrawSphere(self, sphere: Sphere, color: Color) -> None: ...
    @overload
    def DrawSphere(self, sphere: Sphere, color: Color, thickness: int) -> None: ...
    @overload
    def DrawTorus(self, torus: Torus, color: Color) -> None: ...
    @overload
    def DrawTorus(self, torus: Torus, color: Color, thickness: int) -> None: ...
    @overload
    def DrawCylinder(self, cylinder: Cylinder, color: Color) -> None: ...
    @overload
    def DrawCylinder(self, cylinder: Cylinder, color: Color, thickness: int) -> None: ...
    @overload
    def DrawCone(self, cone: Cone, color: Color) -> None: ...
    @overload
    def DrawCone(self, cone: Cone, color: Color, thickness: int) -> None: ...
    @overload
    def DrawCurve(self, curve: Curve, color: Color) -> None: ...
    @overload
    def DrawCurve(self, curve: Curve, color: Color, thickness: int) -> None: ...
    @overload
    def DrawCurvatureGraph(self, curve: Curve, color: Color) -> None: ...
    @overload
    def DrawCurvatureGraph(self, curve: Curve, color: Color, hairScale: int) -> None: ...
    @overload
    def DrawCurvatureGraph(self, curve: Curve, color: Color, hairScale: int, hairDensity: int, sampleDensity: int) -> None: ...
    def DrawSurface(self, surface: Surface, wireColor: Color, wireDensity: int) -> None: ...
    @overload
    def DrawSprite(self, bitmap: DisplayBitmap, worldLocation: Point3d, size: Single, sizeInWorldSpace: bool) -> None: ...
    @overload
    def DrawSprite(self, bitmap: DisplayBitmap, worldLocation: Point3d, size: Single, blendColor: Color, sizeInWorldSpace: bool) -> None: ...
    @overload
    def DrawSprite(self, bitmap: DisplayBitmap, screenLocation: Point2d, size: Single) -> None: ...
    @overload
    def DrawSprite(self, bitmap: DisplayBitmap, screenLocation: Point2d, size: Single, blendColor: Color) -> None: ...
    @overload
    def DrawSprites(self, bitmap: DisplayBitmap, items: DisplayBitmapDrawList, size: Single, sizeInWorldSpace: bool) -> None: ...
    @overload
    def DrawSprites(self, bitmap: DisplayBitmap, items: DisplayBitmapDrawList, size: Single, translation: Vector3d, sizeInWorldSpace: bool) -> None: ...
    @overload
    def DrawParticles(self, particles: ParticleSystem) -> None: ...
    @overload
    def DrawParticles(self, particles: ParticleSystem, bitmap: DisplayBitmap) -> None: ...
    @overload
    def DrawParticles(self, particles: ParticleSystem, bitmaps: Set(DisplayBitmap)) -> None: ...
    def Draw2dRectangle(self, rectangle: Rectangle, strokeColor: Color, thickness: int, fillColor: Color) -> None: ...
    def DrawRoundedRectangle(self, center: PointF, pixelWidth: Single, pixelHeight: Single, cornerRadius: Single, strokeColor: Color, strokeWidth: Single, fillColor: Color) -> None: ...
    @overload
    def Draw2dLine(self, from_: Point, to: Point, color: Color, thickness: Single) -> None: ...
    @overload
    def Draw2dLine(self, from_: PointF, to: PointF, color: Color, thickness: Single) -> None: ...
    def PushClipTesting(self, enable: bool) -> None: ...
    def PopClipTesting(self) -> None: ...
    def PushCullFaceMode(self, mode: CullFaceMode) -> None: ...
    def PopCullFaceMode(self) -> None: ...
    @property
    def DepthMode(self) -> DepthMode: ...
    @DepthMode.setter
    def DepthMode(self, value: DepthMode) -> None: ...
    @property
    def ZBiasMode(self) -> ZBiasMode: ...
    @ZBiasMode.setter
    def ZBiasMode(self, value: ZBiasMode) -> None: ...
    def CullControlPolygon() -> bool: ...
    @overload
    def IsVisible(self, worldCoordinate: Point3d) -> bool: ...
    @overload
    def IsVisible(self, rhinoObject: RhinoObject) -> bool: ...
    @overload
    def IsVisible(self, bbox: BoundingBox) -> bool: ...
    def IsActive(self, rhinoObject: RhinoObject) -> bool: ...
    def InterruptDrawing(self) -> bool: ...
    def GetOpenGLWorldToCamera(self, includeModelTransform: bool) -> Set(Single): ...
    def GetOpenGLWorldToClip(self, includeModelTransform: bool) -> Set(Single): ...
    def GetOpenGLCameraToClip(self) -> Set(Single): ...
    def DrawToBitmap(viewport: RhinoViewport, width: int, height: int) -> Bitmap: ...
    def DrawStereoFrameBuffer(self, viewportLeft: ViewportInfo, viewportRight: ViewportInfo) -> Tuple[bool, UInt32, UInt32]: ...
    @overload
    def DrawMeshWires(self, mesh: Mesh, color: Color) -> None: ...
    @overload
    def DrawMeshWires(self, mesh: Mesh, color: Color, thickness: int) -> None: ...
    def DrawMeshVertices(self, mesh: Mesh, color: Color) -> None: ...
    @overload
    def DrawMeshShaded(self, mesh: Mesh, material: DisplayMaterial) -> None: ...
    @overload
    def DrawMeshShaded(self, mesh: Mesh, material: DisplayMaterial, faceIndices: Set(int)) -> None: ...
    def DrawMeshFalseColors(self, mesh: Mesh) -> None: ...
    def DrawSubDShaded(self, subd: SubD, material: DisplayMaterial) -> None: ...
    def DrawSubDWires(self, subd: SubD, color: Color, thickness: Single) -> None: ...
    def DrawBrepShaded(self, brep: Brep, material: DisplayMaterial) -> None: ...
    @overload
    def DrawBrepWires(self, brep: Brep, color: Color) -> None: ...
    @overload
    def DrawBrepWires(self, brep: Brep, color: Color, wireDensity: int) -> None: ...
    @overload
    def DrawExtrusionWires(self, extrusion: Extrusion, color: Color) -> None: ...
    @overload
    def DrawExtrusionWires(self, extrusion: Extrusion, color: Color, wireDensity: int) -> None: ...
    def DrawZebraPreview(self, brep: Brep, color: Color) -> None: ...
    def DrawActivePoint(self, point: Point3d) -> None: ...
    @overload
    def DrawPoint(self, point: Point3d) -> None: ...
    @overload
    def DrawPoint(self, point: Point3d, color: Color) -> None: ...
    @overload
    def DrawPoint(self, point: Point3d, style: PointStyle, radius: Single, color: Color) -> None: ...
    @overload
    def DrawPoints(self, points: Iterable[Point3d], style: PointStyle, radius: Single, color: Color) -> None: ...
    @overload
    def DrawPoint(self, point: Point3d, style: PointStyle, strokeColor: Color, fillColor: Color, radius: Single, strokeWidth: Single, secondarySize: Single, rotationRadians: Single, diameterIsInPixels: bool, autoScaleForDpi: bool) -> None: ...
    @overload
    def DrawPoints(self, points: Iterable[Point3d], style: PointStyle, strokeColor: Color, fillColor: Color, radius: Single, strokeWidth: Single, secondarySize: Single, rotationRadians: Single, diameterIsInPixels: bool, autoScaleForDpi: bool) -> None: ...
    @overload
    def DrawPoint(self, point: Point3d, style: PointStyle, radius: int, color: Color) -> None: ...
    @overload
    def DrawPoints(self, points: Iterable[Point3d], style: PointStyle, radius: int, color: Color) -> None: ...
    @overload
    def DrawPointCloud(self, cloud: PointCloud, size: Single) -> None: ...
    @overload
    def DrawPointCloud(self, cloud: PointCloud, size: Single, color: Color) -> None: ...
    @overload
    def DrawPointCloud(self, cloud: PointCloud, size: int) -> None: ...
    @overload
    def DrawPointCloud(self, cloud: PointCloud, size: int, color: Color) -> None: ...
    def DrawDirectionArrow(self, location: Point3d, direction: Vector3d, color: Color) -> None: ...
    @overload
    def DrawArrow(self, line: Line, color: Color) -> None: ...
    @overload
    def DrawArrow(self, line: Line, color: Color, screenSize: float, relativeSize: float) -> None: ...
    @overload
    def DrawArrows(self, lines: Set(Line), color: Color) -> None: ...
    @overload
    def DrawArrows(self, lines: Iterable[Line], color: Color) -> None: ...
    def DrawArrowHead(self, tip: Point3d, direction: Vector3d, color: Color, screenSize: float, worldSize: float) -> None: ...
    def DrawLineArrow(self, line: Line, color: Color, thickness: int, size: float) -> None: ...
    @overload
    def DrawLine(self, line: Line, color: Color) -> None: ...
    @overload
    def DrawLine(self, line: Line, color: Color, thickness: int) -> None: ...
    @overload
    def DrawLine(self, from_: Point3d, to: Point3d, color: Color) -> None: ...
    @overload
    def DrawLine(self, from_: Point3d, to: Point3d, color: Color, thickness: int) -> None: ...
    @overload
    def DrawDottedLine(self, line: Line, color: Color) -> None: ...
    @overload
    def DrawPatternedLine(self, line: Line, color: Color, pattern: int, thickness: int) -> None: ...
    @overload
    def DrawDottedLine(self, from_: Point3d, to: Point3d, color: Color) -> None: ...
    @overload
    def DrawPatternedLine(self, from_: Point3d, to: Point3d, color: Color, pattern: int, thickness: int) -> None: ...
    def DrawDottedPolyline(self, points: Iterable[Point3d], color: Color, close: bool) -> None: ...
    def DrawPatternedPolyline(self, points: Iterable[Point3d], color: Color, pattern: int, thickness: int, close: bool) -> None: ...
    @overload
    def DrawLines(self, lines: Iterable[Line], color: Color) -> None: ...
    @overload
    def DrawLines(self, lines: Iterable[Line], color: Color, thickness: int) -> None: ...
    @overload
    def DrawPolyline(self, polyline: Iterable[Point3d], color: Color) -> None: ...
    @overload
    def DrawPolyline(self, polyline: Iterable[Point3d], color: Color, thickness: int) -> None: ...
    def DrawPolygon(self, points: Iterable[Point3d], color: Color, filled: bool) -> None: ...
    def DrawBitmap(self, bitmap: DisplayBitmap, left: int, top: int) -> None: ...
    @overload
    def DrawDot(self, screenX: Single, screenY: Single, text: str, dotColor: Color, textColor: Color) -> None: ...
    @overload
    def DrawDot(self, screenX: Single, screenY: Single, text: str) -> None: ...
    @overload
    def DrawDot(self, worldPosition: Point3d, text: str, dotColor: Color, textColor: Color) -> None: ...
    @overload
    def DrawDot(self, worldPosition: Point3d, text: str) -> None: ...
    @overload
    def DrawDot(self, dot: TextDot, fillColor: Color, textColor: Color, borderColor: Color) -> None: ...
    def DrawHatch(self, hatch: Hatch, hatchColor: Color, boundaryColor: Color) -> None: ...
    @overload
    def DrawGradientHatch(self, hatch: Hatch, color1: Color, color2: Color, point1: Point3d, point2: Point3d, linearGradient: bool, boundaryThickness: Single, boundaryColor: Color) -> None: ...
    @overload
    def DrawGradientHatch(self, hatch: Hatch, stops: Iterable[ColorStop], point1: Point3d, point2: Point3d, linearGradient: bool, repeat: Single, boundaryThickness: Single, boundaryColor: Color) -> None: ...
    def DrawGradientMesh(self, mesh: Mesh, stops: Iterable[ColorStop], point1: Point3d, point2: Point3d, linearGradient: bool, repeat: Single) -> None: ...
    def DrawGradientLines(self, lines: Iterable[Line], strokeWidth: Single, stops: Iterable[ColorStop], point1: Point3d, point2: Point3d, linearGradient: bool, repeat: Single) -> None: ...
    @overload
    def DrawBox(self, box: BoundingBox, color: Color) -> None: ...
    @overload
    def DrawBox(self, box: BoundingBox, color: Color, thickness: int) -> None: ...
    @overload
    def DrawBox(self, box: Box, color: Color) -> None: ...
    @overload
    def DrawBox(self, box: Box, color: Color, thickness: int) -> None: ...
    def add_ObjectCulling(value: EventHandler) -> None: ...
    def remove_ObjectCulling(value: EventHandler) -> None: ...
    def add_CalculateBoundingBox(value: EventHandler) -> None: ...
    def remove_CalculateBoundingBox(value: EventHandler) -> None: ...
    def add_CalculateBoundingBoxZoomExtents(value: EventHandler) -> None: ...
    def remove_CalculateBoundingBoxZoomExtents(value: EventHandler) -> None: ...
    def add_InitFrameBuffer(value: EventHandler) -> None: ...
    def remove_InitFrameBuffer(value: EventHandler) -> None: ...
    def add_PreDrawObjects(value: EventHandler) -> None: ...
    def remove_PreDrawObjects(value: EventHandler) -> None: ...
    def add_PreDrawTransparentObjects(value: EventHandler) -> None: ...
    def remove_PreDrawTransparentObjects(value: EventHandler) -> None: ...
    def add_PreDrawObject(value: EventHandler) -> None: ...
    def remove_PreDrawObject(value: EventHandler) -> None: ...
    def add_PostDrawObjects(value: EventHandler) -> None: ...
    def remove_PostDrawObjects(value: EventHandler) -> None: ...
    def add_DrawForeground(value: EventHandler) -> None: ...
    def remove_DrawForeground(value: EventHandler) -> None: ...
    def add_DrawOverlay(value: EventHandler) -> None: ...
    def remove_DrawOverlay(value: EventHandler) -> None: ...
    def add_ViewportProjectionChanged(value: EventHandler) -> None: ...
    def remove_ViewportProjectionChanged(value: EventHandler) -> None: ...
    def add_DisplayModeChanged(value: EventHandler) -> None: ...
    def remove_DisplayModeChanged(value: EventHandler) -> None: ...
    @property
    def FrameSize(self) -> Size: ...
    @property
    def FrameBuffer(self) -> Bitmap: ...
    @property
    def DefaultCurveThickness(self) -> int: ...
    @property
    def IsOpenGL(self) -> bool: ...
    @property
    def IsStereoMode(self) -> bool: ...
    @property
    def IsPrinting(self) -> bool: ...
    @property
    def IsInViewCapture(self) -> bool: ...
    @property
    def IsDynamicDisplay(self) -> bool: ...
    @property
    def SupportsShading(self) -> bool: ...
    @property
    def StereoProjection(self) -> int: ...
    @property
    def ModelTransform(self) -> Transform: ...
    @ModelTransform.setter
    def ModelTransform(self, value: Transform) -> None: ...
    @property
    def ModelTransformIsIdentity(self) -> bool: ...
    @property
    def RenderPass(self) -> int: ...
    @property
    def NestLevel(self) -> int: ...
    @property
    def ActiveTopLevelObject(self) -> RhinoObject: ...
    @property
    def ActiveObject(self) -> RhinoObject: ...
    @property
    def ActiveObjectNestingLevel(self) -> int: ...
    @property
    def ActiveObjectNestingStack(self) -> Set(RhinoObject): ...
    def Open(self) -> bool: ...
    @property
    def IsOpen(self) -> bool: ...
    def Close(self) -> bool: ...
    def Clone(self, viewport: RhinoViewport) -> DisplayPipeline: ...
    @property
    def DrawingWires(self) -> bool: ...
    @property
    def DrawingGrips(self) -> bool: ...
    @property
    def DrawingSurfaces(self) -> bool: ...
    @property
    def ShadingRequired(self) -> bool: ...
    @ShadingRequired.setter
    def ShadingRequired(self, value: bool) -> None: ...
    @property
    def Viewport(self) -> RhinoViewport: ...
    @property
    def DisplayPipelineAttributes(self) -> DisplayPipelineAttributes: ...
    @property
    def DpiScale(self) -> Single: ...
    def PushModelTransform(self, xform: Transform) -> None: ...
    def PopModelTransform(self) -> None: ...
    def EnableDepthTesting(self, enable: bool) -> None: ...
    def EnableDepthWriting(self, enable: bool) -> None: ...
    def EnableColorWriting(self, enable: bool) -> None: ...
    def EnableLighting(self, enable: bool) -> None: ...
    def GetLights(self) -> Set(Light): ...
    def EnableClippingPlanes(self, enable: bool) -> None: ...
    def AddClippingPlane(self, point: Point3d, normal: Vector3d) -> int: ...
    def RemoveClippingPlane(self, index: int) -> None: ...
    def PushDepthTesting(self, enable: bool) -> None: ...
    def PopDepthTesting(self) -> None: ...
    def PushDepthWriting(self, enable: bool) -> None: ...
    def PopDepthWriting(self) -> None: ...


class DrawEventArgs:
    @property
    def Viewport(self) -> RhinoViewport: ...
    @property
    def Display(self) -> DisplayPipeline: ...
    @property
    def RhinoDoc(self) -> RhinoDoc: ...


class DrawForegroundEventArgs(DrawEventArgs):
    @property
    def WorldAxesDrawn(self) -> bool: ...
    @WorldAxesDrawn.setter
    def WorldAxesDrawn(self, value: bool) -> None: ...
    @property
    def DrawWorldAxes(self) -> bool: ...
    @DrawWorldAxes.setter
    def DrawWorldAxes(self, value: bool) -> None: ...


class CullObjectEventArgs(DrawEventArgs):
    @property
    def RhinoObject(self) -> RhinoObject: ...
    @property
    def RhinoObjectSerialNumber(self) -> UInt32: ...
    @property
    def CullObject(self) -> bool: ...
    @CullObject.setter
    def CullObject(self, value: bool) -> None: ...


class DrawObjectEventArgs(DrawEventArgs):
    @property
    def RhinoObject(self) -> RhinoObject: ...
    @property
    def DrawObject(self) -> bool: ...
    @DrawObject.setter
    def DrawObject(self, value: bool) -> None: ...


class CalculateBoundingBoxEventArgs(DrawEventArgs):
    @property
    def BoundingBox(self) -> BoundingBox: ...
    def IncludeBoundingBox(self, box: BoundingBox) -> None: ...


class InitFrameBufferEventArgs:
    @overload
    def SetFill(self, color: Color) -> None: ...
    @overload
    def SetFill(self, top: Color, bottom: Color) -> None: ...
    @overload
    def SetFill(self, topLeft: Color, bottomLeft: Color, topRight: Color, bottomRight: Color) -> None: ...


class DisplayModeChangedEventArgs:
    @property
    def Viewport(self) -> RhinoViewport: ...
    @property
    def RhinoDoc(self) -> RhinoDoc: ...
    @property
    def OldDisplayModeId(self) -> Guid: ...
    @property
    def ChangedDisplayModeId(self) -> Guid: ...


class ZBufferCapture:
    def __init__(self, viewport: RhinoViewport): ...
    def Dispose(self) -> None: ...
    def SetDisplayMode(self, modeId: Guid) -> None: ...
    def ShowIsocurves(self, on: bool) -> None: ...
    def ShowMeshWires(self, on: bool) -> None: ...
    def ShowCurves(self, on: bool) -> None: ...
    def ShowPoints(self, on: bool) -> None: ...
    def ShowText(self, on: bool) -> None: ...
    def ShowAnnotations(self, on: bool) -> None: ...
    def ShowLights(self, on: bool) -> None: ...
    def HitCount(self) -> int: ...
    def MaxZ(self) -> Single: ...
    def MinZ(self) -> Single: ...
    def ZValueAt(self, x: int, y: int) -> Single: ...
    def WorldPointAt(self, x: int, y: int) -> Point3d: ...
    def GrayscaleDib(self) -> Bitmap: ...


class DisplayPipelineAttributes:
    @PointRadius.setter
    def PointRadius(self, value: Single) -> None: ...
    @property
    def ShowPointClouds(self) -> bool: ...
    @ShowPointClouds.setter
    def ShowPointClouds(self, value: bool) -> None: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def EnglishName(self) -> str: ...
    @EnglishName.setter
    def EnglishName(self, value: str) -> None: ...
    @property
    def LocalName(self) -> str: ...
    @property
    def ContextForDraw(self) -> ContextsForDraw: ...
    @property
    def RealtimeDisplayId(self) -> Guid: ...
    @property
    def RealtimeRenderPasses(self) -> int: ...
    @RealtimeRenderPasses.setter
    def RealtimeRenderPasses(self, value: int) -> None: ...
    @property
    def ShowRealtimeRenderProgressBar(self) -> bool: ...
    @ShowRealtimeRenderProgressBar.setter
    def ShowRealtimeRenderProgressBar(self, value: bool) -> None: ...
    @property
    def StereoRenderContext(self) -> StereoRenderContextEnum: ...
    @StereoRenderContext.setter
    def StereoRenderContext(self, value: StereoRenderContextEnum) -> None: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def Dispose(self) -> None: ...
    @property
    def XrayAllObjects(self) -> bool: ...
    @XrayAllObjects.setter
    def XrayAllObjects(self, value: bool) -> None: ...
    @property
    def IgnoreHighlights(self) -> bool: ...
    @IgnoreHighlights.setter
    def IgnoreHighlights(self, value: bool) -> None: ...
    @property
    def DisableConduits(self) -> bool: ...
    @DisableConduits.setter
    def DisableConduits(self, value: bool) -> None: ...
    @property
    def DisableTransparency(self) -> bool: ...
    @DisableTransparency.setter
    def DisableTransparency(self, value: bool) -> None: ...
    @property
    def ObjectColor(self) -> Color: ...
    @ObjectColor.setter
    def ObjectColor(self, value: Color) -> None: ...
    @property
    def ShowGrips(self) -> bool: ...
    @ShowGrips.setter
    def ShowGrips(self, value: bool) -> None: ...
    @property
    def FillMode(self) -> FrameBufferFillMode: ...
    @FillMode.setter
    def FillMode(self, value: FrameBufferFillMode) -> None: ...
    @property
    def BoundingBoxMode(self) -> BoundingBoxDisplayMode: ...
    @BoundingBoxMode.setter
    def BoundingBoxMode(self, value: BoundingBoxDisplayMode) -> None: ...
    @property
    def ShowClippingPlanes(self) -> bool: ...
    @ShowClippingPlanes.setter
    def ShowClippingPlanes(self, value: bool) -> None: ...
    @property
    def ViewSpecificAttributes(self) -> ViewDisplayAttributes: ...
    @property
    def UseAssignedObjectMaterial(self) -> bool: ...
    @property
    def UseCustomObjectColor(self) -> bool: ...
    @property
    def UseCustomObjectMaterial(self) -> bool: ...
    @property
    def ShowCurves(self) -> bool: ...
    @ShowCurves.setter
    def ShowCurves(self, value: bool) -> None: ...
    @property
    def UseSingleCurveColor(self) -> bool: ...
    @UseSingleCurveColor.setter
    def UseSingleCurveColor(self, value: bool) -> None: ...
    @property
    def CurveThickness(self) -> int: ...
    @CurveThickness.setter
    def CurveThickness(self, value: int) -> None: ...
    @property
    def CurveColor(self) -> Color: ...
    @CurveColor.setter
    def CurveColor(self, value: Color) -> None: ...
    @property
    def ShadingEnabled(self) -> bool: ...
    @ShadingEnabled.setter
    def ShadingEnabled(self, value: bool) -> None: ...
    @property
    def ShadeVertexColors(self) -> bool: ...
    @ShadeVertexColors.setter
    def ShadeVertexColors(self, value: bool) -> None: ...
    @property
    def ShowIsoCurves(self) -> bool: ...
    @ShowIsoCurves.setter
    def ShowIsoCurves(self, value: bool) -> None: ...
    @property
    def ShowSurfaceEdges(self) -> bool: ...
    @ShowSurfaceEdges.setter
    def ShowSurfaceEdges(self, value: bool) -> None: ...
    @property
    def ShowTangentEdges(self) -> bool: ...
    @ShowTangentEdges.setter
    def ShowTangentEdges(self, value: bool) -> None: ...
    @property
    def ShowTangentSeams(self) -> bool: ...
    @ShowTangentSeams.setter
    def ShowTangentSeams(self, value: bool) -> None: ...
    @property
    def SurfaceEdgeThickness(self) -> int: ...
    @SurfaceEdgeThickness.setter
    def SurfaceEdgeThickness(self, value: int) -> None: ...
    @property
    def LockedObjectsDrawBehindOthers(self) -> bool: ...
    @LockedObjectsDrawBehindOthers.setter
    def LockedObjectsDrawBehindOthers(self, value: bool) -> None: ...
    @property
    def MeshSpecificAttributes(self) -> MeshDisplayAttributes: ...
    @property
    def ShowText(self) -> bool: ...
    @ShowText.setter
    def ShowText(self, value: bool) -> None: ...
    @property
    def ShowAnnotations(self) -> bool: ...
    @ShowAnnotations.setter
    def ShowAnnotations(self, value: bool) -> None: ...
    @property
    def ShowLights(self) -> bool: ...
    @ShowLights.setter
    def ShowLights(self, value: bool) -> None: ...
    @property
    def AmbientLightingColor(self) -> Color: ...
    @AmbientLightingColor.setter
    def AmbientLightingColor(self, value: Color) -> None: ...
    @property
    def ShadowColor(self) -> Color: ...
    @ShadowColor.setter
    def ShadowColor(self, value: Color) -> None: ...
    @property
    def CastShadows(self) -> bool: ...
    @CastShadows.setter
    def CastShadows(self, value: bool) -> None: ...
    @property
    def ShowPoints(self) -> bool: ...
    @ShowPoints.setter
    def ShowPoints(self, value: bool) -> None: ...
    @property
    def PointStyle(self) -> PointStyle: ...
    @PointStyle.setter
    def PointStyle(self, value: PointStyle) -> None: ...
    @property
    def PointRadius(self) -> Single: ...


class DisplayMaterial:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, other: DisplayMaterial): ...
    @overload
    def __init__(self, material: Material): ...
    @overload
    def __init__(self, diffuse: Color): ...
    @overload
    def __init__(self, diffuse: Color, transparency: float): ...
    @overload
    def __init__(self, diffuse: Color, specular: Color, ambient: Color, emission: Color, shine: float, transparency: float): ...
    def Dispose(self) -> None: ...
    @property
    def Diffuse(self) -> Color: ...
    @Diffuse.setter
    def Diffuse(self, value: Color) -> None: ...
    @property
    def BackDiffuse(self) -> Color: ...
    @BackDiffuse.setter
    def BackDiffuse(self, value: Color) -> None: ...
    @property
    def Specular(self) -> Color: ...
    @Specular.setter
    def Specular(self, value: Color) -> None: ...
    @property
    def BackSpecular(self) -> Color: ...
    @BackSpecular.setter
    def BackSpecular(self, value: Color) -> None: ...
    @property
    def Ambient(self) -> Color: ...
    @Ambient.setter
    def Ambient(self, value: Color) -> None: ...
    @property
    def BackAmbient(self) -> Color: ...
    @BackAmbient.setter
    def BackAmbient(self, value: Color) -> None: ...
    @property
    def Emission(self) -> Color: ...
    @Emission.setter
    def Emission(self, value: Color) -> None: ...
    @property
    def BackEmission(self) -> Color: ...
    @BackEmission.setter
    def BackEmission(self, value: Color) -> None: ...
    @property
    def Shine(self) -> float: ...
    @Shine.setter
    def Shine(self, value: float) -> None: ...
    @property
    def BackShine(self) -> float: ...
    @BackShine.setter
    def BackShine(self, value: float) -> None: ...
    @property
    def Transparency(self) -> float: ...
    @Transparency.setter
    def Transparency(self, value: float) -> None: ...
    @property
    def BackTransparency(self) -> float: ...
    @BackTransparency.setter
    def BackTransparency(self, value: float) -> None: ...
    @property
    def IsTwoSided(self) -> bool: ...
    @IsTwoSided.setter
    def IsTwoSided(self, value: bool) -> None: ...
    def GetBitmapTexture(self, front: bool) -> Texture: ...
    @overload
    def SetBitmapTexture(self, filename: str, front: bool) -> bool: ...
    @overload
    def SetBitmapTexture(self, texture: Texture, front: bool) -> bool: ...
    def GetBumpTexture(self, front: bool) -> Texture: ...
    @overload
    def SetBumpTexture(self, filename: str, front: bool) -> bool: ...
    @overload
    def SetBumpTexture(self, texture: Texture, front: bool) -> bool: ...
    def GetEnvironmentTexture(self, front: bool) -> Texture: ...
    @overload
    def SetEnvironmentTexture(self, filename: str, front: bool) -> bool: ...
    @overload
    def SetEnvironmentTexture(self, texture: Texture, front: bool) -> bool: ...
    def GetTransparencyTexture(self, front: bool) -> Texture: ...
    @overload
    def SetTransparencyTexture(self, filename: str, front: bool) -> bool: ...
    @overload
    def SetTransparencyTexture(self, texture: Texture, front: bool) -> bool: ...


class RhinoPageView(RhinoView):
    def Duplicate(self, duplicatePageGeometry: bool) -> RhinoPageView: ...
    @property
    def ActiveViewport(self) -> RhinoViewport: ...
    def SetPageAsActive(self) -> None: ...
    @overload
    def SetActiveDetail(self, detailId: Guid) -> bool: ...
    @overload
    def SetActiveDetail(self, detailName: str, compareCase: bool) -> bool: ...
    @property
    def PageIsActive(self) -> bool: ...
    def AddDetailView(self, title: str, corner0: Point2d, corner1: Point2d, initialProjection: DefinedViewportProjection) -> DetailViewObject: ...
    def GetDetailViews(self) -> Set(DetailViewObject): ...
    @property
    def PageNumber(self) -> int: ...
    @PageNumber.setter
    def PageNumber(self, value: int) -> None: ...
    @property
    def PageWidth(self) -> float: ...
    @PageWidth.setter
    def PageWidth(self, value: float) -> None: ...
    @property
    def PageHeight(self) -> float: ...
    @PageHeight.setter
    def PageHeight(self, value: float) -> None: ...
    @property
    def PageName(self) -> str: ...
    @PageName.setter
    def PageName(self, value: str) -> None: ...
    @property
    def PrinterName(self) -> str: ...
    @property
    def PaperName(self) -> str: ...
    def add_PageViewSpaceChange(value: EventHandler) -> None: ...
    def remove_PageViewSpaceChange(value: EventHandler) -> None: ...


class GradientType:
    #None = 0
    Linear = 1
    Radial = 2
    LinearDisabled = 3
    RadialDisabled = 4


class ViewCapture:
    def __init__(self): ...
    @overload
    def CaptureToBitmap(self, sourceView: RhinoView) -> Bitmap: ...
    @property
    def Width(self) -> int: ...
    @Width.setter
    def Width(self, value: int) -> None: ...
    @property
    def Height(self) -> int: ...
    @Height.setter
    def Height(self, value: int) -> None: ...
    @property
    def ScaleScreenItems(self) -> bool: ...
    @ScaleScreenItems.setter
    def ScaleScreenItems(self, value: bool) -> None: ...
    @property
    def DrawGrid(self) -> bool: ...
    @DrawGrid.setter
    def DrawGrid(self, value: bool) -> None: ...
    @property
    def DrawAxes(self) -> bool: ...
    @DrawAxes.setter
    def DrawAxes(self, value: bool) -> None: ...
    @property
    def DrawGridAxes(self) -> bool: ...
    @DrawGridAxes.setter
    def DrawGridAxes(self, value: bool) -> None: ...
    @property
    def TransparentBackground(self) -> bool: ...
    @TransparentBackground.setter
    def TransparentBackground(self, value: bool) -> None: ...
    @property
    def Preview(self) -> bool: ...
    @Preview.setter
    def Preview(self, value: bool) -> None: ...
    @property
    def RealtimeRenderPasses(self) -> int: ...
    @RealtimeRenderPasses.setter
    def RealtimeRenderPasses(self, value: int) -> None: ...
    @overload
    def CaptureToBitmap(settings: ViewCaptureSettings) -> Bitmap: ...
    def CaptureToSvg(settings: ViewCaptureSettings) -> XmlDocument: ...


class ViewCaptureSettings:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, sourceView: RhinoView, mediaSize: Size, dpi: float): ...
    @overload
    def __init__(self, sourcePageView: RhinoPageView, dpi: float): ...
    def SetViewport(self, viewport: RhinoViewport) -> None: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @Document.setter
    def Document(self, value: RhinoDoc) -> None: ...
    @property
    def RasterMode(self) -> bool: ...
    @RasterMode.setter
    def RasterMode(self, value: bool) -> None: ...
    def SetLayout(self, mediaSize: Size, cropRectangle: Rectangle) -> None: ...
    @property
    def MediaSize(self) -> Size: ...
    @property
    def Resolution(self) -> float: ...
    @Resolution.setter
    def Resolution(self, value: float) -> None: ...
    @property
    def CropRectangle(self) -> Rectangle: ...
    def GetMargins(self, lengthUnits: UnitSystem) -> Tuple[bool, float, float, float, float]: ...
    def SetMargins(self, lengthUnits: UnitSystem, left: float, top: float, right: float, bottom: float) -> bool: ...
    def SetOffset(self, lengthUnits: UnitSystem, fromMargin: bool, x: float, y: float) -> None: ...
    def GetOffset(self, lengthUnits: UnitSystem) -> Tuple[bool, float, float]: ...
    @property
    def OffsetAnchor(self) -> AnchorLocation: ...
    @OffsetAnchor.setter
    def OffsetAnchor(self, value: AnchorLocation) -> None: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def DrawBackground(self) -> bool: ...
    @DrawBackground.setter
    def DrawBackground(self, value: bool) -> None: ...
    @property
    def DrawGrid(self) -> bool: ...
    @DrawGrid.setter
    def DrawGrid(self, value: bool) -> None: ...
    @property
    def DrawAxis(self) -> bool: ...
    @DrawAxis.setter
    def DrawAxis(self, value: bool) -> None: ...
    @property
    def DrawLockedObjects(self) -> bool: ...
    @DrawLockedObjects.setter
    def DrawLockedObjects(self, value: bool) -> None: ...
    @property
    def DrawMargins(self) -> bool: ...
    @DrawMargins.setter
    def DrawMargins(self, value: bool) -> None: ...
    @property
    def DrawSelectedObjectsOnly(self) -> bool: ...
    @DrawSelectedObjectsOnly.setter
    def DrawSelectedObjectsOnly(self, value: bool) -> None: ...
    @property
    def DrawClippingPlanes(self) -> bool: ...
    @DrawClippingPlanes.setter
    def DrawClippingPlanes(self, value: bool) -> None: ...
    @property
    def DrawLights(self) -> bool: ...
    @DrawLights.setter
    def DrawLights(self, value: bool) -> None: ...
    @property
    def DrawBackgroundBitmap(self) -> bool: ...
    @DrawBackgroundBitmap.setter
    def DrawBackgroundBitmap(self, value: bool) -> None: ...
    @property
    def DrawWallpaper(self) -> bool: ...
    @DrawWallpaper.setter
    def DrawWallpaper(self, value: bool) -> None: ...
    @property
    def UsePrintWidths(self) -> bool: ...
    @UsePrintWidths.setter
    def UsePrintWidths(self, value: bool) -> None: ...
    @property
    def WireThicknessScale(self) -> float: ...
    @WireThicknessScale.setter
    def WireThicknessScale(self, value: float) -> None: ...
    @property
    def PointSizeMillimeters(self) -> float: ...
    @PointSizeMillimeters.setter
    def PointSizeMillimeters(self, value: float) -> None: ...
    @property
    def ArrowheadSizeMillimeters(self) -> float: ...
    @ArrowheadSizeMillimeters.setter
    def ArrowheadSizeMillimeters(self, value: float) -> None: ...
    @property
    def DefaultPrintWidthMillimeters(self) -> float: ...
    @DefaultPrintWidthMillimeters.setter
    def DefaultPrintWidthMillimeters(self, value: float) -> None: ...
    @property
    def OutputColor(self) -> ColorMode: ...
    @OutputColor.setter
    def OutputColor(self, value: ColorMode) -> None: ...
    def Dispose(self) -> None: ...


class RhinoView:
    def FromRuntimeSerialNumber(serialNumber: UInt32) -> RhinoView: ...
    def GetHashCode(self) -> int: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def RuntimeSerialNumber(self) -> UInt32: ...
    @property
    def Handle(self) -> IntPtr: ...
    @property
    def DisplayPipeline(self) -> DisplayPipeline: ...
    @property
    def RealtimeDisplayMode(self) -> RealtimeDisplayMode: ...
    @property
    def Bounds(self) -> Rectangle: ...
    @property
    def ClientRectangle(self) -> Rectangle: ...
    @property
    def ScreenRectangle(self) -> Rectangle: ...
    @property
    def Size(self) -> Size: ...
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @overload
    def ScreenToClient(self, screenPoint: Point) -> Point: ...
    @overload
    def ScreenToClient(self, screenPoint: Point2d) -> Point2d: ...
    @overload
    def ClientToScreen(self, clientPoint: Point) -> Point: ...
    @overload
    def ClientToScreen(self, clientPoint: Point2d) -> Point2d: ...
    def Redraw(self) -> None: ...
    @property
    def EnableDrawing() -> bool: ...
    @EnableDrawing.setter
    def EnableDrawing(value: bool) -> None: ...
    def SpeedTest(self, frameCount: int, freezeDrawList: bool, direction: int, angleDeltaRadians: float) -> float: ...
    def CreateWireframePreviewImage(self, imagePath: str, size: Size, ignoreHighlights: bool, drawConstructionPlane: bool) -> bool: ...
    def CreateShadedPreviewImage(self, imagePath: str, size: Size, ignoreHighlights: bool, drawConstructionPlane: bool, useGhostedShading: bool) -> bool: ...
    @overload
    def CaptureToBitmap(self) -> Bitmap: ...
    @overload
    def CaptureToBitmap(self, size: Size) -> Bitmap: ...
    @overload
    def CaptureToBitmap(self, size: Size, grid: bool, worldAxes: bool, cplaneAxes: bool) -> Bitmap: ...
    @overload
    def CaptureToBitmap(self, grid: bool, worldAxes: bool, cplaneAxes: bool) -> Bitmap: ...
    @overload
    def CaptureToBitmap(self, size: Size, mode: DisplayModeDescription) -> Bitmap: ...
    @overload
    def CaptureToBitmap(self, mode: DisplayModeDescription) -> Bitmap: ...
    @overload
    def CaptureToBitmap(self, size: Size, attributes: DisplayPipelineAttributes) -> Bitmap: ...
    @overload
    def CaptureToBitmap(self, attributes: DisplayPipelineAttributes) -> Bitmap: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def MainViewport(self) -> RhinoViewport: ...
    @property
    def ActiveViewport(self) -> RhinoViewport: ...
    @property
    def ActiveViewportID(self) -> Guid: ...
    @property
    def TitleVisible(self) -> bool: ...
    @TitleVisible.setter
    def TitleVisible(self, value: bool) -> None: ...
    @property
    def Maximized(self) -> bool: ...
    @Maximized.setter
    def Maximized(self, value: bool) -> None: ...
    @property
    def Floating(self) -> bool: ...
    @Floating.setter
    def Floating(self, value: bool) -> None: ...
    def Close(self) -> bool: ...
    def MouseCaptured(self, bIncludeMovement: bool) -> bool: ...
    def add_Create(value: EventHandler) -> None: ...
    def remove_Create(value: EventHandler) -> None: ...
    def add_Destroy(value: EventHandler) -> None: ...
    def remove_Destroy(value: EventHandler) -> None: ...
    def add_SetActive(value: EventHandler) -> None: ...
    def remove_SetActive(value: EventHandler) -> None: ...
    def add_Rename(value: EventHandler) -> None: ...
    def remove_Rename(value: EventHandler) -> None: ...


class ViewEventArgs:
    @property
    def View(self) -> RhinoView: ...


class PageViewSpaceChangeEventArgs:
    @property
    def PageView(self) -> RhinoPageView: ...
    @property
    def NewActiveDetailId(self) -> Guid: ...
    @property
    def OldActiveDetailId(self) -> Guid: ...


class DefinedViewportProjection:
    #None = 0
    Top = 1
    Bottom = 2
    Left = 3
    Right = 4
    Front = 5
    Back = 6
    Perspective = 7
    TwoPointPerspective = 8


class RhinoViewport:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, other: RhinoViewport): ...
    @overload
    def ChangeToTwoPointPerspectiveProjection(self, lensLength: float) -> bool: ...
    @overload
    def ChangeToTwoPointPerspectiveProjection(self, targetDistance: float, up: Vector3d, lensLength: float) -> bool: ...
    @property
    def CameraLocation(self) -> Point3d: ...
    @property
    def CameraDirection(self) -> Vector3d: ...
    @property
    def CameraUp(self) -> Vector3d: ...
    @CameraUp.setter
    def CameraUp(self, value: Vector3d) -> None: ...
    def GetCameraFrame(self) -> Tuple[bool, Plane]: ...
    @property
    def CameraX(self) -> Vector3d: ...
    @property
    def CameraY(self) -> Vector3d: ...
    @property
    def CameraZ(self) -> Vector3d: ...
    def GetFrustum(self) -> Tuple[bool, float, float, float, float, float, float]: ...
    @property
    def FrustumAspect(self) -> float: ...
    def GetFrustumCenter(self) -> Tuple[bool, Point3d]: ...
    @overload
    def GetDepth(self, point: Point3d) -> Tuple[bool, float]: ...
    @overload
    def GetDepth(self, bbox: BoundingBox) -> Tuple[bool, float, float]: ...
    @overload
    def GetDepth(self, sphere: Sphere) -> Tuple[bool, float, float]: ...
    def GetFrustumNearPlane(self) -> Tuple[bool, Plane]: ...
    def GetFrustumFarPlane(self) -> Tuple[bool, Plane]: ...
    def GetFrustumLeftPlane(self) -> Tuple[bool, Plane]: ...
    def GetFrustumRightPlane(self) -> Tuple[bool, Plane]: ...
    def GetFrustumBottomPlane(self) -> Tuple[bool, Plane]: ...
    def GetFrustumTopPlane(self) -> Tuple[bool, Plane]: ...
    def GetNearRect(self) -> Set(Point3d): ...
    def GetFarRect(self) -> Set(Point3d): ...
    def GetScreenPort(self) -> Tuple[bool, int, int, int, int, int, int]: ...
    @property
    def Bounds(self) -> Rectangle: ...
    @property
    def ScreenPortAspect(self) -> float: ...
    def GetCameraAngle(self) -> Tuple[bool, float, float, float]: ...
    @property
    def Camera35mmLensLength(self) -> float: ...
    @Camera35mmLensLength.setter
    def Camera35mmLensLength(self, value: float) -> None: ...
    def GetTransform(self, sourceSystem: CoordinateSystem, destinationSystem: CoordinateSystem) -> Transform: ...
    def GetFrustumLine(self, screenX: float, screenY: float) -> Tuple[bool, Line]: ...
    def GetWorldToScreenScale(self, pointInFrustum: Point3d) -> Tuple[bool, float]: ...
    def WorldToClient(self, worldPoint: Point3d) -> Point2d: ...
    @overload
    def ClientToScreen(self, clientPoint: Point2d) -> Point: ...
    @overload
    def ClientToScreen(self, clientPoint: Point) -> Point: ...
    def ScreenToClient(self, screenPoint: Point) -> Point: ...
    @overload
    def ClientToWorld(self, clientPoint: Point) -> Line: ...
    @overload
    def ClientToWorld(self, clientPoint: Point2d) -> Line: ...
    @property
    def WallpaperFilename(self) -> str: ...
    @property
    def WallpaperGrayscale(self) -> bool: ...
    @property
    def WallpaperVisible(self) -> bool: ...
    @overload
    def SetWallpaper(self, imageFilename: str, grayscale: bool) -> bool: ...
    @overload
    def SetWallpaper(self, imageFilename: str, grayscale: bool, visible: bool) -> bool: ...
    def ClearTraceImage(self) -> None: ...
    def SetTraceImage(self, bitmapFileName: str, plane: Plane, width: float, height: float, grayscale: bool, filtered: bool) -> bool: ...
    @property
    def ViewportType(self) -> ViewportType: ...
    @property
    def DisplayMode(self) -> DisplayModeDescription: ...
    @DisplayMode.setter
    def DisplayMode(self, value: DisplayModeDescription) -> None: ...
    def Dispose(self) -> None: ...
    def FromId(id: Guid) -> RhinoViewport: ...
    @property
    def ParentView(self) -> RhinoView: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def ChangeCounter(self) -> UInt32: ...
    @overload
    def IsVisible(self, bbox: BoundingBox) -> bool: ...
    @overload
    def IsVisible(self, point: Point3d) -> bool: ...
    @property
    def Size(self) -> Size: ...
    @Size.setter
    def Size(self, value: Size) -> None: ...
    def SetClippingPlanes(self, box: BoundingBox) -> None: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @property
    def CameraTarget(self) -> Point3d: ...
    def SetCameraTarget(self, targetLocation: Point3d, updateCameraLocation: bool) -> None: ...
    def SetCameraLocations(self, targetLocation: Point3d, cameraLocation: Point3d) -> None: ...
    def SetCameraLocation(self, cameraLocation: Point3d, updateTargetLocation: bool) -> None: ...
    def SetCameraDirection(self, cameraDirection: Vector3d, updateTargetLocation: bool) -> None: ...
    def GetCameraExtents(self, points: Iterable[Point3d]) -> BoundingBox: ...
    def ConstructionPlane(self) -> Plane: ...
    def GetConstructionPlane(self) -> ConstructionPlane: ...
    @overload
    def SetConstructionPlane(self, plane: Plane) -> None: ...
    @overload
    def SetConstructionPlane(self, cplane: ConstructionPlane) -> None: ...
    def PushConstructionPlane(self, cplane: ConstructionPlane) -> None: ...
    def PopConstructionPlane(self) -> bool: ...
    def NextConstructionPlane(self) -> bool: ...
    def PreviousConstructionPlane(self) -> bool: ...
    @property
    def ConstructionGridVisible(self) -> bool: ...
    @ConstructionGridVisible.setter
    def ConstructionGridVisible(self, value: bool) -> None: ...
    @property
    def ConstructionAxesVisible(self) -> bool: ...
    @ConstructionAxesVisible.setter
    def ConstructionAxesVisible(self, value: bool) -> None: ...
    @property
    def WorldAxesVisible(self) -> bool: ...
    @WorldAxesVisible.setter
    def WorldAxesVisible(self, value: bool) -> None: ...
    def SetToPlanView(self, planeOrigin: Point3d, planeXaxis: Vector3d, planeYaxis: Vector3d, setConstructionPlane: bool) -> bool: ...
    def SetProjection(self, projection: DefinedViewportProjection, viewName: str, updateConstructionPlane: bool) -> bool: ...
    def PushViewProjection(self) -> None: ...
    def SetViewProjection(self, projection: ViewportInfo, updateTargetLocation: bool) -> bool: ...
    def PopViewProjection(self) -> bool: ...
    def PushViewInfo(self, viewinfo: ViewInfo, includeTraceImage: bool) -> bool: ...
    def NextViewProjection(self) -> bool: ...
    def PreviousViewProjection(self) -> bool: ...
    @property
    def IsPlanView(self) -> bool: ...
    def ZoomExtents(self) -> bool: ...
    def ZoomExtentsSelected(self) -> bool: ...
    def ZoomBoundingBox(self, box: BoundingBox) -> bool: ...
    def MouseRotateAroundTarget(self, mousePreviousPoint: Point, mouseCurrentPoint: Point) -> bool: ...
    def MouseRotateCamera(self, mousePreviousPoint: Point, mouseCurrentPoint: Point) -> bool: ...
    def MouseInOutDolly(self, mousePreviousPoint: Point, mouseCurrentPoint: Point) -> bool: ...
    def MouseMagnify(self, mousePreviousPoint: Point, mouseCurrentPoint: Point) -> bool: ...
    def MouseTilt(self, mousePreviousPoint: Point, mouseCurrentPoint: Point) -> bool: ...
    def MouseAdjustLensLength(self, mousePreviousPoint: Point, mouseCurrentPoint: Point, moveTarget: bool) -> bool: ...
    def MouseDollyZoom(self, mousePreviousPoint: Point, mouseCurrentPoint: Point) -> bool: ...
    def MouseLateralDolly(self, mousePreviousPoint: Point, mouseCurrentPoint: Point) -> bool: ...
    def KeyboardRotate(self, leftRight: bool, angleRadians: float) -> bool: ...
    def KeyboardDolly(self, leftRight: bool, amount: float) -> bool: ...
    def KeyboardDollyInOut(self, amount: float) -> bool: ...
    @overload
    def Magnify(self, magnificationFactor: float, mode: bool) -> bool: ...
    @overload
    def Magnify(self, magnificationFactor: float, mode: bool, fixedScreenPoint: Point) -> bool: ...
    @overload
    def GetPickTransform(self, clientX: int, clientY: int) -> Transform: ...
    @overload
    def GetPickTransform(self, clientPoint: Point) -> Transform: ...
    @overload
    def GetPickTransform(self, clientRectangle: Rectangle) -> Transform: ...
    def SetUserString(self, key: str, value: str) -> bool: ...
    def GetUserString(self, key: str) -> str: ...
    @property
    def UserStringCount(self) -> int: ...
    def GetUserStrings(self) -> NameValueCollection: ...
    def DeleteUserString(self, key: str) -> bool: ...
    def DeleteAllUserStrings(self) -> None: ...
    def GetFrustumBoundingBox(self) -> BoundingBox: ...
    def Rotate(self, angleRadians: float, rotationAxis: Vector3d, rotationCenter: Point3d) -> bool: ...
    @property
    def IsValidCamera(self) -> bool: ...
    @property
    def IsValidFrustum(self) -> bool: ...
    @property
    def IsPerspectiveProjection(self) -> bool: ...
    @property
    def IsTwoPointPerspectiveProjection(self) -> bool: ...
    @property
    def IsParallelProjection(self) -> bool: ...
    def ChangeToParallelProjection(self, symmetricFrustum: bool) -> bool: ...
    @overload
    def ChangeToPerspectiveProjection(self, symmetricFrustum: bool, lensLength: float) -> bool: ...
    @overload
    def ChangeToPerspectiveProjection(self, targetDistance: float, symmetricFrustum: bool, lensLength: float) -> bool: ...


class ViewportType:
    StandardModelingViewport = 0
    PageViewMainViewport = 1
    DetailViewport = 2


class EdgeContinuityMode:
    Distance = 0
    Tangency = 1
    Curvature = 2


class AnalysisStyle:
    Wireframe = 1
    Texture = 2
    FalseColor = 4


class FrameBufferFillMode:
    DefaultColor = 1
    SolidColor = 2
    Gradient2Color = 3
    Gradient4Color = 4
    Bitmap = 5
    Renderer = 6
    Transparent = 7


class BoundingBoxDisplayMode:
    #None = 0
    OnAlways = 1
    OnDuringDynamicDisplay = 2


class ViewDisplayAttributes:
    @property
    def UseDocumentGrid(self) -> bool: ...
    @UseDocumentGrid.setter
    def UseDocumentGrid(self, value: bool) -> None: ...
    @property
    def DrawGrid(self) -> bool: ...
    @DrawGrid.setter
    def DrawGrid(self, value: bool) -> None: ...
    @property
    def DrawGridAxes(self) -> bool: ...
    @DrawGridAxes.setter
    def DrawGridAxes(self, value: bool) -> None: ...
    @property
    def DrawZAxis(self) -> bool: ...
    @DrawZAxis.setter
    def DrawZAxis(self, value: bool) -> None: ...
    @property
    def DrawWorldAxes(self) -> bool: ...
    @DrawWorldAxes.setter
    def DrawWorldAxes(self, value: bool) -> None: ...
    @property
    def ShowGridOnTop(self) -> bool: ...
    @ShowGridOnTop.setter
    def ShowGridOnTop(self, value: bool) -> None: ...
    @property
    def BlendGrid(self) -> bool: ...
    @BlendGrid.setter
    def BlendGrid(self, value: bool) -> None: ...
    @property
    def DrawTransparentGridPlane(self) -> bool: ...
    @DrawTransparentGridPlane.setter
    def DrawTransparentGridPlane(self, value: bool) -> None: ...
    @property
    def WorldAxisColorX(self) -> Color: ...
    @WorldAxisColorX.setter
    def WorldAxisColorX(self, value: Color) -> None: ...
    @property
    def WorldAxisColorY(self) -> Color: ...
    @WorldAxisColorY.setter
    def WorldAxisColorY(self, value: Color) -> None: ...
    @property
    def WorldAxisColorZ(self) -> Color: ...
    @WorldAxisColorZ.setter
    def WorldAxisColorZ(self, value: Color) -> None: ...
    @property
    def HorizontalViewportScale(self) -> float: ...
    @HorizontalViewportScale.setter
    def HorizontalViewportScale(self, value: float) -> None: ...
    @property
    def VerticalViewportScale(self) -> float: ...
    @VerticalViewportScale.setter
    def VerticalViewportScale(self, value: float) -> None: ...


class MeshDisplayAttributes:
    @property
    def HighlightMeshes(self) -> bool: ...
    @HighlightMeshes.setter
    def HighlightMeshes(self, value: bool) -> None: ...
    @property
    def AllMeshWiresColor(self) -> Color: ...
    @AllMeshWiresColor.setter
    def AllMeshWiresColor(self, value: Color) -> None: ...
    @property
    def MeshWireThickness(self) -> int: ...
    @MeshWireThickness.setter
    def MeshWireThickness(self, value: int) -> None: ...
    @property
    def ShowMeshWires(self) -> bool: ...
    @ShowMeshWires.setter
    def ShowMeshWires(self, value: bool) -> None: ...
    @property
    def ShowMeshVertices(self) -> bool: ...
    @ShowMeshVertices.setter
    def ShowMeshVertices(self, value: bool) -> None: ...


class ContextsForDraw:
    Unset = 0
    FilePreview = 1
    ViewCapture = 2
    Printing = 3
    UIPreview = 4
    Mask = 5
    RenderOverlays = 6


class StereoRenderContextEnum:
    NotApplicable = 0
    RenderingLeftEye = 1
    RenderingRightEye = 2
    RenderingBothEyes = 3


class AnchorLocation:
    LowerLeft = 0
    UpperLeft = 1
    LowerRight = 2
    UpperRight = 3
    Center = 4


class ColorMode:
    DisplayColor = 0
    PrintColor = 1
    BlackAndWhite = 2
