from typing import Tuple, Set, Iterable, List


class TextVerticalAlignment:
    Top = 0
    MiddleOfTop = 1
    BottomOfTop = 2
    Middle = 3
    MiddleOfBottom = 4
    Bottom = 5
    BottomOfBoundingBox = 6


class TextHorizontalAlignment:
    Left = 0
    Center = 1
    Right = 2
    Auto = 3


class TextOrientation:
    InPlane = 0
    InView = 1


class DimensionStyle(ModelComponent):
    def __init__(self): ...
    @property
    def TextOrientation(self) -> TextOrientation: ...
    @TextOrientation.setter
    def TextOrientation(self, value: TextOrientation) -> None: ...
    @property
    def LeaderTextOrientation(self) -> TextOrientation: ...
    @LeaderTextOrientation.setter
    def LeaderTextOrientation(self, value: TextOrientation) -> None: ...
    @property
    def DimTextOrientation(self) -> TextOrientation: ...
    @DimTextOrientation.setter
    def DimTextOrientation(self, value: TextOrientation) -> None: ...
    @property
    def DimRadialTextOrientation(self) -> TextOrientation: ...
    @DimRadialTextOrientation.setter
    def DimRadialTextOrientation(self, value: TextOrientation) -> None: ...
    @property
    def LengthResolution(self) -> int: ...
    @LengthResolution.setter
    def LengthResolution(self, value: int) -> None: ...
    @property
    def AlternateLengthResolution(self) -> int: ...
    @AlternateLengthResolution.setter
    def AlternateLengthResolution(self, value: int) -> None: ...
    @property
    def AngleResolution(self) -> int: ...
    @AngleResolution.setter
    def AngleResolution(self, value: int) -> None: ...
    @property
    def ToleranceResolution(self) -> int: ...
    @ToleranceResolution.setter
    def ToleranceResolution(self, value: int) -> None: ...
    @property
    def AlternateToleranceResolution(self) -> int: ...
    @AlternateToleranceResolution.setter
    def AlternateToleranceResolution(self, value: int) -> None: ...
    @property
    def MaskColor(self) -> Color: ...
    @MaskColor.setter
    def MaskColor(self, value: Color) -> None: ...
    @property
    def Prefix(self) -> str: ...
    @Prefix.setter
    def Prefix(self, value: str) -> None: ...
    @property
    def Suffix(self) -> str: ...
    @Suffix.setter
    def Suffix(self, value: str) -> None: ...
    @property
    def AlternatePrefix(self) -> str: ...
    @AlternatePrefix.setter
    def AlternatePrefix(self, value: str) -> None: ...
    @property
    def AlternateSuffix(self) -> str: ...
    @AlternateSuffix.setter
    def AlternateSuffix(self, value: str) -> None: ...
    @property
    def ComponentType(self) -> ModelComponentType: ...
    def IsFieldOverriden(self, field: Field) -> bool: ...
    def SetFieldOverride(self, field: Field) -> None: ...
    def ClearFieldOverride(self, field: Field) -> None: ...
    def ClearAllFieldOverrides(self) -> None: ...
    @property
    def HasFieldOverrides(self) -> bool: ...
    @property
    def IsChild(self) -> bool: ...
    def IsChildOf(self, parentId: Guid) -> bool: ...
    @property
    def ParentId(self) -> Guid: ...
    @ParentId.setter
    def ParentId(self, value: Guid) -> None: ...
    @FixedExtensionLength.setter
    def FixedExtensionLength(self, value: float) -> None: ...
    @property
    def TextRotation(self) -> float: ...
    @TextRotation.setter
    def TextRotation(self, value: float) -> None: ...
    @property
    def StackHeightScale(self) -> float: ...
    @StackHeightScale.setter
    def StackHeightScale(self, value: float) -> None: ...
    @property
    def Roundoff(self) -> float: ...
    @Roundoff.setter
    def Roundoff(self, value: float) -> None: ...
    @property
    def AlternateRoundoff(self) -> float: ...
    @AlternateRoundoff.setter
    def AlternateRoundoff(self, value: float) -> None: ...
    @property
    def AngularRoundoff(self) -> float: ...
    @AngularRoundoff.setter
    def AngularRoundoff(self, value: float) -> None: ...
    @property
    def LeaderLandingLength(self) -> float: ...
    @LeaderLandingLength.setter
    def LeaderLandingLength(self, value: float) -> None: ...
    @property
    def LeaderTextRotationRadians(self) -> float: ...
    @LeaderTextRotationRadians.setter
    def LeaderTextRotationRadians(self, value: float) -> None: ...
    @property
    def LeaderTextRotationDegrees(self) -> float: ...
    @LeaderTextRotationDegrees.setter
    def LeaderTextRotationDegrees(self, value: float) -> None: ...
    @property
    def DimensionScaleValue(self) -> ScaleValue: ...
    @DimensionScaleValue.setter
    def DimensionScaleValue(self, value: ScaleValue) -> None: ...
    @property
    def ScaleLeftLengthMillimeters(self) -> float: ...
    @ScaleLeftLengthMillimeters.setter
    def ScaleLeftLengthMillimeters(self, value: float) -> None: ...
    @property
    def ScaleRightLengthMillimeters(self) -> float: ...
    @ScaleRightLengthMillimeters.setter
    def ScaleRightLengthMillimeters(self, value: float) -> None: ...
    @property
    def FitText(self) -> TextFit: ...
    @FitText.setter
    def FitText(self, value: TextFit) -> None: ...
    @property
    def FitArrow(self) -> ArrowFit: ...
    @FitArrow.setter
    def FitArrow(self, value: ArrowFit) -> None: ...
    @property
    def ForceDimensionLineBetweenExtensionLines(self) -> bool: ...
    @ForceDimensionLineBetweenExtensionLines.setter
    def ForceDimensionLineBetweenExtensionLines(self, value: bool) -> None: ...
    @property
    def DimensionLengthDisplay(self) -> LengthDisplay: ...
    @DimensionLengthDisplay.setter
    def DimensionLengthDisplay(self, value: LengthDisplay) -> None: ...
    @property
    def AlternateDimensionLengthDisplay(self) -> LengthDisplay: ...
    @AlternateDimensionLengthDisplay.setter
    def AlternateDimensionLengthDisplay(self, value: LengthDisplay) -> None: ...
    def DimensionLengthDisplayUnit(self, model_serial_number: UInt32) -> UnitSystem: ...
    def AlternateDimensionLengthDisplayUnit(self, model_serial_number: UInt32) -> UnitSystem: ...
    @property
    def AngleFormat(self) -> AngleDisplayFormat: ...
    @AngleFormat.setter
    def AngleFormat(self, value: AngleDisplayFormat) -> None: ...
    @property
    def ToleranceFormat(self) -> ToleranceDisplayFormat: ...
    @ToleranceFormat.setter
    def ToleranceFormat(self, value: ToleranceDisplayFormat) -> None: ...
    @property
    def MaskColorSource(self) -> MaskType: ...
    @MaskColorSource.setter
    def MaskColorSource(self, value: MaskType) -> None: ...
    @property
    def StackFractionFormat(self) -> StackDisplayFormat: ...
    @StackFractionFormat.setter
    def StackFractionFormat(self, value: StackDisplayFormat) -> None: ...
    @property
    def ZeroSuppress(self) -> ZeroSuppression: ...
    @ZeroSuppress.setter
    def ZeroSuppress(self, value: ZeroSuppression) -> None: ...
    @property
    def AlternateZeroSuppress(self) -> ZeroSuppression: ...
    @AlternateZeroSuppress.setter
    def AlternateZeroSuppress(self, value: ZeroSuppression) -> None: ...
    @property
    def ToleranceZeroSuppress(self) -> ZeroSuppression: ...
    @ToleranceZeroSuppress.setter
    def ToleranceZeroSuppress(self, value: ZeroSuppression) -> None: ...
    @property
    def AngleZeroSuppress(self) -> ZeroSuppression: ...
    @AngleZeroSuppress.setter
    def AngleZeroSuppress(self, value: ZeroSuppression) -> None: ...
    @property
    def ArrowType1(self) -> ArrowType: ...
    @ArrowType1.setter
    def ArrowType1(self, value: ArrowType) -> None: ...
    @property
    def ArrowType2(self) -> ArrowType: ...
    @ArrowType2.setter
    def ArrowType2(self, value: ArrowType) -> None: ...
    @property
    def LeaderArrowType(self) -> ArrowType: ...
    @LeaderArrowType.setter
    def LeaderArrowType(self, value: ArrowType) -> None: ...
    @property
    def TextMoveLeader(self) -> int: ...
    @TextMoveLeader.setter
    def TextMoveLeader(self, value: int) -> None: ...
    @property
    def ArcLengthSymbol(self) -> int: ...
    @ArcLengthSymbol.setter
    def ArcLengthSymbol(self, value: int) -> None: ...
    @property
    def CenterMarkType(self) -> CenterMarkStyle: ...
    @CenterMarkType.setter
    def CenterMarkType(self, value: CenterMarkStyle) -> None: ...
    @property
    def LeaderContentAngleType(self) -> LeaderContentAngleStyle: ...
    @LeaderContentAngleType.setter
    def LeaderContentAngleType(self, value: LeaderContentAngleStyle) -> None: ...
    @property
    def TextVerticalAlignment(self) -> TextVerticalAlignment: ...
    @TextVerticalAlignment.setter
    def TextVerticalAlignment(self, value: TextVerticalAlignment) -> None: ...
    @property
    def TextHorizontalAlignment(self) -> TextHorizontalAlignment: ...
    @TextHorizontalAlignment.setter
    def TextHorizontalAlignment(self, value: TextHorizontalAlignment) -> None: ...
    @property
    def LeaderTextVerticalAlignment(self) -> TextVerticalAlignment: ...
    @LeaderTextVerticalAlignment.setter
    def LeaderTextVerticalAlignment(self, value: TextVerticalAlignment) -> None: ...
    @property
    def LeaderTextHorizontalAlignment(self) -> TextHorizontalAlignment: ...
    @LeaderTextHorizontalAlignment.setter
    def LeaderTextHorizontalAlignment(self, value: TextHorizontalAlignment) -> None: ...
    @property
    def DimTextLocation(self) -> TextLocation: ...
    @DimTextLocation.setter
    def DimTextLocation(self, value: TextLocation) -> None: ...
    @property
    def DimRadialTextLocation(self) -> TextLocation: ...
    @DimRadialTextLocation.setter
    def DimRadialTextLocation(self, value: TextLocation) -> None: ...
    @property
    def LeaderCurveType(self) -> LeaderCurveStyle: ...
    @LeaderCurveType.setter
    def LeaderCurveType(self, value: LeaderCurveStyle) -> None: ...
    @property
    def DimTextAngleType(self) -> LeaderContentAngleStyle: ...
    @DimTextAngleType.setter
    def DimTextAngleType(self, value: LeaderContentAngleStyle) -> None: ...
    @property
    def DimRadialTextAngleType(self) -> LeaderContentAngleStyle: ...
    @DimRadialTextAngleType.setter
    def DimRadialTextAngleType(self, value: LeaderContentAngleStyle) -> None: ...
    @overload
    def Duplicate(self) -> DimensionStyle: ...
    @overload
    def Duplicate(self, newName: str, newId: Guid, newParentId: Guid) -> DimensionStyle: ...
    def CopyFrom(self, source: DimensionStyle) -> None: ...
    @property
    def IsReference(self) -> bool: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def Font(self) -> Font: ...
    @Font.setter
    def Font(self, value: Font) -> None: ...
    def CreatePreviewBitmap(self, width: int, height: int) -> Bitmap: ...
    def ScaleLengthValues(self, scale: float) -> None: ...
    @property
    def ArrowBlockId1(self) -> Guid: ...
    @ArrowBlockId1.setter
    def ArrowBlockId1(self, value: Guid) -> None: ...
    @property
    def ArrowBlockId2(self) -> Guid: ...
    @ArrowBlockId2.setter
    def ArrowBlockId2(self, value: Guid) -> None: ...
    @property
    def LeaderArrowBlockId(self) -> Guid: ...
    @LeaderArrowBlockId.setter
    def LeaderArrowBlockId(self, value: Guid) -> None: ...
    @property
    def SuppressExtension1(self) -> bool: ...
    @SuppressExtension1.setter
    def SuppressExtension1(self, value: bool) -> None: ...
    @property
    def SuppressExtension2(self) -> bool: ...
    @SuppressExtension2.setter
    def SuppressExtension2(self, value: bool) -> None: ...
    @property
    def SuppressArrow1(self) -> bool: ...
    @SuppressArrow1.setter
    def SuppressArrow1(self, value: bool) -> None: ...
    @property
    def SuppressArrow2(self) -> bool: ...
    @SuppressArrow2.setter
    def SuppressArrow2(self, value: bool) -> None: ...
    @property
    def AlternateUnitsDisplay(self) -> bool: ...
    @AlternateUnitsDisplay.setter
    def AlternateUnitsDisplay(self, value: bool) -> None: ...
    @property
    def AlternateBelowLine(self) -> bool: ...
    @AlternateBelowLine.setter
    def AlternateBelowLine(self, value: bool) -> None: ...
    @property
    def DrawTextMask(self) -> bool: ...
    @DrawTextMask.setter
    def DrawTextMask(self, value: bool) -> None: ...
    @property
    def FixedExtensionOn(self) -> bool: ...
    @FixedExtensionOn.setter
    def FixedExtensionOn(self, value: bool) -> None: ...
    @property
    def LeaderHasLanding(self) -> bool: ...
    @LeaderHasLanding.setter
    def LeaderHasLanding(self, value: bool) -> None: ...
    @property
    def DrawForward(self) -> bool: ...
    @DrawForward.setter
    def DrawForward(self, value: bool) -> None: ...
    @property
    def TextUnderlined(self) -> bool: ...
    @TextUnderlined.setter
    def TextUnderlined(self, value: bool) -> None: ...
    @property
    def MaskOffset(self) -> float: ...
    @MaskOffset.setter
    def MaskOffset(self, value: float) -> None: ...
    @property
    def ExtensionLineExtension(self) -> float: ...
    @ExtensionLineExtension.setter
    def ExtensionLineExtension(self, value: float) -> None: ...
    @property
    def ExtensionLineOffset(self) -> float: ...
    @ExtensionLineOffset.setter
    def ExtensionLineOffset(self, value: float) -> None: ...
    @property
    def DimensionLineExtension(self) -> float: ...
    @DimensionLineExtension.setter
    def DimensionLineExtension(self, value: float) -> None: ...
    @property
    def ArrowLength(self) -> float: ...
    @ArrowLength.setter
    def ArrowLength(self, value: float) -> None: ...
    @property
    def LeaderArrowLength(self) -> float: ...
    @LeaderArrowLength.setter
    def LeaderArrowLength(self, value: float) -> None: ...
    @property
    def CentermarkSize(self) -> float: ...
    @CentermarkSize.setter
    def CentermarkSize(self, value: float) -> None: ...
    @property
    def TextGap(self) -> float: ...
    @TextGap.setter
    def TextGap(self, value: float) -> None: ...
    @property
    def TextHeight(self) -> float: ...
    @TextHeight.setter
    def TextHeight(self, value: float) -> None: ...
    @property
    def LengthFactor(self) -> float: ...
    @LengthFactor.setter
    def LengthFactor(self, value: float) -> None: ...
    @property
    def AlternateLengthFactor(self) -> float: ...
    @AlternateLengthFactor.setter
    def AlternateLengthFactor(self, value: float) -> None: ...
    @property
    def ToleranceUpperValue(self) -> float: ...
    @ToleranceUpperValue.setter
    def ToleranceUpperValue(self, value: float) -> None: ...
    @property
    def ToleranceLowerValue(self) -> float: ...
    @ToleranceLowerValue.setter
    def ToleranceLowerValue(self, value: float) -> None: ...
    @property
    def ToleranceHeightScale(self) -> float: ...
    @ToleranceHeightScale.setter
    def ToleranceHeightScale(self, value: float) -> None: ...
    @property
    def BaselineSpacing(self) -> float: ...
    @BaselineSpacing.setter
    def BaselineSpacing(self, value: float) -> None: ...
    @property
    def DimensionScale(self) -> float: ...
    @DimensionScale.setter
    def DimensionScale(self, value: float) -> None: ...
    @property
    def FixedExtensionLength(self) -> float: ...


class Font:
    @overload
    def __init__(self, familyName: str): ...
    @overload
    def __init__(self, familyName: str, weight: FontWeight, style: FontStyle, underlined: bool, strikethrough: bool): ...
    def FromQuartetProperties(quartetName: str, bold: bool, italic: bool) -> Font: ...
    def AvailableFontFaceNames() -> Set(str): ...
    @overload
    def InstalledFonts() -> Set(Font): ...
    @overload
    def InstalledFonts(familyName: str) -> Set(Font): ...
    def InstalledFontsAsQuartets() -> Set(FontQuartet): ...
    @property
    def QuartetName(self) -> str: ...
    @property
    def EnglishQuartetName(self) -> str: ...
    @property
    def FaceName(self) -> str: ...
    @property
    def EnglishFaceName(self) -> str: ...
    @property
    def LogfontName(self) -> str: ...
    @property
    def FamilyPlusFaceName(self) -> str: ...
    @property
    def PostScriptName(self) -> str: ...
    @property
    def RichTextFontName(self) -> str: ...
    @property
    def Description(self) -> str: ...
    @property
    def Bold(self) -> bool: ...
    @property
    def Italic(self) -> bool: ...
    @property
    def Underlined(self) -> bool: ...
    @property
    def Strikeout(self) -> bool: ...
    @property
    def IsEngravingFont(self) -> bool: ...
    @property
    def IsSymbolFont(self) -> bool: ...
    @property
    def IsSingleStrokeFont(self) -> bool: ...
    @property
    def IsSimulated(self) -> bool: ...
    @property
    def Style(self) -> FontStyle: ...
    @property
    def Weight(self) -> FontWeight: ...
    @property
    def PointSize(self) -> float: ...
    @property
    def FamilyName(self) -> str: ...
    @property
    def EnglishFamilyName(self) -> str: ...


class ModelComponentType:
    Unset = 0
    Image = 1
    TextureMapping = 2
    RenderMaterial = 3
    LinePattern = 4
    Layer = 5
    Group = 6
    TextStyle = 7
    DimStyle = 8
    RenderLight = 9
    HatchPattern = 10
    InstanceDefinition = 11
    ModelGeometry = 12
    HistoryRecord = 13
    Mixed = 254


class ConstructionPlane:
    def __init__(self): ...
    @property
    def Plane(self) -> Plane: ...
    @Plane.setter
    def Plane(self, value: Plane) -> None: ...
    @property
    def GridSpacing(self) -> float: ...
    @GridSpacing.setter
    def GridSpacing(self, value: float) -> None: ...
    @property
    def SnapSpacing(self) -> float: ...
    @SnapSpacing.setter
    def SnapSpacing(self, value: float) -> None: ...
    @property
    def GridLineCount(self) -> int: ...
    @GridLineCount.setter
    def GridLineCount(self, value: int) -> None: ...
    @property
    def ThickLineFrequency(self) -> int: ...
    @ThickLineFrequency.setter
    def ThickLineFrequency(self, value: int) -> None: ...
    @property
    def DepthBuffered(self) -> bool: ...
    @DepthBuffered.setter
    def DepthBuffered(self, value: bool) -> None: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @property
    def ShowGrid(self) -> bool: ...
    @ShowGrid.setter
    def ShowGrid(self, value: bool) -> None: ...
    @property
    def ShowAxes(self) -> bool: ...
    @ShowAxes.setter
    def ShowAxes(self, value: bool) -> None: ...
    @property
    def ShowZAxis(self) -> bool: ...
    @ShowZAxis.setter
    def ShowZAxis(self, value: bool) -> None: ...
    @property
    def ThinLineColor(self) -> Color: ...
    @ThinLineColor.setter
    def ThinLineColor(self, value: Color) -> None: ...
    @property
    def ThickLineColor(self) -> Color: ...
    @ThickLineColor.setter
    def ThickLineColor(self, value: Color) -> None: ...
    @property
    def GridXColor(self) -> Color: ...
    @GridXColor.setter
    def GridXColor(self, value: Color) -> None: ...
    @property
    def GridYColor(self) -> Color: ...
    @GridYColor.setter
    def GridYColor(self, value: Color) -> None: ...
    @property
    def GridZColor(self) -> Color: ...
    @GridZColor.setter
    def GridZColor(self, value: Color) -> None: ...


class ViewInfoFocalBlurModes:
    #None = 0
    Automatic = 1
    Manual = 2


class ViewInfo:
    @overload
    def __init__(self, rhinoViewPort: RhinoViewport): ...
    @overload
    def __init__(self, docRuntimeSerialNumber: UInt32): ...
    def Dispose(self) -> None: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @property
    def WallpaperFilename(self) -> str: ...
    @property
    def ShowWallpaperInGrayScale(self) -> bool: ...
    @property
    def WallpaperHidden(self) -> bool: ...
    @property
    def FocalBlurDistance(self) -> float: ...
    @FocalBlurDistance.setter
    def FocalBlurDistance(self, value: float) -> None: ...
    @property
    def FocalBlurAperture(self) -> float: ...
    @FocalBlurAperture.setter
    def FocalBlurAperture(self, value: float) -> None: ...
    @property
    def FocalBlurJitter(self) -> float: ...
    @FocalBlurJitter.setter
    def FocalBlurJitter(self, value: float) -> None: ...
    @property
    def FocalBlurSampleCount(self) -> UInt32: ...
    @FocalBlurSampleCount.setter
    def FocalBlurSampleCount(self, value: UInt32) -> None: ...
    @property
    def FocalBlurMode(self) -> ViewInfoFocalBlurModes: ...
    @FocalBlurMode.setter
    def FocalBlurMode(self, value: ViewInfoFocalBlurModes) -> None: ...
    @property
    def Viewport(self) -> ViewportInfo: ...


class EarthAnchorPoint:
    def __init__(self): ...
    def Dispose(self) -> None: ...
    @property
    def EarthBasepointLatitude(self) -> float: ...
    @EarthBasepointLatitude.setter
    def EarthBasepointLatitude(self, value: float) -> None: ...
    @property
    def EarthBasepointLongitude(self) -> float: ...
    @EarthBasepointLongitude.setter
    def EarthBasepointLongitude(self, value: float) -> None: ...
    @property
    def EarthBasepointElevation(self) -> float: ...
    @EarthBasepointElevation.setter
    def EarthBasepointElevation(self, value: float) -> None: ...
    @property
    def EarthBasepointElevationZero(self) -> BasepointZero: ...
    @EarthBasepointElevationZero.setter
    def EarthBasepointElevationZero(self, value: BasepointZero) -> None: ...
    @property
    def ModelBasePoint(self) -> Point3d: ...
    @ModelBasePoint.setter
    def ModelBasePoint(self, value: Point3d) -> None: ...
    @property
    def ModelNorth(self) -> Vector3d: ...
    @ModelNorth.setter
    def ModelNorth(self, value: Vector3d) -> None: ...
    @property
    def ModelEast(self) -> Vector3d: ...
    @ModelEast.setter
    def ModelEast(self, value: Vector3d) -> None: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @property
    def Description(self) -> str: ...
    @Description.setter
    def Description(self, value: str) -> None: ...
    def EarthLocationIsSet(self) -> bool: ...
    def GetModelCompass(self) -> Plane: ...
    def GetModelToEarthTransform(self, modelUnitSystem: UnitSystem) -> Transform: ...
    def GetEarthAnchorPlane(self) -> Tuple[Plane, Vector3d]: ...


class BasepointZero:
    GroundLevel = 0
    MeanSeaLevel = 1
    CenterOfEarth = 2


class AnimationProperties:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, source: AnimationProperties): ...
    def Dispose(self) -> None: ...
    @property
    def CaptureType(self) -> CaptureTypes: ...
    @CaptureType.setter
    def CaptureType(self, value: CaptureTypes) -> None: ...
    @FileExtension.setter
    def FileExtension(self, value: str) -> None: ...
    @property
    def FileExtension(self) -> str: ...
    @CaptureMethod.setter
    def CaptureMethod(self, value: str) -> None: ...
    @property
    def CaptureMethod(self) -> str: ...
    @ViewportName.setter
    def ViewportName(self, value: str) -> None: ...
    @property
    def ViewportName(self) -> str: ...
    @AnimationName.setter
    def AnimationName(self, value: str) -> None: ...
    @property
    def AnimationName(self) -> str: ...
    @DisplayMode.setter
    def DisplayMode(self, value: Guid) -> None: ...
    @property
    def DisplayMode(self) -> Guid: ...
    @CameraPoints.setter
    def CameraPoints(self, value: Set(Point3d)) -> None: ...
    @property
    def CameraPoints(self) -> Set(Point3d): ...
    @TargetPoints.setter
    def TargetPoints(self, value: Set(Point3d)) -> None: ...
    @property
    def TargetPoints(self) -> Set(Point3d): ...
    @FrameCount.setter
    def FrameCount(self, value: int) -> None: ...
    @property
    def FrameCount(self) -> int: ...
    @CameraPathId.setter
    def CameraPathId(self, value: Guid) -> None: ...
    @property
    def CameraPathId(self) -> Guid: ...
    @TargetPathId.setter
    def TargetPathId(self, value: Guid) -> None: ...
    @property
    def TargetPathId(self) -> Guid: ...
    @Latitude.setter
    def Latitude(self, value: float) -> None: ...
    @property
    def Latitude(self) -> float: ...
    @Longitude.setter
    def Longitude(self, value: float) -> None: ...
    @property
    def Longitude(self) -> float: ...
    @NorthAngle.setter
    def NorthAngle(self, value: float) -> None: ...
    @property
    def NorthAngle(self) -> float: ...
    @StartDay.setter
    def StartDay(self, value: int) -> None: ...
    @property
    def StartDay(self) -> int: ...
    @StartMonth.setter
    def StartMonth(self, value: int) -> None: ...
    @property
    def StartMonth(self) -> int: ...
    @StartYear.setter
    def StartYear(self, value: int) -> None: ...
    @property
    def StartYear(self) -> int: ...
    @StartHour.setter
    def StartHour(self, value: int) -> None: ...
    @property
    def StartHour(self) -> int: ...
    @StartMinutes.setter
    def StartMinutes(self, value: int) -> None: ...
    @property
    def StartMinutes(self) -> int: ...
    @StartSeconds.setter
    def StartSeconds(self, value: int) -> None: ...
    @property
    def StartSeconds(self) -> int: ...
    @EndDay.setter
    def EndDay(self, value: int) -> None: ...
    @property
    def EndDay(self) -> int: ...
    @EndMonth.setter
    def EndMonth(self, value: int) -> None: ...
    @property
    def EndMonth(self) -> int: ...
    @EndYear.setter
    def EndYear(self, value: int) -> None: ...
    @property
    def EndYear(self) -> int: ...
    @EndHour.setter
    def EndHour(self, value: int) -> None: ...
    @property
    def EndHour(self) -> int: ...
    @EndMinutes.setter
    def EndMinutes(self, value: int) -> None: ...
    @property
    def EndMinutes(self) -> int: ...
    @EndSeconds.setter
    def EndSeconds(self, value: int) -> None: ...
    @property
    def EndSeconds(self) -> int: ...
    @DaysBetweenFrames.setter
    def DaysBetweenFrames(self, value: int) -> None: ...
    @property
    def DaysBetweenFrames(self) -> int: ...
    @MinutesBetweenFrames.setter
    def MinutesBetweenFrames(self, value: int) -> None: ...
    @property
    def MinutesBetweenFrames(self) -> int: ...
    @LightIndex.setter
    def LightIndex(self, value: int) -> None: ...
    @property
    def LightIndex(self) -> int: ...
    @FolderName.setter
    def FolderName(self, value: str) -> None: ...
    @property
    def FolderName(self) -> str: ...
    @Images.setter
    def Images(self, value: Set(str)) -> None: ...
    @property
    def Images(self) -> Set(str): ...
    @Dates.setter
    def Dates(self, value: Set(str)) -> None: ...
    @property
    def Dates(self) -> Set(str): ...
    @RenderFull.setter
    def RenderFull(self, value: bool) -> None: ...
    @property
    def RenderFull(self) -> bool: ...
    @RenderPreview.setter
    def RenderPreview(self, value: bool) -> None: ...
    @property
    def RenderPreview(self) -> bool: ...


class ModelComponent(CommonObject):
    def DataCRC(self, currentRemainder: UInt32) -> UInt32: ...
    @property
    def IsSystemComponent(self) -> bool: ...
    @property
    def Id(self) -> Guid: ...
    @Id.setter
    def Id(self, value: Guid) -> None: ...
    def ClearId(self) -> None: ...
    @property
    def HasId(self) -> bool: ...
    @property
    def IdIsLocked(self) -> bool: ...
    def LockId(self) -> None: ...
    @property
    def Index(self) -> int: ...
    @Index.setter
    def Index(self, value: int) -> None: ...
    def ClearIndex(self) -> None: ...
    @property
    def HasIndex(self) -> bool: ...
    @property
    def IndexIsLocked(self) -> bool: ...
    def LockIndex(self) -> None: ...
    @property
    def ComponentStatus(self) -> ComponentStatus: ...
    @ComponentStatus.setter
    def ComponentStatus(self, value: ComponentStatus) -> None: ...
    @property
    def IsComponentStatusLocked(self) -> bool: ...
    def IsValidComponentName(name: str) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    def ClearName(self) -> None: ...
    @property
    def HasName(self) -> bool: ...
    @property
    def NameIsLocked(self) -> bool: ...
    def LockName(self) -> None: ...
    @property
    def DeletedName(self) -> str: ...
    @property
    def ModelSerialNumber(self) -> UInt32: ...
    @property
    def ReferenceModelSerialNumber(self) -> UInt32: ...
    @property
    def InstanceDefinitionModelSerialNumber(self) -> UInt32: ...
    @property
    def ComponentType(self) -> ModelComponentType: ...
    def ToString(self) -> str: ...
    def ModelComponentTypeRequiresUniqueName(type: ModelComponentType) -> bool: ...
    def ModelComponentTypeIgnoresCase(type: ModelComponentType) -> bool: ...
    def ModelComponentTypeIncludesParent(type: ModelComponentType) -> bool: ...


class TextureType:
    #None = 0
    Bitmap = 1
    Diffuse = 1
    PBR_BaseColor = 1
    Bump = 2
    Opacity = 3
    Transparency = 3
    Emap = 4
    PBR_Subsurface = 10
    PBR_SubsurfaceScattering = 11
    PBR_SubsurfaceScatteringRadius = 12
    PBR_Metallic = 13
    PBR_Specular = 14
    PBR_SpecularTint = 15
    PBR_Roughness = 16
    PBR_Anisotropic = 17
    PBR_Anisotropic_Rotation = 18
    PBR_Sheen = 19
    PBR_SheenTint = 20
    PBR_Clearcoat = 21
    PBR_ClearcoatRoughness = 22
    PBR_OpacityIor = 23
    PBR_OpacityRoughness = 24
    PBR_Emission = 25
    PBR_AmbientOcclusion = 26
    PBR_Displacement = 28
    PBR_ClearcoatBump = 29


class TextureCombineMode:
    #None = 0
    Modulate = 1
    Decal = 2
    Blend = 3


class TextureUvwWrapping:
    Repeat = 0
    Clamp = 1


class Texture(CommonObject):
    def __init__(self): ...
    @property
    def FileName(self) -> str: ...
    @FileName.setter
    def FileName(self, value: str) -> None: ...
    @property
    def FileReference(self) -> FileReference: ...
    @FileReference.setter
    def FileReference(self, value: FileReference) -> None: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @property
    def TextureType(self) -> TextureType: ...
    @TextureType.setter
    def TextureType(self, value: TextureType) -> None: ...
    @property
    def MappingChannelId(self) -> int: ...
    @property
    def TextureCombineMode(self) -> TextureCombineMode: ...
    @TextureCombineMode.setter
    def TextureCombineMode(self, value: TextureCombineMode) -> None: ...
    @property
    def WrapU(self) -> TextureUvwWrapping: ...
    @WrapU.setter
    def WrapU(self, value: TextureUvwWrapping) -> None: ...
    @property
    def WrapV(self) -> TextureUvwWrapping: ...
    @WrapV.setter
    def WrapV(self, value: TextureUvwWrapping) -> None: ...
    @property
    def WrapW(self) -> TextureUvwWrapping: ...
    @WrapW.setter
    def WrapW(self, value: TextureUvwWrapping) -> None: ...
    @property
    def ApplyUvwTransform(self) -> bool: ...
    @ApplyUvwTransform.setter
    def ApplyUvwTransform(self, value: bool) -> None: ...
    @property
    def UvwTransform(self) -> Transform: ...
    @UvwTransform.setter
    def UvwTransform(self, value: Transform) -> None: ...
    def GetAlphaBlendValues(self) -> Tuple[float, float, float, float, float]: ...
    def SetAlphaBlendValues(self, constant: float, a0: float, a1: float, a2: float, a3: float) -> None: ...
    def SetRGBBlendValues(self, color: Color, a0: float, a1: float, a2: float, a3: float) -> None: ...


class ViewportInfo(CommonObject):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, other: ViewportInfo): ...
    @overload
    def __init__(self, rhinoViewport: RhinoViewport): ...
    @property
    def ScreenPortAspect(self) -> float: ...
    def GetCameraAngles(self) -> Tuple[bool, float, float, float]: ...
    @property
    def CameraAngle(self) -> float: ...
    @CameraAngle.setter
    def CameraAngle(self, value: float) -> None: ...
    @property
    def Camera35mmLensLength(self) -> float: ...
    @Camera35mmLensLength.setter
    def Camera35mmLensLength(self, value: float) -> None: ...
    def GetXform(self, sourceSystem: CoordinateSystem, destinationSystem: CoordinateSystem) -> Transform: ...
    @overload
    def GetFrustumLine(self, screenX: float, screenY: float) -> Line: ...
    @overload
    def GetFrustumLine(self, screenPoint: Point) -> Line: ...
    @overload
    def GetFrustumLine(self, screenPoint: PointF) -> Line: ...
    def GetWorldToScreenScale(self, pointInFrustum: Point3d) -> float: ...
    @overload
    def Extents(self, halfViewAngleRadians: float, bbox: BoundingBox) -> bool: ...
    @overload
    def Extents(self, halfViewAngleRadians: float, sphere: Sphere) -> bool: ...
    @overload
    def ZoomToScreenRect(self, left: int, top: int, right: int, bottom: int) -> bool: ...
    @overload
    def ZoomToScreenRect(self, windowRectangle: Rectangle) -> bool: ...
    def DollyCamera(self, dollyVector: Vector3d) -> bool: ...
    @overload
    def GetDollyCameraVector(self, screenX0: int, screenY0: int, screenX1: int, screenY1: int, projectionPlaneDistance: float) -> Vector3d: ...
    @overload
    def GetDollyCameraVector(self, screen0: Point, screen1: Point, projectionPlaneDistance: float) -> Vector3d: ...
    def DollyFrustum(self, dollyDistance: float) -> bool: ...
    @overload
    def DollyExtents(self, geometry: Iterable[GeometryBase], border: float) -> bool: ...
    @overload
    def DollyExtents(self, cameraCoordinateBoundingBox: BoundingBox, border: float) -> bool: ...
    @property
    def ViewScale(self) -> SizeF: ...
    @ViewScale.setter
    def ViewScale(self, value: SizeF) -> None: ...
    def FrustumCenterPoint(self, targetDistance: float) -> Point3d: ...
    @property
    def TargetPoint(self) -> Point3d: ...
    @TargetPoint.setter
    def TargetPoint(self, value: Point3d) -> None: ...
    def TargetDistance(self, useFrustumCenterFallback: bool) -> float: ...
    @property
    def PerspectiveMinNearOverFar(self) -> float: ...
    @PerspectiveMinNearOverFar.setter
    def PerspectiveMinNearOverFar(self, value: float) -> None: ...
    @property
    def PerspectiveMinNearDist(self) -> float: ...
    @PerspectiveMinNearDist.setter
    def PerspectiveMinNearDist(self, value: float) -> None: ...
    @property
    def Id(self) -> Guid: ...
    def TransformCamera(self, xform: Transform) -> bool: ...
    def RotateCamera(self, rotationAngleRadians: float, rotationAxis: Vector3d, rotationCenter: Point3d) -> bool: ...
    def CalculateCameraRotationAngle(direction: Vector3d, up: Vector3d) -> float: ...
    def CalculateCameraUpDirection(location: Point3d, direction: Vector3d, angle: float) -> Vector3d: ...
    @property
    def IsValidCamera(self) -> bool: ...
    @property
    def IsValidFrustum(self) -> bool: ...
    @property
    def IsPerspectiveProjection(self) -> bool: ...
    @IsPerspectiveProjection.setter
    def IsPerspectiveProjection(self, value: bool) -> None: ...
    @property
    def IsParallelProjection(self) -> bool: ...
    @IsParallelProjection.setter
    def IsParallelProjection(self, value: bool) -> None: ...
    @property
    def IsTwoPointPerspectiveProjection(self) -> bool: ...
    def ChangeToParallelProjection(self, symmetricFrustum: bool) -> bool: ...
    def ChangeToPerspectiveProjection(self, targetDistance: float, symmetricFrustum: bool, lensLength: float) -> bool: ...
    def ChangeToTwoPointPerspectiveProjection(self, targetDistance: float, up: Vector3d, lensLength: float) -> bool: ...
    @property
    def CameraLocation(self) -> Point3d: ...
    def SetCameraLocation(self, location: Point3d) -> bool: ...
    @property
    def CameraDirection(self) -> Vector3d: ...
    def SetCameraDirection(self, direction: Vector3d) -> bool: ...
    @property
    def CameraUp(self) -> Vector3d: ...
    def SetCameraUp(self, up: Vector3d) -> bool: ...
    @property
    def IsCameraLocationLocked(self) -> bool: ...
    @IsCameraLocationLocked.setter
    def IsCameraLocationLocked(self, value: bool) -> None: ...
    @property
    def IsCameraDirectionLocked(self) -> bool: ...
    @IsCameraDirectionLocked.setter
    def IsCameraDirectionLocked(self, value: bool) -> None: ...
    @property
    def IsCameraUpLocked(self) -> bool: ...
    @IsCameraUpLocked.setter
    def IsCameraUpLocked(self, value: bool) -> None: ...
    @property
    def IsFrustumLeftRightSymmetric(self) -> bool: ...
    @IsFrustumLeftRightSymmetric.setter
    def IsFrustumLeftRightSymmetric(self, value: bool) -> None: ...
    @property
    def IsFrustumTopBottomSymmetric(self) -> bool: ...
    @IsFrustumTopBottomSymmetric.setter
    def IsFrustumTopBottomSymmetric(self, value: bool) -> None: ...
    def UnlockCamera(self) -> None: ...
    def UnlockFrustumSymmetry(self) -> None: ...
    def GetCameraFrame(self) -> Tuple[bool, Point3d, Vector3d, Vector3d, Vector3d]: ...
    @property
    def CameraX(self) -> Vector3d: ...
    @property
    def CameraY(self) -> Vector3d: ...
    @property
    def CameraZ(self) -> Vector3d: ...
    @property
    def DefaultCameraDirection() -> Vector3d: ...
    def SetFrustum(self, left: float, right: float, bottom: float, top: float, nearDistance: float, farDistance: float) -> bool: ...
    def GetFrustum(self) -> Tuple[bool, float, float, float, float, float, float]: ...
    @property
    def FrustumAspect(self) -> float: ...
    @FrustumAspect.setter
    def FrustumAspect(self, value: float) -> None: ...
    @property
    def FrustumCenter(self) -> Point3d: ...
    @property
    def FrustumLeft(self) -> float: ...
    @property
    def FrustumRight(self) -> float: ...
    @property
    def FrustumBottom(self) -> float: ...
    @property
    def FrustumTop(self) -> float: ...
    @property
    def FrustumNear(self) -> float: ...
    @property
    def FrustumFar(self) -> float: ...
    @property
    def FrustumWidth(self) -> float: ...
    @property
    def FrustumHeight(self) -> float: ...
    @property
    def FrustumMinimumDiameter(self) -> float: ...
    @property
    def FrustumMaximumDiameter(self) -> float: ...
    @overload
    def SetFrustumNearFar(self, boundingBox: BoundingBox) -> bool: ...
    @overload
    def SetFrustumNearFar(self, center: Point3d, radius: float) -> bool: ...
    @overload
    def SetFrustumNearFar(self, nearDistance: float, farDistance: float) -> bool: ...
    def ChangeToSymmetricFrustum(self, isLeftRightSymmetric: bool, isTopBottomSymmetric: bool, targetDistance: float) -> bool: ...
    def GetPointDepth(self, point: Point3d) -> Tuple[bool, float]: ...
    def GetBoundingBoxDepth(self, bbox: BoundingBox) -> Tuple[bool, float, float]: ...
    def GetSphereDepth(self, sphere: Sphere) -> Tuple[bool, float, float]: ...
    @overload
    def SetFrustumNearFar(self, nearDistance: float, farDistance: float, minNearDistance: float, minNearOverFar: float, targetDistance: float) -> bool: ...
    @property
    def FrustumNearPlane(self) -> Plane: ...
    @property
    def FrustumFarPlane(self) -> Plane: ...
    @property
    def FrustumLeftPlane(self) -> Plane: ...
    @property
    def FrustumRightPlane(self) -> Plane: ...
    @property
    def FrustumBottomPlane(self) -> Plane: ...
    @property
    def FrustumTopPlane(self) -> Plane: ...
    def GetNearPlaneCorners(self) -> Set(Point3d): ...
    def GetFarPlaneCorners(self) -> Set(Point3d): ...
    @overload
    def SetScreenPort(self, left: int, right: int, bottom: int, top: int, near: int, far: int) -> bool: ...
    @overload
    def SetScreenPort(self, windowRectangle: Rectangle, near: int, far: int) -> bool: ...
    @overload
    def SetScreenPort(self, windowRectangle: Rectangle) -> bool: ...
    def GetScreenPortLocation(self) -> Tuple[int, int, int, int]: ...
    @overload
    def GetScreenPort(self) -> Tuple[Rectangle, int, int]: ...
    @overload
    def GetScreenPort(self) -> Rectangle: ...
    @property
    def ScreenPort(self) -> Rectangle: ...
    @ScreenPort.setter
    def ScreenPort(self, value: Rectangle) -> None: ...


class LinearDimensionObject(DimensionObject):
    @property
    def LinearDimensionGeometry(self) -> LinearDimension: ...


class AngularDimensionObject(DimensionObject):
    @property
    def AngularDimensionGeometry(self) -> AngularDimension: ...


class RadialDimensionObject(DimensionObject):
    @property
    def RadialDimensionGeometry(self) -> RadialDimension: ...


class OrdinateDimensionObject(DimensionObject):
    @property
    def OrdinateDimensionGeometry(self) -> OrdinateDimension: ...


class CentermarkObject(DimensionObject):
    @property
    def CentermarkGeometry(self) -> Centermark: ...


class AnnotationObjectBase(RhinoObject):
    @property
    def DisplayText(self) -> str: ...
    @property
    def AnnotationGeometry(self) -> AnnotationBase: ...
    @property
    def HasMeasurableTextFields(self) -> bool: ...


class DimensionObject(AnnotationObjectBase):
    @property
    def DimensionStyle(self) -> DimensionStyle: ...


class TextDotObject(RhinoObject):


class BitmapEntry(ModelComponent):
    @property
    def FileName(self) -> str: ...
    @property
    def IsReference(self) -> bool: ...
    @property
    def ComponentType(self) -> ModelComponentType: ...
    def Save(self, fileName: str) -> bool: ...


class MorphControlObject(RhinoObject):


class ClippingPlaneObject(RhinoObject):
    @property
    def ClippingPlaneGeometry(self) -> ClippingPlaneSurface: ...
    def AddClipViewport(self, viewport: RhinoViewport, commit: bool) -> bool: ...
    def RemoveClipViewport(self, viewport: RhinoViewport, commit: bool) -> bool: ...


class HistoryRecord:
    def __init__(self, command: Command, version: int): ...
    @property
    def Handle(self) -> IntPtr: ...
    def Dispose(self) -> None: ...
    def SetBool(self, id: int, value: bool) -> bool: ...
    def SetInt(self, id: int, value: int) -> bool: ...
    def SetDouble(self, id: int, value: float) -> bool: ...
    def SetPoint3d(self, id: int, value: Point3d) -> bool: ...
    def SetVector3d(self, id: int, value: Vector3d) -> bool: ...
    def SetTransorm(self, id: int, value: Transform) -> bool: ...
    def SetColor(self, id: int, value: Color) -> bool: ...
    def SetObjRef(self, id: int, value: ObjRef) -> bool: ...
    def SetPoint3dOnObject(self, id: int, objref: ObjRef, value: Point3d) -> bool: ...
    def SetGuid(self, id: int, value: Guid) -> bool: ...
    def SetString(self, id: int, value: str) -> bool: ...
    def SetCurve(self, id: int, value: Curve) -> bool: ...
    def SetSurface(self, id: int, value: Surface) -> bool: ...
    def SetBrep(self, id: int, value: Brep) -> bool: ...
    def SetMesh(self, id: int, value: Mesh) -> bool: ...
    def SetBools(self, id: int, values: Iterable[bool]) -> bool: ...
    def SetInts(self, id: int, values: Iterable[int]) -> bool: ...
    def SetDoubles(self, id: int, values: Iterable[float]) -> bool: ...
    def SetPoint3ds(self, id: int, values: Iterable[Point3d]) -> bool: ...
    def SetVector3ds(self, id: int, values: Iterable[Vector3d]) -> bool: ...
    def SetColors(self, id: int, values: Iterable[Color]) -> bool: ...
    def SetGuids(self, id: int, values: Iterable[Guid]) -> bool: ...
    def SetStrings(self, id: int, values: Iterable[str]) -> bool: ...
    def SetHistoryVersion(self, historyVersion: int) -> bool: ...
    @property
    def CopyOnReplaceObject(self) -> bool: ...
    @CopyOnReplaceObject.setter
    def CopyOnReplaceObject(self, value: bool) -> None: ...


class ReplayHistoryData:
    def Dispose(self) -> None: ...
    def GetRhinoObjRef(self, id: int) -> ObjRef: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def HistoryVersion(self) -> int: ...
    @property
    def RecordId(self) -> Guid: ...
    @property
    def Results(self) -> Set(ReplayHistoryResult): ...
    def TryGetBool(self, id: int) -> Tuple[bool, bool]: ...
    def TryGetInt(self, id: int) -> Tuple[bool, int]: ...
    def TryGetDouble(self, id: int) -> Tuple[bool, float]: ...
    def TryGetPoint3d(self, id: int) -> Tuple[bool, Point3d]: ...
    def TryGetVector3d(self, id: int) -> Tuple[bool, Vector3d]: ...
    def TryGetTransform(self, id: int) -> Tuple[bool, Transform]: ...
    def TryGetColor(self, id: int) -> Tuple[bool, Color]: ...
    def TryGetPoint3dOnObject(self, id: int) -> Tuple[bool, Point3d]: ...
    def TryGetGuid(self, id: int) -> Tuple[bool, Guid]: ...
    def TryGetString(self, id: int) -> Tuple[bool, str]: ...
    def TryGetDoubles(self, id: int) -> Tuple[bool, Set(float)]: ...


class ReplayHistoryResult:
    @property
    def ExistingObject(self) -> RhinoObject: ...
    def UpdateToPoint(self, point: Point3d, attributes: ObjectAttributes) -> bool: ...
    @overload
    def UpdateToPointCloud(self, cloud: PointCloud, attributes: ObjectAttributes) -> bool: ...
    @overload
    def UpdateToPointCloud(self, points: Iterable[Point3d], attributes: ObjectAttributes) -> bool: ...
    @overload
    def UpdateToClippingPlane(self, plane: Plane, uMagnitude: float, vMagnitude: float, clippedViewportId: Guid, attributes: ObjectAttributes) -> bool: ...
    @overload
    def UpdateToClippingPlane(self, plane: Plane, uMagnitude: float, vMagnitude: float, clippedViewportIds: Iterable[Guid], attributes: ObjectAttributes) -> bool: ...
    def UpdateToLinearDimension(self, dimension: LinearDimension, attributes: ObjectAttributes) -> bool: ...
    def UpdateToRadialDimension(self, dimension: RadialDimension, attributes: ObjectAttributes) -> bool: ...
    def UpdateToAngularDimension(self, dimension: AngularDimension, attributes: ObjectAttributes) -> bool: ...
    def UpdateToLine(self, from_: Point3d, to: Point3d, attributes: ObjectAttributes) -> bool: ...
    def UpdateToPolyline(self, points: Iterable[Point3d], attributes: ObjectAttributes) -> bool: ...
    def UpdateToArc(self, arc: Arc, attributes: ObjectAttributes) -> bool: ...
    def UpdateToCircle(self, circle: Circle, attributes: ObjectAttributes) -> bool: ...
    def UpdateToEllipse(self, ellipse: Ellipse, attributes: ObjectAttributes) -> bool: ...
    def UpdateToSphere(self, sphere: Sphere, attributes: ObjectAttributes) -> bool: ...
    def UpdateToCurve(self, curve: Curve, attributes: ObjectAttributes) -> bool: ...
    def UpdateToTextDot(self, dot: TextDot, attributes: ObjectAttributes) -> bool: ...
    @overload
    def UpdateToText(self, text: str, plane: Plane, height: float, fontName: str, bold: bool, italic: bool, justification: TextJustification, attributes: ObjectAttributes) -> bool: ...
    @overload
    def UpdateToText(self, text: TextEntity, attributes: ObjectAttributes) -> bool: ...
    def UpdateToSurface(self, surface: Surface, attributes: ObjectAttributes) -> bool: ...
    def UpdateToExtrusion(self, extrusion: Extrusion, attributes: ObjectAttributes) -> bool: ...
    def UpdateToMesh(self, mesh: Mesh, attributes: ObjectAttributes) -> bool: ...
    def UpdateToBrep(self, brep: Brep, attributes: ObjectAttributes) -> bool: ...
    def UpdateToLeader(self, leader: Leader, attributes: ObjectAttributes) -> bool: ...
    def UpdateToHatch(self, hatch: Hatch, attributes: ObjectAttributes) -> bool: ...


class DetailViewObject(RhinoObject):
    @property
    def DetailGeometry(self) -> DetailView: ...
    @property
    def IsActive(self) -> bool: ...
    @IsActive.setter
    def IsActive(self, value: bool) -> None: ...
    @property
    def Viewport(self) -> RhinoViewport: ...
    def CommitViewportChanges(self) -> bool: ...
    @property
    def DescriptiveTitle(self) -> str: ...
    @property
    def WorldToPageTransform(self) -> Transform: ...
    @property
    def PageToWorldTransform(self) -> Transform: ...


class RhinoObjectEventArgs:
    @property
    def ObjectId(self) -> Guid: ...
    @property
    def TheObject(self) -> RhinoObject: ...


class RhinoObjectSelectionEventArgs:
    @property
    def Selected(self) -> bool: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def RhinoObjects(self) -> Set(RhinoObject): ...


class RhinoReplaceObjectEventArgs:
    @property
    def ObjectId(self) -> Guid: ...
    @property
    def OldRhinoObject(self) -> RhinoObject: ...
    @property
    def NewRhinoObject(self) -> RhinoObject: ...
    @property
    def Document(self) -> RhinoDoc: ...


class RhinoDeselectAllObjectsEventArgs:
    @property
    def ObjectCount(self) -> int: ...
    @property
    def Document(self) -> RhinoDoc: ...


class RhinoModifyObjectAttributesEventArgs:
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def RhinoObject(self) -> RhinoObject: ...
    @property
    def OldAttributes(self) -> ObjectAttributes: ...
    @property
    def NewAttributes(self) -> ObjectAttributes: ...


class RhinoTransformObjectsEventArgs:
    @property
    def ObjectCount(self) -> int: ...
    @property
    def ObjectsWillBeCopied(self) -> bool: ...
    @property
    def Transform(self) -> Transform: ...
    @property
    def Objects(self) -> Set(RhinoObject): ...


class ObjectEnumeratorSettings:
    def __init__(self): ...
    @property
    def NormalObjects(self) -> bool: ...
    @NormalObjects.setter
    def NormalObjects(self, value: bool) -> None: ...
    @property
    def LockedObjects(self) -> bool: ...
    @LockedObjects.setter
    def LockedObjects(self, value: bool) -> None: ...
    @property
    def HiddenObjects(self) -> bool: ...
    @HiddenObjects.setter
    def HiddenObjects(self, value: bool) -> None: ...
    @property
    def IdefObjects(self) -> bool: ...
    @IdefObjects.setter
    def IdefObjects(self, value: bool) -> None: ...
    @property
    def DeletedObjects(self) -> bool: ...
    @DeletedObjects.setter
    def DeletedObjects(self, value: bool) -> None: ...
    @property
    def ActiveObjects(self) -> bool: ...
    @ActiveObjects.setter
    def ActiveObjects(self, value: bool) -> None: ...
    @property
    def ReferenceObjects(self) -> bool: ...
    @ReferenceObjects.setter
    def ReferenceObjects(self, value: bool) -> None: ...
    @property
    def IncludeLights(self) -> bool: ...
    @IncludeLights.setter
    def IncludeLights(self, value: bool) -> None: ...
    @property
    def IncludeGrips(self) -> bool: ...
    @IncludeGrips.setter
    def IncludeGrips(self, value: bool) -> None: ...
    @property
    def IncludePhantoms(self) -> bool: ...
    @IncludePhantoms.setter
    def IncludePhantoms(self, value: bool) -> None: ...
    @property
    def SelectedObjectsFilter(self) -> bool: ...
    @SelectedObjectsFilter.setter
    def SelectedObjectsFilter(self, value: bool) -> None: ...
    @property
    def VisibleFilter(self) -> bool: ...
    @VisibleFilter.setter
    def VisibleFilter(self, value: bool) -> None: ...
    @property
    def ObjectTypeFilter(self) -> ObjectType: ...
    @ObjectTypeFilter.setter
    def ObjectTypeFilter(self, value: ObjectType) -> None: ...
    @property
    def ClassTypeFilter(self) -> Type: ...
    @ClassTypeFilter.setter
    def ClassTypeFilter(self, value: Type) -> None: ...
    @property
    def LayerIndexFilter(self) -> int: ...
    @LayerIndexFilter.setter
    def LayerIndexFilter(self, value: int) -> None: ...
    @property
    def NameFilter(self) -> str: ...
    @NameFilter.setter
    def NameFilter(self, value: str) -> None: ...
    @property
    def ViewportFilter(self) -> RhinoViewport: ...
    @ViewportFilter.setter
    def ViewportFilter(self, value: RhinoViewport) -> None: ...


class BrepObject(RhinoObject):
    @property
    def BrepGeometry(self) -> Brep: ...
    def DuplicateBrepGeometry(self) -> Brep: ...


class SurfaceObject(RhinoObject):
    @property
    def SurfaceGeometry(self) -> Surface: ...
    def DuplicateSurfaceGeometry(self) -> Surface: ...


class CurveObject(RhinoObject):
    @property
    def CurveGeometry(self) -> Curve: ...
    def DuplicateCurveGeometry(self) -> Curve: ...


class ExtrusionObject(RhinoObject):
    @property
    def ExtrusionGeometry(self) -> Extrusion: ...
    def DuplicateExtrusionGeometry(self) -> Extrusion: ...


class FontQuartet:
    @property
    def QuartetName(self) -> str: ...
    @property
    def HasRegularFont(self) -> bool: ...
    @property
    def HasBoldFont(self) -> bool: ...
    @property
    def HasItalicFont(self) -> bool: ...
    @property
    def HasBoldItalicFont(self) -> bool: ...
    def ToString(self) -> str: ...


class Group(ModelComponent):
    @property
    def ComponentType(self) -> ModelComponentType: ...
    def SetUserString(self, key: str, value: str) -> bool: ...
    def GetUserString(self, key: str) -> str: ...
    @property
    def UserStringCount(self) -> int: ...
    def GetUserStrings(self) -> NameValueCollection: ...


class HatchObject(RhinoObject):
    @property
    def HatchGeometry(self) -> Hatch: ...
    def SetHatchGeometry(self, hatch: Hatch) -> bool: ...


class HatchPatternFillType:
    Solid = 0
    Lines = 1
    Gradient = 2


class HatchPattern(ModelComponent):
    def __init__(self): ...
    def ReadFromFile(filename: str, quiet: bool) -> Set(HatchPattern): ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def IsReference(self) -> bool: ...
    def CreatePreviewGeometry(self, width: int, height: int, angle: float) -> Set(Line): ...
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @property
    def Index(self) -> int: ...
    @Index.setter
    def Index(self, value: int) -> None: ...
    @property
    def Description(self) -> str: ...
    @Description.setter
    def Description(self, value: str) -> None: ...
    @property
    def FillType(self) -> HatchPatternFillType: ...
    @FillType.setter
    def FillType(self, value: HatchPatternFillType) -> None: ...


class InstanceDefinitionUpdateType:
    Static = 0
    Embedded = 1
    LinkedAndEmbedded = 2
    Linked = 3


class InstanceDefinitionLayerStyle:
    #None = 0
    Active = 1
    Reference = 2


class InstanceDefinitionArchiveFileStatus:
    LinkedFileIsUpToDate = 0
    LinkedFileIsNewer = 1
    LinkedFileIsOlder = 2
    LinkedFileIsDifferent = 3
    NotALinkedInstanceDefinition = -3
    LinkedFileNotReadable = -2
    LinkedFileNotFound = -1


class InstanceObject(RhinoObject):
    @property
    def InstanceXform(self) -> Transform: ...
    @property
    def InsertionPoint(self) -> Point3d: ...
    @property
    def InstanceDefinition(self) -> InstanceDefinition: ...
    def UsesDefinition(self, definitionIndex: int) -> Tuple[bool, int]: ...
    def Explode(self, explodeNestedInstances: bool) -> Tuple[Set(RhinoObject), Set(ObjectAttributes), Set(Transform)]: ...


class InstanceDefinition(InstanceDefinitionGeometry):
    @property
    def ObjectCount(self) -> int: ...
    @property
    def UpdateType(self) -> InstanceDefinitionUpdateType: ...
    def Object(self, index: int) -> RhinoObject: ...
    def GetObjects(self) -> Set(RhinoObject): ...
    def GetReferences(self, wheretoLook: int) -> Set(InstanceObject): ...
    def GetContainers(self) -> Set(InstanceDefinition): ...
    def UsesDefinition(self, otherIdefIndex: int) -> int: ...
    def InUse(self, wheretoLook: int) -> bool: ...
    @property
    def Index(self) -> int: ...
    @property
    def IsReference(self) -> bool: ...
    @property
    def IsTenuous(self) -> bool: ...
    @property
    def SkipNestedLinkedDefinitions(self) -> bool: ...
    @property
    def LayerStyle(self) -> InstanceDefinitionLayerStyle: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Description(self) -> str: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def SourceArchive(self) -> str: ...
    @property
    def UrlDescription(self) -> str: ...
    @property
    def Url(self) -> str: ...
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @overload
    def CreatePreviewBitmap(self, definedViewportProjection: DefinedViewportProjection, displayMode: DisplayMode, bitmapSize: Size) -> Bitmap: ...
    @overload
    def CreatePreviewBitmap(self, definedViewportProjection: DefinedViewportProjection, displayMode: DisplayMode, bitmapSize: Size, applyDpiScaling: bool) -> Bitmap: ...
    @overload
    def CreatePreviewBitmap(self, definedViewportProjection: DefinedViewportProjection, bitmapSize: Size) -> Bitmap: ...
    @overload
    def CreatePreviewBitmap(self, definedViewportProjection: DefinedViewportProjection, bitmapSize: Size, applyDpiScaling: bool) -> Bitmap: ...
    @property
    def ArchiveFileStatus(self) -> InstanceDefinitionArchiveFileStatus: ...
    def Equals(self, obj: Object) -> bool: ...
    def GetHashCode(self) -> int: ...


class Layer(ModelComponent):
    def __init__(self): ...
    def GetChildren(self) -> Set(Layer): ...
    def SetUserString(self, key: str, value: str) -> bool: ...
    def GetUserString(self, key: str) -> str: ...
    @property
    def UserStringCount(self) -> int: ...
    def GetUserStrings(self) -> NameValueCollection: ...
    @overload
    def Equals(self, other: Layer) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    def op_Equality(left: Layer, right: Layer) -> bool: ...
    def op_Inequality(left: Layer, right: Layer) -> bool: ...
    def GetHashCode(self) -> int: ...
    def GetDefaultLayerProperties() -> Layer: ...
    def CommitChanges(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @property
    def FullPath(self) -> str: ...
    def ToString(self) -> str: ...
    @property
    def LayerIndex(self) -> int: ...
    @LayerIndex.setter
    def LayerIndex(self, value: int) -> None: ...
    @property
    def Id(self) -> Guid: ...
    @Id.setter
    def Id(self, value: Guid) -> None: ...
    @property
    def ParentLayerId(self) -> Guid: ...
    @ParentLayerId.setter
    def ParentLayerId(self, value: Guid) -> None: ...
    @property
    def IgesLevel(self) -> int: ...
    @IgesLevel.setter
    def IgesLevel(self, value: int) -> None: ...
    def HasPerViewportSettings(self, viewportId: Guid) -> bool: ...
    def DeletePerViewportSettings(self, viewportId: Guid) -> None: ...
    @property
    def Color(self) -> Color: ...
    @Color.setter
    def Color(self, value: Color) -> None: ...
    def PerViewportColor(self, viewportId: Guid) -> Color: ...
    def SetPerViewportColor(self, viewportId: Guid, color: Color) -> None: ...
    def DeletePerViewportColor(self, viewportId: Guid) -> None: ...
    @property
    def PlotColor(self) -> Color: ...
    @PlotColor.setter
    def PlotColor(self, value: Color) -> None: ...
    def PerViewportPlotColor(self, viewportId: Guid) -> Color: ...
    def SetPerViewportPlotColor(self, viewportId: Guid, color: Color) -> None: ...
    def DeletePerViewportPlotColor(self, viewportId: Guid) -> None: ...
    @property
    def PlotWeight(self) -> float: ...
    @PlotWeight.setter
    def PlotWeight(self, value: float) -> None: ...
    def PerViewportPlotWeight(self, viewportId: Guid) -> float: ...
    def SetPerViewportPlotWeight(self, viewportId: Guid, plotWeight: float) -> None: ...
    def DeletePerViewportPlotWeight(self, viewportId: Guid) -> None: ...
    @property
    def LinetypeIndex(self) -> int: ...
    @LinetypeIndex.setter
    def LinetypeIndex(self, value: int) -> None: ...
    @property
    def RenderMaterialIndex(self) -> int: ...
    @RenderMaterialIndex.setter
    def RenderMaterialIndex(self, value: int) -> None: ...
    @property
    def IsVisible(self) -> bool: ...
    @IsVisible.setter
    def IsVisible(self, value: bool) -> None: ...
    def PerViewportIsVisible(self, viewportId: Guid) -> bool: ...
    def SetPerViewportVisible(self, viewportId: Guid, visible: bool) -> None: ...
    def DeletePerViewportVisible(self, viewportId: Guid) -> None: ...
    def PerViewportPersistentVisibility(self, viewportId: Guid) -> bool: ...
    def SetPerViewportPersistentVisibility(self, viewportId: Guid, persistentVisibility: bool) -> None: ...
    def UnsetPerViewportPersistentVisibility(self, viewportId: Guid) -> None: ...
    @property
    def IsLocked(self) -> bool: ...
    @IsLocked.setter
    def IsLocked(self, value: bool) -> None: ...
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @property
    def ComponentStatus(self) -> ComponentStatus: ...
    @ComponentStatus.setter
    def ComponentStatus(self, value: ComponentStatus) -> None: ...
    def GetPersistentVisibility(self) -> bool: ...
    def SetPersistentVisibility(self, persistentVisibility: bool) -> None: ...
    def UnsetPersistentVisibility(self) -> None: ...
    def GetPersistentLocking(self) -> bool: ...
    def SetPersistentLocking(self, persistentLocking: bool) -> None: ...
    def UnsetPersistentLocking(self) -> None: ...
    @property
    def IsExpanded(self) -> bool: ...
    @IsExpanded.setter
    def IsExpanded(self, value: bool) -> None: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def IsReference(self) -> bool: ...
    @property
    def RenderMaterial(self) -> RenderMaterial: ...
    @RenderMaterial.setter
    def RenderMaterial(self, value: RenderMaterial) -> None: ...
    @property
    def SortIndex(self) -> int: ...
    def Default(self) -> None: ...
    def CopyAttributesFrom(self, otherLayer: Layer) -> None: ...
    def IsValidName(name: str) -> bool: ...
    @property
    def PathSeparator() -> str: ...
    @overload
    def GetLeafName(fullPath: str) -> str: ...
    @overload
    def GetLeafName(layer: Layer) -> str: ...
    @overload
    def GetParentName(fullPath: str) -> str: ...
    @overload
    def GetParentName(layer: Layer) -> str: ...
    @overload
    def IsChildOf(self, layerIndex: int) -> bool: ...
    @overload
    def IsChildOf(self, otherLayer: Layer) -> bool: ...
    @overload
    def IsChildOf(self, otherlayerId: Guid) -> bool: ...
    @overload
    def IsParentOf(self, layerIndex: int) -> bool: ...
    @overload
    def IsParentOf(self, otherLayer: Layer) -> bool: ...
    @overload
    def IsParentOf(self, otherLayer: Guid) -> bool: ...


class LeaderObject(AnnotationObjectBase):
    @property
    def LeaderGeometry(self) -> Leader: ...


class LightObject(RhinoObject):
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @property
    def LightGeometry(self) -> Light: ...
    def DuplicateLightGeometry(self) -> Light: ...


class Linetype(ModelComponent):
    def __init__(self): ...
    def CommitChanges(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @property
    def LinetypeIndex(self) -> int: ...
    @LinetypeIndex.setter
    def LinetypeIndex(self, value: int) -> None: ...
    @property
    def PatternLength(self) -> float: ...
    @property
    def SegmentCount(self) -> int: ...
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def IsReference(self) -> bool: ...
    @property
    def IsModified(self) -> bool: ...
    def Default(self) -> None: ...
    def AppendSegment(self, length: float, isSolid: bool) -> int: ...
    def RemoveSegment(self, index: int) -> bool: ...
    def SetSegments(self, segments: Iterable[float]) -> bool: ...
    def SetSegment(self, index: int, length: float, isSolid: bool) -> bool: ...
    def GetSegment(self, index: int) -> Tuple[float, bool]: ...
    def ReadFromFile(path: str) -> Set(Linetype): ...


class MaterialRef:
    @property
    def MaterialSource(self) -> ObjectMaterialSource: ...
    @property
    def PlugInId(self) -> Guid: ...
    @property
    def FrontFaceMaterialId(self) -> Guid: ...
    @property
    def BackFaceMaterialId(self) -> Guid: ...
    @property
    def FrontFaceMaterialIndex(self) -> int: ...
    @property
    def BackFaceMaterialIndex(self) -> int: ...
    def Dispose(self) -> None: ...


class MaterialRefCreateParams:
    def __init__(self): ...
    @property
    def PlugInId(self) -> Guid: ...
    @PlugInId.setter
    def PlugInId(self, value: Guid) -> None: ...
    @property
    def MaterialSource(self) -> ObjectMaterialSource: ...
    @MaterialSource.setter
    def MaterialSource(self, value: ObjectMaterialSource) -> None: ...
    @property
    def FrontFaceMaterialId(self) -> Guid: ...
    @FrontFaceMaterialId.setter
    def FrontFaceMaterialId(self, value: Guid) -> None: ...
    @property
    def FrontFaceMaterialIndex(self) -> int: ...
    @FrontFaceMaterialIndex.setter
    def FrontFaceMaterialIndex(self, value: int) -> None: ...
    @property
    def BackFaceMaterialId(self) -> Guid: ...
    @BackFaceMaterialId.setter
    def BackFaceMaterialId(self, value: Guid) -> None: ...
    @property
    def BackFaceMaterialIndex(self) -> int: ...
    @BackFaceMaterialIndex.setter
    def BackFaceMaterialIndex(self, value: int) -> None: ...


class MaterialRefs:
    def Create(self, createParams: MaterialRefCreateParams) -> MaterialRef: ...
    def GetEnumerator(self) -> IEnumerator: ...
    @overload
    def Add(self, item: KeyValuePair) -> None: ...
    @overload
    def Add(self, key: Guid, value: MaterialRef) -> None: ...
    def Clear(self) -> None: ...
    def Contains(self, item: KeyValuePair) -> bool: ...
    def CopyTo(self, array: Set(KeyValuePair), arrayIndex: int) -> None: ...
    @overload
    def Remove(self, item: KeyValuePair) -> bool: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    def ContainsKey(self, key: Guid) -> bool: ...
    @overload
    def Remove(self, key: Guid) -> bool: ...
    def TryGetValue(self, key: Guid) -> Tuple[bool, MaterialRef]: ...
    @property
    def Item(self, key: Guid) -> MaterialRef: ...
    @Item.setter
    def Item(self, key: Guid, value: MaterialRef) -> None: ...
    @property
    def Keys(self) -> ICollection: ...
    @property
    def Values(self) -> ICollection: ...


class Material(ModelComponent):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, other: Material): ...
    def CommitChanges(self) -> bool: ...
    def SetUserString(self, key: str, value: str) -> bool: ...
    def GetUserString(self, key: str) -> str: ...
    @property
    def UserStringCount(self) -> int: ...
    def GetUserStrings(self) -> NameValueCollection: ...
    def CopyFrom(self, other: Material) -> None: ...
    @property
    def DefaultMaterial() -> Material: ...
    @property
    def RenderMaterialInstanceId(self) -> Guid: ...
    @RenderMaterialInstanceId.setter
    def RenderMaterialInstanceId(self, value: Guid) -> None: ...
    @property
    def RenderMaterial(self) -> RenderMaterial: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def RenderPlugInId(self) -> Guid: ...
    @RenderPlugInId.setter
    def RenderPlugInId(self, value: Guid) -> None: ...
    @property
    def IsReference(self) -> bool: ...
    @property
    def IsDefaultMaterial(self) -> bool: ...
    @property
    def MaterialIndex(self) -> int: ...
    @property
    def UseCount(self) -> int: ...
    @property
    def IsDocumentControlled(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @property
    def MaxShine() -> float: ...
    @property
    def Shine(self) -> float: ...
    @Shine.setter
    def Shine(self, value: float) -> None: ...
    @property
    def Transparency(self) -> float: ...
    @Transparency.setter
    def Transparency(self, value: float) -> None: ...
    @property
    def IndexOfRefraction(self) -> float: ...
    @IndexOfRefraction.setter
    def IndexOfRefraction(self, value: float) -> None: ...
    @property
    def FresnelIndexOfRefraction(self) -> float: ...
    @FresnelIndexOfRefraction.setter
    def FresnelIndexOfRefraction(self, value: float) -> None: ...
    @property
    def RefractionGlossiness(self) -> float: ...
    @RefractionGlossiness.setter
    def RefractionGlossiness(self, value: float) -> None: ...
    @property
    def ReflectionGlossiness(self) -> float: ...
    @ReflectionGlossiness.setter
    def ReflectionGlossiness(self, value: float) -> None: ...
    @property
    def FresnelReflections(self) -> bool: ...
    @FresnelReflections.setter
    def FresnelReflections(self, value: bool) -> None: ...
    @property
    def DisableLighting(self) -> bool: ...
    @DisableLighting.setter
    def DisableLighting(self, value: bool) -> None: ...
    @property
    def AlphaTransparency(self) -> bool: ...
    @AlphaTransparency.setter
    def AlphaTransparency(self, value: bool) -> None: ...
    @property
    def PhysicallyBased(self) -> PhysicallyBasedMaterial: ...
    @property
    def Reflectivity(self) -> float: ...
    @Reflectivity.setter
    def Reflectivity(self, value: float) -> None: ...
    @property
    def PreviewColor(self) -> Color: ...
    @property
    def DiffuseColor(self) -> Color: ...
    @DiffuseColor.setter
    def DiffuseColor(self, value: Color) -> None: ...
    @property
    def AmbientColor(self) -> Color: ...
    @AmbientColor.setter
    def AmbientColor(self, value: Color) -> None: ...
    @property
    def EmissionColor(self) -> Color: ...
    @EmissionColor.setter
    def EmissionColor(self, value: Color) -> None: ...
    @property
    def SpecularColor(self) -> Color: ...
    @SpecularColor.setter
    def SpecularColor(self, value: Color) -> None: ...
    @property
    def ReflectionColor(self) -> Color: ...
    @ReflectionColor.setter
    def ReflectionColor(self, value: Color) -> None: ...
    @property
    def TransparentColor(self) -> Color: ...
    @TransparentColor.setter
    def TransparentColor(self, value: Color) -> None: ...
    def Default(self) -> None: ...
    def SetTexture(self, texture: Texture, which: TextureType) -> bool: ...
    def GetTexture(self, which: TextureType) -> Texture: ...
    def GetTextures(self) -> Set(Texture): ...
    def GetBitmapTexture(self) -> Texture: ...
    @overload
    def SetBitmapTexture(self, filename: str) -> bool: ...
    @overload
    def SetBitmapTexture(self, texture: Texture) -> bool: ...
    def GetBumpTexture(self) -> Texture: ...
    @overload
    def SetBumpTexture(self, filename: str) -> bool: ...
    @overload
    def SetBumpTexture(self, texture: Texture) -> bool: ...
    def GetEnvironmentTexture(self) -> Texture: ...
    @overload
    def SetEnvironmentTexture(self, filename: str) -> bool: ...
    @overload
    def SetEnvironmentTexture(self, texture: Texture) -> bool: ...
    def GetTransparencyTexture(self) -> Texture: ...
    @overload
    def SetTransparencyTexture(self, filename: str) -> bool: ...
    @overload
    def SetTransparencyTexture(self, texture: Texture) -> bool: ...


class SubDObject(RhinoObject):


class MeshObject(RhinoObject):
    @property
    def IsCustomObject(self) -> bool: ...
    @property
    def MeshGeometry(self) -> Mesh: ...
    def DuplicateMeshGeometry(self) -> Mesh: ...


class ObjectAttributes(CommonObject):
    def __init__(self): ...
    def AddToGroup(self, groupIndex: int) -> None: ...
    def RemoveFromGroup(self, groupIndex: int) -> None: ...
    def RemoveFromAllGroups(self) -> None: ...
    def SetUserString(self, key: str, value: str) -> bool: ...
    def GetUserString(self, key: str) -> str: ...
    @property
    def UserStringCount(self) -> int: ...
    def GetUserStrings(self) -> NameValueCollection: ...
    def DeleteUserString(self, key: str) -> bool: ...
    def DeleteAllUserStrings(self) -> None: ...
    @property
    def IsDocumentControlled(self) -> bool: ...
    def Duplicate(self) -> ObjectAttributes: ...
    @property
    def Mode(self) -> ObjectMode: ...
    @Mode.setter
    def Mode(self, value: ObjectMode) -> None: ...
    def Transform(self, xform: Transform) -> bool: ...
    @property
    def IsInstanceDefinitionObject(self) -> bool: ...
    @property
    def Visible(self) -> bool: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    @property
    def CastsShadows(self) -> bool: ...
    @CastsShadows.setter
    def CastsShadows(self, value: bool) -> None: ...
    @property
    def ReceivesShadows(self) -> bool: ...
    @ReceivesShadows.setter
    def ReceivesShadows(self, value: bool) -> None: ...
    @property
    def LinetypeSource(self) -> ObjectLinetypeSource: ...
    @LinetypeSource.setter
    def LinetypeSource(self, value: ObjectLinetypeSource) -> None: ...
    @property
    def ColorSource(self) -> ObjectColorSource: ...
    @ColorSource.setter
    def ColorSource(self, value: ObjectColorSource) -> None: ...
    @property
    def PlotColorSource(self) -> ObjectPlotColorSource: ...
    @PlotColorSource.setter
    def PlotColorSource(self, value: ObjectPlotColorSource) -> None: ...
    @property
    def PlotWeightSource(self) -> ObjectPlotWeightSource: ...
    @PlotWeightSource.setter
    def PlotWeightSource(self, value: ObjectPlotWeightSource) -> None: ...
    def HasDisplayModeOverride(self, viewportId: Guid) -> bool: ...
    def GetDisplayModeOverride(self, viewportId: Guid) -> Guid: ...
    @overload
    def SetDisplayModeOverride(self, mode: DisplayModeDescription) -> bool: ...
    @overload
    def SetDisplayModeOverride(self, mode: DisplayModeDescription, rhinoViewportId: Guid) -> bool: ...
    @overload
    def RemoveDisplayModeOverride(self) -> None: ...
    @overload
    def RemoveDisplayModeOverride(self, rhinoViewportId: Guid) -> None: ...
    def AddHideInDetailOverride(self, detailId: Guid) -> bool: ...
    def RemoveHideInDetailOverride(self, detailId: Guid) -> bool: ...
    def HasHideInDetailOverrideSet(self, detailId: Guid) -> bool: ...
    def GetHideInDetailOverrides(self) -> Set(Guid): ...
    @property
    def ObjectId(self) -> Guid: ...
    @ObjectId.setter
    def ObjectId(self, value: Guid) -> None: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @property
    def Url(self) -> str: ...
    @Url.setter
    def Url(self, value: str) -> None: ...
    @property
    def LayerIndex(self) -> int: ...
    @LayerIndex.setter
    def LayerIndex(self, value: int) -> None: ...
    @property
    def LinetypeIndex(self) -> int: ...
    @LinetypeIndex.setter
    def LinetypeIndex(self, value: int) -> None: ...
    @property
    def MaterialIndex(self) -> int: ...
    @MaterialIndex.setter
    def MaterialIndex(self, value: int) -> None: ...
    @property
    def MaterialSource(self) -> ObjectMaterialSource: ...
    @MaterialSource.setter
    def MaterialSource(self, value: ObjectMaterialSource) -> None: ...
    @property
    def Decals(self) -> Decals: ...
    @property
    def MaterialRefs(self) -> MaterialRefs: ...
    @property
    def ObjectColor(self) -> Color: ...
    @ObjectColor.setter
    def ObjectColor(self, value: Color) -> None: ...
    @property
    def PlotColor(self) -> Color: ...
    @PlotColor.setter
    def PlotColor(self, value: Color) -> None: ...
    @property
    def HasMapping(self) -> bool: ...
    @overload
    def DrawColor(self, document: RhinoDoc) -> Color: ...
    @overload
    def DrawColor(self, document: RhinoDoc, viewportId: Guid) -> Color: ...
    @overload
    def ComputedPlotColor(self, document: RhinoDoc) -> Color: ...
    @overload
    def ComputedPlotColor(self, document: RhinoDoc, viewportId: Guid) -> Color: ...
    @overload
    def ComputedPlotWeight(self, document: RhinoDoc) -> float: ...
    @overload
    def ComputedPlotWeight(self, document: RhinoDoc, viewportId: Guid) -> float: ...
    @property
    def DisplayOrder(self) -> int: ...
    @DisplayOrder.setter
    def DisplayOrder(self, value: int) -> None: ...
    @property
    def PlotWeight(self) -> float: ...
    @PlotWeight.setter
    def PlotWeight(self, value: float) -> None: ...
    @property
    def ObjectDecoration(self) -> ObjectDecoration: ...
    @ObjectDecoration.setter
    def ObjectDecoration(self, value: ObjectDecoration) -> None: ...
    @property
    def WireDensity(self) -> int: ...
    @WireDensity.setter
    def WireDensity(self, value: int) -> None: ...
    @property
    def ViewportId(self) -> Guid: ...
    @ViewportId.setter
    def ViewportId(self, value: Guid) -> None: ...
    @property
    def Space(self) -> ActiveSpace: ...
    @Space.setter
    def Space(self, value: ActiveSpace) -> None: ...
    @property
    def GroupCount(self) -> int: ...
    def GetGroupList(self) -> Set(int): ...


class PointObject(RhinoObject):
    @property
    def PointGeometry(self) -> Point: ...
    def DuplicatePointGeometry(self) -> Point: ...


class PointCloudObject(RhinoObject):
    @property
    def PointCloudGeometry(self) -> PointCloud: ...
    def DuplicatePointCloudGeometry(self) -> PointCloud: ...


class GripObject(RhinoObject):
    @property
    def CurrentLocation(self) -> Point3d: ...
    @CurrentLocation.setter
    def CurrentLocation(self, value: Point3d) -> None: ...
    @property
    def OriginalLocation(self) -> Point3d: ...
    @property
    def Moved(self) -> bool: ...
    @overload
    def Move(self, xform: Transform) -> None: ...
    @overload
    def Move(self, delta: Vector3d) -> None: ...
    @overload
    def Move(self, newLocation: Point3d) -> None: ...
    def UndoMove(self) -> None: ...
    @property
    def Weight(self) -> float: ...
    @Weight.setter
    def Weight(self, value: float) -> None: ...
    @property
    def OwnerId(self) -> Guid: ...
    def NeighborGrip(self, directionR: int, directionS: int, directionT: int, wrap: bool) -> GripObject: ...
    def GetGripDirections(self) -> Tuple[bool, Vector3d, Vector3d, Vector3d]: ...
    def GetSurfaceParameters(self) -> Tuple[bool, float, float]: ...
    def GetCageParameters(self) -> Tuple[bool, float, float, float]: ...
    def GetCurveParameters(self) -> Tuple[bool, float]: ...
    @property
    def Index(self) -> int: ...
    @Index.setter
    def Index(self, value: int) -> None: ...


class RhinoObject(ModelComponent):
    def IsMeshable(self, meshType: MeshType) -> bool: ...
    def GetRenderMeshParameters(self) -> MeshingParameters: ...
    def MeshCount(self, meshType: MeshType, parameters: MeshingParameters) -> int: ...
    def CreateMeshes(self, meshType: MeshType, parameters: MeshingParameters, ignoreCustomParameters: bool) -> int: ...
    def GetMeshes(self, meshType: MeshType) -> Set(Mesh): ...
    @overload
    def SupportsRenderPrimitiveList(self, viewport: ViewportInfo, preview: bool) -> bool: ...
    @overload
    def SupportsRenderPrimitiveList(self, viewport: ViewportInfo, attrs: DisplayPipelineAttributes) -> bool: ...
    @overload
    def GetRenderPrimitiveList(self, viewport: ViewportInfo, preview: bool) -> RenderPrimitiveList: ...
    @overload
    def GetRenderPrimitiveList(self, viewport: ViewportInfo, attrs: DisplayPipelineAttributes) -> RenderPrimitiveList: ...
    @overload
    def TryGetRenderPrimitiveBoundingBox(self, viewport: ViewportInfo, preview: bool) -> Tuple[bool, BoundingBox]: ...
    @overload
    def TryGetRenderPrimitiveBoundingBox(self, viewport: ViewportInfo, attrs: DisplayPipelineAttributes) -> Tuple[bool, BoundingBox]: ...
    def GetSubObjects(self) -> Set(RhinoObject): ...
    @property
    def HasDynamicTransform(self) -> bool: ...
    def GetDynamicTransform(self) -> Tuple[bool, Transform]: ...
    @overload
    def GetTextureMapping(self, channel: int) -> TextureMapping: ...
    @overload
    def GetTextureMapping(self, channel: int) -> Tuple[TextureMapping, Transform]: ...
    def SetTextureMapping(self, channel: int, tm: TextureMapping) -> int: ...
    def HasTextureMapping(self) -> bool: ...
    def GetTextureChannels(self) -> Set(int): ...
    @property
    def RenderMaterial(self) -> RenderMaterial: ...
    @RenderMaterial.setter
    def RenderMaterial(self, value: RenderMaterial) -> None: ...
    @overload
    def GetRenderMaterial(self, frontMaterial: bool) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex, plugInId: Guid, attributes: ObjectAttributes) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex, plugInId: Guid) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex) -> RenderMaterial: ...
    @property
    def HasSubobjectMaterials(self) -> bool: ...
    @property
    def SubobjectMaterialComponents(self) -> Set(ComponentIndex): ...
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @overload
    def GetMaterial(self, frontMaterial: bool) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex, plugInId: Guid, attributes: ObjectAttributes) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex, plugInId: Guid) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex) -> Material: ...
    def GetCustomRenderMeshParameter(self, providerId: Guid, parameterName: str) -> IConvertible: ...
    def SetCustomRenderMeshParameter(self, providerId: Guid, parameterName: str, value: Object) -> None: ...
    def IsActiveInViewport(self, viewport: RhinoViewport) -> bool: ...
    @property
    def NextRuntimeSerialNumber() -> UInt32: ...
    def FromRuntimeSerialNumber(serialNumber: UInt32) -> RhinoObject: ...
    @overload
    def MeshObjects(rhinoObjects: Iterable[RhinoObject], parameters: MeshingParameters) -> Tuple[Result, Set(Mesh), Set(ObjectAttributes)]: ...
    @overload
    def MeshObjects(rhinoObjects: Iterable[RhinoObject], parameters: MeshingParameters, simpleDialog: bool) -> Tuple[Result, MeshingParameters, bool, Set(Mesh), Set(ObjectAttributes)]: ...
    @overload
    def MeshObjects(rhinoObjects: Iterable[RhinoObject], parameters: MeshingParameters, uiStyle: int, xform: Transform) -> Tuple[Result, MeshingParameters, int, Set(Mesh), Set(ObjectAttributes)]: ...
    def GetRenderMeshes(rhinoObjects: Iterable[RhinoObject], okToCreate: bool, returnAllObjects: bool) -> Set(ObjRef): ...
    @overload
    def GetFillSurfaces(rhinoObject: RhinoObject, clippingPlaneObject: ClippingPlaneObject) -> Set(Brep): ...
    @overload
    def GetFillSurfaces(rhinoObject: RhinoObject, clippingPlaneObjects: Iterable[ClippingPlaneObject]) -> Set(Brep): ...
    @overload
    def GetFillSurfaces(rhinoObject: RhinoObject, clippingPlaneObjects: Iterable[ClippingPlaneObject], unclippedFills: bool) -> Set(Brep): ...
    @property
    def ObjectType(self) -> ObjectType: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def Geometry(self) -> GeometryBase: ...
    @property
    def Attributes(self) -> ObjectAttributes: ...
    @Attributes.setter
    def Attributes(self, value: ObjectAttributes) -> None: ...
    @property
    def RuntimeSerialNumber(self) -> UInt32: ...
    @property
    def IsDeletable(self) -> bool: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def IsInstanceDefinitionGeometry(self) -> bool: ...
    @property
    def IsNormal(self) -> bool: ...
    @property
    def IsLocked(self) -> bool: ...
    @property
    def IsHidden(self) -> bool: ...
    @property
    def IsReference(self) -> bool: ...
    @property
    def WorksessionReferenceSerialNumber(self) -> UInt32: ...
    @property
    def ReferenceModelSerialNumber(self) -> UInt32: ...
    @property
    def InstanceDefinitionModelSerialNumber(self) -> UInt32: ...
    @property
    def Visible(self) -> bool: ...
    def DuplicateGeometry(self) -> GeometryBase: ...
    def CommitChanges(self) -> bool: ...
    def MemoryEstimate(self) -> UInt32: ...
    @property
    def Id(self) -> Guid: ...
    @Id.setter
    def Id(self, value: Guid) -> None: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @property
    def GroupCount(self) -> int: ...
    def GetGroupList(self) -> Set(int): ...
    def IsSelected(self, checkSubObjects: bool) -> int: ...
    def IsSubObjectSelected(self, componentIndex: ComponentIndex) -> bool: ...
    def GetSelectedSubObjects(self) -> Set(ComponentIndex): ...
    @overload
    def IsSelectable(self, ignoreSelectionState: bool, ignoreGripsState: bool, ignoreLayerLocking: bool, ignoreLayerVisibility: bool) -> bool: ...
    @overload
    def IsSelectable(self) -> bool: ...
    def IsSubObjectSelectable(self, componentIndex: ComponentIndex, ignoreSelectionState: bool) -> bool: ...
    @overload
    def Select(self, on: bool, syncHighlight: bool, persistentSelect: bool, ignoreGripsState: bool, ignoreLayerLocking: bool, ignoreLayerVisibility: bool) -> int: ...
    @overload
    def Select(self, on: bool) -> int: ...
    @overload
    def Select(self, on: bool, syncHighlight: bool) -> int: ...
    @overload
    def SelectSubObject(self, componentIndex: ComponentIndex, select: bool, syncHighlight: bool) -> int: ...
    @overload
    def SelectSubObject(self, componentIndex: ComponentIndex, select: bool, syncHighlight: bool, persistentSelect: bool) -> int: ...
    def UnselectAllSubObjects(self) -> int: ...
    def IsHighlighted(self, checkSubObjects: bool) -> int: ...
    def Highlight(self, enable: bool) -> bool: ...
    def IsSubObjectHighlighted(self, componentIndex: ComponentIndex) -> bool: ...
    def GetHighlightedSubObjects(self) -> Set(ComponentIndex): ...
    def HighlightSubObject(self, componentIndex: ComponentIndex, highlight: bool) -> bool: ...
    def UnhighlightAllSubObjects(self) -> int: ...
    @property
    def GripsOn(self) -> bool: ...
    @GripsOn.setter
    def GripsOn(self, value: bool) -> None: ...
    @property
    def GripsSelected(self) -> bool: ...
    def EnableCustomGrips(self, customGrips: CustomObjectGrips) -> bool: ...
    def GetGrips(self) -> Set(GripObject): ...
    def EnableVisualAnalysisMode(self, mode: VisualAnalysisMode, enable: bool) -> bool: ...
    @overload
    def InVisualAnalysisMode(self) -> bool: ...
    @overload
    def InVisualAnalysisMode(self, mode: VisualAnalysisMode) -> bool: ...
    def GetActiveVisualAnalysisModes(self) -> Set(VisualAnalysisMode): ...
    def ShortDescription(self, plural: bool) -> str: ...
    def Description(self, textLog: TextLog) -> None: ...


class SelectionMethod:
    Other = 0
    MousePick = 1
    WindowBox = 2
    CrossingBox = 3


class ObjRef:
    @overload
    def __init__(self, id: Guid): ...
    @overload
    def __init__(self, id: Guid, ci: ComponentIndex): ...
    @overload
    def __init__(self, rhinoObject: RhinoObject): ...
    @overload
    def __init__(self, rhinoObject: RhinoObject, pickContext: PickContext): ...
    @property
    def ObjectId(self) -> Guid: ...
    @property
    def RuntimeSerialNumber(self) -> UInt32: ...
    @property
    def GeometryComponentIndex(self) -> ComponentIndex: ...
    def Geometry(self) -> GeometryBase: ...
    def ClippingPlaneSurface(self) -> ClippingPlaneSurface: ...
    def Curve(self) -> Curve: ...
    def Edge(self) -> BrepEdge: ...
    def Face(self) -> BrepFace: ...
    def Trim(self) -> BrepTrim: ...
    def Brep(self) -> Brep: ...
    def Surface(self) -> Surface: ...
    def TextDot(self) -> TextDot: ...
    def Mesh(self) -> Mesh: ...
    def SubD(self) -> SubD: ...
    def Point(self) -> Point: ...
    def PointCloud(self) -> PointCloud: ...
    def TextEntity(self) -> TextEntity: ...
    def Light(self) -> Light: ...
    def Hatch(self) -> Hatch: ...
    def Dispose(self) -> None: ...
    def Object(self) -> RhinoObject: ...
    def InstanceDefinitionPart(self) -> RhinoObject: ...
    def SelectionMethod(self) -> SelectionMethod: ...
    def SelectionPoint(self) -> Point3d: ...
    def SelectionViewDetailSerialNumber(self) -> UInt32: ...
    def SelectionView(self) -> RhinoView: ...
    def CurveParameter(self) -> Tuple[Curve, float]: ...
    def SurfaceParameter(self) -> Tuple[Surface, float, float]: ...
    def SetSelectionComponent(self, componentIndex: ComponentIndex) -> None: ...


class ActiveSpace:
    #None = 0
    ModelSpace = 1
    PageSpace = 2


class CoordinateSystem:
    World = 0
    Camera = 1
    Clip = 2
    Screen = 3


class ObjectMode:
    Normal = 0
    Hidden = 1
    Locked = 2
    InstanceDefinitionObject = 3


class ObjectColorSource:
    ColorFromLayer = 0
    ColorFromObject = 1
    ColorFromMaterial = 2
    ColorFromParent = 3


class ObjectPlotColorSource:
    PlotColorFromLayer = 0
    PlotColorFromObject = 1
    PlotColorFromDisplay = 2
    PlotColorFromParent = 3


class ObjectPlotWeightSource:
    PlotWeightFromLayer = 0
    PlotWeightFromObject = 1
    PlotWeightFromParent = 3


class ObjectLinetypeSource:
    LinetypeFromLayer = 0
    LinetypeFromObject = 1
    LinetypeFromParent = 3


class ObjectMaterialSource:
    MaterialFromLayer = 0
    MaterialFromObject = 1
    MaterialFromParent = 3


class DisplayMode:
    Default = 0
    Wireframe = 1
    Shaded = 2
    RenderPreview = 3


class DistanceDisplayMode:
    Decimal = 0
    Feet = 1
    FeetAndInches = 2


class AngleDisplayMode:
    Degrees = 0
    DMS = 1
    Grads = 2


class TextDisplayAlignment:
    Normal = 0
    Horizontal = 1
    AboveLine = 2
    InLine = 3


class ObjectType:
    #None = 0
    Point = 1
    PointSet = 2
    Curve = 4
    Surface = 8
    Brep = 16
    Mesh = 32
    Light = 256
    Annotation = 512
    InstanceDefinition = 2048
    InstanceReference = 4096
    TextDot = 8192
    Grip = 16384
    Detail = 32768
    Hatch = 65536
    MorphControl = 131072
    SubD = 262144
    BrepLoop = 524288
    PolysrfFilter = 2097152
    EdgeFilter = 4194304
    PolyedgeFilter = 8388608
    MeshVertex = 16777216
    MeshEdge = 33554432
    MeshFace = 67108864
    Cage = 134217728
    Phantom = 268435456
    ClipPlane = 536870912
    Extrusion = 1073741824
    AnyObject = 4294967295


class ObjectDecoration:
    #None = 0
    StartArrowhead = 8
    EndArrowhead = 16
    BothArrowhead = 24


class TextObject(AnnotationObjectBase):
    @property
    def TextGeometry(self) -> TextEntity: ...


class Worksession:
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def RuntimeSerialNumber(self) -> UInt32: ...
    @property
    def FileName(self) -> str: ...
    def FileNameFromRuntimeSerialNumber(runtimeSerialNumber: UInt32) -> str: ...
    @property
    def ModelCount(self) -> int: ...
    @property
    def ModelPaths(self) -> Set(str): ...
    def ModelPathFromSerialNumber(self, modelSerialNumber: UInt32) -> str: ...


class ArrowType:
    #None = 0
    UserBlock = 1
    SolidTriangle = 2
    Dot = 3
    Tick = 4
    ShortTriangle = 5
    OpenArrow = 6
    Rectangle = 7
    LongTriangle = 8
    LongerTriangle = 9


class MaskType:
    BackgroundColor = 0
    MaskColor = 1


class LengthDisplay:
    ModelUnits = 0
    InchesFractional = 1
    FeetAndInches = 2
    Millmeters = 3
    Centimeters = 4
    Meters = 5
    Kilometers = 6
    InchesDecimal = 7
    FeetDecimal = 8
    Miles = 9


class ToleranceDisplayFormat:
    #None = 0
    Symmetrical = 1
    Deviation = 2
    Limits = 3


class LeaderContentAngleStyle:
    Horizontal = 0
    Aligned = 1
    Rotated = 2


class LeaderCurveStyle:
    #None = 0
    Polyline = 1
    Spline = 2


class Field:
    Unset = 0
    Name = 1
    Index = 2
    ExtensionLineExtension = 3
    ExtensionLineOffset = 4
    Arrowsize = 5
    LeaderArrowsize = 6
    Centermark = 7
    TextGap = 8
    TextHeight = 9
    DimTextLocation = 10
    LengthResolution = 12
    AngleFormat = 13
    AngleResolution = 14
    Font = 15
    LengthFactor = 16
    Alternate = 17
    AlternateLengthFactor = 18
    AlternateLengthResolution = 20
    Prefix = 21
    Suffix = 22
    AlternatePrefix = 23
    AlternateSuffix = 24
    DimensionLineExtension = 25
    SuppressExtension1 = 26
    SuppressExtension2 = 27
    ExtLineColorSource = 28
    DimLineColorSource = 29
    ArrowColorSource = 30
    TextColorSource = 31
    ExtLineColor = 32
    DimLineColor = 33
    ArrowColor = 34
    TextColor = 35
    ExtLinePlotColorSource = 36
    DimLinePlotColorSource = 37
    ArrowPlotColorSource = 38
    TextPlotColorSource = 39
    ExtLinePlotColor = 40
    DimLinePlotColor = 41
    ArrowPlotColor = 42
    TextPlotColor = 43
    ExtLinePlotWeightSource = 44
    DimLinePlotWeightSource = 45
    ExtLinePlotWeight_mm = 46
    DimLinePlotWeight_mm = 47
    ToleranceFormat = 48
    ToleranceResolution = 49
    ToleranceUpperValue = 50
    ToleranceLowerValue = 51
    AltToleranceResolution = 52
    ToleranceHeightScale = 53
    BaselineSpacing = 54
    DrawMask = 55
    MaskColorSource = 56
    MaskColor = 57
    MaskBorder = 58
    DimensionScale = 59
    DimscaleSource = 60
    FixedExtensionLength = 61
    FixedExtensionOn = 62
    TextRotation = 63
    SuppressArrow1 = 64
    SuppressArrow2 = 65
    TextmoveLeader = 66
    ArclengthSymbol = 67
    StackTextheightScale = 68
    StackFormat = 69
    AltRound = 70
    Round = 71
    AngularRound = 72
    AltZeroSuppress = 73
    AngleZeroSuppress = 75
    ZeroSuppress = 76
    AltBelow = 77
    ArrowType1 = 78
    ArrowType2 = 79
    LeaderArrowType = 80
    ArrowBlockId1 = 81
    ArrowBlockId2 = 82
    LeaderArrowBlock = 83
    DimRadialTextLocation = 84
    TextVerticalAlignment = 85
    LeaderTextVerticalAlignment = 86
    LeaderContentAngleStyle = 87
    LeaderCurveType = 88
    LeaderContentAngle = 89
    LeaderHasLanding = 90
    LeaderLandingLength = 91
    MaskFlags = 92
    CentermarkStyle = 93
    TextHorizontalAlignment = 94
    LeaderTextHorizontalAlignment = 95
    DrawForward = 96
    SignedOrdinate = 97
    UnitSystem = 98
    TextMask = 99
    TextOrientation = 100
    LeaderTextOrientation = 101
    DimTextOrientation = 102
    DimRadialTextOrientation = 103
    DimTextAngleStyle = 104
    DimRadialTextAngleStyle = 105
    TextUnderlined = 106
    DimensionLengthDisplay = 109
    AlternateDimensionLengthDisplay = 110
    ForceDimLine = 111
    ArrowFit = 112
    TextFit = 113
    Count = 114


class AngleDisplayFormat:
    DecimalDegrees = 0
    DegMinSec = 1
    Radians = 2
    Grads = 3


class LengthDisplayFormat:
    Decimal = 0
    Fractional = 1
    FeetInches = 2
    FeetDecimalInches = 3


class TextLocation:
    AboveDimLine = 0
    InDimLine = 1
    BelowDimLine = 2


class ZeroSuppression:
    #None = 0
    SuppressLeading = 1
    SuppressTrailing = 2
    SuppressLeadingAndTrailing = 3
    SuppressZeroFeet = 4
    SuppressZeroInches = 8
    SuppressZeroFeetAndZeroInches = 12


class StackDisplayFormat:
    #None = 0
    StackHorizontal = 1
    StackDiagonal = 2


class CenterMarkStyle:
    #None = 0
    Mark = 1
    MarkAndLines = 2


class ArrowFit:
    Auto = 0
    ArrowsInside = 1
    ArrowsOutside = 2


class TextFit:
    Auto = 0
    TextInside = 1
    TextRight = 2
    TextLeft = 3
    TextHintRight = 4
    TextHintLeft = 5


class FontOrigin:
    Unset = 0
    Unknown = 1
    WindowsFont = 2
    AppleFont = 3


class FontType:
    Unset = 0
    ManagedFont = 1
    InstalledFont = 2


class FontWeight:
    Unset = 0
    Thin = 1
    Ultralight = 2
    Light = 3
    Normal = 4
    Medium = 5
    Semibold = 6
    Bold = 7
    Ultrabold = 8
    Heavy = 9


class FontStretch:
    Unset = 0
    Ultracondensed = 1
    Extracondensed = 2
    Condensed = 3
    Semicondensed = 4
    Medium = 5
    Semiexpanded = 6
    Expanded = 7
    Extraexpanded = 8
    Ultraexpanded = 9


class FontStyle:
    Unset = 0
    Upright = 1
    Italic = 2
    Oblique = 3


class CaptureTypes:
    Path = 0
    Turntable = 1
    Flythrough = 2
    DaySunStudy = 3
    SeasonalSunStudy = 4
    #None = 5


class Defaults:
    @property
    def Solid() -> HatchPattern: ...
    @property
    def Hatch1() -> HatchPattern: ...
    @property
    def Hatch2() -> HatchPattern: ...
    @property
    def Hatch3() -> HatchPattern: ...
    @property
    def Dash() -> HatchPattern: ...
    @property
    def Grid() -> HatchPattern: ...
    @property
    def Grid60() -> HatchPattern: ...
    @property
    def Plus() -> HatchPattern: ...
    @property
    def Squares() -> HatchPattern: ...
