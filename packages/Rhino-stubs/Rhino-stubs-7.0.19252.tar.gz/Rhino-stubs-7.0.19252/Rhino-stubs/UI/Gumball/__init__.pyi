from typing import Tuple, Set, Iterable, List


class GumballMode:
    #None = 0
    Menu = 1
    TranslateFree = 2
    TranslateX = 3
    TranslateY = 4
    TranslateZ = 5
    TranslateXY = 6
    TranslateYZ = 7
    TranslateZX = 8
    ScaleX = 9
    ScaleY = 10
    ScaleZ = 11
    ScaleXY = 12
    ScaleYZ = 13
    ScaleZX = 14
    RotateX = 15
    RotateY = 16
    RotateZ = 17
    ExtrudeX = 18
    ExtrudeY = 19
    ExtrudeZ = 20


class GumballObject:
    def __init__(self): ...
    def Dispose(self) -> None: ...
    @overload
    def SetFromBoundingBox(self, boundingBox: BoundingBox) -> bool: ...
    @overload
    def SetFromBoundingBox(self, frame: Plane, frameBoundingBox: BoundingBox) -> bool: ...
    def SetFromLine(self, line: Line) -> bool: ...
    def SetFromPlane(self, plane: Plane) -> bool: ...
    def SetFromArc(self, arc: Arc) -> bool: ...
    def SetFromCircle(self, circle: Circle) -> bool: ...
    def SetFromEllipse(self, ellipse: Ellipse) -> bool: ...
    def SetFromLight(self, light: Light) -> bool: ...
    def SetFromHatch(self, hatch: Hatch) -> bool: ...
    def SetFromCurve(self, curve: Curve) -> bool: ...
    def SetFromExtrusion(self, extrusion: Extrusion) -> bool: ...
    @property
    def Frame(self) -> GumballFrame: ...
    @Frame.setter
    def Frame(self, value: GumballFrame) -> None: ...


class GumballAppearanceSettings:
    def __init__(self): ...
    @property
    def RelocateEnabled(self) -> bool: ...
    @RelocateEnabled.setter
    def RelocateEnabled(self, value: bool) -> None: ...
    @property
    def MenuEnabled(self) -> bool: ...
    @MenuEnabled.setter
    def MenuEnabled(self, value: bool) -> None: ...
    @property
    def TranslateXEnabled(self) -> bool: ...
    @TranslateXEnabled.setter
    def TranslateXEnabled(self, value: bool) -> None: ...
    @property
    def TranslateYEnabled(self) -> bool: ...
    @TranslateYEnabled.setter
    def TranslateYEnabled(self, value: bool) -> None: ...
    @property
    def TranslateZEnabled(self) -> bool: ...
    @TranslateZEnabled.setter
    def TranslateZEnabled(self, value: bool) -> None: ...
    @property
    def TranslateXYEnabled(self) -> bool: ...
    @TranslateXYEnabled.setter
    def TranslateXYEnabled(self, value: bool) -> None: ...
    @property
    def TranslateYZEnabled(self) -> bool: ...
    @TranslateYZEnabled.setter
    def TranslateYZEnabled(self, value: bool) -> None: ...
    @property
    def TranslateZXEnabled(self) -> bool: ...
    @TranslateZXEnabled.setter
    def TranslateZXEnabled(self, value: bool) -> None: ...
    @property
    def RotateXEnabled(self) -> bool: ...
    @RotateXEnabled.setter
    def RotateXEnabled(self, value: bool) -> None: ...
    @property
    def RotateYEnabled(self) -> bool: ...
    @RotateYEnabled.setter
    def RotateYEnabled(self, value: bool) -> None: ...
    @property
    def RotateZEnabled(self) -> bool: ...
    @RotateZEnabled.setter
    def RotateZEnabled(self, value: bool) -> None: ...
    @property
    def ScaleXEnabled(self) -> bool: ...
    @ScaleXEnabled.setter
    def ScaleXEnabled(self, value: bool) -> None: ...
    @property
    def ScaleYEnabled(self) -> bool: ...
    @ScaleYEnabled.setter
    def ScaleYEnabled(self, value: bool) -> None: ...
    @property
    def ScaleZEnabled(self) -> bool: ...
    @ScaleZEnabled.setter
    def ScaleZEnabled(self, value: bool) -> None: ...
    @property
    def FreeTranslate(self) -> int: ...
    @FreeTranslate.setter
    def FreeTranslate(self, value: int) -> None: ...
    @property
    def ColorX(self) -> Color: ...
    @ColorX.setter
    def ColorX(self, value: Color) -> None: ...
    @property
    def ColorY(self) -> Color: ...
    @ColorY.setter
    def ColorY(self, value: Color) -> None: ...
    @property
    def ColorZ(self) -> Color: ...
    @ColorZ.setter
    def ColorZ(self, value: Color) -> None: ...
    @property
    def ColorMenuButton(self) -> Color: ...
    @ColorMenuButton.setter
    def ColorMenuButton(self, value: Color) -> None: ...
    @property
    def Radius(self) -> int: ...
    @Radius.setter
    def Radius(self, value: int) -> None: ...
    @property
    def ArrowHeadLength(self) -> int: ...
    @ArrowHeadLength.setter
    def ArrowHeadLength(self, value: int) -> None: ...
    @property
    def ArrowHeadWidth(self) -> int: ...
    @ArrowHeadWidth.setter
    def ArrowHeadWidth(self, value: int) -> None: ...
    @property
    def ScaleGripSize(self) -> int: ...
    @ScaleGripSize.setter
    def ScaleGripSize(self, value: int) -> None: ...
    @property
    def PlanarTranslationGripCorner(self) -> int: ...
    @PlanarTranslationGripCorner.setter
    def PlanarTranslationGripCorner(self, value: int) -> None: ...
    @property
    def PlanarTranslationGripSize(self) -> int: ...
    @PlanarTranslationGripSize.setter
    def PlanarTranslationGripSize(self, value: int) -> None: ...
    @property
    def AxisThickness(self) -> int: ...
    @AxisThickness.setter
    def AxisThickness(self, value: int) -> None: ...
    @property
    def ArcThickness(self) -> int: ...
    @ArcThickness.setter
    def ArcThickness(self, value: int) -> None: ...
    @property
    def MenuDistance(self) -> int: ...
    @MenuDistance.setter
    def MenuDistance(self, value: int) -> None: ...
    @property
    def MenuSize(self) -> int: ...
    @MenuSize.setter
    def MenuSize(self, value: int) -> None: ...


class GumballDisplayConduit:
    def __init__(self): ...
    def Dispose(self) -> None: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @property
    def InRelocate(self) -> bool: ...
    @property
    def PreTransform(self) -> Transform: ...
    @PreTransform.setter
    def PreTransform(self, value: Transform) -> None: ...
    @property
    def GumballTransform(self) -> Transform: ...
    @property
    def TotalTransform(self) -> Transform: ...
    @property
    def BaseGumball(self) -> GumballObject: ...
    @property
    def Gumball(self) -> GumballObject: ...
    @overload
    def SetBaseGumball(self, gumball: GumballObject) -> None: ...
    @overload
    def SetBaseGumball(self, gumball: GumballObject, appearanceSettings: GumballAppearanceSettings) -> None: ...
    def UpdateGumball(self, point: Point3d, worldLine: Line) -> bool: ...
    @property
    def PickResult(self) -> GumballPickResult: ...
    def PickGumball(self, pickContext: PickContext, getPoint: GetPoint) -> bool: ...
    def CheckShiftAndControlKeys(self) -> None: ...


class GumballScaleMode:
    Independent = 0
    XY = 1
    YZ = 2
    ZX = 3
    XYZ = 4


class GumballFrame:
    @property
    def Plane(self) -> Plane: ...
    @Plane.setter
    def Plane(self, value: Plane) -> None: ...
    @property
    def ScaleGripDistance(self) -> Vector3d: ...
    @ScaleGripDistance.setter
    def ScaleGripDistance(self, value: Vector3d) -> None: ...
    @property
    def ScaleMode(self) -> GumballScaleMode: ...
    @ScaleMode.setter
    def ScaleMode(self, value: GumballScaleMode) -> None: ...


class GumballPickResult:
    def SetToDefault(self) -> None: ...
    @property
    def Mode(self) -> GumballMode: ...
