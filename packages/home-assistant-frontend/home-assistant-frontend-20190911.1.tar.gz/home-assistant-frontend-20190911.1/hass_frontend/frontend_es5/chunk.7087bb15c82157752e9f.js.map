{"version":3,"sources":["webpack:///./src/components/entity/ha-entity-picker.ts","webpack:///./src/panels/lovelace/common/structs/struct.ts","webpack:///./src/panels/lovelace/common/structs/is-entity-id.ts","webpack:///./src/panels/lovelace/common/structs/is-icon.ts","webpack:///./src/panels/lovelace/editor/config-elements/config-elements-style.ts","webpack:///./src/panels/lovelace/editor/config-elements/hui-plant-status-card-editor.ts"],"names":["rowRenderer","root","_owner","model","firstElementChild","innerHTML","querySelector","stateObj","item","textContent","Object","_common_entity_compute_state_name__WEBPACK_IMPORTED_MODULE_8__","entity_id","HaEntityPicker","_super","_this","apply","this","arguments","_getStates","memoize_one__WEBPACK_IMPORTED_MODULE_6__","hass","domainFilter","entityFilter","states","entityIds","keys","filter","eid","substr","indexOf","sort","map","key","value","tslib__WEBPACK_IMPORTED_MODULE_0__","prototype","updated","changedProps","call","has","_opened","_hass","render","lit_element__WEBPACK_IMPORTED_MODULE_9__","templateObject_3","_value","allowCustomEntity","_openedChanged","_valueChanged","autofocus","undefined","label","localize","disabled","templateObject_1","length","templateObject_2","defineProperty","ev","detail","setTimeout","_common_dom_fire_event__WEBPACK_IMPORTED_MODULE_10__","templateObject_4","type","Boolean","attribute","customElements","define","__webpack_require__","d","__webpack_exports__","struct","index_es","types","entity-id","includes","icon","configElementStyle","lit_element__WEBPACK_IMPORTED_MODULE_1__","cardConfigStruct","_common_structs_struct__WEBPACK_IMPORTED_MODULE_5__","entity","name","HuiPlantStatusCardEditor","setConfig","config","_config","_config_elements_style__WEBPACK_IMPORTED_MODULE_7__","_name","_entity","target","configValue","_a","_common_dom_fire_event__WEBPACK_IMPORTED_MODULE_6__"],"mappings":"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","file":"chunk.7087bb15c82157752e9f.js","sourcesContent":["import \"@polymer/paper-icon-button/paper-icon-button\";\nimport \"@polymer/paper-input/paper-input\";\nimport \"@polymer/paper-item/paper-icon-item\";\nimport \"@polymer/paper-item/paper-item-body\";\nimport \"@vaadin/vaadin-combo-box/vaadin-combo-box-light\";\nimport memoizeOne from \"memoize-one\";\n\nimport \"./state-badge\";\n\nimport computeStateName from \"../../common/entity/compute_state_name\";\nimport {\n  LitElement,\n  TemplateResult,\n  html,\n  css,\n  CSSResult,\n  property,\n  PropertyValues,\n} from \"lit-element\";\nimport { HomeAssistant } from \"../../types\";\nimport { HassEntity } from \"home-assistant-js-websocket\";\nimport { PolymerChangedEvent } from \"../../polymer-types\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\n\nexport type HaEntityPickerEntityFilterFunc = (entityId: HassEntity) => boolean;\n\nconst rowRenderer = (\n  root: HTMLElement,\n  _owner,\n  model: { item: HassEntity }\n) => {\n  if (!root.firstElementChild) {\n    root.innerHTML = `\n      <style>\n        paper-icon-item {\n          margin: -10px;\n          padding: 0;\n        }\n      </style>\n      <paper-icon-item>\n        <state-badge state-obj=\"[[item]]\" slot=\"item-icon\"></state-badge>\n        <paper-item-body two-line=\"\">\n          <div class='name'>[[_computeStateName(item)]]</div>\n          <div secondary>[[item.entity_id]]</div>\n        </paper-item-body>\n      </paper-icon-item>\n    `;\n  }\n\n  root.querySelector(\"state-badge\")!.stateObj = model.item;\n  root.querySelector(\".name\")!.textContent = computeStateName(model.item);\n  root.querySelector(\"[secondary]\")!.textContent = model.item.entity_id;\n};\n\nclass HaEntityPicker extends LitElement {\n  @property({ type: Boolean }) public autofocus?: boolean;\n  @property({ type: Boolean }) public disabled?: boolean;\n  @property({ type: Boolean, attribute: \"allow-custom-entity\" })\n  public allowCustomEntity;\n  @property() public hass?: HomeAssistant;\n  @property() public label?: string;\n  @property() public value?: string;\n  @property({ attribute: \"domain-filter\" }) public domainFilter?: string;\n  @property() public entityFilter?: HaEntityPickerEntityFilterFunc;\n  @property({ type: Boolean }) private _opened?: boolean;\n  @property() private _hass?: HomeAssistant;\n\n  private _getStates = memoizeOne(\n    (\n      hass: this[\"hass\"],\n      domainFilter: this[\"domainFilter\"],\n      entityFilter: this[\"entityFilter\"]\n    ) => {\n      let states: HassEntity[] = [];\n\n      if (!hass) {\n        return [];\n      }\n      let entityIds = Object.keys(hass.states);\n\n      if (domainFilter) {\n        entityIds = entityIds.filter(\n          (eid) => eid.substr(0, eid.indexOf(\".\")) === domainFilter\n        );\n      }\n\n      states = entityIds.sort().map((key) => hass!.states[key]);\n\n      if (entityFilter) {\n        states = states.filter(\n          (stateObj) =>\n            // We always want to include the entity of the current value\n            stateObj.entity_id === this.value || entityFilter!(stateObj)\n        );\n      }\n      return states;\n    }\n  );\n\n  protected updated(changedProps: PropertyValues) {\n    super.updated(changedProps);\n\n    if (changedProps.has(\"hass\") && !this._opened) {\n      this._hass = this.hass;\n    }\n  }\n\n  protected render(): TemplateResult | void {\n    const states = this._getStates(\n      this._hass,\n      this.domainFilter,\n      this.entityFilter\n    );\n\n    return html`\n      <vaadin-combo-box-light\n        item-value-path=\"entity_id\"\n        item-label-path=\"entity_id\"\n        .items=${states}\n        .value=${this._value}\n        .allowCustomValue=${this.allowCustomEntity}\n        .renderer=${rowRenderer}\n        @opened-changed=${this._openedChanged}\n        @value-changed=${this._valueChanged}\n      >\n        <paper-input\n          .autofocus=${this.autofocus}\n          .label=${this.label === undefined && this._hass\n            ? this._hass.localize(\"ui.components.entity.entity-picker.entity\")\n            : this.label}\n          .value=${this._value}\n          .disabled=${this.disabled}\n          class=\"input\"\n          autocapitalize=\"none\"\n          autocomplete=\"off\"\n          autocorrect=\"off\"\n          spellcheck=\"false\"\n        >\n          ${this.value\n            ? html`\n                <paper-icon-button\n                  aria-label=\"Clear\"\n                  slot=\"suffix\"\n                  class=\"clear-button\"\n                  icon=\"hass:close\"\n                  no-ripple\n                >\n                  Clear\n                </paper-icon-button>\n              `\n            : \"\"}\n          ${states.length > 0\n            ? html`\n                <paper-icon-button\n                  aria-label=\"Show entities\"\n                  slot=\"suffix\"\n                  class=\"toggle-button\"\n                  .icon=${this._opened ? \"hass:menu-up\" : \"hass:menu-down\"}\n                >\n                  Toggle\n                </paper-icon-button>\n              `\n            : \"\"}\n        </paper-input>\n      </vaadin-combo-box-light>\n    `;\n  }\n\n  private get _value() {\n    return this.value || \"\";\n  }\n\n  private _openedChanged(ev: PolymerChangedEvent<boolean>) {\n    this._opened = ev.detail.value;\n  }\n\n  private _valueChanged(ev: PolymerChangedEvent<string>) {\n    const newValue = ev.detail.value;\n    if (newValue !== this._value) {\n      this.value = ev.detail.value;\n      setTimeout(() => {\n        fireEvent(this, \"value-changed\", { value: this.value });\n        fireEvent(this, \"change\");\n      }, 0);\n    }\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      paper-input > paper-icon-button {\n        width: 24px;\n        height: 24px;\n        padding: 2px;\n        color: var(--secondary-text-color);\n      }\n      [hidden] {\n        display: none;\n      }\n    `;\n  }\n}\n\ncustomElements.define(\"ha-entity-picker\", HaEntityPicker);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-entity-picker\": HaEntityPicker;\n  }\n}\n","import { superstruct } from \"superstruct\";\nimport { isEntityId } from \"./is-entity-id\";\nimport { isIcon } from \"./is-icon\";\n\nexport const struct = superstruct({\n  types: {\n    \"entity-id\": isEntityId,\n    icon: isIcon,\n  },\n});\n","export function isEntityId(value: any): string | boolean {\n  if (typeof value !== \"string\") {\n    return \"entity id should be a string\";\n  }\n  if (!value.includes(\".\")) {\n    return \"entity id should be in the format 'domain.entity'\";\n  }\n  return true;\n}\n","export function isIcon(value: any): string | boolean {\n  if (typeof value !== \"string\") {\n    return \"icon should be a string\";\n  }\n  if (!value.includes(\":\")) {\n    return \"icon should be in the format 'mdi:icon'\";\n  }\n  return true;\n}\n","import { html } from \"lit-element\";\n\nexport const configElementStyle = html`\n  <style>\n    paper-toggle-button {\n      padding-top: 16px;\n    }\n    .side-by-side {\n      display: flex;\n    }\n    .side-by-side > * {\n      flex: 1;\n      padding-right: 4px;\n    }\n    .suffix {\n      margin: 0 8px;\n    }\n  </style>\n`;\n","import {\n  html,\n  LitElement,\n  TemplateResult,\n  customElement,\n  property,\n} from \"lit-element\";\nimport \"@polymer/paper-input/paper-input\";\n\nimport \"../../../../components/entity/ha-entity-picker\";\nimport \"../../../../components/ha-icon\";\n\nimport { struct } from \"../../common/structs/struct\";\nimport { EntitiesEditorEvent, EditorTarget } from \"../types\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { LovelaceCardEditor } from \"../../types\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { configElementStyle } from \"./config-elements-style\";\nimport { PlantStatusCardConfig } from \"../../cards/types\";\n\nconst cardConfigStruct = struct({\n  type: \"string\",\n  entity: \"string\",\n  name: \"string?\",\n});\n\n@customElement(\"hui-plant-status-card-editor\")\nexport class HuiPlantStatusCardEditor extends LitElement\n  implements LovelaceCardEditor {\n  @property() public hass?: HomeAssistant;\n\n  @property() private _config?: PlantStatusCardConfig;\n\n  public setConfig(config: PlantStatusCardConfig): void {\n    config = cardConfigStruct(config);\n    this._config = config;\n  }\n\n  get _entity(): string {\n    return this._config!.entity || \"\";\n  }\n\n  get _name(): string {\n    return this._config!.name || \"\";\n  }\n\n  protected render(): TemplateResult | void {\n    if (!this.hass) {\n      return html``;\n    }\n\n    return html`\n      ${configElementStyle}\n      <div class=\"card-config\">\n        <div class=\"side-by-side\">\n          <paper-input\n            label=\"Name\"\n            .value=\"${this._name}\"\n            .configValue=\"${\"name\"}\"\n            @value-changed=\"${this._valueChanged}\"\n          ></paper-input>\n          <ha-entity-picker\n            .hass=\"${this.hass}\"\n            .value=\"${this._entity}\"\n            .configValue=${\"entity\"}\n            domain-filter=\"plant\"\n            @change=\"${this._valueChanged}\"\n            allow-custom-entity\n          ></ha-entity-picker>\n        </div>\n      </div>\n    `;\n  }\n\n  private _valueChanged(ev: EntitiesEditorEvent): void {\n    if (!this._config || !this.hass) {\n      return;\n    }\n    const target = ev.target! as EditorTarget;\n    if (this[`_${target.configValue}`] === target.value) {\n      return;\n    }\n    if (target.configValue) {\n      if (target.value === \"\") {\n        delete this._config[target.configValue!];\n      } else {\n        this._config = {\n          ...this._config,\n          [target.configValue!]: target.value,\n        };\n      }\n    }\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-plant-status-card-editor\": HuiPlantStatusCardEditor;\n  }\n}\n"],"sourceRoot":""}