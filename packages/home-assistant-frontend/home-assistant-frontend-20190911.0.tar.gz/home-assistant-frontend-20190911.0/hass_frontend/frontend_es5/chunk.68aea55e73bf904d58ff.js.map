{"version":3,"sources":["webpack:///./src/external_app/external_messaging.ts","webpack:///./src/external_app/external_events_forwarder.ts","webpack:///./src/external_app/external_auth.ts"],"names":["external_messaging_ExternalMessaging","ExternalMessaging","this","commands","cache","msgId","prototype","attach","bus","_this","window","addEventListener","ev","fireMessage","type","payload","event","detail","hapticType","externalForwardHaptics","msg","receiveMessage","sendMessage","id","Promise","resolve","reject","_sendExternal","pendingCmd","success","result","error","console","warn","externalApp","externalBus","JSON","stringify","webkit","messageHandlers","postMessage","Error","external_auth_ExternalAuth","_super","ExternalAuth","hassUrl","call","clientId","refresh_token","access_token","expires_in","expires","tslib_es6","refreshAccessToken","callbackPayload","callback","callbackPromise","data","_a","sent","getExternalAuth","tokens","Date","now","revoke","revokeExternalAuth","haws_es","createExternalAuth","auth","external"],"mappings":"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","file":"chunk.68aea55e73bf904d58ff.js","sourcesContent":["import {\n  externalForwardConnectionEvents,\n  externalForwardHaptics,\n} from \"./external_events_forwarder\";\n\nconst CALLBACK_EXTERNAL_BUS = \"externalBus\";\n\ninterface CommandInFlight {\n  resolve: (data: any) => void;\n  reject: (err: ExternalError) => void;\n}\n\nexport interface InternalMessage {\n  id?: number;\n  type: string;\n  payload?: unknown;\n}\n\ninterface ExternalError {\n  code: string;\n  message: string;\n}\n\ninterface ExternalMessageResult {\n  id: number;\n  type: \"result\";\n  success: true;\n  result: unknown;\n}\n\ninterface ExternalMessageResultError {\n  id: number;\n  type: \"result\";\n  success: false;\n  error: ExternalError;\n}\n\ntype ExternalMessage = ExternalMessageResult | ExternalMessageResultError;\n\nexport class ExternalMessaging {\n  public commands: { [msgId: number]: CommandInFlight } = {};\n  public cache: { [key: string]: any } = {};\n  public msgId = 0;\n\n  public attach() {\n    externalForwardConnectionEvents(this);\n    externalForwardHaptics(this);\n    window[CALLBACK_EXTERNAL_BUS] = (msg) => this.receiveMessage(msg);\n  }\n\n  /**\n   * Send message to external app that expects a response.\n   * @param msg message to send\n   */\n  public sendMessage<T>(msg: InternalMessage): Promise<T> {\n    const msgId = ++this.msgId;\n    msg.id = msgId;\n\n    this.fireMessage(msg);\n\n    return new Promise<T>((resolve, reject) => {\n      this.commands[msgId] = { resolve, reject };\n    });\n  }\n\n  /**\n   * Send message to external app without expecting a response.\n   * @param msg message to send\n   */\n  public fireMessage(msg: InternalMessage) {\n    if (!msg.id) {\n      msg.id = ++this.msgId;\n    }\n    this._sendExternal(msg);\n  }\n\n  public receiveMessage(msg: ExternalMessage) {\n    if (__DEV__) {\n      // tslint:disable-next-line: no-console\n      console.log(\"Receiving message from external app\", msg);\n    }\n\n    const pendingCmd = this.commands[msg.id];\n\n    if (!pendingCmd) {\n      // tslint:disable-next-line: no-console\n      console.warn(`Received unknown msg ID`, msg.id);\n      return;\n    }\n\n    if (msg.type === \"result\") {\n      if (msg.success) {\n        pendingCmd.resolve(msg.result);\n      } else {\n        pendingCmd.reject(msg.error);\n      }\n    }\n  }\n\n  protected _sendExternal(msg: InternalMessage) {\n    if (__DEV__) {\n      // tslint:disable-next-line: no-console\n      console.log(\"Sending message to external app\", msg);\n    }\n    if (window.externalApp) {\n      window.externalApp.externalBus(JSON.stringify(msg));\n    } else {\n      window.webkit!.messageHandlers.externalBus.postMessage(msg);\n    }\n  }\n}\n","import { ExternalMessaging } from \"./external_messaging\";\n\nexport const externalForwardConnectionEvents = (bus: ExternalMessaging) => {\n  window.addEventListener(\"connection-status\", (ev) =>\n    bus.fireMessage({\n      type: \"connection-status\",\n      payload: { event: ev.detail },\n    })\n  );\n};\n\nexport const externalForwardHaptics = (bus: ExternalMessaging) =>\n  window.addEventListener(\"haptic\", (ev) =>\n    bus.fireMessage({ type: \"haptic\", payload: { hapticType: ev.detail } })\n  );\n","/**\n * Auth class that connects to a native app for authentication.\n */\nimport { Auth } from \"home-assistant-js-websocket\";\nimport { ExternalMessaging, InternalMessage } from \"./external_messaging\";\n\nconst CALLBACK_SET_TOKEN = \"externalAuthSetToken\";\nconst CALLBACK_REVOKE_TOKEN = \"externalAuthRevokeToken\";\n\ninterface BasePayload {\n  callback: string;\n}\n\ninterface RefreshTokenResponse {\n  access_token: string;\n  expires_in: number;\n}\n\ndeclare global {\n  interface Window {\n    externalApp?: {\n      getExternalAuth(payload: string);\n      revokeExternalAuth(payload: string);\n      externalBus(payload: string);\n    };\n    webkit?: {\n      messageHandlers: {\n        getExternalAuth: {\n          postMessage(payload: BasePayload);\n        };\n        revokeExternalAuth: {\n          postMessage(payload: BasePayload);\n        };\n        externalBus: {\n          postMessage(payload: InternalMessage);\n        };\n      };\n    };\n  }\n}\n\nif (!window.externalApp && !window.webkit) {\n  throw new Error(\n    \"External auth requires either externalApp or webkit defined on Window object.\"\n  );\n}\n\nclass ExternalAuth extends Auth {\n  public external?: ExternalMessaging;\n\n  constructor(hassUrl: string) {\n    super({\n      hassUrl,\n      clientId: \"\",\n      refresh_token: \"\",\n      access_token: \"\",\n      expires_in: 0,\n      // This will trigger connection to do a refresh right away\n      expires: 0,\n    });\n  }\n\n  public async refreshAccessToken() {\n    const callbackPayload = { callback: CALLBACK_SET_TOKEN };\n\n    const callbackPromise = new Promise<RefreshTokenResponse>(\n      (resolve, reject) => {\n        window[CALLBACK_SET_TOKEN] = (success, data) =>\n          success ? resolve(data) : reject(data);\n      }\n    );\n\n    await 0;\n\n    if (window.externalApp) {\n      window.externalApp.getExternalAuth(JSON.stringify(callbackPayload));\n    } else {\n      window.webkit!.messageHandlers.getExternalAuth.postMessage(\n        callbackPayload\n      );\n    }\n\n    const tokens = await callbackPromise;\n\n    this.data.access_token = tokens.access_token;\n    this.data.expires = tokens.expires_in * 1000 + Date.now();\n  }\n\n  public async revoke() {\n    const callbackPayload = { callback: CALLBACK_REVOKE_TOKEN };\n\n    const callbackPromise = new Promise((resolve, reject) => {\n      window[CALLBACK_REVOKE_TOKEN] = (success, data) =>\n        success ? resolve(data) : reject(data);\n    });\n\n    await 0;\n\n    if (window.externalApp) {\n      window.externalApp.revokeExternalAuth(JSON.stringify(callbackPayload));\n    } else {\n      window.webkit!.messageHandlers.revokeExternalAuth.postMessage(\n        callbackPayload\n      );\n    }\n\n    await callbackPromise;\n  }\n}\n\nexport const createExternalAuth = (hassUrl: string) => {\n  const auth = new ExternalAuth(hassUrl);\n  if (\n    (window.externalApp && window.externalApp.externalBus) ||\n    (window.webkit && window.webkit.messageHandlers.externalBus)\n  ) {\n    auth.external = new ExternalMessaging();\n    auth.external.attach();\n  }\n  return auth;\n};\n"],"sourceRoot":""}