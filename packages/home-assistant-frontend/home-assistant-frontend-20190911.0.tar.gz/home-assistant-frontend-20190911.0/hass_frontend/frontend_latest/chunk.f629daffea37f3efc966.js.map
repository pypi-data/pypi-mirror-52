{"version":3,"sources":["webpack:///./src/components/ha-fab.ts","webpack:///./src/components/ha-checkbox.ts","webpack:///./src/panels/lovelace/editor/unused-entities/hui-select-row.ts","webpack:///./src/panels/lovelace/common/compute-unused-entities.ts","webpack:///./src/panels/lovelace/editor/unused-entities/hui-unused-entities.ts","webpack:///./src/panels/lovelace/editor/select-view/show-select-view-dialog.ts"],"names":["MwcFab","customElements","get","HaFab","[object Object]","classes","mdc-fab--mini","this","mini","mdc-fab--exited","exited","mdc-fab--extended","extended","showLabel","label","_material_mwc_base_base_element__WEBPACK_IMPORTED_MODULE_1__","Object","_material_mwc_ripple_ripple_directive_js__WEBPACK_IMPORTED_MODULE_2__","disabled","icon","showIconAtEnd","tslib__WEBPACK_IMPORTED_MODULE_0__","MwcCheckbox","HaCheckbox","super","firstUpdated","style","setProperty","tslib_es6","lit_element","hui_select_row_HuiSelectRow","selectable","entity","stateObj","hass","states","undefined","_handleSelect","compute_state_name","entity_id","compute_domain","last_changed","ev","checkbox","currentTarget","fire_event","selected","checked","styles","EXCLUDED_DOMAINS","addFromAction","entities","actionConfig","action","service_data","entityIds","Array","isArray","entityId","add","addEntityId","camera_image","tap_action","hold_action","addEntities","obj","forEach","card","cards","elements","badges","badge","computeUnusedEntities","config","usedEntities","Set","views","view","computeUsedEntities","keys","filter","has","includes","split","sort","hui_unused_entities_HuiUnusedEntities","_unusedEntities","_selectedEntities","_config","lovelace","changedProperties","updated","_getUnusedEntities","mode","editMode","_handleSelectionChanged","map","class_map","rtl","compute_rtl","localize","_selectView","detail","push","index","indexOf","splice","element","selectViewDialogParams","viewSelectedCallback","_addCard","dialogTag","dialogImport","__webpack_require__","e","then","bind","dialogParams","show_edit_card_dialog","path"],"mappings":"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","file":"chunk.f629daffea37f3efc966.js","sourcesContent":["import {\n  classMap,\n  html,\n  customElement,\n  Constructor,\n} from \"@material/mwc-base/base-element\";\nimport { ripple } from \"@material/mwc-ripple/ripple-directive.js\";\n\nimport \"@material/mwc-fab\";\n// tslint:disable-next-line\nimport { Fab } from \"@material/mwc-fab\";\n// tslint:disable-next-line\nconst MwcFab = customElements.get(\"mwc-fab\") as Constructor<Fab>;\n\n@customElement(\"ha-fab\")\nexport class HaFab extends MwcFab {\n  // We override the render method because we don't have an icon font and mwc-fab doesn't support our svg-icon sets.\n  // Based on version mwc-fab 0.8\n  protected render() {\n    const classes = {\n      \"mdc-fab--mini\": this.mini,\n      \"mdc-fab--exited\": this.exited,\n      \"mdc-fab--extended\": this.extended,\n    };\n    const showLabel = this.label !== \"\" && this.extended;\n    return html`\n      <button\n        .ripple=\"${ripple()}\"\n        class=\"mdc-fab ${classMap(classes)}\"\n        ?disabled=\"${this.disabled}\"\n        aria-label=\"${this.label || this.icon}\"\n      >\n        ${showLabel && this.showIconAtEnd ? this.label : \"\"}\n        ${this.icon\n          ? html`\n              <ha-icon .icon=${this.icon}></ha-icon>\n            `\n          : \"\"}\n        ${showLabel && !this.showIconAtEnd ? this.label : \"\"}\n      </button>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-fab\": HaFab;\n  }\n}\n","import { Constructor, customElement } from \"lit-element\";\nimport \"@material/mwc-checkbox\";\n// tslint:disable-next-line\nimport { Checkbox } from \"@material/mwc-checkbox\";\n// tslint:disable-next-line\nconst MwcCheckbox = customElements.get(\"mwc-checkbox\") as Constructor<Checkbox>;\n\n@customElement(\"ha-checkbox\")\nexport class HaCheckbox extends MwcCheckbox {\n  protected firstUpdated() {\n    super.firstUpdated();\n    this.style.setProperty(\"--mdc-theme-secondary\", \"var(--primary-color)\");\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-checkbox\": HaCheckbox;\n  }\n}\n","import {\n  html,\n  LitElement,\n  TemplateResult,\n  customElement,\n  property,\n  css,\n  CSSResult,\n} from \"lit-element\";\n\nimport { Checkbox } from \"@material/mwc-checkbox\";\nimport { HomeAssistant } from \"../../../../types\";\nimport computeStateName from \"../../../../common/entity/compute_state_name\";\nimport computeDomain from \"../../../../common/entity/compute_domain\";\n\nimport \"../../../../components/ha-checkbox\";\nimport \"../../../../components/entity/state-badge\";\nimport \"../../../../components/ha-relative-time\";\nimport \"../../../../components/ha-icon\";\n\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\n\ndeclare global {\n  // for fire event\n  interface HASSDomEvents {\n    \"entity-selection-changed\": EntitySelectionChangedEvent;\n  }\n}\n\nexport interface EntitySelectionChangedEvent {\n  entity: string;\n  selected: boolean;\n}\n\n@customElement(\"hui-select-row\")\nclass HuiSelectRow extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() public entity?: string;\n\n  @property() public selectable = true;\n\n  protected render(): TemplateResult | void {\n    if (!this.entity) {\n      return html``;\n    }\n\n    const stateObj = this.entity ? this.hass.states[this.entity] : undefined;\n\n    if (!stateObj) {\n      return html``;\n    }\n\n    return html`\n      <div class=\"flex-row\" role=\"rowgroup\">\n        <div class=\"flex-cell\" role=\"cell\">\n          ${this.selectable\n            ? html`\n                <ha-checkbox @change=${this._handleSelect}></ha-checkbox>\n              `\n            : \"\"}\n          <state-badge .hass=${this.hass} .stateObj=${stateObj}></state-badge>\n          ${computeStateName(stateObj)}\n        </div>\n        <div class=\"flex-cell\" role=\"cell\">${stateObj.entity_id}</div>\n        <div class=\"flex-cell\" role=\"cell\">\n          ${computeDomain(stateObj.entity_id)}\n        </div>\n        <div class=\"flex-cell\" role=\"cell\">\n          <ha-relative-time\n            .hass=${this.hass}\n            .datetime=${stateObj.last_changed}\n          ></ha-relative-time>\n        </div>\n      </div>\n    `;\n  }\n\n  private _handleSelect(ev: Event): void {\n    const checkbox = ev.currentTarget as Checkbox;\n    fireEvent(this, \"entity-selection-changed\", {\n      entity: this.entity!,\n      selected: checkbox.checked as boolean,\n    });\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      div {\n        box-sizing: border-box;\n      }\n\n      .flex-row {\n        display: flex;\n        flex-flow: row wrap;\n      }\n\n      .flex-row:hover {\n        background: var(--table-row-alternative-background-color, #eee);\n      }\n\n      .flex-cell {\n        width: calc(100% / 4);\n        padding: 12px 24px;\n        border-bottom: 1px solid #e0e0e0;\n        overflow: hidden;\n        text-overflow: ellipsis;\n        line-height: 40px;\n      }\n\n      @media all and (max-width: 767px) {\n        .flex-cell {\n          width: calc(100% / 3);\n          padding-top: 0;\n        }\n        .flex-cell:first-child {\n          width: 100%;\n          padding-top: 12px;\n          padding-bottom: 0;\n          border-bottom: 0;\n        }\n      }\n\n      @media all and (max-width: 430px) {\n        .flex-cell {\n          border-bottom: 0;\n          padding: 0 24px;\n        }\n\n        .flex-cell:first-child {\n          padding-top: 12px;\n        }\n\n        .flex-cell:last-child {\n          padding-bottom: 12px;\n          border-bottom: 1px solid #e0e0e0;\n        }\n\n        .flex-cell {\n          width: 100%;\n        }\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-select-row\": HuiSelectRow;\n  }\n}\n","import { LovelaceConfig, ActionConfig } from \"../../../data/lovelace\";\nimport { HomeAssistant } from \"../../../types\";\n\nconst EXCLUDED_DOMAINS = [\"zone\"];\n\nconst addFromAction = (entities: Set<string>, actionConfig: ActionConfig) => {\n  if (\n    actionConfig.action !== \"call-service\" ||\n    !actionConfig.service_data ||\n    !actionConfig.service_data.entity_id\n  ) {\n    return;\n  }\n  let entityIds = actionConfig.service_data.entity_id;\n  if (!Array.isArray(entityIds)) {\n    entityIds = [entityIds];\n  }\n  for (const entityId of entityIds) {\n    entities.add(entityId);\n  }\n};\n\nconst addEntityId = (entities: Set<string>, entity) => {\n  if (typeof entity === \"string\") {\n    entities.add(entity);\n    return;\n  }\n\n  if (entity.entity) {\n    entities.add(entity.entity);\n  }\n  if (entity.camera_image) {\n    entities.add(entity.camera_image);\n  }\n  if (entity.tap_action) {\n    addFromAction(entities, entity.tap_action);\n  }\n  if (entity.hold_action) {\n    addFromAction(entities, entity.hold_action);\n  }\n};\n\nconst addEntities = (entities: Set<string>, obj) => {\n  if (obj.entity) {\n    addEntityId(entities, obj.entity);\n  }\n  if (obj.entities) {\n    obj.entities.forEach((entity) => addEntityId(entities, entity));\n  }\n  if (obj.card) {\n    addEntities(entities, obj.card);\n  }\n  if (obj.cards) {\n    obj.cards.forEach((card) => addEntities(entities, card));\n  }\n  if (obj.elements) {\n    obj.elements.forEach((card) => addEntities(entities, card));\n  }\n  if (obj.badges) {\n    obj.badges.forEach((badge) => addEntityId(entities, badge));\n  }\n};\n\nconst computeUsedEntities = (config) => {\n  const entities = new Set<string>();\n  config.views.forEach((view) => addEntities(entities, view));\n  return entities;\n};\n\nexport const computeUnusedEntities = (\n  hass: HomeAssistant,\n  config: LovelaceConfig\n): string[] => {\n  const usedEntities = computeUsedEntities(config);\n  return Object.keys(hass.states)\n    .filter(\n      (entity) =>\n        !usedEntities.has(entity) &&\n        !EXCLUDED_DOMAINS.includes(entity.split(\".\", 1)[0])\n    )\n    .sort();\n};\n","import {\n  html,\n  LitElement,\n  TemplateResult,\n  PropertyValues,\n  property,\n  customElement,\n  css,\n  CSSResult,\n} from \"lit-element\";\n\nimport { classMap } from \"lit-html/directives/class-map\";\nimport \"../../../../components/ha-fab\";\n\nimport \"./hui-select-row\";\n\nimport { computeRTL } from \"../../../../common/util/compute_rtl\";\nimport { computeUnusedEntities } from \"../../common/compute-unused-entities\";\nimport { showSelectViewDialog } from \"../select-view/show-select-view-dialog\";\nimport { showEditCardDialog } from \"../card-editor/show-edit-card-dialog\";\n\nimport { HomeAssistant } from \"../../../../types\";\nimport { Lovelace } from \"../../types\";\nimport { LovelaceConfig } from \"../../../../data/lovelace\";\n\n@customElement(\"hui-unused-entities\")\nexport class HuiUnusedEntities extends LitElement {\n  @property() public lovelace?: Lovelace;\n\n  @property() public hass?: HomeAssistant;\n\n  @property() private _unusedEntities: string[] = [];\n\n  private _selectedEntities: string[] = [];\n\n  private get _config(): LovelaceConfig {\n    return this.lovelace!.config;\n  }\n\n  protected updated(changedProperties: PropertyValues): void {\n    super.updated(changedProperties);\n\n    if (changedProperties.has(\"lovelace\")) {\n      this._getUnusedEntities();\n    }\n  }\n\n  protected render(): TemplateResult | void {\n    if (!this.hass || !this.lovelace) {\n      return html``;\n    }\n\n    if (this.lovelace.mode === \"storage\" && this.lovelace.editMode === false) {\n      return html``;\n    }\n\n    return html`\n      <ha-card header=\"Unused entities\">\n        <div class=\"card-content\">\n          These are the entities that you have available, but are not in your\n          Lovelace UI yet.\n          ${this.lovelace.mode === \"storage\"\n            ? html`\n                <br />Select the entities you want to add to a card and then\n                click the add card button.\n              `\n            : \"\"}\n        </div>\n        <div\n          class=\"table-container\"\n          role=\"table\"\n          aria-label=\"Unused Entities\"\n          @entity-selection-changed=${this._handleSelectionChanged}\n        >\n          <div class=\"flex-row header\" role=\"rowgroup\">\n            <div class=\"flex-cell\" role=\"columnheader\">Entity</div>\n            <div class=\"flex-cell\" role=\"columnheader\">Entity id</div>\n            <div class=\"flex-cell\" role=\"columnheader\">Domain</div>\n            <div class=\"flex-cell\" role=\"columnheader\">Last Changed</div>\n          </div>\n          ${this._unusedEntities.map((entity) => {\n            return html`\n              <hui-select-row\n                .selectable=${this.lovelace!.mode === \"storage\"}\n                .hass=${this.hass}\n                .entity=${entity}\n              ></hui-select-row>\n            `;\n          })}\n        </div>\n      </ha-card>\n      ${this.lovelace.mode === \"storage\"\n        ? html`\n            <ha-fab\n              class=\"${classMap({\n                rtl: computeRTL(this.hass),\n              })}\"\n              icon=\"hass:plus\"\n              label=\"${this.hass.localize(\n                \"ui.panel.lovelace.editor.edit_card.add\"\n              )}\"\n              @click=\"${this._selectView}\"\n            ></ha-fab>\n          `\n        : \"\"}\n    `;\n  }\n\n  private _getUnusedEntities(): void {\n    if (!this.hass || !this.lovelace) {\n      return;\n    }\n    this._selectedEntities = [];\n    this._unusedEntities = computeUnusedEntities(this.hass, this._config!);\n  }\n\n  private _handleSelectionChanged(ev: any): void {\n    if (ev.detail.selected) {\n      this._selectedEntities.push(ev.detail.entity);\n    } else {\n      const index = this._selectedEntities.indexOf(ev.detail.entity);\n      if (index !== -1) {\n        this._selectedEntities.splice(index, 1);\n      }\n    }\n  }\n\n  private _selectView(): void {\n    showSelectViewDialog(this, {\n      lovelace: this.lovelace!,\n      viewSelectedCallback: (view) => this._addCard(view),\n    });\n  }\n\n  private _addCard(view: number): void {\n    showEditCardDialog(this, {\n      lovelace: this.lovelace!,\n      path: [view],\n      entities: this._selectedEntities,\n    });\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      :host {\n        background: var(--lovelace-background);\n        padding: 16px;\n      }\n      ha-fab {\n        position: sticky;\n        float: right;\n        bottom: 16px;\n        z-index: 1;\n      }\n      ha-fab.rtl {\n        float: left;\n      }\n\n      div {\n        box-sizing: border-box;\n      }\n\n      .table-container {\n        display: block;\n        margin: auto;\n      }\n\n      .flex-row {\n        display: flex;\n        flex-flow: row wrap;\n      }\n      .flex-row .flex-cell {\n        font-weight: bold;\n      }\n\n      .flex-cell {\n        width: calc(100% / 4);\n        padding: 12px 24px;\n        border-bottom: 1px solid #e0e0e0;\n        vertical-align: middle;\n      }\n\n      @media all and (max-width: 767px) {\n        .flex-cell {\n          width: calc(100% / 3);\n        }\n        .flex-cell:first-child {\n          width: 100%;\n          border-bottom: 0;\n        }\n      }\n      @media all and (max-width: 430px) {\n        .flex-cell {\n          border-bottom: 0;\n        }\n\n        .flex-cell:last-child {\n          border-bottom: 1px solid #e0e0e0;\n        }\n\n        .flex-cell {\n          width: 100%;\n        }\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-unused-entities\": HuiUnusedEntities;\n  }\n}\n","import { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { Lovelace } from \"../../types\";\n\nexport interface SelectViewDialogParams {\n  lovelace: Lovelace;\n  viewSelectedCallback: (view: number) => void;\n}\n\nexport const showSelectViewDialog = (\n  element: HTMLElement,\n  selectViewDialogParams: SelectViewDialogParams\n): void => {\n  fireEvent(element, \"show-dialog\", {\n    dialogTag: \"hui-dialog-select-view\",\n    dialogImport: () =>\n      import(/* webpackChunkName: \"hui-dialog-select-view\" */ \"./hui-dialog-select-view\"),\n    dialogParams: selectViewDialogParams,\n  });\n};\n"],"sourceRoot":""}