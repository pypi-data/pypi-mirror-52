# -*- coding: utf-8 -*-
from distutils.core import setup

packages = \
['warm']

package_data = \
{'': ['*']}

setup_kwargs = {
    'name': 'pywarm',
    'version': '0.4.0',
    'description': 'A cleaner way to build neural networks for PyTorch.',
    'long_description': '\n[![PyWarm - A cleaner way to build neural networks for PyTorch](https://github.com/blue-season/pywarm/raw/gh-pages/docs/pywarm-logo.png)](https://blue-season.github.io/pywarm/)\n\n# PyWarm\n\nA cleaner way to build neural networks for PyTorch.\n\n[![PyPI Python Version](https://img.shields.io/pypi/pyversions/pywarm)](https://github.com/blue-season/pywarm)\n[![PyPI Version](https://img.shields.io/pypi/v/pywarm)](https://pypi.org/project/pywarm/)\n[![License](https://img.shields.io/github/license/blue-season/pywarm)](https://github.com/blue-season/pywarm/blob/master/LICENSE)\n\n[Examples](https://blue-season.github.io/pywarm/docs/example/)  |  [Tutorial](https://blue-season.github.io/pywarm/docs/tutorial/)  |   [API reference](https://blue-season.github.io/pywarm/reference/warm/functional/)\n\n----\n\n## Introduction\n\nPyWarm is a lightweight, high-level neural network construction API for PyTorch.\nIt enables defining all parts of NNs in the functional way.\n\nWith PyWarm, you can put *all* network data flow logic in the `forward()` method of\nyour model, without the need to define children modules in the `__init__()` method\nand then call it again in the `forward()`.\nThis result in a much more readable model definition in fewer lines of code.\n\nPyWarm only aims to simplify the network definition, and does not attempt to cover\nmodel training, validation or data handling.\n\n----\n\nFor example, a convnet for MNIST:\n(If needed, click the tabs to switch between Warm and Torch versions)\n\n\n``` Python tab="Warm" linenums="1"\n# powered by PyWarm\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport warm\nimport warm.functional as W\n\n\nclass ConvNet(nn.Module):\n\n    def __init__(self):\n        super().__init__()\n        warm.up(self, [2, 1, 28, 28])\n\n    def forward(self, x):\n        x = W.conv(x, 20, 5, activation=\'relu\')\n        x = F.max_pool2d(x, 2)\n        x = W.conv(x, 50, 5, activation=\'relu\')\n        x = F.max_pool2d(x, 2)\n        x = x.view(-1, 800)\n        x = W.linear(x, 500, activation=\'relu\')\n        x = W.linear(x, 10)\n        return F.log_softmax(x, dim=1)\n```\n\n``` Python tab="Torch" linenums="1"\n# vanilla PyTorch version, taken from\n# pytorch tutorials/beginner_source/blitz/neural_networks_tutorial.py \nimport torch.nn as nn\nimport torch.nn.functional as F\n\n\nclass ConvNet(nn.Module):\n\n    def __init__(self):\n        super().__init__()\n        self.conv1 = nn.Conv2d(1, 20, 5, 1)\n        self.conv2 = nn.Conv2d(20, 50, 5, 1)\n        self.fc1 = nn.Linear(4*4*50, 500)\n        self.fc2 = nn.Linear(500, 10)\n\n    def forward(self, x):\n        x = F.relu(self.conv1(x))\n        x = F.max_pool2d(x, 2, 2)\n        x = F.relu(self.conv2(x))\n        x = F.max_pool2d(x, 2, 2)\n        x = x.view(-1, 4*4*50)\n        x = F.relu(self.fc1(x))\n        x = self.fc2(x)\n        return F.log_softmax(x, dim=1)\n```\n\n----\n\nA couple of things you may have noticed:\n\n-   First of all, in the PyWarm version, the entire network definition and\n    data flow logic resides in the `forward()` method. You don\'t have to look\n    up and down repeatedly to understand what `self.conv1`, `self.fc1` etc.\n    is doing.\n\n-   You do not need to track and specify `in_channels` (or `in_features`, etc.)\n    for network layers. PyWarm can infer the information for you. e.g.\n\n```Python\n# Warm\nx = W.conv(x, 20, 5, activation=\'relu\')\nx = W.conv(x, 50, 5, activation=\'relu\')\n\n\n# Torch\nself.conv1 = nn.Conv2d(1, 20, 5, 1)\nself.conv2 = nn.Conv2d(20, 50, 5, 1)\n```\n\n-   One unified `W.conv` for all 1D, 2D, and 3D cases. Fewer things to keep track of!\n\n-   `activation=\'relu\'`. All `warm.functional` APIs accept an optional `activation` keyword,\n    which is basically equivalent to `F.relu(W.conv(...))`.\n\nFor deeper neural networks, see additional [examples](https://blue-season.github.io/pywarm/docs/example/).\n\n----\n## Installation\n\n    pip3 install pywarm\n\n----\n## Quick start: 30 seconds to PyWarm\n\nIf you already have experinces with PyTorch, using PyWarm is very straightforward:\n\n-   First, import PyWarm in you model file:\n```Python\nimport warm\nimport warm.functional as W\n```\n\n-   Second, remove child module definitions in the model\'s `__init__()` method.\n    In stead, use `W.conv`, `W.linear` ... etc. in the model\'s `forward()` method,\n    just like how you would use torch nn functional `F.max_pool2d`, `F.relu` ... etc.\n\n    For example, instead of writing:\n\n```Python\n# Torch\nclass MyModule(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.conv1 = nn.Conv2d(in_channels, out_channels, kernel_size)\n        # other child module definitions\n    def forward(self, x):\n        x = self.conv1(x)\n        # more forward steps\n```\n\n-   You can now write in the warm way:\n\n```Python\n# Warm\nclass MyWarmModule(nn.Module):\n    def __init__(self):\n        super().__init__()\n        warm.up(self, input_shape_or_data)\n    def forward(self, x):\n        x = W.conv(x, out_channels, kernel_size) # no in_channels needed\n        # more forward steps\n```\n\n-   Finally, don\'t forget to warmify the model by adding\n    \n    `warm.up(self, input_shape_or_data)`\n\n    at the end of the model\'s `__init__()` method. You need to supply\n    `input_shape_or_data`, which is either a tensor of input data, \n    or just its shape, e.g. `[2, 1, 28, 28]` for MNIST inputs.\n    \n    The model is now ready to use, just like any other PyTorch models.\n\nCheck out the [tutorial](https://blue-season.github.io/pywarm/docs/tutorial/) \nand [examples](https://blue-season.github.io/pywarm/docs/example/) if you want to learn more!\n\n----\n## Testing\n\nClone the repository first, then\n\n    cd pywarm\n    pytest -v\n\n----\n## Documentation\n\nDocumentations are generated using the excellent [Portray](https://timothycrosley.github.io/portray/) package.\n\n-   [Examples](https://blue-season.github.io/pywarm/docs/example/)\n\n-   [Tutorial](https://blue-season.github.io/pywarm/docs/tutorial/) \n\n-   [API reference](https://blue-season.github.io/pywarm/reference/warm/functional/)\n',
    'author': 'blue-season',
    'author_email': 'very.blue.season@gmail.com',
    'url': 'https://github.com/blue-season/pywarm',
    'packages': packages,
    'package_data': package_data,
    'python_requires': '>=3.6',
}


setup(**setup_kwargs)
