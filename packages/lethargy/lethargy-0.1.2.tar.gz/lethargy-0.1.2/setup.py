# -*- coding: utf-8 -*-
from distutils.core import setup

modules = \
['lethargy']
setup_kwargs = {
    'name': 'lethargy',
    'version': '0.1.2',
    'description': 'A minimal library to make your option-parsing easier.',
    'long_description': '# $ lethargy --option-parsing-for-simple-apps▏\n\n*Simple scripts don\'t need the complexity of a full CLI framework*. Lethargy is a small and minimal library that makes it easy to only take the arguments you need, as you need them, and use the remaining arguments for whatever you want.\n\n**You should not use this library if you are building a program that has functionality centered around the command line**. The features that are omitted are intentionally left out. Ultimately, they would be better provided by a library such as [Click](https://click.palletsprojects.com/en/7.x/) or [Argparse](https://docs.python.org/3/library/argparse.html).\n\nThis library does not try to compete with other CLI libraries, but instead allow scripts and prototypes to be iterated on faster by implementing basic command line paradigms.\n\nFeatures:\n\n* Makes implementing basic CLI functionality fast\n* Lightweight (small codebase, only depends on standard library)\n* Simple, boilerplate-free and Pythonic syntax\n* Support for long and short options\n* Treat an option as a flag, or accept arguments\n* Allows a defined or undefined number of arguments\n\nWhat it doesn\'t do:\n\n* Short-option group expansion (eg. `-xyz` -> `-x -y -z`)\n* `=` arguments (eg. `--quotes=always`)\n\n## Example\n\nThe program below takes an optional --debug flag, and --exclude which will greedily take every argument provided afterwards.\n\n```python\n#!/usr/bin/env python3\nfrom lethargy import Opt, argv\n\nDEBUG = Opt("debug").take_flag(argv)\n\nEXCLUDED = set(Opt("exclude").takes(...).take_args(argv))\n\n# Will only print if DEBUG is set to True\ndprint = print if DEBUG else lambda *_, **__: None\n\n# We\'ve removed the two options this program takes, process the remaining args\n# Exclude the name of the script by starting from index 1\nfor name in argv[1:]:\n    if name not in EXCLUDED:\n        dprint(name)\n```\n\n```sh\n$ ./script.py --debug a b c d e f --exclude d e\nscript.py\na\nb\nc\nf\n```\n\nManually parsing the options, it\'s neither easily readable or maintainable, nor is it easy to make guarantees about the safety of mutating the arg list.\n\n## Installation\n\nLethargy is on PyPI. Use your package manager of choice to install `lethargy`.\n\n```sh\npip install lethargy\n```\n\n## Table of Contents\n\nContents\n\n* [Usage](#usage)\n  * [Creating an option](#creating)\n  * [Using `str` and `repr`](#str)\n  * [Taking a flag](#flags)\n  * [Taking a single argument](#single-arg)\n  * [Taking multiple arguments](#multiple-arg)\n  * [Taking any number of arguments ("greediness")](#greedy-options)\n  * [Raising instead of defaulting](#raising)\n* [Recipe book](#recipes)\n  * [Mandatory option with helpful error](#mandatory)\n\n<a name="usage"></a>\n\n## Usage\n\n<a name="creating"></a>\n\n### Creating an option\n\nThe `Opt` constructor takes any amount of names. These names will all be converted to --skewered-kebab-case (though it preserves capitalisation), or be prefixed with a single dash (`-`) if the name is just a single character.\n\n```python\nfrom lethargy import Opt\n\n# -x or --example\nOpt("x", "example")\n\n# --option-parsing-for-simple-apps\nOpt("option parsing for simple appes")\n```\n\nIf the option takes arguments, use the `takes` method to set the number of arguments. This will be discussed further in the "taking arguments" sections below.\n\n---\n\n<a name="str"></a>\n\n### Using `str` and `repr`\n\n`Opt` instances have a helpful `str` and `repr`.\n\nConverting it to a string will show its names and the number of values it takes in an easily readable way.\n\n```python\nfrom lethargy import Opt\nprint(Opt(\'name\'))\n# --name\nprint(Opt(\'f\', \'files\').takes(2))\n# -f|--files <value> <value>\n```\n\n---\n\n<a name="flags"></a>\n\n### Taking a flag\n\nA very common pattern is to extract a debug or verbose flag from the list of arguments. It\'s not uncommon that this may be the only option that the script accepts.\n\nUse the `take_flag` method to remove the option from the argument list.\n\n```python\nfrom lethargy import Opt, argv\n\nargs = [\'--debug\', \'other\', \'values\']\n\nDEBUG = Opt(\'debug\').take_flag(argv)\n\nprint(DEBUG)\n# True\n\nprint(args)\n# [\'other\', \'values\']\n```\n\nIn this case, if --debug was present in the list, it would have been removed and the method would return True. Otherwise, it would return False and make no changes to the list.\n\n---\n\n<a name="single-arg"></a>\n\n### Taking a single argument\n\nAn option that takes a single argument will return a single value.\n\n```python\nfrom lethargy import Opt\n\nargs = [\'--example\', \'value\', \'floating\']\nval = Opt(\'example\').takes(1).take_args(args)\nno_val = Opt(\'abc\').takes(1).take_args(args)\n\nprint(val)\n# value\n\nprint(no_val)\n# None\n\nprint(args)\n# [\'floating\']\n\n```\n\nIf an option that takes arguments is given fewer than expected, `lethargy.ArgsError` is raised. No mutation will occur.\n\n```python\nfrom lethargy import Opt, ArgsError\n\n# --example is given, but the option is expecting 1 argument.\nbad = [\'--example\']\ntry:\n    Opt(\'example\').takes(1).take_args(bad)\nexcept ArgsError:\n    pass\n\nprint(bad)\n# [\'--example\']\n```\n\n---\n\n<a name="multiple-arg"></a>\n\n### Taking multiple arguments\n\nWhen taking more than 1 argument, a list of arguments is returned.\n\n```python\nfrom lethargy import Opt\n\nargs = [\'-\', \'--name\', \'separate\', \'records\']\n\nfirst, last = Opt(\'name\').takes(2).take_args(args)\n\nprint(first, last)\n# separate records\n\nprint(args)\n# [\'-\']\n```\n\nIf the option is not provided, it returns a list of None that has the correct length. This guarantees that multiple assignment is safe.\n\n```python\nfrom lethargy import Opt\n\nfirst, last = Opt(\'name\').takes(2).take_args([])\n\nprint(first, last)\n# None None\n```\n\nIf the default is specified using the `default` parameter (eg. `take_args(args, default=\'\'`), it will be returned as-is.\n\n---\n\n<a name="greedy-options"></a>\n\n### Taking any number of arguments ("greediness")\n\nIf the number of arguments the option takes is `...`, the option will greedily consume each argument remaining in the list after the option name.\n\n```python\nfrom lethargy import Opt\n\nargs = [\'script.py\', \'-f\', \'a\', \'b\', \'c\', \'--files\', \'d\']\n\nvalues = Opt(\'f\', \'files\').takes(...).take_args(args)\nprint(values)\n# [\'a\', \'b\', \'c\', \'--files\', \'d\']\n\nprint(args)\n# [\'script.py\']\n```\n\nThese options should be taken last to avoid accidentally eating another option.\n\nBy default, an empty list is returned if there are no arguments provided.\n\n```python\nvalues = Opt(\'x\').takes(...).take_args([])\nprint(values)\n# []\n```\n\n---\n\n<a name="raising"></a>\n\n### Raising instead of defaulting\n\nBy setting `raises=True` in the `take_args` method call, `lethargy.MissingOption` will be raised instead of returning the default.\n\n<a name="recipes"></a>\n\n## Recipe book\n\nSome common patterns used for basic CLI scripts. Anything more complex than these could be done better using Click or Argparse.\n\n---\n\n<a name="mandatory"></a>\n\n### Mandatory option with helpful error\n\nThis example shows how you would combine raising instead of defaulting and the string formatting of an `Opt` instance.\n\n```python\nfrom lethargy import Opt, argv, MissingOption\n\nopt = Opt(\'my option\').takes(2)\n\ntry:\n    args = opt.take_args(argv, raises=True)\nexcept MissingOption:\n    print(f\'Missing required option: {opt}\')\n    exit(1)\n```\n',
    'author': 'SeparateRecords',
    'author_email': 'me@rob.ac',
    'url': 'https://github.com/SeparateRecords/lethargy',
    'py_modules': modules,
    'python_requires': '>=3.5,<4.0',
}


setup(**setup_kwargs)
