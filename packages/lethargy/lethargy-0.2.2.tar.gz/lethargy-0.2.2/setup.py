# -*- coding: utf-8 -*-
from distutils.core import setup

modules = \
['lethargy']
setup_kwargs = {
    'name': 'lethargy',
    'version': '0.2.2',
    'description': 'A minimal library to make your option-parsing easier.',
    'long_description': '# Lethargy - Option parsing, for simple apps\n\n[![Released version](https://img.shields.io/pypi/v/lethargy?color=blue)](https://pypi.org/project/lethargy)\n[![Python versions](https://img.shields.io/pypi/pyversions/lethargy)](https://python.org)\n[![MIT License](https://img.shields.io/pypi/l/lethargy)](https://github.com/SeparateRecords/lethargy/blob/master/LICENSE)\n[![Size](https://img.shields.io/github/size/separaterecords/lethargy/lethargy.py)](https://github.com/SeparateRecords/lethargy/blob/master/lethargy.py)\n\nLethargy takes care of option parsing in your scripts, so you can be more productive when writing the important stuff. It\'s simple, concise, explicit, and Pythonic.\n\nUnlike [Click](https://click.palletsprojects.com/en/7.x/) and [Argparse](https://docs.python.org/3/library/argparse.html), Lethargy is succinct, can be implemented without changing the structure of a program, and requires no boilerplate code. This makes it especially suited to scripting and prototyping.\n\nBy design, it is not a full argument parser. If you\'re building a complete CLI application, you\'re probably better off using Click.\n\n<a name="installation"></a>\n\n## Installation\n\nLethargy only depends on the standard library. You can use [pip](https://pip.pypa.io/en/stable/) to install lethargy.\n\n```bash\npip install lethargy\n```\n\n<a name="usage"></a>\n\n## Usage\n\n```python\nfrom lethargy import Opt, argv\n\n# --use-headers\nheaders = Opt("use headers").take_flag(argv)\n\n# -f|--file <value>\noutput_file = Opt("f", "file").takes(1).take_args(argv)\n```\n\nLethargy returns values appropriate to the option, safely mutating the list.\n\n<a name="getting-started"></a>\n\n## Getting Started\n\n<a name="argv"></a>\n\n### The default `argv`\n\nTo save you an additional import, lethargy provides `lethargy.argv` - a clone of the original argument list. Mutating it will not affect `sys.argv`.\n\n<a name="options"></a>\n\n### Options\n\nOptions will automatically convert their names to the appropriate format (`-o` or `--option`). Casing will be preserved.\n\n```python\n>>> arg_list = ["script.py", "--debug", "file.txt"]\n>>> Opt("debug").take_flag(arg_list)\nTrue\n>>> arg_list\n["script.py", "file.txt"]\n```\n\nTo take arguments, use the `Opt.takes` method.\n\n```python\n>>> arg_list = ["script.py", "--height", "185cm"]\n>>> Opt("height").takes(1).take_args(arg_list)\n\'185cm\'\n>>> arg_list\n["script.py"]\n```\n\nTaking 1 argument will return a single value. Taking multiple will return a list (see the [Argument unpacking](#unpacking) section for details).\n\nYou can also use a "greedy" value, to take every remaining argument. The canonical way to do this is using the Ellipsis literal (`...`).\n\n```python\n>>> lst = []\n>>> Opt("exclude").takes(...).take_args(lst)\n```\n\n<a name="unpacking"></a>\n\n### Argument unpacking\n\n`lethargy.Opt` makes sure it\'s safe to unpack a returned list of values, unless you override the `default` parameter.\n\n```python\n>>> Opt("x").takes(2).take_args(["-x", "1", "2"])\n["1", "2"]\n>>> Opt("y").takes(2).take_args([])\n[None, None]\n```\n\nNo mutation will occur if there\'s an error. Lethargy has clear and readable error messages.\n\n```python\n>>> args = ["-z", "bad"]\n>>> Opt("z").takes(2).take_args(args)\nTraceback (most recent call last):\n...\nlethargy.ArgsError: expected 2 arguments for \'-z <value> <value>\', found 1 (\'bad\')\n>>> args\n["-z", "bad"]\n```\n\n<a name="debug-and-verbose"></a>\n\n### `--debug` and `-v`/`--verbose`\n\nAs these are such common options, lethargy provides functions to take these by default.\n\n```\n>>> from lethargy import take_debug, take_verbose\n>>> args = ["script.py", "--debug", "--verbose", "sheet.csv"]\n>>> take_verbose(args)  # -v or --verbose\nTrue\n>>> take_debug(args)\nTrue\n>>> args\n["script.py", "sheet.csv"]\n```\n\nBy convention, passing `--verbose` will cause a program to output more information. To make implementing this behaviour easier, lethargy has the `print_if` function, which will return `print` if its input is true and a dumb function if not.\n\n```python\nfrom lethargy import take_verbose, print_if, argv\n\ndebug_print = print_if(take_verbose(argv))\n```\n\n<a name="raising"></a>\n\n### Raising instead of defaulting\n\nIf `Opt.take_args` is called with `raises=True`, `lethargy.MissingOption` will be raised instead of returning a default, even if the default is set explicitly.\n\nThis behaviour makes it easy to create a required option.\n\n```python\nfrom lethargy import Opt, argv, MissingOption\n\nopt = Opt(\'example\').takes(2)\n\ntry:\n    a, b = opt.take_args(argv, raises=True)\nexcept MissingOption:\n    print(f\'Missing required option: {opt}\')\n    exit(1)\n```\n\n<a name="str-and-repr"></a>\n\n### Using `str` and `repr`\n\n`Opt` instances provide a logical and consistent string form.\n\n```python\n>>> str(Opt("flag"))\n\'--flag\'\n>>> str(Opt("e", "example").takes(1))\n\'-e|--example <value>\'\n>>> str(Opt("e", "example").takes(...))\n\'--xyz [value]...\'\n```\n\nThe `repr` form makes debugging easy. Note that the order of the names is not guaranteed.\n\n```python\n>>> Opt("f", "flag")\n<Opt(\'flag\', \'f\').takes(0)>\n```\n\n<a name="contributing"></a>\n\n## Contributing\n\nAny contributions and feedback are welcome! I\'d appreciate it if you could open an issue to discuss changes before submitting a PR, but it\'s not enforced.\n\n<a name="license"></a>\n\n## License\n\nLethargy is released under the [MIT license](https://github.com/SeparateRecords/lethargy/blob/master/LICENSE).\n',
    'author': 'SeparateRecords',
    'author_email': 'me@rob.ac',
    'url': 'https://github.com/SeparateRecords/lethargy',
    'py_modules': modules,
    'python_requires': '>=3.5,<4.0',
}


setup(**setup_kwargs)
