# coding: utf-8

"""
    Pulp 3 API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v3
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CollectionImportList(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'namespace': 'str',
        'name': 'str',
        'version': 'str',
        'state': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'started_at': 'datetime',
        'finished_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'namespace': 'namespace',
        'name': 'name',
        'version': 'version',
        'state': 'state',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'started_at': 'started_at',
        'finished_at': 'finished_at'
    }

    def __init__(self, id=None, namespace=None, name=None, version=None, state=None, created_at=None, updated_at=None, started_at=None, finished_at=None):  # noqa: E501
        """CollectionImportList - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._namespace = None
        self._name = None
        self._version = None
        self._state = None
        self._created_at = None
        self._updated_at = None
        self._started_at = None
        self._finished_at = None
        self.discriminator = None

        self.id = id
        if namespace is not None:
            self.namespace = namespace
        if name is not None:
            self.name = name
        if version is not None:
            self.version = version
        self.state = state
        self.created_at = created_at
        self.updated_at = updated_at
        self.started_at = started_at
        self.finished_at = finished_at

    @property
    def id(self):
        """Gets the id of this CollectionImportList.  # noqa: E501


        :return: The id of this CollectionImportList.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CollectionImportList.


        :param id: The id of this CollectionImportList.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def namespace(self):
        """Gets the namespace of this CollectionImportList.  # noqa: E501


        :return: The namespace of this CollectionImportList.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this CollectionImportList.


        :param namespace: The namespace of this CollectionImportList.  # noqa: E501
        :type: str
        """
        if namespace is not None and len(namespace) < 1:
            raise ValueError("Invalid value for `namespace`, length must be greater than or equal to `1`")  # noqa: E501

        self._namespace = namespace

    @property
    def name(self):
        """Gets the name of this CollectionImportList.  # noqa: E501


        :return: The name of this CollectionImportList.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CollectionImportList.


        :param name: The name of this CollectionImportList.  # noqa: E501
        :type: str
        """
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def version(self):
        """Gets the version of this CollectionImportList.  # noqa: E501


        :return: The version of this CollectionImportList.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this CollectionImportList.


        :param version: The version of this CollectionImportList.  # noqa: E501
        :type: str
        """
        if version is not None and len(version) < 1:
            raise ValueError("Invalid value for `version`, length must be greater than or equal to `1`")  # noqa: E501

        self._version = version

    @property
    def state(self):
        """Gets the state of this CollectionImportList.  # noqa: E501


        :return: The state of this CollectionImportList.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CollectionImportList.


        :param state: The state of this CollectionImportList.  # noqa: E501
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501
        if state is not None and len(state) < 1:
            raise ValueError("Invalid value for `state`, length must be greater than or equal to `1`")  # noqa: E501

        self._state = state

    @property
    def created_at(self):
        """Gets the created_at of this CollectionImportList.  # noqa: E501


        :return: The created_at of this CollectionImportList.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CollectionImportList.


        :param created_at: The created_at of this CollectionImportList.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this CollectionImportList.  # noqa: E501


        :return: The updated_at of this CollectionImportList.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this CollectionImportList.


        :param updated_at: The updated_at of this CollectionImportList.  # noqa: E501
        :type: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def started_at(self):
        """Gets the started_at of this CollectionImportList.  # noqa: E501


        :return: The started_at of this CollectionImportList.  # noqa: E501
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this CollectionImportList.


        :param started_at: The started_at of this CollectionImportList.  # noqa: E501
        :type: datetime
        """
        if started_at is None:
            raise ValueError("Invalid value for `started_at`, must not be `None`")  # noqa: E501

        self._started_at = started_at

    @property
    def finished_at(self):
        """Gets the finished_at of this CollectionImportList.  # noqa: E501


        :return: The finished_at of this CollectionImportList.  # noqa: E501
        :rtype: datetime
        """
        return self._finished_at

    @finished_at.setter
    def finished_at(self, finished_at):
        """Sets the finished_at of this CollectionImportList.


        :param finished_at: The finished_at of this CollectionImportList.  # noqa: E501
        :type: datetime
        """
        if finished_at is None:
            raise ValueError("Invalid value for `finished_at`, must not be `None`")  # noqa: E501

        self._finished_at = finished_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CollectionImportList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
