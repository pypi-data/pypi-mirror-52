{
    "modules": {
        "ht_shodan": {
            "__gui_label__": "Shodan",
            "api_key": "lO6PkeAYJIp9w3N33ri0Rm2DM3WeWbhl",
            "bad_api_key_error": "The specified APIKey is invalid, please insert another one.",
            "error_ip_no_exists": "No data available for the IP",
            "search_limit_date_format": "%d/%m/%Y",
            "scan_interesting_data_keys": [
                "hostnames",
                "ip_str",
                "city",
                "country_name",
                "org",
                "isp",
                "last_update",
                "asn",
                "os",
                "port"
            ],
            "msg_result_found": "Results found",
            "msg_fetch_page": "Fetched page",
            "error": "Error",
            "shodan_host_ip": "shodan/host/{ip}",
            "shodan_count_search": "shodan/host/count",
            "shodan_host_search": "shodan/host/search",
            "shodan_token_search": "shodan/host/search/tokens",
            "shodan_ports": "shodan/ports",
            "shodan_exploit_author": "shodan/exploit/author",
            "shodan_exploit_cve": "shodan/exploit/cve",
            "shodan_exploit_msb": "shodan/exploit/msb",
            "shodan_exploit_bid": "shodan/exploit/bugtraq-id",
            "shodan_exploit_osvdb": "shodan/exploit/osvdb",
            "shodan_exploit_title": "shodan/exploit/title",
            "shodan_exploit_description": "shodan/exploit/description",
            "shodan_exploit_date": "shodan/exploit/date",
            "shodan_exploit_code": "shodan/exploit/code",
            "shodan_exploit_platform": "shodan/exploit/platform",
            "shodan_exploit_port": "shodan/exploit/port",
            "shodan_dns_lookup": "dns/resolve",
            "shodan_dns_reverse": "dns/reverse",
            "shodan_honeyscore": "labs/honeyscore/{ip}",
            "shodan_profile": "account/profile",
            "shodan_myip": "tools/myip",
            "shodan_httpheaders": "tools/httpheaders",
            "shodan_api_info": "api-info",
            "django_form_main_function": {
                "service_name": {
                    "__id__": "service_name",
                    "__type__": "text",
                    "__className__": "form-control",
                    "placeholder": "apache",
                    "value": "",
                    "label_desc": "Search query",
                    "required": true
                },
                "shodanKeyString": {
                    "__id__": "shodanKeyString",
                    "__type__": "text",
                    "__className__": "form-control",
                    "placeholder": "abcdef0123456789",
                    "value": "",
                    "label_desc": "Shodan API Key"
                },
                "close": {
                    "__id__": "close",
                    "__type__": "button",
                    "__className__": "btn btn-secondary",
                    "value": "Close"
                },
                "submit": {
                    "__id__": "find",
                    "__type__": "submit",
                    "__className__": "btn btn-primary",
                    "value": "Search",
                    "loading_text": "Searching..."
                }
            },
            "django_form_module_function": {
                "getIPListfromServices": {
                    "__function__": "test_ht_shodan_getIPListfromServices",
                    "__async__": false,
                    "__return__": "text",
                    "service_name": {
                        "__id__": "service_name",
                        "__type__": "text",
                        "__className__": "form-control",
                        "placeholder": "apache",
                        "value": "",
                        "label_desc": "Search query",
                        "required": true
                    },
                    "shodanKeyString": {
                        "__id__": "shodanKeyString",
                        "__type__": "text",
                        "__className__": "form-control",
                        "placeholder": "abcdef0123456789",
                        "value": "",
                        "label_desc": "Shodan API Key"
                    }
                }
            }
        },
        "ht_sqlinjection": {
            "__gui_label__": "SQLI",
            "color_error": "RED",
            "color_verbose": "BLUE",
            "color_info": "YELLOW",
            "color_ok": "GREEN"
        },
        "ht_crypter": {
            "__gui_label__": "File Crypter",
            "pyinstaller": "pyinstaller -F -w --clean --noconsole --specpath {path}",
            "error_encrypt": "Something went wrong",
            "django_form_main_function": {
                "filename": {
                    "__id__": "filename",
                    "__type__": "file",
                    "__className__": "file-input",
                    "label_desc": "Browse file to crypt",
                    "required": true
                },
                "iteratecount": {
                    "__id__": "iteratecount",
                    "__type__": "number",
                    "__className__": "form-control",
                    "label_desc": "Iterate count",
                    "value": "1"
                },
                "prime_length": {
                    "__id__": "prime_length",
                    "__type__": "number",
                    "__className__": "form-control",
                    "label_desc": "Prime's Length",
                    "value": "2"
                },
                "compile_exe": {
                    "__id__": "compile_exe",
                    "__type__": "checkbox",
                    "__className__": "custom-control-input",
                    "label_desc": "Compile to EXE",
                    "systems": [
                        "nt"
                    ]
                },
                "close": {
                    "__id__": "close",
                    "__type__": "button",
                    "__className__": "btn btn-secondary",
                    "value": "Close"
                },
                "submit": {
                    "__id__": "crypt_file_button",
                    "__type__": "submit",
                    "__className__": "btn btn-primary",
                    "value": "Crypt File",
                    "loading_text": "Crypting..."
                }
            }
        },
        "ht_rsa": {
            "__gui_label__": "RSA Cypher",
            "bad_identical_prime": "Both numbers must be prime",
            "p_q_equal_error": "p and q cannot be equal",
            "error_encrypt": "Something went wrong",
            "django_form_module_function": {
                "encrypt": {
                    "__function__": "test_ht_rsa_encrypt",
                    "__async__": false,
                    "__return__": "text",
                    "private_key_keynumber": {
                        "__id__": "private_key_keynumber",
                        "__type__": "number",
                        "__className__": "form-control",
                        "label_desc": "Private Key",
                        "value": 10000,
                        "required": true,
                        "returnable_modules_functions": {
                            "ht_crypter": [
                                "getRandomKeypair"
                            ]
                        }
                    },
                    "private_key_keymod": {
                        "__id__": "private_key_keymod",
                        "__type__": "number",
                        "__className__": "form-control",
                        "label_desc": "Private Mod",
                        "value": 0,
                        "required": true,
                        "returnable_modules_functions": {
                            "ht_crypter": [
                                "getRandomKeypair"
                            ]
                        }
                    },
                    "cipher_text": {
                        "__id__": "cipher_text",
                        "__type__": "textarea",
                        "__className__": "form-control rounded-0",
                        "placeholder": "Text to cipher",
                        "required": true
                    }
                },
                "decrypt": {
                    "__function__": "test_ht_rsa_decrypt",
                    "__async__": false,
                    "__return__": "text",
                    "public_key_keynumber": {
                        "__id__": "public_key_keynumber",
                        "__type__": "number",
                        "__className__": "form-control",
                        "label_desc": "Public Key",
                        "value": 0,
                        "required": true
                    },
                    "public_key_keymod": {
                        "__id__": "public_key_keymod",
                        "__type__": "number",
                        "__className__": "form-control",
                        "label_desc": "Public Mod",
                        "value": 0,
                        "required": true
                    },
                    "decipher_text": {
                        "__id__": "decipher_text",
                        "__type__": "textarea",
                        "__className__": "form-control",
                        "placeholder": "Text to decipher",
                        "required": true
                    }
                },
                "generate_keypair": {
                    "__function__": "test_ht_rsa_generate_keypair",
                    "__async__": false,
                    "__return__": "text",
                    "prime_a": {
                        "__id__": "prime_a",
                        "__type__": "number",
                        "__className__": "form-control",
                        "label_desc": "Prime A",
                        "value": "1299853",
                        "required": true
                    },
                    "prime_b": {
                        "__id__": "prime_b",
                        "__type__": "number",
                        "__className__": "form-control",
                        "label_desc": "Prime B",
                        "value": "2099837",
                        "required": true
                    },
                    "__pool_it_generate_keypair__": {
                        "__id__": "__pool_it_generate_keypair__",
                        "__type__": "checkbox",
                        "__className__": "custom-control-input",
                        "label_desc": "Pool the execution to the pool list",
                        "selected": false
                    }
                },
                "getRandomKeypair": {
                    "__function__": "test_ht_rsa_getRandomKeypair",
                    "__async__": false,
                    "__return__": "text",
                    "prime_length": {
                        "__id__": "prime_length",
                        "__type__": "number",
                        "__className__": "form-control",
                        "label_desc": "Prime Length",
                        "value": "8"
                    },
                    "__pool_it_getRandomKeypair__": {
                        "__id__": "__pool_it_getRandomKeypair__",
                        "__type__": "checkbox",
                        "__className__": "custom-control-input",
                        "label_desc": "Pool the execution to the pool list",
                        "selected": false
                    }
                }
            }
        },
        "ht_metadata": {
            "__gui_label__": "Metadata",
            "_comment": "Rename templates if have to use: (remove underscore) 'django_form_main_function' and 'django_form_module_function'",
            "django_form_module_function": {
                "get_image_exif": {
                    "__function__": "test_ht_metadata_get_image_exif",
                    "__async__": false,
                    "__return__": "text",
                    "image_file": {
                        "__id__": "image_file",
                        "__type__": "file",
                        "__className__": "file-input",
                        "label_desc": "Browse image to extract metadata",
                        "required": true
                    }
                }
            }
        },
        "ht_bruteforce": {
            "__gui_label__": "Bruteforce",
            "max_for_chunk": 10000,
            "msg_password_is": "Password is",
            "_comment": "Rename templates if have to use: (remove underscore) 'django_form_main_function' and 'django_form_module_function'",
            "django_form_module_function": {
                "crackZip": {
                    "__function__": "test_ht_bruteforce_crackZip",
                    "__async__": false,
                    "__return__": "text",
                    "zipFileBruteforce": {
                        "__id__": "zipFileBruteforce",
                        "__type__": "file",
                        "__className__": "file-input",
                        "label_desc": "Browse zip file for crack it",
                        "required": true
                    },
                    "password_length": {
                        "__id__": "password_length",
                        "__type__": "number",
                        "__className__": "form-control",
                        "label_desc": "Password length",
                        "value": 4
                    },
                    "bruteforce_numeric": {
                        "__id__": "bruteforce_numeric",
                        "__type__": "checkbox",
                        "__className__": "custom-control-input",
                        "label_desc": "0123456789",
                        "selected": false
                    },
                    "bruteforce_lower": {
                        "__id__": "bruteforce_lower",
                        "__type__": "checkbox",
                        "__className__": "custom-control-input",
                        "label_desc": "abcdefghijklmnopqrstuvwxyz",
                        "selected": false
                    },
                    "bruteforce_upper": {
                        "__id__": "bruteforce_upper",
                        "__type__": "checkbox",
                        "__className__": "custom-control-input",
                        "label_desc": "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
                        "selected": false
                    },
                    "bruteforce_simbols": {
                        "__id__": "bruteforce_simbols",
                        "__type__": "checkbox",
                        "__className__": "custom-control-input",
                        "label_desc": "!@#$%^&*()-_+:",
                        "selected": false
                    },
                    "bruteforce_simbols_all": {
                        "__id__": "bruteforce_simbols_all",
                        "__type__": "checkbox",
                        "__className__": "custom-control-input",
                        "label_desc": "!@#$%^&*()-_+:~`[]{}|\\:;\"'<>,.?/",
                        "selected": false
                    },
                    "__pool_it_crackZip__": {
                        "__id__": "__pool_it_crackZip__",
                        "__type__": "checkbox",
                        "__className__": "custom-control-input",
                        "label_desc": "Pool the execution the the pool list",
                        "selected": false
                    }
                }
            }
        },
        "ht_unzip": {
            "__gui_label__": "Unzip",
            "posible_combinations" : "Posible Combinations",
            "_comment": "Rename templates if have to use: (remove underscore) 'django_form_main_function' and 'django_form_module_function'",
            "django_form_module_function": {
                "extractFile": {
                    "__function__": "test_ht_unzip_extractFile",
                    "__async__": false,
                    "__return__": "text",
                    "zipFile": {
                        "__id__": "zipFile",
                        "__type__": "file",
                        "__className__": "file-input",
                        "label_desc": "File to extract",
                        "required": true
                    },
                    "passwordFile": {
                        "__id__": "passwordFile",
                        "__type__": "password",
                        "__className__": "form-control",
                        "label_desc": "Password to unzip",
                        "required": true
                    }
                }
            }
        },
        "ht_nmap": {
            "__gui_label__": "Scan for hosts",
            "django_form_main_function": {
                "ip": {
                    "__id__": "ip",
                    "__type__": "text",
                    "__className__": "form-control",
                    "label_desc": "Enter an IP range to scan",
                    "required": true
                },
                "close": {
                    "__id__": "close",
                    "__type__": "button",
                    "__className__": "btn btn-secondary",
                    "value": "Close"
                },
                "submit": {
                    "__id__": "getConnectedDevice_button",
                    "__type__": "submit",
                    "__className__": "btn btn-primary",
                    "value": "Scan",
                    "loading_text": "Scanning..."
                }
            },
            "django_form_module_function": {
                "getConnectedDevices": {
                    "__function__": "test_ht_nmap_getConnectedDevices",
                    "__async__": false,
                    "__return__": "text",
                    "ip": {
                        "__id__": "ip",
                        "__type__": "text",
                        "__className__": "form-control",
                        "placeholder": "0.0.0.0",
                        "value": "",
                        "label_desc": "Search IP",
                        "required": true
                    },
                    "shodanKeyString": {
                        "__id__": "shodanKeyString",
                        "__type__": "text",
                        "__className__": "form-control",
                        "placeholder": "abcdef0123456789",
                        "value": "",
                        "label_desc": "Shodan API Key"
                    }
                }
            }
        },
        "ht_twitter": {
            "__gui_label__": "_MODULE_GUI_LABEL_",
            "_comment": "Rename templates if have to use: (remove underscore) 'django_form_main_function' and 'django_form_module_function'",
            "_django_form_main_function_": {
                "_HTML_FIELD_NAME_": {
                    "__id__": "_HTML_FIELD_NAME_",
                    "__type__": "_HTML_INPUT_TYPE_",
                    "__className__": "_HTML_INPUT_CLASS_",
                    "label_desc": "_DESCRIPTION_LABEL_",
                    "required": "_IF_REQUIRED_",
                    "value": "_INPUT_VALUE_",
                    "loading_text": "_INPUT_LOADING_TEXT_"
                }
            },
            "_django_form_module_function_": {
                "_PUBLIC_FUNCTION_": {
                    "__function__": "_FUNCTION_CALLABLE_NAME_",
                    "__async__": false,
                    "__return__": "_IF_RETURNS_LIKE_TEXT_",
                    "_PARAM_TO_USE_IN_VIEWS_PY_": {
                        "__id__": "_HTML_FIELD_NAME_",
                        "__type__": "_HTML_INPUT_TYPE_",
                        "__className__": "_HTML_INPUT_CLASS_",
                        "label_desc": "_DESCRIPTION_LABEL_",
                        "value": "_INPUT_VALUE_",
                        "required": "_IF_REQUIRED_",
                        "returnable_modules_functions": {
                            "_MODULE_CALL_FOR_": [
                                "_THAT_MODULES_FUNCTION"
                            ]
                        }
                    }
                }
            }
        },
        "ht_virustotal": {
            "__gui_label__": "Virus Total",
            "_comment": "Rename templates if have to use: (remove underscore) 'django_form_main_function' and 'django_form_module_function'",
            "_django_form_main_function_": {
                "_HTML_FIELD_NAME_": {
                    "__id__": "_HTML_FIELD_NAME_",
                    "__type__": "_HTML_INPUT_TYPE_",
                    "__className__": "_HTML_INPUT_CLASS_",
                    "label_desc": "_DESCRIPTION_LABEL_",
                    "required": "_IF_REQUIRED_",
                    "value": "_INPUT_VALUE_",
                    "loading_text": "_INPUT_LOADING_TEXT_"
                }
            },
            "django_form_module_function": {
                "isBadFile": {
                    "__function__": "test_ht_virustotal_isBadFile",
                    "__async__": false,
                    "__return__": "text",
                    "filename": {
                        "__id__": "filename",
                        "__type__": "file",
                        "__className__": "form-control",
                        "label_desc": "Select a file to test if is a bad file",
                        "required": true
                    }
                }
            }
        },
        "ht_objectdetection": {
            "__gui_label__": "Object Detection",
            "systems": [ "nt" ],
            "_comment": "Rename templates if have to use: (remove underscore) 'django_form_main_function' and 'django_form_module_function'",
            "allowed_extensions" : ["png", "jpg", "jpeg"],
            "models_tests_extension": "clf",
            "training_log_message" : "Training directory",
            "training_log_bad_image" : "not suitable for training",
            "training_log_no_recognition" : "Didn't find a recognition object",
            "training_log_much_recognition" : "Found more than one recognition object",
            "training_log_n_neighbors" : "Chose n_neighbors automatically",
            "predicting_invalid_path" : "Invalid image path",
            "predicting_no_knn_or_model_path" : "Must supply knn classifier either thourgh knn_clf or model_path",
            "django_form_main_function": {
                "image_file_test": {
                    "__id__": "image_file_test",
                    "__type__": "file",
                    "__className__": "file-input",
                    "label_desc": "File to test",
                    "required": true
                },
                "__separator1__" : true,
                "modelfile_main": {
                    "__id__": "modelfile_main",
                    "__type__": "select",
                    "__className__": "form-control",
                    "placeholder": "Trained Model in .clf",
                    "required": true,
                    "options_from_function": {
                        "ht_objectdetection": "getTestsModelsDir"
                    }
                },
                "__separator2__" : true,
                "image_models_zip": {
                    "__id__": "image_models_zip",
                    "__type__": "file",
                    "__className__": "file-input",
                    "label_desc": "Models into a zip"
                },
                "first_folder_name": {
                    "__id__": "first_folder_name",
                    "__type__": "text",
                    "__className__": "form-control",
                    "label_desc": "Main folder's name for image dataset",
                    "placeholder": "Empty if same name as ZIP file"
                },
                "neighbors": {
                    "__id__": "neighbors",
                    "__type__": "number",
                    "__className__": "form-control",
                    "label_desc": "Count objects recognize",
                    "value": "1"
                },
                "close": {
                    "__id__": "image_test_close",
                    "__type__": "button",
                    "__className__": "btn btn-secondary",
                    "value": "Close"
                },
                "submit": {
                    "__id__": "image_test_submit",
                    "__type__": "submit",
                    "__className__": "btn btn-primary",
                    "value": "Test Image",
                    "loading_text": "Testing with AI..."
                }
            },
            "django_form_module_function": {
                "predictImage": {
                    "__function__": "test_ht_objectdetection_predictImage",
                    "__async__": false,
                    "__return__": "text",
                    "image_file_test": {
                        "__id__": "image_file_test",
                        "__type__": "file",
                        "__className__": "file-input",
                        "label_desc": "File to test",
                        "required": true
                    },
                    "modelfile": {
                        "__id__": "modelfile",
                        "__type__": "select",
                        "__className__": "form-control",
                        "placeholder": "Trained Model in .clf",
                        "options_from_function": {
                            "ht_objectdetection": "getTestsModelsDir"
                        }
                    },
                    "__separator__" : true,
                    "image_models_zip": {
                        "__id__": "image_models_zip",
                        "__type__": "file",
                        "__className__": "file-input",
                        "label_desc": "Models into a zip"
                    },
                    "first_folder_name": {
                        "__id__": "first_folder_name",
                        "__type__": "text",
                        "__className__": "form-control",
                        "label_desc": "Main folder's name for image dataset",
                        "placeholder": "Empty if same name as ZIP file"
                    },
                    "neighbors": {
                        "__id__": "neighbors",
                        "__type__": "number",
                        "__className__": "form-control",
                        "label_desc": "Count objects recognize",
                        "value": "1"
                    }
                },
                "predictFromZip": {
                    "__function__": "test_ht_objectdetection_predictFromZip",
                    "__async__": false,
                    "__return__": "text",
                    "image_file_test_zip": {
                        "__id__": "image_file_test_zip",
                        "__type__": "file",
                        "__className__": "file-input",
                        "label_desc": "Zip to test images",
                        "required": true
                    },
                    "first_folder_name": {
                        "__id__": "first_folder_name",
                        "__type__": "text",
                        "__className__": "form-control",
                        "label_desc": "Zip's main folder name",
                        "placeholder": "Empty"
                    },
                    "__separator1__" : true,
                    "pepe": {
                        "__id__": "pepe",
                        "__type__": "select",
                        "__className__": "form-control",
                        "placeholder": "Modulos cargados",
                        "options_from_function": {
                            "core": "getModulesNames"
                        }
                    },
                    "modelfile_pred": {
                        "__id__": "modelfile_pred",
                        "__type__": "select",
                        "__className__": "form-control",
                        "placeholder": "Trained Model in .clf",
                        "options_from_function": {
                            "ht_objectdetection": "getTestsModelsDir"
                        }
                    },
                    "__separator2__" : true,
                    "image_models_zip_pred": {
                        "__id__": "image_models_zip_pred",
                        "__type__": "file",
                        "__className__": "file-input",
                        "label_desc": "Zip to train images"
                    },
                    "first_folder_name_zip": {
                        "__id__": "first_folder_name_zip",
                        "__type__": "text",
                        "__className__": "form-control",
                        "label_desc": "Main folder's name training",
                        "placeholder": "Empty"
                    },
                    "neighbors_pred": {
                        "__id__": "neighbors_pred",
                        "__type__": "number",
                        "__className__": "form-control",
                        "label_desc": "Count objects recognize",
                        "value": "1"
                    }
                },
                "trainFromZip": {
                    "__function__": "test_ht_objectdetection_trainFromZip",
                    "__async__": false,
                    "__return__": "text",
                    "image_models_zip": {
                        "__id__": "image_models_zip",
                        "__type__": "file",
                        "__className__": "file-input",
                        "label_desc": "Models into a zip",
                        "required": true
                    },
                    "first_folder_name": {
                        "__id__": "first_folder_name",
                        "__type__": "text",
                        "__className__": "form-control",
                        "label_desc": "Main folder's name for image dataset",
                        "placeholder": "Empty if same name as ZIP file"
                    },
                    "neighbors": {
                        "__id__": "neighbors",
                        "__type__": "number",
                        "__className__": "form-control",
                        "label_desc": "Count objects recognize",
                        "value": "1"
                    }
                }
            }
        }
    },
    "core": {
        "WANT_TO_BE_IN_POOL": true,
        "__API_KEY__": {
            "botscout_api": "",
            "builtwith_api": "",
            "censysio_id": "",
            "censysio_secret": "",
            "clearbit_apikey": "",
            "clearbit_secret": "",
            "cymon_api": "",
            "emailhunter": "",
            "facebook_id": "",
            "facebook_access_token": "",
            "flickr_api": "",
            "fullcontact_id": "",
            "fullcontact_api": "",
            "github_access_token": "",
            "google_api": "",
            "google_cse_cx": "",
            "google_cse_key": "",
            "google_maps_api": "",
            "instagram_client_id": "",
            "instagram_client_secret": "",
            "ipinfodb_api": "",
            "jsonwhois": "",
            "linkedin_api": "",
            "linkedin_secret": "",
            "mailboxlayer_api": "",
            "reddit_id": "",
            "reddit_secret": "",
            "rosette_api": "",
            "security_trails_api": "",
            "shodan_api": "",
            "spyonweb_access_token": "",
            "twitter_access_token": "",
            "twitter_access_token_secret": "",
            "twitter_consumer_key": "",
            "twitter_consumer_secret": "",
            "zoomeyeuser": "",
            "zoomeyepass": "",
            "freewallet_pub_key": "",
            "freewallet_pri_key": "",
            "walletbuilders_masternode_key": "",
            "walletbuilders_masternode_acc_addr_MN1": ""
        },
        "Logger": {
            "DEBUG_CORE_FLAG": false,
            "DEBUG_MODULE_FLAG": true,
            "DEBUG_USER": true,
            "clear_on_load": false,
            "log_save_date_format": "%Y-%m-%d-%H-%M-%S-%f",
            "log_print_date_format": "%Y-%m-%d %H:%M:%S.%f"
        },
        "locales": {
            "error_json_data_loaded": "You have errors on your JSON config",
            "error_json_data_not_loaded": "Error loading some data of your JSON config"
        },
        "import_modules": {
            "package_name": "hackingtools",
            "blacklist_extensions": [
                ".pyc"
            ],
            "blacklist_directories": [
                "__"
            ],
            "ignore_files": [
                "ht_flask.py"
            ],
            "ignore_folders": [
                "templates",
                "core",
                "build",
                "dist",
                "hackingtools",
                "gui"
            ],
            "class_name_starts_with_modules": "ht_",
            "function_name_starts_with_modules": "__",
            "function_param_exclude": "self",
            "default_class_name_for_all": "StartModule",
            "default_template_modules_ht": "from hackingtools.core import Logger, Utils, Config\nimport hackingtools as ht\nimport os\n\nconfig = Config.getConfig(parentKey='modules', key='ht_{moduleName}')\noutput_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), 'output'))\n\nclass StartModule():\n\n\tdef __init__(self):\n\t\tpass\n\n\tdef help(self):\n\t\tLogger.printMessage(message=ht.getFunctionsNamesFromModule('ht_{moduleName}'))"
        },
        "Utils": {
            "empty_directory_strict": "modules/",
            "resources_cryptography_rest_api": {
                "md5_decrypt": "https://md5.pinasthika.com/api/decrypt"
            },
            "dictionaries": {
                "hex-lower": "0123456789abcdef",
                "hex-upper": "0123456789ABCDEF",
                "numeric": "0123456789",
                "numeric-space": "0123456789 ",
                "symbols14": "!@#$%^&*()-_+:",
                "symbols14-space": "!@#$%^&*()-_+: ",
                "symbols-all": "!@#$%^&*()-_+:~`[]{}|\\:;\"'<>,.?/",
                "symbols-all-space": "!@#$%^&*()-_+:~`[]{}|\\:;\"'<>,.?/ ",
                "ualpha": "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
                "ualpha-space": "ABCDEFGHIJKLMNOPQRSTUVWXYZ ",
                "ualpha-symbol14": "ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()-_+:",
                "ualpha-all": "ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()-_+:~`[]{}|\\:;\"'<>,.?/",
                "ualpha-numeric": "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789",
                "ualpha-numeric-space": "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 ",
                "ualpha-numeric-symbol14": "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_+:",
                "ualpha-numeric-symbol14-space": "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_+: ",
                "ualpha-numeric-all": "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_+:~`[]{}|\\:;\"'<>,.?/",
                "ualpha-numeric-all-space": "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_+:~`[]{}|\\:;\"'<>,.?/ ",
                "lalpha": "abcdefghijklmnopqrstuvwxyz",
                "lalpha-space": "abcdefghijklmnopqrstuvwxyz ",
                "lalpha-symbol14": "abcdefghijklmnopqrstuvwxyz!@#$%^&*()-_+:",
                "lalpha-all": "abcdefghijklmnopqrstuvwxyz!@#$%^&*()-_+:~`[]{}|\\:;\"'<>,.?/",
                "lalpha-numeric": "abcdefghijklmnopqrstuvwxyz0123456789",
                "lalpha-numeric-space": "abcdefghijklmnopqrstuvwxyz0123456789 ",
                "lalpha-numeric-symbol14": "abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_+:",
                "lalpha-numeric-symbol14-space": "abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_+: ",
                "lalpha-numeric-all": "abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_+:~`[]{}|\\:;\"'<>,.?/",
                "lalpha-numeric-all-space": "abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_+:~`[]{}|\\:;\"'<>,.?/ ",
                "mixalpha": "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
                "mixalpha-space": "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ ",
                "mixalpha-symbol14": "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()-_+:",
                "mixalpha-all": "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()-_+:~`[]{}|\\:;\"'<>,.?/",
                "mixalpha-numeric": "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789",
                "mixalpha-numeric-space": "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 ",
                "mixalpha-numeric-symbol14": "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_+:",
                "mixalpha-numeric-symbol14-space": "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_+: ",
                "mixalpha-numeric-all": "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_+:~`[]{}|\\:;\"'<>,.?/",
                "mixalpha-numeric-all-space": "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_+:~`[]{}|\\:;\"'<>,.?/ "
            }
        }
    }
}