# coding: utf-8

"""
    Pulp 3 API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v3
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Package(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'href': 'str',
        'created': 'datetime',
        'type': 'str',
        'artifact': 'str',
        'relative_path': 'str',
        'package_name': 'str',
        'source': 'str',
        'version': 'str',
        'architecture': 'str',
        'section': 'str',
        'priority': 'str',
        'origin': 'str',
        'tag': 'str',
        'bugs': 'str',
        'essential': 'str',
        'build_essential': 'str',
        'installed_size': 'int',
        'maintainer': 'str',
        'original_maintainer': 'str',
        'description': 'str',
        'description_md5': 'str',
        'homepage': 'str',
        'built_using': 'str',
        'auto_built_package': 'str',
        'multi_arch': 'str',
        'breaks': 'str',
        'conflicts': 'str',
        'depends': 'str',
        'recommends': 'str',
        'suggests': 'str',
        'enhances': 'str',
        'pre_depends': 'str',
        'provides': 'str',
        'replaces': 'str',
        'relative_path': 'str',
        'sha256': 'str'
    }

    attribute_map = {
        'href': '_href',
        'created': '_created',
        'type': '_type',
        'artifact': '_artifact',
        'relative_path': '_relative_path',
        'package_name': 'package_name',
        'source': 'source',
        'version': 'version',
        'architecture': 'architecture',
        'section': 'section',
        'priority': 'priority',
        'origin': 'origin',
        'tag': 'tag',
        'bugs': 'bugs',
        'essential': 'essential',
        'build_essential': 'build_essential',
        'installed_size': 'installed_size',
        'maintainer': 'maintainer',
        'original_maintainer': 'original_maintainer',
        'description': 'description',
        'description_md5': 'description_md5',
        'homepage': 'homepage',
        'built_using': 'built_using',
        'auto_built_package': 'auto_built_package',
        'multi_arch': 'multi_arch',
        'breaks': 'breaks',
        'conflicts': 'conflicts',
        'depends': 'depends',
        'recommends': 'recommends',
        'suggests': 'suggests',
        'enhances': 'enhances',
        'pre_depends': 'pre_depends',
        'provides': 'provides',
        'replaces': 'replaces',
        'relative_path': 'relative_path',
        'sha256': 'sha256'
    }

    def __init__(self, href=None, created=None, type=None, artifact=None, relative_path=None, package_name=None, source=None, version=None, architecture=None, section=None, priority=None, origin=None, tag=None, bugs=None, essential=None, build_essential=None, installed_size=None, maintainer=None, original_maintainer=None, description=None, description_md5=None, homepage=None, built_using=None, auto_built_package=None, multi_arch=None, breaks=None, conflicts=None, depends=None, recommends=None, suggests=None, enhances=None, pre_depends=None, provides=None, replaces=None, relative_path=None, sha256=None):  # noqa: E501
        """Package - a model defined in OpenAPI"""  # noqa: E501

        self._href = None
        self._created = None
        self._type = None
        self._artifact = None
        self._relative_path = None
        self._package_name = None
        self._source = None
        self._version = None
        self._architecture = None
        self._section = None
        self._priority = None
        self._origin = None
        self._tag = None
        self._bugs = None
        self._essential = None
        self._build_essential = None
        self._installed_size = None
        self._maintainer = None
        self._original_maintainer = None
        self._description = None
        self._description_md5 = None
        self._homepage = None
        self._built_using = None
        self._auto_built_package = None
        self._multi_arch = None
        self._breaks = None
        self._conflicts = None
        self._depends = None
        self._recommends = None
        self._suggests = None
        self._enhances = None
        self._pre_depends = None
        self._provides = None
        self._replaces = None
        self._relative_path = None
        self._sha256 = None
        self.discriminator = None

        if href is not None:
            self.href = href
        if created is not None:
            self.created = created
        if type is not None:
            self.type = type
        self.artifact = artifact
        self.relative_path = relative_path
        self.package_name = package_name
        self.source = source
        self.version = version
        self.architecture = architecture
        self.section = section
        self.priority = priority
        self.origin = origin
        self.tag = tag
        self.bugs = bugs
        if essential is not None:
            self.essential = essential
        if build_essential is not None:
            self.build_essential = build_essential
        self.installed_size = installed_size
        self.maintainer = maintainer
        self.original_maintainer = original_maintainer
        self.description = description
        self.description_md5 = description_md5
        self.homepage = homepage
        self.built_using = built_using
        self.auto_built_package = auto_built_package
        self.multi_arch = multi_arch
        self.breaks = breaks
        self.conflicts = conflicts
        self.depends = depends
        self.recommends = recommends
        self.suggests = suggests
        self.enhances = enhances
        self.pre_depends = pre_depends
        self.provides = provides
        self.replaces = replaces
        if relative_path is not None:
            self.relative_path = relative_path
        self.sha256 = sha256

    @property
    def href(self):
        """Gets the href of this Package.  # noqa: E501


        :return: The href of this Package.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this Package.


        :param href: The href of this Package.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def created(self):
        """Gets the created of this Package.  # noqa: E501

        Timestamp of creation.  # noqa: E501

        :return: The created of this Package.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Package.

        Timestamp of creation.  # noqa: E501

        :param created: The created of this Package.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def type(self):
        """Gets the type of this Package.  # noqa: E501


        :return: The type of this Package.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Package.


        :param type: The type of this Package.  # noqa: E501
        :type: str
        """
        if type is not None and len(type) < 1:
            raise ValueError("Invalid value for `type`, length must be greater than or equal to `1`")  # noqa: E501

        self._type = type

    @property
    def artifact(self):
        """Gets the artifact of this Package.  # noqa: E501

        Artifact file representing the physical content  # noqa: E501

        :return: The artifact of this Package.  # noqa: E501
        :rtype: str
        """
        return self._artifact

    @artifact.setter
    def artifact(self, artifact):
        """Sets the artifact of this Package.

        Artifact file representing the physical content  # noqa: E501

        :param artifact: The artifact of this Package.  # noqa: E501
        :type: str
        """
        if artifact is None:
            raise ValueError("Invalid value for `artifact`, must not be `None`")  # noqa: E501

        self._artifact = artifact

    @property
    def relative_path(self):
        """Gets the relative_path of this Package.  # noqa: E501

        Path where the artifact is located relative to distributions base_path  # noqa: E501

        :return: The relative_path of this Package.  # noqa: E501
        :rtype: str
        """
        return self._relative_path

    @relative_path.setter
    def relative_path(self, relative_path):
        """Sets the relative_path of this Package.

        Path where the artifact is located relative to distributions base_path  # noqa: E501

        :param relative_path: The relative_path of this Package.  # noqa: E501
        :type: str
        """
        if relative_path is None:
            raise ValueError("Invalid value for `relative_path`, must not be `None`")  # noqa: E501
        if relative_path is not None and len(relative_path) < 1:
            raise ValueError("Invalid value for `relative_path`, length must be greater than or equal to `1`")  # noqa: E501

        self._relative_path = relative_path

    @property
    def package_name(self):
        """Gets the package_name of this Package.  # noqa: E501


        :return: The package_name of this Package.  # noqa: E501
        :rtype: str
        """
        return self._package_name

    @package_name.setter
    def package_name(self, package_name):
        """Sets the package_name of this Package.


        :param package_name: The package_name of this Package.  # noqa: E501
        :type: str
        """
        if package_name is None:
            raise ValueError("Invalid value for `package_name`, must not be `None`")  # noqa: E501
        if package_name is not None and len(package_name) > 255:
            raise ValueError("Invalid value for `package_name`, length must be less than or equal to `255`")  # noqa: E501
        if package_name is not None and len(package_name) < 1:
            raise ValueError("Invalid value for `package_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._package_name = package_name

    @property
    def source(self):
        """Gets the source of this Package.  # noqa: E501


        :return: The source of this Package.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Package.


        :param source: The source of this Package.  # noqa: E501
        :type: str
        """
        if source is not None and len(source) > 255:
            raise ValueError("Invalid value for `source`, length must be less than or equal to `255`")  # noqa: E501
        if source is not None and len(source) < 1:
            raise ValueError("Invalid value for `source`, length must be greater than or equal to `1`")  # noqa: E501

        self._source = source

    @property
    def version(self):
        """Gets the version of this Package.  # noqa: E501


        :return: The version of this Package.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Package.


        :param version: The version of this Package.  # noqa: E501
        :type: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501
        if version is not None and len(version) > 255:
            raise ValueError("Invalid value for `version`, length must be less than or equal to `255`")  # noqa: E501
        if version is not None and len(version) < 1:
            raise ValueError("Invalid value for `version`, length must be greater than or equal to `1`")  # noqa: E501

        self._version = version

    @property
    def architecture(self):
        """Gets the architecture of this Package.  # noqa: E501


        :return: The architecture of this Package.  # noqa: E501
        :rtype: str
        """
        return self._architecture

    @architecture.setter
    def architecture(self, architecture):
        """Sets the architecture of this Package.


        :param architecture: The architecture of this Package.  # noqa: E501
        :type: str
        """
        if architecture is None:
            raise ValueError("Invalid value for `architecture`, must not be `None`")  # noqa: E501
        if architecture is not None and len(architecture) > 255:
            raise ValueError("Invalid value for `architecture`, length must be less than or equal to `255`")  # noqa: E501
        if architecture is not None and len(architecture) < 1:
            raise ValueError("Invalid value for `architecture`, length must be greater than or equal to `1`")  # noqa: E501

        self._architecture = architecture

    @property
    def section(self):
        """Gets the section of this Package.  # noqa: E501


        :return: The section of this Package.  # noqa: E501
        :rtype: str
        """
        return self._section

    @section.setter
    def section(self, section):
        """Sets the section of this Package.


        :param section: The section of this Package.  # noqa: E501
        :type: str
        """
        if section is not None and len(section) > 255:
            raise ValueError("Invalid value for `section`, length must be less than or equal to `255`")  # noqa: E501
        if section is not None and len(section) < 1:
            raise ValueError("Invalid value for `section`, length must be greater than or equal to `1`")  # noqa: E501

        self._section = section

    @property
    def priority(self):
        """Gets the priority of this Package.  # noqa: E501


        :return: The priority of this Package.  # noqa: E501
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this Package.


        :param priority: The priority of this Package.  # noqa: E501
        :type: str
        """
        if priority is not None and len(priority) > 255:
            raise ValueError("Invalid value for `priority`, length must be less than or equal to `255`")  # noqa: E501
        if priority is not None and len(priority) < 1:
            raise ValueError("Invalid value for `priority`, length must be greater than or equal to `1`")  # noqa: E501

        self._priority = priority

    @property
    def origin(self):
        """Gets the origin of this Package.  # noqa: E501


        :return: The origin of this Package.  # noqa: E501
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this Package.


        :param origin: The origin of this Package.  # noqa: E501
        :type: str
        """
        if origin is not None and len(origin) > 255:
            raise ValueError("Invalid value for `origin`, length must be less than or equal to `255`")  # noqa: E501
        if origin is not None and len(origin) < 1:
            raise ValueError("Invalid value for `origin`, length must be greater than or equal to `1`")  # noqa: E501

        self._origin = origin

    @property
    def tag(self):
        """Gets the tag of this Package.  # noqa: E501


        :return: The tag of this Package.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this Package.


        :param tag: The tag of this Package.  # noqa: E501
        :type: str
        """
        if tag is not None and len(tag) < 1:
            raise ValueError("Invalid value for `tag`, length must be greater than or equal to `1`")  # noqa: E501

        self._tag = tag

    @property
    def bugs(self):
        """Gets the bugs of this Package.  # noqa: E501


        :return: The bugs of this Package.  # noqa: E501
        :rtype: str
        """
        return self._bugs

    @bugs.setter
    def bugs(self, bugs):
        """Sets the bugs of this Package.


        :param bugs: The bugs of this Package.  # noqa: E501
        :type: str
        """
        if bugs is not None and len(bugs) < 1:
            raise ValueError("Invalid value for `bugs`, length must be greater than or equal to `1`")  # noqa: E501

        self._bugs = bugs

    @property
    def essential(self):
        """Gets the essential of this Package.  # noqa: E501


        :return: The essential of this Package.  # noqa: E501
        :rtype: str
        """
        return self._essential

    @essential.setter
    def essential(self, essential):
        """Sets the essential of this Package.


        :param essential: The essential of this Package.  # noqa: E501
        :type: str
        """

        self._essential = essential

    @property
    def build_essential(self):
        """Gets the build_essential of this Package.  # noqa: E501


        :return: The build_essential of this Package.  # noqa: E501
        :rtype: str
        """
        return self._build_essential

    @build_essential.setter
    def build_essential(self, build_essential):
        """Sets the build_essential of this Package.


        :param build_essential: The build_essential of this Package.  # noqa: E501
        :type: str
        """

        self._build_essential = build_essential

    @property
    def installed_size(self):
        """Gets the installed_size of this Package.  # noqa: E501


        :return: The installed_size of this Package.  # noqa: E501
        :rtype: int
        """
        return self._installed_size

    @installed_size.setter
    def installed_size(self, installed_size):
        """Sets the installed_size of this Package.


        :param installed_size: The installed_size of this Package.  # noqa: E501
        :type: int
        """
        if installed_size is not None and installed_size > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `installed_size`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if installed_size is not None and installed_size < -2147483648:  # noqa: E501
            raise ValueError("Invalid value for `installed_size`, must be a value greater than or equal to `-2147483648`")  # noqa: E501

        self._installed_size = installed_size

    @property
    def maintainer(self):
        """Gets the maintainer of this Package.  # noqa: E501


        :return: The maintainer of this Package.  # noqa: E501
        :rtype: str
        """
        return self._maintainer

    @maintainer.setter
    def maintainer(self, maintainer):
        """Sets the maintainer of this Package.


        :param maintainer: The maintainer of this Package.  # noqa: E501
        :type: str
        """
        if maintainer is None:
            raise ValueError("Invalid value for `maintainer`, must not be `None`")  # noqa: E501
        if maintainer is not None and len(maintainer) > 255:
            raise ValueError("Invalid value for `maintainer`, length must be less than or equal to `255`")  # noqa: E501
        if maintainer is not None and len(maintainer) < 1:
            raise ValueError("Invalid value for `maintainer`, length must be greater than or equal to `1`")  # noqa: E501

        self._maintainer = maintainer

    @property
    def original_maintainer(self):
        """Gets the original_maintainer of this Package.  # noqa: E501


        :return: The original_maintainer of this Package.  # noqa: E501
        :rtype: str
        """
        return self._original_maintainer

    @original_maintainer.setter
    def original_maintainer(self, original_maintainer):
        """Sets the original_maintainer of this Package.


        :param original_maintainer: The original_maintainer of this Package.  # noqa: E501
        :type: str
        """
        if original_maintainer is not None and len(original_maintainer) > 255:
            raise ValueError("Invalid value for `original_maintainer`, length must be less than or equal to `255`")  # noqa: E501
        if original_maintainer is not None and len(original_maintainer) < 1:
            raise ValueError("Invalid value for `original_maintainer`, length must be greater than or equal to `1`")  # noqa: E501

        self._original_maintainer = original_maintainer

    @property
    def description(self):
        """Gets the description of this Package.  # noqa: E501


        :return: The description of this Package.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Package.


        :param description: The description of this Package.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501
        if description is not None and len(description) < 1:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")  # noqa: E501

        self._description = description

    @property
    def description_md5(self):
        """Gets the description_md5 of this Package.  # noqa: E501


        :return: The description_md5 of this Package.  # noqa: E501
        :rtype: str
        """
        return self._description_md5

    @description_md5.setter
    def description_md5(self, description_md5):
        """Sets the description_md5 of this Package.


        :param description_md5: The description_md5 of this Package.  # noqa: E501
        :type: str
        """
        if description_md5 is not None and len(description_md5) > 255:
            raise ValueError("Invalid value for `description_md5`, length must be less than or equal to `255`")  # noqa: E501
        if description_md5 is not None and len(description_md5) < 1:
            raise ValueError("Invalid value for `description_md5`, length must be greater than or equal to `1`")  # noqa: E501

        self._description_md5 = description_md5

    @property
    def homepage(self):
        """Gets the homepage of this Package.  # noqa: E501


        :return: The homepage of this Package.  # noqa: E501
        :rtype: str
        """
        return self._homepage

    @homepage.setter
    def homepage(self, homepage):
        """Sets the homepage of this Package.


        :param homepage: The homepage of this Package.  # noqa: E501
        :type: str
        """
        if homepage is not None and len(homepage) > 255:
            raise ValueError("Invalid value for `homepage`, length must be less than or equal to `255`")  # noqa: E501
        if homepage is not None and len(homepage) < 1:
            raise ValueError("Invalid value for `homepage`, length must be greater than or equal to `1`")  # noqa: E501

        self._homepage = homepage

    @property
    def built_using(self):
        """Gets the built_using of this Package.  # noqa: E501


        :return: The built_using of this Package.  # noqa: E501
        :rtype: str
        """
        return self._built_using

    @built_using.setter
    def built_using(self, built_using):
        """Sets the built_using of this Package.


        :param built_using: The built_using of this Package.  # noqa: E501
        :type: str
        """
        if built_using is not None and len(built_using) > 255:
            raise ValueError("Invalid value for `built_using`, length must be less than or equal to `255`")  # noqa: E501
        if built_using is not None and len(built_using) < 1:
            raise ValueError("Invalid value for `built_using`, length must be greater than or equal to `1`")  # noqa: E501

        self._built_using = built_using

    @property
    def auto_built_package(self):
        """Gets the auto_built_package of this Package.  # noqa: E501


        :return: The auto_built_package of this Package.  # noqa: E501
        :rtype: str
        """
        return self._auto_built_package

    @auto_built_package.setter
    def auto_built_package(self, auto_built_package):
        """Sets the auto_built_package of this Package.


        :param auto_built_package: The auto_built_package of this Package.  # noqa: E501
        :type: str
        """
        if auto_built_package is not None and len(auto_built_package) > 255:
            raise ValueError("Invalid value for `auto_built_package`, length must be less than or equal to `255`")  # noqa: E501
        if auto_built_package is not None and len(auto_built_package) < 1:
            raise ValueError("Invalid value for `auto_built_package`, length must be greater than or equal to `1`")  # noqa: E501

        self._auto_built_package = auto_built_package

    @property
    def multi_arch(self):
        """Gets the multi_arch of this Package.  # noqa: E501


        :return: The multi_arch of this Package.  # noqa: E501
        :rtype: str
        """
        return self._multi_arch

    @multi_arch.setter
    def multi_arch(self, multi_arch):
        """Sets the multi_arch of this Package.


        :param multi_arch: The multi_arch of this Package.  # noqa: E501
        :type: str
        """
        allowed_values = [None,"no", "same", "foreign", "allowed"]  # noqa: E501
        if multi_arch not in allowed_values:
            raise ValueError(
                "Invalid value for `multi_arch` ({0}), must be one of {1}"  # noqa: E501
                .format(multi_arch, allowed_values)
            )

        self._multi_arch = multi_arch

    @property
    def breaks(self):
        """Gets the breaks of this Package.  # noqa: E501


        :return: The breaks of this Package.  # noqa: E501
        :rtype: str
        """
        return self._breaks

    @breaks.setter
    def breaks(self, breaks):
        """Sets the breaks of this Package.


        :param breaks: The breaks of this Package.  # noqa: E501
        :type: str
        """
        if breaks is not None and len(breaks) < 1:
            raise ValueError("Invalid value for `breaks`, length must be greater than or equal to `1`")  # noqa: E501

        self._breaks = breaks

    @property
    def conflicts(self):
        """Gets the conflicts of this Package.  # noqa: E501


        :return: The conflicts of this Package.  # noqa: E501
        :rtype: str
        """
        return self._conflicts

    @conflicts.setter
    def conflicts(self, conflicts):
        """Sets the conflicts of this Package.


        :param conflicts: The conflicts of this Package.  # noqa: E501
        :type: str
        """
        if conflicts is not None and len(conflicts) < 1:
            raise ValueError("Invalid value for `conflicts`, length must be greater than or equal to `1`")  # noqa: E501

        self._conflicts = conflicts

    @property
    def depends(self):
        """Gets the depends of this Package.  # noqa: E501


        :return: The depends of this Package.  # noqa: E501
        :rtype: str
        """
        return self._depends

    @depends.setter
    def depends(self, depends):
        """Sets the depends of this Package.


        :param depends: The depends of this Package.  # noqa: E501
        :type: str
        """
        if depends is not None and len(depends) < 1:
            raise ValueError("Invalid value for `depends`, length must be greater than or equal to `1`")  # noqa: E501

        self._depends = depends

    @property
    def recommends(self):
        """Gets the recommends of this Package.  # noqa: E501


        :return: The recommends of this Package.  # noqa: E501
        :rtype: str
        """
        return self._recommends

    @recommends.setter
    def recommends(self, recommends):
        """Sets the recommends of this Package.


        :param recommends: The recommends of this Package.  # noqa: E501
        :type: str
        """
        if recommends is not None and len(recommends) < 1:
            raise ValueError("Invalid value for `recommends`, length must be greater than or equal to `1`")  # noqa: E501

        self._recommends = recommends

    @property
    def suggests(self):
        """Gets the suggests of this Package.  # noqa: E501


        :return: The suggests of this Package.  # noqa: E501
        :rtype: str
        """
        return self._suggests

    @suggests.setter
    def suggests(self, suggests):
        """Sets the suggests of this Package.


        :param suggests: The suggests of this Package.  # noqa: E501
        :type: str
        """
        if suggests is not None and len(suggests) < 1:
            raise ValueError("Invalid value for `suggests`, length must be greater than or equal to `1`")  # noqa: E501

        self._suggests = suggests

    @property
    def enhances(self):
        """Gets the enhances of this Package.  # noqa: E501


        :return: The enhances of this Package.  # noqa: E501
        :rtype: str
        """
        return self._enhances

    @enhances.setter
    def enhances(self, enhances):
        """Sets the enhances of this Package.


        :param enhances: The enhances of this Package.  # noqa: E501
        :type: str
        """
        if enhances is not None and len(enhances) < 1:
            raise ValueError("Invalid value for `enhances`, length must be greater than or equal to `1`")  # noqa: E501

        self._enhances = enhances

    @property
    def pre_depends(self):
        """Gets the pre_depends of this Package.  # noqa: E501


        :return: The pre_depends of this Package.  # noqa: E501
        :rtype: str
        """
        return self._pre_depends

    @pre_depends.setter
    def pre_depends(self, pre_depends):
        """Sets the pre_depends of this Package.


        :param pre_depends: The pre_depends of this Package.  # noqa: E501
        :type: str
        """
        if pre_depends is not None and len(pre_depends) < 1:
            raise ValueError("Invalid value for `pre_depends`, length must be greater than or equal to `1`")  # noqa: E501

        self._pre_depends = pre_depends

    @property
    def provides(self):
        """Gets the provides of this Package.  # noqa: E501


        :return: The provides of this Package.  # noqa: E501
        :rtype: str
        """
        return self._provides

    @provides.setter
    def provides(self, provides):
        """Sets the provides of this Package.


        :param provides: The provides of this Package.  # noqa: E501
        :type: str
        """
        if provides is not None and len(provides) < 1:
            raise ValueError("Invalid value for `provides`, length must be greater than or equal to `1`")  # noqa: E501

        self._provides = provides

    @property
    def replaces(self):
        """Gets the replaces of this Package.  # noqa: E501


        :return: The replaces of this Package.  # noqa: E501
        :rtype: str
        """
        return self._replaces

    @replaces.setter
    def replaces(self, replaces):
        """Sets the replaces of this Package.


        :param replaces: The replaces of this Package.  # noqa: E501
        :type: str
        """
        if replaces is not None and len(replaces) < 1:
            raise ValueError("Invalid value for `replaces`, length must be greater than or equal to `1`")  # noqa: E501

        self._replaces = replaces

    @property
    def relative_path(self):
        """Gets the relative_path of this Package.  # noqa: E501

        Path of file relative to url.  # noqa: E501

        :return: The relative_path of this Package.  # noqa: E501
        :rtype: str
        """
        return self._relative_path

    @relative_path.setter
    def relative_path(self, relative_path):
        """Sets the relative_path of this Package.

        Path of file relative to url.  # noqa: E501

        :param relative_path: The relative_path of this Package.  # noqa: E501
        :type: str
        """
        if relative_path is not None and len(relative_path) < 1:
            raise ValueError("Invalid value for `relative_path`, length must be greater than or equal to `1`")  # noqa: E501

        self._relative_path = relative_path

    @property
    def sha256(self):
        """Gets the sha256 of this Package.  # noqa: E501


        :return: The sha256 of this Package.  # noqa: E501
        :rtype: str
        """
        return self._sha256

    @sha256.setter
    def sha256(self, sha256):
        """Sets the sha256 of this Package.


        :param sha256: The sha256 of this Package.  # noqa: E501
        :type: str
        """
        if sha256 is None:
            raise ValueError("Invalid value for `sha256`, must not be `None`")  # noqa: E501
        if sha256 is not None and len(sha256) > 255:
            raise ValueError("Invalid value for `sha256`, length must be less than or equal to `255`")  # noqa: E501
        if sha256 is not None and len(sha256) < 1:
            raise ValueError("Invalid value for `sha256`, length must be greater than or equal to `1`")  # noqa: E501

        self._sha256 = sha256

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Package):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
