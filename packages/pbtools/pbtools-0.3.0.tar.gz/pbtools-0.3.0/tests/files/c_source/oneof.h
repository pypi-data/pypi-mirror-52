/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by pbtools.
 */

#ifndef ONEOF_H
#define ONEOF_H

#include "pbtools.h"

/**
 * Enum oneof.Message.value.
 */
enum oneof_message_value_choice_e {
    oneof_message_value_choice_none_e = 0,
    oneof_message_value_choice_v1_e = 1,
    oneof_message_value_choice_v2_e = 2
};

/**
 * Oneof oneof.Message.value.
 */
struct oneof_message_value_oneof_t {
    enum oneof_message_value_choice_e choice;
    union {
        int32_t v1;
        struct pbtools_bytes_t v2;
    } value;
};

/**
 * Message oneof.Message.
 */
struct oneof_message_repeated_t {
    int length;
    struct oneof_message_t **items_pp;
    struct oneof_message_t *head_p;
    struct oneof_message_t *tail_p;
};

struct oneof_message_t {
    struct pbtools_message_base_t base;
    struct oneof_message_value_oneof_t value;
};

/**
 * Message oneof.Message2.Foo.
 */
struct oneof_message2_foo_repeated_t {
    int length;
    struct oneof_message2_foo_t **items_pp;
    struct oneof_message2_foo_t *head_p;
    struct oneof_message2_foo_t *tail_p;
};

struct oneof_message2_foo_t {
    struct pbtools_message_base_t base;
    int32_t bar;
};

/**
 * Enum oneof.Message2.oneof1.
 */
enum oneof_message2_oneof1_choice_e {
    oneof_message2_oneof1_choice_none_e = 0,
    oneof_message2_oneof1_choice_v1_e = 1
};

/**
 * Oneof oneof.Message2.oneof1.
 */
struct oneof_message2_oneof1_oneof_t {
    enum oneof_message2_oneof1_choice_e choice;
    union {
        struct oneof_message2_foo_t v1;
    } value;
};

/**
 * Enum oneof.Message2.oneof2.
 */
enum oneof_message2_oneof2_choice_e {
    oneof_message2_oneof2_choice_none_e = 0,
    oneof_message2_oneof2_choice_v1_e = 1,
    oneof_message2_oneof2_choice_v2_e = 2,
    oneof_message2_oneof2_choice_v3_e = 3
};

/**
 * Oneof oneof.Message2.oneof2.
 */
struct oneof_message2_oneof2_oneof_t {
    enum oneof_message2_oneof2_choice_e choice;
    union {
        bool v1;
        struct oneof_message2_foo_t v2;
        struct oneof_message_t v3;
    } value;
};

/**
 * Message oneof.Message2.
 */
struct oneof_message2_repeated_t {
    int length;
    struct oneof_message2_t **items_pp;
    struct oneof_message2_t *head_p;
    struct oneof_message2_t *tail_p;
};

struct oneof_message2_t {
    struct pbtools_message_base_t base;
    struct oneof_message2_oneof1_oneof_t oneof1;
    struct oneof_message2_oneof2_oneof_t oneof2;
};

/**
 * Create a new message oneof.Message in given workspace.
 *
 * @param[in] workspace_p Message workspace.
 * @param[in] size Workspace size.
 *
 * @return Initialized address book, or NULL on failure.
 */
struct oneof_message_t *
oneof_message_new(
    void *workspace_p,
    size_t size);

/**
 * Encode message oneof.Message.
 *
 * @param[in] self_p Message to encode.
 * @param[out] encoded_p Buffer to encode the message into.
 * @param[in] size Encoded buffer size.
 *
 * @return Encoded data length or negative error code.
 */
int oneof_message_encode(
    struct oneof_message_t *self_p,
    uint8_t *encoded_p,
    size_t size);

/**
 * Decode message oneof.Message.
 *
 * @param[in,out] self_p Initialized message to decode into.
 * @param[in] encoded_p Buffer to decode.
 * @param[in] size Size of the encoded message.
 *
 * @return Number of bytes decoded or negative error code.
 */
int oneof_message_decode(
    struct oneof_message_t *self_p,
    const uint8_t *encoded_p,
    size_t size);

/**
 * Create a new message oneof.Message2 in given workspace.
 *
 * @param[in] workspace_p Message workspace.
 * @param[in] size Workspace size.
 *
 * @return Initialized address book, or NULL on failure.
 */
struct oneof_message2_t *
oneof_message2_new(
    void *workspace_p,
    size_t size);

/**
 * Encode message oneof.Message2.
 *
 * @param[in] self_p Message to encode.
 * @param[out] encoded_p Buffer to encode the message into.
 * @param[in] size Encoded buffer size.
 *
 * @return Encoded data length or negative error code.
 */
int oneof_message2_encode(
    struct oneof_message2_t *self_p,
    uint8_t *encoded_p,
    size_t size);

/**
 * Decode message oneof.Message2.
 *
 * @param[in,out] self_p Initialized message to decode into.
 * @param[in] encoded_p Buffer to decode.
 * @param[in] size Size of the encoded message.
 *
 * @return Number of bytes decoded or negative error code.
 */
int oneof_message2_decode(
    struct oneof_message2_t *self_p,
    const uint8_t *encoded_p,
    size_t size);

#endif
