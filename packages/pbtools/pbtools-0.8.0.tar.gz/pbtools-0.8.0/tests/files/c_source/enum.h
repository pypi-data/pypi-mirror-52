/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by pbtools.
 */

#ifndef ENUM_H
#define ENUM_H

#include "pbtools.h"

/**
 * Enum enum.Enum.
 */
enum enum_enum_e {
    enum_enum_c_e = 0,
    enum_enum_d_e = 1
};

/**
 * Enum enum.Message.Enum.
 */
enum enum_message_enum_e {
    enum_message_enum_a_e = 0,
    enum_message_enum_b_e = 1
};

/**
 * Message enum.Message.
 */
struct enum_message_repeated_t {
    int length;
    struct enum_message_t **items_pp;
    struct enum_message_t *head_p;
    struct enum_message_t *tail_p;
};

struct enum_message_t {
    struct pbtools_message_base_t base;
    enum enum_message_enum_e value;
};

/**
 * Enum enum.Message2.InnerEnum.
 */
enum enum_message2_inner_enum_e {
    enum_message2_inner_enum_e_e = 0,
    enum_message2_inner_enum_f_e = 1
};

/**
 * Message enum.Message2.
 */
struct enum_message2_repeated_t {
    int length;
    struct enum_message2_t **items_pp;
    struct enum_message2_t *head_p;
    struct enum_message2_t *tail_p;
};

struct enum_message2_t {
    struct pbtools_message_base_t base;
    enum enum_enum_e outer;
    enum enum_message2_inner_enum_e inner;
};

/**
 * Enum enum.Limits.Enum.
 */
enum enum_limits_enum_e {
    enum_limits_enum_g_e = 0,
    enum_limits_enum_h_e = -2147483648,
    enum_limits_enum_i_e = 2147483647
};

/**
 * Message enum.Limits.
 */
struct enum_limits_repeated_t {
    int length;
    struct enum_limits_t **items_pp;
    struct enum_limits_t *head_p;
    struct enum_limits_t *tail_p;
};

struct enum_limits_t {
    struct pbtools_message_base_t base;
    enum enum_limits_enum_e value;
};

struct enum_message_t *
enum_message_new(
    void *workspace_p,
    size_t size);

int enum_message_encode(
    struct enum_message_t *self_p,
    uint8_t *encoded_p,
    size_t size);

int enum_message_decode(
    struct enum_message_t *self_p,
    const uint8_t *encoded_p,
    size_t size);

struct enum_message2_t *
enum_message2_new(
    void *workspace_p,
    size_t size);

int enum_message2_encode(
    struct enum_message2_t *self_p,
    uint8_t *encoded_p,
    size_t size);

int enum_message2_decode(
    struct enum_message2_t *self_p,
    const uint8_t *encoded_p,
    size_t size);

struct enum_limits_t *
enum_limits_new(
    void *workspace_p,
    size_t size);

int enum_limits_encode(
    struct enum_limits_t *self_p,
    uint8_t *encoded_p,
    size_t size);

int enum_limits_decode(
    struct enum_limits_t *self_p,
    const uint8_t *encoded_p,
    size_t size);

#endif
