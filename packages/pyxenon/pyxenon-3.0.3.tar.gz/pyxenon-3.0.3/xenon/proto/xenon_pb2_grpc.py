# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from xenon.proto import xenon_pb2 as xenon_dot_proto_dot_xenon__pb2


class FileSystemServiceStub(object):
  """XenonFiles represents the Xenon nl.esciencecenter.xenon.filesystems.FileSystem class.
  This interface contains various methods for creating and closing FileSystems, creating Paths and operations on these Paths.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.getAdaptorDescriptions = channel.unary_unary(
        '/xenon.FileSystemService/getAdaptorDescriptions',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.Empty.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.FileSystemAdaptorDescriptions.FromString,
        )
    self.getAdaptorNames = channel.unary_unary(
        '/xenon.FileSystemService/getAdaptorNames',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.Empty.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.AdaptorNames.FromString,
        )
    self.getAdaptorDescription = channel.unary_unary(
        '/xenon.FileSystemService/getAdaptorDescription',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.AdaptorName.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.FileSystemAdaptorDescription.FromString,
        )
    self.create = channel.unary_unary(
        '/xenon.FileSystemService/create',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.CreateFileSystemRequest.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.FileSystem.FromString,
        )
    self.getAdaptorName = channel.unary_unary(
        '/xenon.FileSystemService/getAdaptorName',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.FileSystem.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.AdaptorName.FromString,
        )
    self.getLocation = channel.unary_unary(
        '/xenon.FileSystemService/getLocation',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.FileSystem.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.Location.FromString,
        )
    self.getCredential = channel.unary_unary(
        '/xenon.FileSystemService/getCredential',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.FileSystem.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.GetCredentialResponse.FromString,
        )
    self.getProperties = channel.unary_unary(
        '/xenon.FileSystemService/getProperties',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.FileSystem.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.Properties.FromString,
        )
    self.createDirectories = channel.unary_unary(
        '/xenon.FileSystemService/createDirectories',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.PathRequest.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.Empty.FromString,
        )
    self.createDirectory = channel.unary_unary(
        '/xenon.FileSystemService/createDirectory',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.PathRequest.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.Empty.FromString,
        )
    self.createFile = channel.unary_unary(
        '/xenon.FileSystemService/createFile',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.PathRequest.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.Empty.FromString,
        )
    self.createSymbolicLink = channel.unary_unary(
        '/xenon.FileSystemService/createSymbolicLink',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.CreateSymbolicLinkRequest.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.Empty.FromString,
        )
    self.copy = channel.unary_unary(
        '/xenon.FileSystemService/copy',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.CopyRequest.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.CopyOperation.FromString,
        )
    self.cancel = channel.unary_unary(
        '/xenon.FileSystemService/cancel',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.CopyOperationRequest.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.CopyStatus.FromString,
        )
    self.getStatus = channel.unary_unary(
        '/xenon.FileSystemService/getStatus',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.CopyOperationRequest.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.CopyStatus.FromString,
        )
    self.rename = channel.unary_unary(
        '/xenon.FileSystemService/rename',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.RenameRequest.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.Empty.FromString,
        )
    self.delete = channel.unary_unary(
        '/xenon.FileSystemService/delete',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.DeleteRequest.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.Empty.FromString,
        )
    self.exists = channel.unary_unary(
        '/xenon.FileSystemService/exists',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.PathRequest.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.Is.FromString,
        )
    self.readFromFile = channel.unary_stream(
        '/xenon.FileSystemService/readFromFile',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.PathRequest.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.ReadFromFileResponse.FromString,
        )
    self.writeToFile = channel.stream_unary(
        '/xenon.FileSystemService/writeToFile',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.WriteToFileRequest.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.Empty.FromString,
        )
    self.appendToFile = channel.stream_unary(
        '/xenon.FileSystemService/appendToFile',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.AppendToFileRequest.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.Empty.FromString,
        )
    self.list = channel.unary_stream(
        '/xenon.FileSystemService/list',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.ListRequest.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.PathAttributes.FromString,
        )
    self.getAttributes = channel.unary_unary(
        '/xenon.FileSystemService/getAttributes',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.PathRequest.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.PathAttributes.FromString,
        )
    self.getWorkingDirectory = channel.unary_unary(
        '/xenon.FileSystemService/getWorkingDirectory',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.FileSystem.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.Path.FromString,
        )
    self.setWorkingDirectory = channel.unary_unary(
        '/xenon.FileSystemService/setWorkingDirectory',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.PathRequest.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.Empty.FromString,
        )
    self.setPosixFilePermissions = channel.unary_unary(
        '/xenon.FileSystemService/setPosixFilePermissions',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.SetPosixFilePermissionsRequest.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.Empty.FromString,
        )
    self.readSymbolicLink = channel.unary_unary(
        '/xenon.FileSystemService/readSymbolicLink',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.PathRequest.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.Path.FromString,
        )
    self.getPathSeparator = channel.unary_unary(
        '/xenon.FileSystemService/getPathSeparator',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.FileSystem.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.GetPathSeparatorResponse.FromString,
        )
    self.isOpen = channel.unary_unary(
        '/xenon.FileSystemService/isOpen',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.FileSystem.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.Is.FromString,
        )
    self.close = channel.unary_unary(
        '/xenon.FileSystemService/close',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.FileSystem.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.Empty.FromString,
        )
    self.waitUntilDone = channel.unary_unary(
        '/xenon.FileSystemService/waitUntilDone',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.WaitUntilDoneRequest.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.CopyStatus.FromString,
        )
    self.localFileSystems = channel.unary_unary(
        '/xenon.FileSystemService/localFileSystems',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.Empty.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.FileSystems.FromString,
        )
    self.listFileSystems = channel.unary_unary(
        '/xenon.FileSystemService/listFileSystems',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.Empty.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.FileSystems.FromString,
        )


class FileSystemServiceServicer(object):
  """XenonFiles represents the Xenon nl.esciencecenter.xenon.filesystems.FileSystem class.
  This interface contains various methods for creating and closing FileSystems, creating Paths and operations on these Paths.
  """

  def getAdaptorDescriptions(self, request, context):
    """Gives a list of the descriptions of the available adaptors.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getAdaptorNames(self, request, context):
    """Gives a list names of the available adaptors.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getAdaptorDescription(self, request, context):
    """Gives the description of the adaptor with the given name.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def create(self, request, context):
    """Create a new FileSystem using the adaptor that connects to a data store at location using the credentials to get access.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getAdaptorName(self, request, context):
    """Get the name of the adaptor that created this FileSystem.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getLocation(self, request, context):
    """Get the location that this FileSystem is connected to.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getCredential(self, request, context):
    """Get the credential used to create this FileSystem.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getProperties(self, request, context):
    """Get the properties used to create this FileSystem.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def createDirectories(self, request, context):
    """Creates a new directory, including parent directories, failing if the directory already exists.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def createDirectory(self, request, context):
    """Creates a new directory, failing if the directory already exists.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def createFile(self, request, context):
    """Creates a new empty file, failing if the file already exists.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def createSymbolicLink(self, request, context):
    """Creates a new symbolic link, failing if the link already exists
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def copy(self, request, context):
    """Asynchronously Copy an existing source path to a target path on a different file system.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def cancel(self, request, context):
    """Cancel a copy operation.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getStatus(self, request, context):
    """Retrieve the status of an copy.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def rename(self, request, context):
    """Rename an existing source path to a non-existing target path
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def delete(self, request, context):
    """Deletes an existing path.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def exists(self, request, context):
    """Tests if a path exists.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def readFromFile(self, request, context):
    """Open an existing file and return an InputStream to read from this file.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def writeToFile(self, request_iterator, context):
    """Open a file and return an OutputStream to write to this file.
    In Xenon library if request is missing size field then FileSystem.writeToFile(Path file) is used
    else FileSystem.writeToFile(Path path, long size) is used
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def appendToFile(self, request_iterator, context):
    """Open an existing file and return an OutputStream to append data to this file.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def list(self, request, context):
    """List all entries in the directory dir.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getAttributes(self, request, context):
    """Get the PathAttributes of an existing path.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getWorkingDirectory(self, request, context):
    """Get the current working directory of this file system.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def setWorkingDirectory(self, request, context):
    """Set the current working directory of this file system to directory.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def setPosixFilePermissions(self, request, context):
    """Sets the POSIX permissions of a path
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def readSymbolicLink(self, request, context):
    """Reads the target of a symbolic link
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getPathSeparator(self, request, context):
    """Get the path separator used by this file system.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def isOpen(self, request, context):
    """Return if the connection to the FileSystem is open.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def close(self, request, context):
    """Close this filestem
    Any pending/running copy operations of this filestystem will be terminated
    Will also forget this filesystem
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def waitUntilDone(self, request, context):
    """Wait until a copy operation is done or until a timeout expires.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def localFileSystems(self, request, context):
    """Returns filesystems for all local drives
    Not part of FileSystem class in Xenon library
    In Xenon library available as LocalFileSystemUtils.getLocalFileSystems()
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def listFileSystems(self, request, context):
    """List the created filesystems
    Specific to grpc, not part of Xenon library
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_FileSystemServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'getAdaptorDescriptions': grpc.unary_unary_rpc_method_handler(
          servicer.getAdaptorDescriptions,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.Empty.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.FileSystemAdaptorDescriptions.SerializeToString,
      ),
      'getAdaptorNames': grpc.unary_unary_rpc_method_handler(
          servicer.getAdaptorNames,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.Empty.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.AdaptorNames.SerializeToString,
      ),
      'getAdaptorDescription': grpc.unary_unary_rpc_method_handler(
          servicer.getAdaptorDescription,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.AdaptorName.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.FileSystemAdaptorDescription.SerializeToString,
      ),
      'create': grpc.unary_unary_rpc_method_handler(
          servicer.create,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.CreateFileSystemRequest.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.FileSystem.SerializeToString,
      ),
      'getAdaptorName': grpc.unary_unary_rpc_method_handler(
          servicer.getAdaptorName,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.FileSystem.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.AdaptorName.SerializeToString,
      ),
      'getLocation': grpc.unary_unary_rpc_method_handler(
          servicer.getLocation,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.FileSystem.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.Location.SerializeToString,
      ),
      'getCredential': grpc.unary_unary_rpc_method_handler(
          servicer.getCredential,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.FileSystem.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.GetCredentialResponse.SerializeToString,
      ),
      'getProperties': grpc.unary_unary_rpc_method_handler(
          servicer.getProperties,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.FileSystem.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.Properties.SerializeToString,
      ),
      'createDirectories': grpc.unary_unary_rpc_method_handler(
          servicer.createDirectories,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.PathRequest.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.Empty.SerializeToString,
      ),
      'createDirectory': grpc.unary_unary_rpc_method_handler(
          servicer.createDirectory,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.PathRequest.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.Empty.SerializeToString,
      ),
      'createFile': grpc.unary_unary_rpc_method_handler(
          servicer.createFile,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.PathRequest.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.Empty.SerializeToString,
      ),
      'createSymbolicLink': grpc.unary_unary_rpc_method_handler(
          servicer.createSymbolicLink,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.CreateSymbolicLinkRequest.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.Empty.SerializeToString,
      ),
      'copy': grpc.unary_unary_rpc_method_handler(
          servicer.copy,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.CopyRequest.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.CopyOperation.SerializeToString,
      ),
      'cancel': grpc.unary_unary_rpc_method_handler(
          servicer.cancel,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.CopyOperationRequest.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.CopyStatus.SerializeToString,
      ),
      'getStatus': grpc.unary_unary_rpc_method_handler(
          servicer.getStatus,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.CopyOperationRequest.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.CopyStatus.SerializeToString,
      ),
      'rename': grpc.unary_unary_rpc_method_handler(
          servicer.rename,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.RenameRequest.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.Empty.SerializeToString,
      ),
      'delete': grpc.unary_unary_rpc_method_handler(
          servicer.delete,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.DeleteRequest.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.Empty.SerializeToString,
      ),
      'exists': grpc.unary_unary_rpc_method_handler(
          servicer.exists,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.PathRequest.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.Is.SerializeToString,
      ),
      'readFromFile': grpc.unary_stream_rpc_method_handler(
          servicer.readFromFile,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.PathRequest.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.ReadFromFileResponse.SerializeToString,
      ),
      'writeToFile': grpc.stream_unary_rpc_method_handler(
          servicer.writeToFile,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.WriteToFileRequest.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.Empty.SerializeToString,
      ),
      'appendToFile': grpc.stream_unary_rpc_method_handler(
          servicer.appendToFile,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.AppendToFileRequest.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.Empty.SerializeToString,
      ),
      'list': grpc.unary_stream_rpc_method_handler(
          servicer.list,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.ListRequest.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.PathAttributes.SerializeToString,
      ),
      'getAttributes': grpc.unary_unary_rpc_method_handler(
          servicer.getAttributes,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.PathRequest.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.PathAttributes.SerializeToString,
      ),
      'getWorkingDirectory': grpc.unary_unary_rpc_method_handler(
          servicer.getWorkingDirectory,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.FileSystem.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.Path.SerializeToString,
      ),
      'setWorkingDirectory': grpc.unary_unary_rpc_method_handler(
          servicer.setWorkingDirectory,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.PathRequest.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.Empty.SerializeToString,
      ),
      'setPosixFilePermissions': grpc.unary_unary_rpc_method_handler(
          servicer.setPosixFilePermissions,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.SetPosixFilePermissionsRequest.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.Empty.SerializeToString,
      ),
      'readSymbolicLink': grpc.unary_unary_rpc_method_handler(
          servicer.readSymbolicLink,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.PathRequest.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.Path.SerializeToString,
      ),
      'getPathSeparator': grpc.unary_unary_rpc_method_handler(
          servicer.getPathSeparator,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.FileSystem.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.GetPathSeparatorResponse.SerializeToString,
      ),
      'isOpen': grpc.unary_unary_rpc_method_handler(
          servicer.isOpen,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.FileSystem.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.Is.SerializeToString,
      ),
      'close': grpc.unary_unary_rpc_method_handler(
          servicer.close,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.FileSystem.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.Empty.SerializeToString,
      ),
      'waitUntilDone': grpc.unary_unary_rpc_method_handler(
          servicer.waitUntilDone,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.WaitUntilDoneRequest.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.CopyStatus.SerializeToString,
      ),
      'localFileSystems': grpc.unary_unary_rpc_method_handler(
          servicer.localFileSystems,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.Empty.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.FileSystems.SerializeToString,
      ),
      'listFileSystems': grpc.unary_unary_rpc_method_handler(
          servicer.listFileSystems,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.Empty.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.FileSystems.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'xenon.FileSystemService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class SchedulerServiceStub(object):
  """The Jobs API of Xenon. This interface creates various methods for creating and closing Schedulers, submitting jobs, and retrieving information about schedulers and jobs.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.getAdaptorDescriptions = channel.unary_unary(
        '/xenon.SchedulerService/getAdaptorDescriptions',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.Empty.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.SchedulerAdaptorDescriptions.FromString,
        )
    self.getAdaptorNames = channel.unary_unary(
        '/xenon.SchedulerService/getAdaptorNames',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.Empty.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.AdaptorNames.FromString,
        )
    self.getAdaptorDescription = channel.unary_unary(
        '/xenon.SchedulerService/getAdaptorDescription',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.AdaptorName.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.SchedulerAdaptorDescription.FromString,
        )
    self.create = channel.unary_unary(
        '/xenon.SchedulerService/create',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.CreateSchedulerRequest.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.Scheduler.FromString,
        )
    self.getAdaptorName = channel.unary_unary(
        '/xenon.SchedulerService/getAdaptorName',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.Scheduler.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.AdaptorName.FromString,
        )
    self.getLocation = channel.unary_unary(
        '/xenon.SchedulerService/getLocation',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.Scheduler.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.Location.FromString,
        )
    self.getCredential = channel.unary_unary(
        '/xenon.SchedulerService/getCredential',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.Scheduler.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.GetCredentialResponse.FromString,
        )
    self.getProperties = channel.unary_unary(
        '/xenon.SchedulerService/getProperties',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.Scheduler.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.Properties.FromString,
        )
    self.submitBatchJob = channel.unary_unary(
        '/xenon.SchedulerService/submitBatchJob',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.SubmitBatchJobRequest.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.Job.FromString,
        )
    self.submitInteractiveJob = channel.stream_stream(
        '/xenon.SchedulerService/submitInteractiveJob',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.SubmitInteractiveJobRequest.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.SubmitInteractiveJobResponse.FromString,
        )
    self.getQueueNames = channel.unary_unary(
        '/xenon.SchedulerService/getQueueNames',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.Scheduler.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.Queues.FromString,
        )
    self.getDefaultQueueName = channel.unary_unary(
        '/xenon.SchedulerService/getDefaultQueueName',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.Scheduler.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.Queue.FromString,
        )
    self.getJobs = channel.unary_unary(
        '/xenon.SchedulerService/getJobs',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.SchedulerAndQueues.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.Jobs.FromString,
        )
    self.getJobStatus = channel.unary_unary(
        '/xenon.SchedulerService/getJobStatus',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.JobRequest.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.JobStatus.FromString,
        )
    self.getJobStatuses = channel.unary_unary(
        '/xenon.SchedulerService/getJobStatuses',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.GetJobStatusesRequest.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.GetJobStatusesResponse.FromString,
        )
    self.getQueueStatus = channel.unary_unary(
        '/xenon.SchedulerService/getQueueStatus',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.GetQueueStatusRequest.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.QueueStatus.FromString,
        )
    self.getQueueStatuses = channel.unary_unary(
        '/xenon.SchedulerService/getQueueStatuses',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.SchedulerAndQueues.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.QueueStatuses.FromString,
        )
    self.waitUntilDone = channel.unary_unary(
        '/xenon.SchedulerService/waitUntilDone',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.WaitRequest.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.JobStatus.FromString,
        )
    self.waitUntilRunning = channel.unary_unary(
        '/xenon.SchedulerService/waitUntilRunning',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.WaitRequest.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.JobStatus.FromString,
        )
    self.isOpen = channel.unary_unary(
        '/xenon.SchedulerService/isOpen',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.Scheduler.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.Is.FromString,
        )
    self.cancelJob = channel.unary_unary(
        '/xenon.SchedulerService/cancelJob',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.JobRequest.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.JobStatus.FromString,
        )
    self.getDefaultRuntime = channel.unary_unary(
        '/xenon.SchedulerService/getDefaultRuntime',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.Scheduler.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.GetDefaultRuntimeResponse.FromString,
        )
    self.getFileSystem = channel.unary_unary(
        '/xenon.SchedulerService/getFileSystem',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.Scheduler.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.FileSystem.FromString,
        )
    self.close = channel.unary_unary(
        '/xenon.SchedulerService/close',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.Scheduler.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.Empty.FromString,
        )
    self.localScheduler = channel.unary_unary(
        '/xenon.SchedulerService/localScheduler',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.Empty.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.Scheduler.FromString,
        )
    self.listSchedulers = channel.unary_unary(
        '/xenon.SchedulerService/listSchedulers',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.Empty.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.Schedulers.FromString,
        )


class SchedulerServiceServicer(object):
  """The Jobs API of Xenon. This interface creates various methods for creating and closing Schedulers, submitting jobs, and retrieving information about schedulers and jobs.
  """

  def getAdaptorDescriptions(self, request, context):
    """Gives a list of the descriptions of the available adaptors.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getAdaptorNames(self, request, context):
    """Gives a list names of the available adaptors.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getAdaptorDescription(self, request, context):
    """Gives the description of the adaptor with the given name.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def create(self, request, context):
    """Create a new Scheduler using the adaptor connecting to the location using credentials to get access.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getAdaptorName(self, request, context):
    """Get the name of the adaptor that created this Scheduler.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getLocation(self, request, context):
    """Get the location that this Scheduler is connected to.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getCredential(self, request, context):
    """Get the credential used to create this Scheduler.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getProperties(self, request, context):
    """Get the properties used to create this Scheduler.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def submitBatchJob(self, request, context):
    """Submit a batch job.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def submitInteractiveJob(self, request_iterator, context):
    """Submit an interactive job
    The first response message in the response stream will contain the job identifier and empty stdout and stdout.
    Other response messages will also contain the job identifier and filled stdout and/or stderr.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getQueueNames(self, request, context):
    """Get the queue names supported by this Scheduler.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getDefaultQueueName(self, request, context):
    """Get the name of the default queue.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getJobs(self, request, context):
    """Get all job identifier of jobs currently in (one ore more) queues.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getJobStatus(self, request, context):
    """Get the status of a Job.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getJobStatuses(self, request, context):
    """Get the status of all specified jobs.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getQueueStatus(self, request, context):
    """Get the status of the queue.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getQueueStatuses(self, request, context):
    """Get the status of all queues.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def waitUntilDone(self, request, context):
    """Wait until a job is done or until a timeout expires.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def waitUntilRunning(self, request, context):
    """Wait until a job starts running, or until a timeout expires.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def isOpen(self, request, context):
    """Test if the connection of this Scheduler is open.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def cancelJob(self, request, context):
    """Cancel a job
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getDefaultRuntime(self, request, context):
    """Get the default runtime of a job in minutes.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getFileSystem(self, request, context):
    """Retrieve the FileSystem used internally by this Scheduler.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def close(self, request, context):
    """Close this Scheduler.
    If scheduler is embedded then any pending/running jobs will be killed
    Will also forget this scheduler
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def localScheduler(self, request, context):
    """Get scheduler on local filesystem with default location, credential and no properties
    Not part of Scheduler class in Xenon library
    In Xenon library available as Scheduler.create("local")
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def listSchedulers(self, request, context):
    """List the created schedulers
    Specific to grpc, not part of Xenon library
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_SchedulerServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'getAdaptorDescriptions': grpc.unary_unary_rpc_method_handler(
          servicer.getAdaptorDescriptions,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.Empty.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.SchedulerAdaptorDescriptions.SerializeToString,
      ),
      'getAdaptorNames': grpc.unary_unary_rpc_method_handler(
          servicer.getAdaptorNames,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.Empty.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.AdaptorNames.SerializeToString,
      ),
      'getAdaptorDescription': grpc.unary_unary_rpc_method_handler(
          servicer.getAdaptorDescription,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.AdaptorName.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.SchedulerAdaptorDescription.SerializeToString,
      ),
      'create': grpc.unary_unary_rpc_method_handler(
          servicer.create,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.CreateSchedulerRequest.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.Scheduler.SerializeToString,
      ),
      'getAdaptorName': grpc.unary_unary_rpc_method_handler(
          servicer.getAdaptorName,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.Scheduler.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.AdaptorName.SerializeToString,
      ),
      'getLocation': grpc.unary_unary_rpc_method_handler(
          servicer.getLocation,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.Scheduler.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.Location.SerializeToString,
      ),
      'getCredential': grpc.unary_unary_rpc_method_handler(
          servicer.getCredential,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.Scheduler.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.GetCredentialResponse.SerializeToString,
      ),
      'getProperties': grpc.unary_unary_rpc_method_handler(
          servicer.getProperties,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.Scheduler.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.Properties.SerializeToString,
      ),
      'submitBatchJob': grpc.unary_unary_rpc_method_handler(
          servicer.submitBatchJob,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.SubmitBatchJobRequest.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.Job.SerializeToString,
      ),
      'submitInteractiveJob': grpc.stream_stream_rpc_method_handler(
          servicer.submitInteractiveJob,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.SubmitInteractiveJobRequest.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.SubmitInteractiveJobResponse.SerializeToString,
      ),
      'getQueueNames': grpc.unary_unary_rpc_method_handler(
          servicer.getQueueNames,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.Scheduler.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.Queues.SerializeToString,
      ),
      'getDefaultQueueName': grpc.unary_unary_rpc_method_handler(
          servicer.getDefaultQueueName,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.Scheduler.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.Queue.SerializeToString,
      ),
      'getJobs': grpc.unary_unary_rpc_method_handler(
          servicer.getJobs,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.SchedulerAndQueues.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.Jobs.SerializeToString,
      ),
      'getJobStatus': grpc.unary_unary_rpc_method_handler(
          servicer.getJobStatus,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.JobRequest.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.JobStatus.SerializeToString,
      ),
      'getJobStatuses': grpc.unary_unary_rpc_method_handler(
          servicer.getJobStatuses,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.GetJobStatusesRequest.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.GetJobStatusesResponse.SerializeToString,
      ),
      'getQueueStatus': grpc.unary_unary_rpc_method_handler(
          servicer.getQueueStatus,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.GetQueueStatusRequest.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.QueueStatus.SerializeToString,
      ),
      'getQueueStatuses': grpc.unary_unary_rpc_method_handler(
          servicer.getQueueStatuses,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.SchedulerAndQueues.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.QueueStatuses.SerializeToString,
      ),
      'waitUntilDone': grpc.unary_unary_rpc_method_handler(
          servicer.waitUntilDone,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.WaitRequest.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.JobStatus.SerializeToString,
      ),
      'waitUntilRunning': grpc.unary_unary_rpc_method_handler(
          servicer.waitUntilRunning,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.WaitRequest.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.JobStatus.SerializeToString,
      ),
      'isOpen': grpc.unary_unary_rpc_method_handler(
          servicer.isOpen,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.Scheduler.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.Is.SerializeToString,
      ),
      'cancelJob': grpc.unary_unary_rpc_method_handler(
          servicer.cancelJob,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.JobRequest.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.JobStatus.SerializeToString,
      ),
      'getDefaultRuntime': grpc.unary_unary_rpc_method_handler(
          servicer.getDefaultRuntime,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.Scheduler.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.GetDefaultRuntimeResponse.SerializeToString,
      ),
      'getFileSystem': grpc.unary_unary_rpc_method_handler(
          servicer.getFileSystem,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.Scheduler.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.FileSystem.SerializeToString,
      ),
      'close': grpc.unary_unary_rpc_method_handler(
          servicer.close,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.Scheduler.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.Empty.SerializeToString,
      ),
      'localScheduler': grpc.unary_unary_rpc_method_handler(
          servicer.localScheduler,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.Empty.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.Scheduler.SerializeToString,
      ),
      'listSchedulers': grpc.unary_unary_rpc_method_handler(
          servicer.listSchedulers,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.Empty.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.Schedulers.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'xenon.SchedulerService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
