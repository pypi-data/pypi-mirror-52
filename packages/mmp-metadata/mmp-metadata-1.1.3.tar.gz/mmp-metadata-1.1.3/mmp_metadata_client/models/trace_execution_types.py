# coding: utf-8

"""
    MMP Metadata

    This is a API for MMP Metadata  # noqa: E501

    The version of the OpenAPI document: 1.0.0-oas3
    Contact: st116848@stud.uni-stuttgart.de.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class TraceExecutionTypes(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'execution_id': 'str',
        'name': 'str',
        'order': 'float',
        'artifacts': 'list[TraceArtifacts]'
    }

    attribute_map = {
        'execution_id': 'executionId',
        'name': 'name',
        'order': 'order',
        'artifacts': 'artifacts'
    }

    def __init__(self, execution_id=None, name=None, order=None, artifacts=None):  # noqa: E501
        """TraceExecutionTypes - a model defined in OpenAPI"""  # noqa: E501

        self._execution_id = None
        self._name = None
        self._order = None
        self._artifacts = None
        self.discriminator = None

        if execution_id is not None:
            self.execution_id = execution_id
        if name is not None:
            self.name = name
        if order is not None:
            self.order = order
        if artifacts is not None:
            self.artifacts = artifacts

    @property
    def execution_id(self):
        """Gets the execution_id of this TraceExecutionTypes.  # noqa: E501


        :return: The execution_id of this TraceExecutionTypes.  # noqa: E501
        :rtype: str
        """
        return self._execution_id

    @execution_id.setter
    def execution_id(self, execution_id):
        """Sets the execution_id of this TraceExecutionTypes.


        :param execution_id: The execution_id of this TraceExecutionTypes.  # noqa: E501
        :type: str
        """

        self._execution_id = execution_id

    @property
    def name(self):
        """Gets the name of this TraceExecutionTypes.  # noqa: E501


        :return: The name of this TraceExecutionTypes.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TraceExecutionTypes.


        :param name: The name of this TraceExecutionTypes.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def order(self):
        """Gets the order of this TraceExecutionTypes.  # noqa: E501


        :return: The order of this TraceExecutionTypes.  # noqa: E501
        :rtype: float
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this TraceExecutionTypes.


        :param order: The order of this TraceExecutionTypes.  # noqa: E501
        :type: float
        """

        self._order = order

    @property
    def artifacts(self):
        """Gets the artifacts of this TraceExecutionTypes.  # noqa: E501


        :return: The artifacts of this TraceExecutionTypes.  # noqa: E501
        :rtype: list[TraceArtifacts]
        """
        return self._artifacts

    @artifacts.setter
    def artifacts(self, artifacts):
        """Sets the artifacts of this TraceExecutionTypes.


        :param artifacts: The artifacts of this TraceExecutionTypes.  # noqa: E501
        :type: list[TraceArtifacts]
        """

        self._artifacts = artifacts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TraceExecutionTypes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
